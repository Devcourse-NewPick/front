{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/lib/virtual-types.ts"],"sourcesContent":["import type * as t from \"@babel/types\";\n\nexport interface VirtualTypeAliases {\n  BindingIdentifier: t.Identifier;\n  BlockScoped: t.Node;\n  ExistentialTypeParam: t.ExistsTypeAnnotation;\n  Expression: t.Expression;\n  Flow: t.Flow | t.ImportDeclaration | t.ExportDeclaration | t.ImportSpecifier;\n  ForAwaitStatement: t.ForOfStatement;\n  Generated: t.Node;\n  NumericLiteralTypeAnnotation: t.NumberLiteralTypeAnnotation;\n  Pure: t.Node;\n  Referenced: t.Node;\n  ReferencedIdentifier: t.Identifier | t.JSXIdentifier;\n  ReferencedMemberExpression: t.MemberExpression;\n  RestProperty: t.RestElement;\n  Scope: t.Scopable | t.Pattern;\n  SpreadProperty: t.RestElement;\n  Statement: t.Statement;\n  User: t.Node;\n  Var: t.VariableDeclaration;\n}\n\ntype VirtualTypeMapping = readonly (t.Node[\"type\"] | keyof t.Aliases)[] | null;\n\nexport const ReferencedIdentifier: VirtualTypeMapping = [\n  \"Identifier\",\n  \"JSXIdentifier\",\n] as const;\n\nexport const ReferencedMemberExpression: VirtualTypeMapping = [\n  \"MemberExpression\",\n] as const;\n\nexport const BindingIdentifier: VirtualTypeMapping = [\"Identifier\"] as const;\n\nexport const Statement: VirtualTypeMapping = [\"Statement\"] as const;\n\nexport const Expression: VirtualTypeMapping = [\"Expression\"] as const;\n\nexport const Scope: VirtualTypeMapping = [\"Scopable\", \"Pattern\"] as const;\n\nexport const Referenced: VirtualTypeMapping = null;\n\nexport const BlockScoped: VirtualTypeMapping = null;\n\nexport const Var: VirtualTypeMapping = [\"VariableDeclaration\"];\n\nexport const User: VirtualTypeMapping = null;\n\nexport const Generated: VirtualTypeMapping = null;\n\nexport const Pure: VirtualTypeMapping = null;\n\nexport const Flow: VirtualTypeMapping = [\n  \"Flow\",\n  \"ImportDeclaration\",\n  \"ExportDeclaration\",\n  \"ImportSpecifier\",\n] as const;\n\n// TODO: 7.0 Backwards Compat\nexport const RestProperty: VirtualTypeMapping = [\"RestElement\"] as const;\n\nexport const SpreadProperty: VirtualTypeMapping = [\"RestElement\"] as const;\n\nexport const ExistentialTypeParam: VirtualTypeMapping = [\n  \"ExistsTypeAnnotation\",\n] as const;\n\nexport const NumericLiteralTypeAnnotation: VirtualTypeMapping = [\n  \"NumberLiteralTypeAnnotation\",\n] as const;\n\nexport const ForAwaitStatement: VirtualTypeMapping = [\n  \"ForOfStatement\",\n] as const;\n"],"names":["ReferencedIdentifier","exports","ReferencedMemberExpression","BindingIdentifier","Statement","Expression","Scope","Referenced","BlockScoped","Var","User","Generated","Pure","Flow","RestProperty","SpreadProperty","ExistentialTypeParam","NumericLiteralTypeAnnotation","ForAwaitStatement"],"mappings":";;;;;AAyBO,MAAMA,oBAAwC,GAAAC,OAAA,CAAAD,oBAAA,GAAG;IACtD,YAAY;IACZ,eAAe;CACP;AAEH,MAAME,0BAA8C,GAAAD,OAAA,CAAAC,0BAAA,GAAG;IAC5D,kBAAkB;CACV;AAEH,MAAMC,iBAAqC,GAAAF,OAAA,CAAAE,iBAAA,GAAG;IAAC,YAAY;CAAU;AAErE,MAAMC,SAA6B,GAAAH,OAAA,CAAAG,SAAA,GAAG;IAAC,WAAW;CAAU;AAE5D,MAAMC,UAA8B,GAAAJ,OAAA,CAAAI,UAAA,GAAG;IAAC,YAAY;CAAU;AAE9D,MAAMC,KAAyB,GAAAL,OAAA,CAAAK,KAAA,GAAG;IAAC,UAAU;IAAE,SAAS;CAAU;AAElE,MAAMC,UAA8B,GAAAN,OAAA,CAAAM,UAAA,GAAG,IAAI;AAE3C,MAAMC,WAA+B,GAAAP,OAAA,CAAAO,WAAA,GAAG,IAAI;AAE5C,MAAMC,GAAuB,GAAAR,OAAA,CAAAQ,GAAA,GAAG;IAAC,qBAAqB;CAAC;AAEvD,MAAMC,IAAwB,GAAAT,OAAA,CAAAS,IAAA,GAAG,IAAI;AAErC,MAAMC,SAA6B,GAAAV,OAAA,CAAAU,SAAA,GAAG,IAAI;AAE1C,MAAMC,IAAwB,GAAAX,OAAA,CAAAW,IAAA,GAAG,IAAI;AAErC,MAAMC,IAAwB,GAAAZ,OAAA,CAAAY,IAAA,GAAG;IACtC,MAAM;IACN,mBAAmB;IACnB,mBAAmB;IACnB,iBAAiB;CACT;AAGH,MAAMC,YAAgC,GAAAb,OAAA,CAAAa,YAAA,GAAG;IAAC,aAAa;CAAU;AAEjE,MAAMC,cAAkC,GAAAd,OAAA,CAAAc,cAAA,GAAG;IAAC,aAAa;CAAU;AAEnE,MAAMC,oBAAwC,GAAAf,OAAA,CAAAe,oBAAA,GAAG;IACtD,sBAAsB;CACd;AAEH,MAAMC,4BAAgD,GAAAhB,OAAA,CAAAgB,4BAAA,GAAG;IAC9D,6BAA6B;CACrB;AAEH,MAAMC,iBAAqC,GAAAjB,OAAA,CAAAiB,iBAAA,GAAG;IACnD,gBAAgB;CACR","ignoreList":[0]}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/lib/virtual-types-validator.ts"],"sourcesContent":["import type NodePath from \"../index.ts\";\nimport {\n  isBinding,\n  isBlockScoped as nodeIsBlockScoped,\n  isExportDeclaration,\n  isExpression as nodeIsExpression,\n  isFlow as nodeIsFlow,\n  isForStatement,\n  isForXStatement,\n  isIdentifier,\n  isImportDeclaration,\n  isImportSpecifier,\n  isJSXIdentifier,\n  isJSXMemberExpression,\n  isMemberExpression,\n  isRestElement as nodeIsRestElement,\n  isReferenced as nodeIsReferenced,\n  isScope as nodeIsScope,\n  isStatement as nodeIsStatement,\n  isVar as nodeIsVar,\n  isVariableDeclaration,\n  react,\n  isForOfStatement,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nconst { isCompatTag } = react;\nimport type { VirtualTypeAliases } from \"./virtual-types.ts\";\n\ntype Opts<Obj> = Partial<{\n  [Prop in keyof Obj]: Obj[Prop] extends t.Node\n    ? t.Node\n    : Obj[Prop] extends t.Node[]\n      ? t.Node[]\n      : Obj[Prop];\n}>;\n\nexport interface VirtualTypeNodePathValidators {\n  isBindingIdentifier(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"BindingIdentifier\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"BindingIdentifier\"]>;\n  isBlockScoped(opts?: Opts<VirtualTypeAliases[\"BlockScoped\"]>): boolean;\n  /**\n   * @deprecated\n   */\n  isExistentialTypeParam(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"ExistentialTypeParam\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"ExistentialTypeParam\"]>;\n  isExpression(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"Expression\"]>,\n  ): this is NodePath<t.Expression>;\n  isFlow(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"Flow\"]>,\n  ): this is NodePath<t.Flow>;\n  isForAwaitStatement(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"ForAwaitStatement\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"ForAwaitStatement\"]>;\n  isGenerated(opts?: VirtualTypeAliases[\"Generated\"]): boolean;\n  /**\n   * @deprecated\n   */\n  isNumericLiteralTypeAnnotation(\n    opts?: VirtualTypeAliases[\"NumericLiteralTypeAnnotation\"],\n  ): void;\n  isPure(opts?: VirtualTypeAliases[\"Pure\"]): boolean;\n  isReferenced(opts?: VirtualTypeAliases[\"Referenced\"]): boolean;\n  isReferencedIdentifier(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"ReferencedIdentifier\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"ReferencedIdentifier\"]>;\n  isReferencedMemberExpression(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"ReferencedMemberExpression\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"ReferencedMemberExpression\"]>;\n  isRestProperty(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"RestProperty\"]>,\n  ): this is NodePath<t.RestProperty>;\n  isScope(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"Scope\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"Scope\"]>;\n  isSpreadProperty(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"SpreadProperty\"]>,\n  ): this is NodePath<t.SpreadProperty>;\n  isStatement(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"Statement\"]>,\n  ): this is NodePath<t.Statement>;\n  isUser(opts?: VirtualTypeAliases[\"User\"]): boolean;\n  isVar(\n    this: NodePath,\n    opts?: Opts<VirtualTypeAliases[\"Var\"]>,\n  ): this is NodePath<VirtualTypeAliases[\"Var\"]>;\n}\n\nexport function isReferencedIdentifier(this: NodePath, opts?: any): boolean {\n  const { node, parent } = this;\n  if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {\n    if (isJSXIdentifier(node, opts)) {\n      if (isCompatTag(node.name)) return false;\n    } else {\n      // not a JSXIdentifier or an Identifier\n      return false;\n    }\n  }\n\n  // check if node is referenced\n  return nodeIsReferenced(node, parent, this.parentPath.parent);\n}\n\nexport function isReferencedMemberExpression(this: NodePath): boolean {\n  const { node, parent } = this;\n  return isMemberExpression(node) && nodeIsReferenced(node, parent);\n}\n\nexport function isBindingIdentifier(this: NodePath): boolean {\n  const { node, parent } = this;\n  const grandparent = this.parentPath.parent;\n  return isIdentifier(node) && isBinding(node, parent, grandparent);\n}\n\nexport function isStatement(this: NodePath): boolean {\n  const { node, parent } = this;\n  if (nodeIsStatement(node)) {\n    if (isVariableDeclaration(node)) {\n      if (isForXStatement(parent, { left: node })) return false;\n      if (isForStatement(parent, { init: node })) return false;\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function isExpression(this: NodePath): boolean {\n  if (this.isIdentifier()) {\n    return this.isReferencedIdentifier();\n  } else {\n    return nodeIsExpression(this.node);\n  }\n}\n\nexport function isScope(this: NodePath): boolean {\n  return nodeIsScope(this.node, this.parent);\n}\n\nexport function isReferenced(this: NodePath): boolean {\n  return nodeIsReferenced(this.node, this.parent);\n}\n\nexport function isBlockScoped(this: NodePath): boolean {\n  return nodeIsBlockScoped(this.node);\n}\n\nexport function isVar(this: NodePath): boolean {\n  return nodeIsVar(this.node);\n}\n\nexport function isUser(this: NodePath): boolean {\n  return this.node && !!this.node.loc;\n}\n\nexport function isGenerated(this: NodePath): boolean {\n  return !this.isUser();\n}\n\nexport function isPure(this: NodePath, constantsOnly?: boolean): boolean {\n  return this.scope.isPure(this.node, constantsOnly);\n}\n\nexport function isFlow(this: NodePath): boolean {\n  const { node } = this;\n  if (nodeIsFlow(node)) {\n    return true;\n  } else if (isImportDeclaration(node)) {\n    return node.importKind === \"type\" || node.importKind === \"typeof\";\n  } else if (isExportDeclaration(node)) {\n    return node.exportKind === \"type\";\n  } else if (isImportSpecifier(node)) {\n    return node.importKind === \"type\" || node.importKind === \"typeof\";\n  } else {\n    return false;\n  }\n}\n\n// TODO: 7.0 Backwards Compat\nexport function isRestProperty(this: NodePath): boolean {\n  return nodeIsRestElement(this.node) && this.parentPath?.isObjectPattern();\n}\n\nexport function isSpreadProperty(this: NodePath): boolean {\n  return nodeIsRestElement(this.node) && this.parentPath?.isObjectExpression();\n}\n\nexport function isForAwaitStatement(this: NodePath): boolean {\n  return isForOfStatement(this.node, { await: true });\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.isExistentialTypeParam = function isExistentialTypeParam(\n    this: NodePath,\n  ): void {\n    throw new Error(\n      \"`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.\",\n    );\n  };\n\n  // eslint-disable-next-line no-restricted-globals\n  exports.isNumericLiteralTypeAnnotation =\n    function isNumericLiteralTypeAnnotation(this: NodePath): void {\n      throw new Error(\n        \"`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.\",\n      );\n    };\n}\n"],"names":["_t","require","isBinding","isBlockScoped","nodeIsBlockScoped","isExportDeclaration","isExpression","nodeIsExpression","isFlow","nodeIsFlow","isForStatement","isForXStatement","isIdentifier","isImportDeclaration","isImportSpecifier","isJSXIdentifier","isJSXMemberExpression","isMemberExpression","isRestElement","nodeIsRestElement","isReferenced","nodeIsReferenced","isScope","nodeIsScope","isStatement","nodeIsStatement","isVar","nodeIsVar","isVariableDeclaration","react","isForOfStatement","isCompatTag","isReferencedIdentifier","opts","node","parent","name","parentPath","isReferencedMemberExpression","isBindingIdentifier","grandparent","left","init","isUser","loc","isGenerated","isPure","constantsOnly","scope","importKind","exportKind","isRestProperty","_this$parentPath","isObjectPattern","isSpreadProperty","_this$parentPath2","isObjectExpression","isForAwaitStatement","await","exports","isExistentialTypeParam","Error","isNumericLiteralTypeAnnotation"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/visitors.ts"],"sourcesContent":["import * as virtualTypes from \"./path/lib/virtual-types.ts\";\nimport * as virtualTypesValidators from \"./path/lib/virtual-types-validator.ts\";\nimport type { Node } from \"@babel/types\";\nimport {\n  DEPRECATED_KEYS,\n  DEPRECATED_ALIASES,\n  FLIPPED_ALIAS_KEYS,\n  TYPES,\n  __internal__deprecationWarning as deprecationWarning,\n} from \"@babel/types\";\nimport type { ExplodedVisitor, NodePath, Visitor } from \"./index.ts\";\nimport type { ExplVisitNode, VisitNodeFunction, VisitPhase } from \"./types.ts\";\nimport { requeueComputedKeyAndDecorators } from \"./path/context.ts\";\n\ntype VIRTUAL_TYPES = keyof typeof virtualTypes;\nfunction isVirtualType(type: string): type is VIRTUAL_TYPES {\n  return type in virtualTypes;\n}\nexport type VisitWrapper<S = any> = (\n  stateName: string | undefined,\n  visitorType: VisitPhase,\n  callback: VisitNodeFunction<S, Node>,\n) => VisitNodeFunction<S, Node>;\n\nexport function isExplodedVisitor(\n  visitor: Visitor,\n): visitor is ExplodedVisitor {\n  // @ts-expect-error _exploded is not defined on non-exploded Visitor\n  return visitor?._exploded;\n}\n\n// We need to name this function `explode$1` because otherwise rollup-plugin-dts\n// will generate a `namespace traverse { var explode: typeof explode; }` when\n// bundling @babel/traverse's index.d.ts.\n// TODO: Just call it `explode` once https://github.com/Swatinem/rollup-plugin-dts/issues/307\n// is fixed.\nexport { explode$1 as explode };\n/**\n * explode() will take a visitor object with all of the various shorthands\n * that we support, and validates & normalizes it into a common format, ready\n * to be used in traversal\n *\n * The various shorthands are:\n * * `Identifier() { ... }` -> `Identifier: { enter() { ... } }`\n * * `\"Identifier|NumericLiteral\": { ... }` -> `Identifier: { ... }, NumericLiteral: { ... }`\n * * Aliases in `@babel/types`: e.g. `Property: { ... }` -> `ObjectProperty: { ... }, ClassProperty: { ... }`\n * Other normalizations are:\n * * Visitors of virtual types are wrapped, so that they are only visited when\n *   their dynamic check passes\n * * `enter` and `exit` functions are wrapped in arrays, to ease merging of\n *   visitors\n */\nfunction explode$1<S>(visitor: Visitor<S>): ExplodedVisitor<S> {\n  if (isExplodedVisitor(visitor)) return visitor;\n  // @ts-expect-error `visitor` will be cast to ExplodedVisitor by this function\n  visitor._exploded = true;\n\n  // normalise pipes\n  for (const nodeType of Object.keys(visitor) as (keyof Visitor)[]) {\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    const parts: Array<string> = nodeType.split(\"|\");\n    if (parts.length === 1) continue;\n\n    const fns = visitor[nodeType];\n    delete visitor[nodeType];\n\n    for (const part of parts) {\n      // @ts-expect-error part will be verified by `verify` later\n      visitor[part] = fns;\n    }\n  }\n\n  // verify data structure\n  verify$1(visitor);\n\n  // make sure there's no __esModule type since this is because we're using loose mode\n  // and it sets __esModule to be enumerable on all modules :(\n  // @ts-expect-error ESModule interop\n  delete visitor.__esModule;\n\n  // ensure visitors are objects\n  ensureEntranceObjects(visitor);\n\n  // ensure enter/exit callbacks are arrays\n  ensureCallbackArrays(visitor);\n\n  // add type wrappers\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    if (!isVirtualType(nodeType)) continue;\n\n    // wrap all the functions\n    const fns = visitor[nodeType];\n    for (const type of Object.keys(fns)) {\n      // @ts-expect-error normalised as VisitNodeObject\n      fns[type] = wrapCheck(nodeType, fns[type]);\n    }\n\n    // clear it from the visitor\n    delete visitor[nodeType];\n\n    const types = virtualTypes[nodeType];\n    if (types !== null) {\n      for (const type of types) {\n        // merge the visitor if necessary or just put it back in\n        if (visitor[type]) {\n          mergePair(visitor[type], fns);\n        } else {\n          // @ts-expect-error Expression produces too complex union\n          visitor[type] = fns;\n        }\n      }\n    } else {\n      mergePair(visitor, fns);\n    }\n  }\n\n  // add aliases\n  for (const nodeType of Object.keys(visitor) as (keyof Visitor)[]) {\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    let aliases = FLIPPED_ALIAS_KEYS[nodeType];\n\n    if (nodeType in DEPRECATED_KEYS) {\n      const deprecatedKey = DEPRECATED_KEYS[nodeType];\n      deprecationWarning(nodeType, deprecatedKey, \"Visitor \");\n      aliases = [deprecatedKey];\n    } else if (nodeType in DEPRECATED_ALIASES) {\n      const deprecatedAlias =\n        DEPRECATED_ALIASES[nodeType as keyof typeof DEPRECATED_ALIASES];\n      deprecationWarning(nodeType, deprecatedAlias, \"Visitor \");\n      aliases = FLIPPED_ALIAS_KEYS[deprecatedAlias];\n    }\n\n    if (!aliases) continue;\n\n    const fns = visitor[nodeType];\n    // clear it from the visitor\n    delete visitor[nodeType];\n\n    for (const alias of aliases) {\n      const existing = visitor[alias];\n      if (existing) {\n        mergePair(existing, fns);\n      } else {\n        visitor[alias] = { ...fns };\n      }\n    }\n  }\n\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    ensureCallbackArrays(\n      // @ts-expect-error nodeType must present in visitor after previous validations\n      visitor[nodeType],\n    );\n  }\n\n  // @ts-expect-error explosion has been performed\n  return visitor as ExplodedVisitor;\n}\n\n// We need to name this function `verify$1` because otherwise rollup-plugin-dts\n// will generate a `namespace traverse { var verify: typeof verify; }` when\n// bundling @babel/traverse's index.d.ts.\n// TODO: Just call it `verify` once https://github.com/Swatinem/rollup-plugin-dts/issues/307\n// is fixed.\nexport { verify$1 as verify };\nfunction verify$1(visitor: Visitor) {\n  // @ts-expect-error _verified is not defined on non-verified Visitor.\n  // TODO: unify _verified and _exploded.\n  if (visitor._verified) return;\n\n  if (typeof visitor === \"function\") {\n    throw new Error(\n      \"You passed `traverse()` a function when it expected a visitor object, \" +\n        \"are you sure you didn't mean `{ enter: Function }`?\",\n    );\n  }\n\n  for (const nodeType of Object.keys(visitor) as (keyof Visitor)[]) {\n    if (nodeType === \"enter\" || nodeType === \"exit\") {\n      validateVisitorMethods(nodeType, visitor[nodeType]);\n    }\n\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    if (!TYPES.includes(nodeType)) {\n      throw new Error(\n        `You gave us a visitor for the node type ${nodeType} but it's not a valid type in @babel/traverse ${PACKAGE_JSON.version}`,\n      );\n    }\n\n    const visitors = visitor[nodeType];\n    if (typeof visitors === \"object\") {\n      for (const visitorKey of Object.keys(visitors)) {\n        if (visitorKey === \"enter\" || visitorKey === \"exit\") {\n          // verify that it just contains functions\n          validateVisitorMethods(\n            `${nodeType}.${visitorKey}`,\n            visitors[visitorKey],\n          );\n        } else {\n          throw new Error(\n            \"You passed `traverse()` a visitor object with the property \" +\n              `${nodeType} that has the invalid property ${visitorKey}`,\n          );\n        }\n      }\n    }\n  }\n\n  // @ts-expect-error _verified is not defined on non-verified Visitor.\n  // TODO: unify _verified and _exploded.\n  visitor._verified = true;\n}\n\nfunction validateVisitorMethods(\n  path: string,\n  val: any,\n): asserts val is Function | Function[] {\n  const fns = [].concat(val);\n  for (const fn of fns) {\n    if (typeof fn !== \"function\") {\n      throw new TypeError(\n        `Non-function found defined in ${path} with type ${typeof fn}`,\n      );\n    }\n  }\n}\n\nexport function merge<State>(\n  visitors: Visitor<State>[],\n): ExplodedVisitor<State>;\nexport function merge(\n  visitors: Visitor<unknown>[],\n  states?: any[],\n  wrapper?: Function | null,\n): ExplodedVisitor<unknown>;\nexport function merge(\n  visitors: any[],\n  states: any[] = [],\n  wrapper?: VisitWrapper | null,\n): ExplodedVisitor {\n  const mergedVisitor: ExplodedVisitor = { _verified: true, _exploded: true };\n  if (!process.env.BABEL_8_BREAKING) {\n    // For compatibility with old Babel versions, we must hide _verified and _exploded.\n    // Otherwise, old versions of the validator will throw sayng that `true` is not\n    // a function, because it tries to validate it as a visitor.\n    Object.defineProperty(mergedVisitor, \"_exploded\", { enumerable: false });\n    Object.defineProperty(mergedVisitor, \"_verified\", { enumerable: false });\n  }\n\n  for (let i = 0; i < visitors.length; i++) {\n    const visitor = explode$1(visitors[i]);\n    const state = states[i];\n\n    let topVisitor: ExplVisitNode<unknown, Node> = visitor;\n    if (state || wrapper) {\n      topVisitor = wrapWithStateOrWrapper(topVisitor, state, wrapper);\n    }\n    mergePair(mergedVisitor, topVisitor);\n\n    for (const key of Object.keys(visitor) as (keyof ExplodedVisitor)[]) {\n      if (shouldIgnoreKey(key)) continue;\n\n      let typeVisitor = visitor[key];\n\n      // if we have state or wrapper then overload the callbacks to take it\n      if (state || wrapper) {\n        typeVisitor = wrapWithStateOrWrapper(typeVisitor, state, wrapper);\n      }\n\n      const nodeVisitor = (mergedVisitor[key] ||= {});\n      mergePair(nodeVisitor, typeVisitor);\n    }\n  }\n\n  return mergedVisitor;\n}\n\nfunction wrapWithStateOrWrapper<State>(\n  oldVisitor: ExplVisitNode<State, Node>,\n  state: State | null,\n  wrapper?: VisitWrapper<State> | null,\n): ExplVisitNode<State, Node> {\n  const newVisitor: ExplVisitNode<State, Node> = {};\n\n  for (const phase of [\"enter\", \"exit\"] as VisitPhase[]) {\n    let fns = oldVisitor[phase];\n\n    // not an enter/exit array of callbacks\n    if (!Array.isArray(fns)) continue;\n\n    fns = fns.map(function (fn) {\n      let newFn = fn;\n\n      if (state) {\n        newFn = function (path: NodePath) {\n          fn.call(state, path, state);\n        };\n      }\n\n      if (wrapper) {\n        // @ts-expect-error Fixme: actually PluginPass.key (aka pluginAlias)?\n        newFn = wrapper(state?.key, phase, newFn);\n      }\n\n      // Override toString in case this function is printed, we want to print the wrapped function, same as we do in `wrapCheck`\n      if (newFn !== fn) {\n        newFn.toString = () => fn.toString();\n      }\n\n      return newFn;\n    });\n\n    newVisitor[phase] = fns;\n  }\n\n  return newVisitor;\n}\n\nfunction ensureEntranceObjects(obj: Visitor) {\n  for (const key of Object.keys(obj) as (keyof Visitor)[]) {\n    if (shouldIgnoreKey(key)) continue;\n\n    const fns = obj[key];\n    if (typeof fns === \"function\") {\n      // @ts-expect-error: Expression produces a union type that is too complex to represent.\n      obj[key] = { enter: fns };\n    }\n  }\n}\n\nfunction ensureCallbackArrays(obj: Visitor) {\n  if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];\n  if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];\n}\n\nfunction wrapCheck(nodeType: VIRTUAL_TYPES, fn: Function) {\n  const fnKey = `is${nodeType}`;\n  // @ts-expect-error we know virtualTypesValidators will contain `fnKey`, but TS doesn't\n  const validator = virtualTypesValidators[fnKey];\n  const newFn = function (this: unknown, path: NodePath) {\n    if (validator.call(path)) {\n      return fn.apply(this, arguments);\n    }\n  };\n  newFn.toString = () => fn.toString();\n  return newFn;\n}\n\nfunction shouldIgnoreKey(key: string): key is\n  | `_${string}` // ` // Comment to fix syntax highlighting in vscode\n  | \"enter\"\n  | \"exit\"\n  | \"shouldSkip\"\n  | \"denylist\"\n  | \"noScope\"\n  | \"skipKeys\"\n  | \"blacklist\" {\n  // internal/hidden key\n  if (key[0] === \"_\") return true;\n\n  // ignore function keys\n  if (key === \"enter\" || key === \"exit\" || key === \"shouldSkip\") return true;\n\n  // ignore other options\n  if (key === \"denylist\" || key === \"noScope\" || key === \"skipKeys\") {\n    return true;\n  }\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (key === \"blacklist\") {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/*\nfunction mergePair(\n  dest: ExplVisitNode<unknown, Node>,\n  src: ExplVisitNode<unknown, Node>,\n);\n*/\nfunction mergePair(dest: any, src: any) {\n  for (const phase of [\"enter\", \"exit\"] as VisitPhase[]) {\n    if (!src[phase]) continue;\n    dest[phase] = [].concat(dest[phase] || [], src[phase]);\n  }\n}\n\n// environmentVisitor should be used when traversing the whole class and not for specific class elements/methods.\n// For perf reasons, the environmentVisitor might be traversed with `{ noScope: true }`, which means `path.scope` is undefined.\n// Avoid using `path.scope` here\nconst _environmentVisitor: Visitor = {\n  FunctionParent(path) {\n    // arrows are not skipped because they inherit the context.\n    if (path.isArrowFunctionExpression()) return;\n\n    path.skip();\n    if (path.isMethod()) {\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        !path.requeueComputedKeyAndDecorators\n      ) {\n        // See https://github.com/babel/babel/issues/16694\n        requeueComputedKeyAndDecorators.call(path);\n      } else {\n        path.requeueComputedKeyAndDecorators();\n      }\n    }\n  },\n  Property(path) {\n    if (path.isObjectProperty()) return;\n    path.skip();\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      !path.requeueComputedKeyAndDecorators\n    ) {\n      // See https://github.com/babel/babel/issues/16694\n      requeueComputedKeyAndDecorators.call(path);\n    } else {\n      path.requeueComputedKeyAndDecorators();\n    }\n  },\n};\n\nexport function environmentVisitor<S>(visitor: Visitor<S>): Visitor<S> {\n  return merge([_environmentVisitor, visitor]);\n}\n"],"names":["virtualTypes","require","virtualTypesValidators","_t","_context","DEPRECATED_KEYS","DEPRECATED_ALIASES","FLIPPED_ALIAS_KEYS","TYPES","__internal__deprecationWarning","deprecationWarning","isVirtualType","type","isExplodedVisitor","visitor","_exploded","explode$1","nodeType","Object","keys","shouldIgnoreKey","parts","split","length","fns","part","verify$1","__esModule","ensureEntranceObjects","ensureCallbackArrays","wrapCheck","types","mergePair","aliases","deprecatedKey","deprecatedAlias","alias","existing","assign","_verified","Error","validateVisitorMethods","includes","visitors","visitorKey","path","val","concat","fn","TypeError","merge","states","wrapper","mergedVisitor","defineProperty","enumerable","i","state","topVisitor","wrapWithStateOrWrapper","key","typeVisitor","nodeVisitor","oldVisitor","newVisitor","phase","Array","isArray","map","newFn","call","toString","obj","enter","exit","fnKey","validator","apply","arguments","dest","src","_environmentVisitor","FunctionParent","isArrowFunctionExpression","skip","isMethod","requeueComputedKeyAndDecorators","Property","isObjectProperty","environmentVisitor"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 456, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 461, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/scope/lib/renamer.ts"],"sourcesContent":["import type Binding from \"../binding.ts\";\nimport * as t from \"@babel/types\";\nimport type { NodePath, Visitor } from \"../../index.ts\";\nimport { traverseNode } from \"../../traverse-node.ts\";\nimport { explode } from \"../../visitors.ts\";\nimport { getAssignmentIdentifiers, type Identifier } from \"@babel/types\";\nimport { requeueComputedKeyAndDecorators } from \"../../path/context.ts\";\n\nconst renameVisitor: Visitor<Renamer> = {\n  ReferencedIdentifier({ node }, state) {\n    if (node.name === state.oldName) {\n      node.name = state.newName;\n    }\n  },\n\n  Scope(path, state) {\n    if (\n      !path.scope.bindingIdentifierEquals(\n        state.oldName,\n        state.binding.identifier,\n      )\n    ) {\n      path.skip();\n      if (path.isMethod()) {\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          !path.requeueComputedKeyAndDecorators\n        ) {\n          // See https://github.com/babel/babel/issues/16694\n          requeueComputedKeyAndDecorators.call(path);\n        } else {\n          path.requeueComputedKeyAndDecorators();\n        }\n      }\n    }\n  },\n\n  ObjectProperty({ node, scope }, state) {\n    const { name } = node.key as Identifier;\n    if (\n      node.shorthand &&\n      // In destructuring the identifier is already renamed by the\n      // AssignmentExpression|Declaration|VariableDeclarator visitor,\n      // while in object literals it's renamed later by the\n      // ReferencedIdentifier visitor.\n      (name === state.oldName || name === state.newName) &&\n      // Ignore shadowed bindings\n      scope.getBindingIdentifier(name) === state.binding.identifier\n    ) {\n      node.shorthand = false;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (node.extra?.shorthand) node.extra.shorthand = false;\n      }\n    }\n  },\n\n  \"AssignmentExpression|Declaration|VariableDeclarator\"(\n    path: NodePath<\n      t.AssignmentExpression | t.Declaration | t.VariableDeclarator\n    >,\n    state,\n  ) {\n    if (path.isVariableDeclaration()) return;\n    const ids = path.isAssignmentExpression()\n      ? // See https://github.com/babel/babel/issues/16694\n        getAssignmentIdentifiers(path.node)\n      : path.getOuterBindingIdentifiers();\n\n    for (const name in ids) {\n      if (name === state.oldName) ids[name].name = state.newName;\n    }\n  },\n};\n\nexport default class Renamer {\n  constructor(binding: Binding, oldName: string, newName: string) {\n    this.newName = newName;\n    this.oldName = oldName;\n    this.binding = binding;\n  }\n\n  declare oldName: string;\n  declare newName: string;\n  declare binding: Binding;\n\n  maybeConvertFromExportDeclaration(parentDeclar: NodePath) {\n    const maybeExportDeclar = parentDeclar.parentPath;\n\n    if (!maybeExportDeclar.isExportDeclaration()) {\n      return;\n    }\n\n    if (maybeExportDeclar.isExportDefaultDeclaration()) {\n      const { declaration } = maybeExportDeclar.node;\n      if (t.isDeclaration(declaration) && !declaration.id) {\n        return;\n      }\n    }\n\n    if (maybeExportDeclar.isExportAllDeclaration()) {\n      return;\n    }\n\n    maybeExportDeclar.splitExportDeclaration();\n  }\n\n  maybeConvertFromClassFunctionDeclaration(path: NodePath) {\n    return path; // TODO\n\n    // // retain the `name` of a class/function declaration\n\n    // if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;\n    // if (this.binding.kind !== \"hoisted\") return;\n\n    // path.node.id = identifier(this.oldName);\n    // path.node._blockHoist = 3;\n\n    // path.replaceWith(\n    //   variableDeclaration(\"let\", [\n    //     variableDeclarator(identifier(this.newName), toExpression(path.node)),\n    //   ]),\n    // );\n  }\n\n  maybeConvertFromClassFunctionExpression(path: NodePath) {\n    return path; // TODO\n\n    // // retain the `name` of a class/function expression\n\n    // if (!path.isFunctionExpression() && !path.isClassExpression()) return;\n    // if (this.binding.kind !== \"local\") return;\n\n    // path.node.id = identifier(this.oldName);\n\n    // this.binding.scope.parent.push({\n    //   id: identifier(this.newName),\n    // });\n\n    // path.replaceWith(\n    //   assignmentExpression(\"=\", identifier(this.newName), path.node),\n    // );\n  }\n\n  rename(/* Babel 7 - block?: t.Pattern | t.Scopable */) {\n    const { binding, oldName, newName } = this;\n    const { scope, path } = binding;\n\n    const parentDeclar = path.find(\n      path =>\n        path.isDeclaration() ||\n        path.isFunctionExpression() ||\n        path.isClassExpression(),\n    );\n    if (parentDeclar) {\n      const bindingIds = parentDeclar.getOuterBindingIdentifiers();\n      if (bindingIds[oldName] === binding.identifier) {\n        // When we are renaming an exported identifier, we need to ensure that\n        // the exported binding keeps the old name.\n        this.maybeConvertFromExportDeclaration(parentDeclar);\n      }\n    }\n\n    const blockToTraverse = process.env.BABEL_8_BREAKING\n      ? scope.block\n      : (arguments[0] as t.Pattern | t.Scopable) || scope.block;\n\n    // When blockToTraverse is a SwitchStatement, the discriminant\n    // is not part of the current scope and thus should be skipped.\n\n    // const foo = {\n    //   get [x]() {\n    //     return x;\n    //   },\n    // };\n    const skipKeys: Record<string, true> = { discriminant: true };\n    if (t.isMethod(blockToTraverse)) {\n      if (blockToTraverse.computed) {\n        skipKeys.key = true;\n      }\n      if (!t.isObjectMethod(blockToTraverse)) {\n        skipKeys.decorators = true;\n      }\n    }\n\n    traverseNode(\n      blockToTraverse,\n      explode(renameVisitor),\n      scope,\n      this,\n      scope.path,\n      skipKeys,\n    );\n\n    if (process.env.BABEL_8_BREAKING) {\n      scope.removeOwnBinding(oldName);\n      scope.bindings[newName] = binding;\n      this.binding.identifier.name = newName;\n    } else if (!arguments[0]) {\n      scope.removeOwnBinding(oldName);\n      scope.bindings[newName] = binding;\n      this.binding.identifier.name = newName;\n    }\n\n    if (parentDeclar) {\n      this.maybeConvertFromClassFunctionDeclaration(path);\n      this.maybeConvertFromClassFunctionExpression(path);\n    }\n  }\n}\n"],"names":["t","require","_t","_traverseNode","_visitors","_context","getAssignmentIdentifiers","renameVisitor","ReferencedIdentifier","node","state","name","oldName","newName","Scope","path","scope","bindingIdentifierEquals","binding","identifier","skip","isMethod","requeueComputedKeyAndDecorators","call","ObjectProperty","key","shorthand","getBindingIdentifier","_node$extra","extra","AssignmentExpression|Declaration|VariableDeclarator","isVariableDeclaration","ids","isAssignmentExpression","getOuterBindingIdentifiers","Renamer","constructor","maybeConvertFromExportDeclaration","parentDeclar","maybeExportDeclar","parentPath","isExportDeclaration","isExportDefaultDeclaration","declaration","isDeclaration","id","isExportAllDeclaration","splitExportDeclaration","maybeConvertFromClassFunctionDeclaration","maybeConvertFromClassFunctionExpression","rename","find","isFunctionExpression","isClassExpression","bindingIds","blockToTraverse","arguments","block","skipKeys","discriminant","computed","isObjectMethod","decorators","traverseNode","explode","removeOwnBinding","bindings","exports","default"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 571, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/scope/binding.ts"],"sourcesContent":["import type NodePath from \"../path/index.ts\";\nimport type * as t from \"@babel/types\";\nimport type Scope from \"./index.ts\";\n\nexport type BindingKind =\n  | \"var\" /* var declarator */\n  | \"let\" /* let declarator, class declaration id, catch clause parameters */\n  | \"const\" /* const/using declarator */\n  | \"module\" /* import specifiers */\n  | \"hoisted\" /* function declaration id */\n  | \"param\" /* function declaration parameters */\n  | \"local\" /* function expression id, class expression id */\n  | \"unknown\"; /* export specifiers */\n/**\n * This class is responsible for a binding inside of a scope.\n *\n * It tracks the following:\n *\n *  * Node path.\n *  * Amount of times referenced by other nodes.\n *  * Paths to nodes that reassign or modify this binding.\n *  * The kind of binding. (Is it a parameter, declaration etc)\n */\n\nexport default class Binding {\n  identifier: t.Identifier;\n  scope: Scope;\n  path: NodePath;\n  kind: BindingKind;\n\n  constructor({\n    identifier,\n    scope,\n    path,\n    kind,\n  }: {\n    identifier: t.Identifier;\n    scope: Scope;\n    path: NodePath;\n    kind: BindingKind;\n  }) {\n    this.identifier = identifier;\n    this.scope = scope;\n    this.path = path;\n    this.kind = kind;\n\n    if ((kind === \"var\" || kind === \"hoisted\") && isDeclaredInLoop(path)) {\n      this.reassign(path);\n    }\n\n    this.clearValue();\n  }\n\n  constantViolations: Array<NodePath> = [];\n  constant: boolean = true;\n\n  referencePaths: Array<NodePath> = [];\n  referenced: boolean = false;\n  references: number = 0;\n\n  declare hasDeoptedValue: boolean;\n  declare hasValue: boolean;\n  declare value: any;\n\n  deoptValue() {\n    this.clearValue();\n    this.hasDeoptedValue = true;\n  }\n\n  setValue(value: any) {\n    if (this.hasDeoptedValue) return;\n    this.hasValue = true;\n    this.value = value;\n  }\n\n  clearValue() {\n    this.hasDeoptedValue = false;\n    this.hasValue = false;\n    this.value = null;\n  }\n\n  /**\n   * Register a constant violation with the provided `path`.\n   */\n\n  reassign(path: NodePath) {\n    this.constant = false;\n    if (this.constantViolations.includes(path)) {\n      return;\n    }\n    this.constantViolations.push(path);\n  }\n\n  /**\n   * Increment the amount of references to this binding.\n   */\n\n  reference(path: NodePath) {\n    if (this.referencePaths.includes(path)) {\n      return;\n    }\n    this.referenced = true;\n    this.references++;\n    this.referencePaths.push(path);\n  }\n\n  /**\n   * Decrement the amount of references to this binding.\n   */\n\n  dereference() {\n    this.references--;\n    this.referenced = !!this.references;\n  }\n}\n\nfunction isDeclaredInLoop(path: NodePath) {\n  for (\n    let { parentPath, key } = path;\n    parentPath;\n    { parentPath, key } = parentPath\n  ) {\n    if (parentPath.isFunctionParent()) return false;\n    if (\n      parentPath.isWhile() ||\n      parentPath.isForXStatement() ||\n      (parentPath.isForStatement() && key === \"body\")\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n"],"names":["Binding","constructor","identifier","scope","path","kind","constantViolations","constant","referencePaths","referenced","references","isDeclaredInLoop","reassign","clearValue","deoptValue","hasDeoptedValue","setValue","value","hasValue","includes","push","reference","dereference","exports","default","parentPath","key","isFunctionParent","isWhile","isForXStatement","isForStatement"],"mappings":";;;;;AAwBe,MAAMA,OAAO,CAAC;IAM3BC,WAAWA,CAAC,EACVC,UAAU,EACVC,KAAK,EACLC,IAAI,EACJC,IAAAA,EAMD,CAAE;QAAA,IAAA,CAfHH,UAAU,GAAA,KAAA;QAAA,IAAA,CACVC,KAAK,GAAA,KAAA;QAAA,IAAA,CACLC,IAAI,GAAA,KAAA;QAAA,IAAA,CACJC,IAAI,GAAA,KAAA;QAAA,IAAA,CAyBJC,kBAAkB,GAAoB,EAAE;QAAA,IAAA,CACxCC,QAAQ,GAAY,IAAI;QAAA,IAAA,CAExBC,cAAc,GAAoB,EAAE;QAAA,IAAA,CACpCC,UAAU,GAAY,KAAK;QAAA,IAAA,CAC3BC,UAAU,GAAW,CAAC;QAjBpB,IAAI,CAACR,UAAU,GAAGA,UAAU;QAC5B,IAAI,CAACC,KAAK,GAAGA,KAAK;QAClB,IAAI,CAACC,IAAI,GAAGA,IAAI;QAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;QAEhB,IAAI,CAACA,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,SAAS,KAAKM,gBAAgB,CAACP,IAAI,CAAC,EAAE;YACpE,IAAI,CAACQ,QAAQ,CAACR,IAAI,CAAC;QACrB;QAEA,IAAI,CAACS,UAAU,CAAC,CAAC;IACnB;IAaAC,UAAUA,CAAA,EAAG;QACX,IAAI,CAACD,UAAU,CAAC,CAAC;QACjB,IAAI,CAACE,eAAe,GAAG,IAAI;IAC7B;IAEAC,QAAQA,CAACC,KAAU,EAAE;QACnB,IAAI,IAAI,CAACF,eAAe,EAAE;QAC1B,IAAI,CAACG,QAAQ,GAAG,IAAI;QACpB,IAAI,CAACD,KAAK,GAAGA,KAAK;IACpB;IAEAJ,UAAUA,CAAA,EAAG;QACX,IAAI,CAACE,eAAe,GAAG,KAAK;QAC5B,IAAI,CAACG,QAAQ,GAAG,KAAK;QACrB,IAAI,CAACD,KAAK,GAAG,IAAI;IACnB;IAMAL,QAAQA,CAACR,IAAc,EAAE;QACvB,IAAI,CAACG,QAAQ,GAAG,KAAK;QACrB,IAAI,IAAI,CAACD,kBAAkB,CAACa,QAAQ,CAACf,IAAI,CAAC,EAAE;YAC1C;QACF;QACA,IAAI,CAACE,kBAAkB,CAACc,IAAI,CAAChB,IAAI,CAAC;IACpC;IAMAiB,SAASA,CAACjB,IAAc,EAAE;QACxB,IAAI,IAAI,CAACI,cAAc,CAACW,QAAQ,CAACf,IAAI,CAAC,EAAE;YACtC;QACF;QACA,IAAI,CAACK,UAAU,GAAG,IAAI;QACtB,IAAI,CAACC,UAAU,EAAE;QACjB,IAAI,CAACF,cAAc,CAACY,IAAI,CAAChB,IAAI,CAAC;IAChC;IAMAkB,WAAWA,CAAA,EAAG;QACZ,IAAI,CAACZ,UAAU,EAAE;QACjB,IAAI,CAACD,UAAU,GAAG,CAAC,CAAC,IAAI,CAACC,UAAU;IACrC;AACF;AAACa,OAAA,CAAAC,OAAA,GAAAxB,OAAA;AAED,SAASW,gBAAgBA,CAACP,IAAc,EAAE;IACxC,IACE,IAAI,EAAEqB,UAAU,EAAEC,GAAAA,EAAK,GAAGtB,IAAI,EAC9BqB,UAAU,EACV,EAAEA,UAAU,EAAEC,GAAAA,EAAK,GAAGD,UAAU,CAChC;QACA,IAAIA,UAAU,CAACE,gBAAgB,CAAC,CAAC,EAAE,OAAO,KAAK;QAC/C,IACEF,UAAU,CAACG,OAAO,CAAC,CAAC,IACpBH,UAAU,CAACI,eAAe,CAAC,CAAC,IAC3BJ,UAAU,CAACK,cAAc,CAAC,CAAC,IAAIJ,GAAG,KAAK,MAAO,EAC/C;YACA,OAAO,IAAI;QACb;IACF;IACA,OAAO,KAAK;AACd","ignoreList":[0]}},
    {"offset": {"line": 645, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 650, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/cache.ts"],"sourcesContent":["import type { Node } from \"@babel/types\";\nimport type NodePath from \"./path/index.ts\";\nimport type Scope from \"./scope/index.ts\";\nimport type { HubInterface } from \"./hub.ts\";\n\nlet pathsCache: WeakMap<\n  HubInterface | typeof nullHub,\n  WeakMap<Node, Map<Node, NodePath>>\n> = new WeakMap();\nexport { pathsCache as path };\nexport let scope: WeakMap<Node, Scope> = new WeakMap();\n\nexport function clear() {\n  clearPath();\n  clearScope();\n}\n\nexport function clearPath() {\n  pathsCache = new WeakMap();\n}\n\nexport function clearScope() {\n  scope = new WeakMap();\n}\n\n// NodePath#hub can be null, but it's not a valid weakmap key because it\n// cannot be collected by GC. Use an object, knowing tht it will not be\n// collected anyway. It's not a memory leak because pathsCache.get(nullHub)\n// is itself a weakmap, so its entries can still be collected.\nconst nullHub = Object.freeze({} as const);\n\nexport function getCachedPaths(hub: HubInterface | null, parent: Node) {\n  if (!process.env.BABEL_8_BREAKING) {\n    // Only use Hub as part of the cache key in Babel 8, because it is a\n    // breaking change (it causes incompatibilities with older `@babel/core`\n    // versions: see https://github.com/babel/babel/pull/15759)\n    hub = null;\n  }\n  return pathsCache.get(hub ?? nullHub)?.get(parent);\n}\n\nexport function getOrCreateCachedPaths(hub: HubInterface | null, parent: Node) {\n  if (!process.env.BABEL_8_BREAKING) {\n    hub = null;\n  }\n\n  let parents = pathsCache.get(hub ?? nullHub);\n  if (!parents) pathsCache.set(hub ?? nullHub, (parents = new WeakMap()));\n\n  let paths = parents.get(parent);\n  if (!paths) parents.set(parent, (paths = new Map()));\n\n  return paths;\n}\n"],"names":["pathsCache","exports","path","WeakMap","scope","clear","clearPath","clearScope","nullHub","Object","freeze","getCachedPaths","hub","parent","_pathsCache$get","_hub","get","getOrCreateCachedPaths","_hub2","_hub3","parents","set","paths","Map"],"mappings":";;;;;;;;;;AAKA,IAAIA,UAGH,GAAAC,OAAA,CAAAC,IAAA,GAAG,IAAIC,OAAO,CAAC,CAAC;AAEV,IAAIC,KAA2B,GAAAH,OAAA,CAAAG,KAAA,GAAG,IAAID,OAAO,CAAC,CAAC;AAE/C,SAASE,KAAKA,CAAA,EAAG;IACtBC,SAAS,CAAC,CAAC;IACXC,UAAU,CAAC,CAAC;AACd;AAEO,SAASD,SAASA,CAAA,EAAG;IAC1BL,OAAA,CAAAC,IAAA,GAAAF,UAAU,GAAG,IAAIG,OAAO,CAAC,CAAC;AAC5B;AAEO,SAASI,UAAUA,CAAA,EAAG;IAC3BN,OAAA,CAAAG,KAAA,GAAAA,KAAK,GAAG,IAAID,OAAO,CAAC,CAAC;AACvB;AAMA,MAAMK,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAU,CAAC;AAEnC,SAASC,cAAcA,CAACC,GAAwB,EAAEC,MAAY,EAAE;IAAA,IAAAC,eAAA,EAAAC,IAAA;IAClC;QAIjCH,GAAG,GAAG,IAAI;IACZ;IACA,OAAA,CAAAE,eAAA,GAAOd,UAAU,CAACgB,GAAG,CAAA,CAAAD,IAAA,GAACH,GAAG,KAAA,OAAAG,IAAA,GAAIP,OAAO,CAAC,KAAA,OAAA,KAAA,IAA9BM,eAAA,CAAgCE,GAAG,CAACH,MAAM,CAAC;AACpD;AAEO,SAASI,sBAAsBA,CAACL,GAAwB,EAAEC,MAAY,EAAE;IAAA,IAAAK,KAAA,EAAAC,KAAA;IAC1C;QACjCP,GAAG,GAAG,IAAI;IACZ;IAEA,IAAIQ,OAAO,GAAGpB,UAAU,CAACgB,GAAG,CAAA,CAAAE,KAAA,GAACN,GAAG,KAAA,OAAAM,KAAA,GAAIV,OAAO,CAAC;IAC5C,IAAI,CAACY,OAAO,EAAEpB,UAAU,CAACqB,GAAG,CAAA,CAAAF,KAAA,GAACP,GAAG,KAAA,OAAAO,KAAA,GAAIX,OAAO,EAAGY,OAAO,GAAG,IAAIjB,OAAO,CAAC,CAAE,CAAC;IAEvE,IAAImB,KAAK,GAAGF,OAAO,CAACJ,GAAG,CAACH,MAAM,CAAC;IAC/B,IAAI,CAACS,KAAK,EAAEF,OAAO,CAACC,GAAG,CAACR,MAAM,EAAGS,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAE,CAAC;IAEpD,OAAOD,KAAK;AACd","ignoreList":[0]}},
    {"offset": {"line": 691, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 696, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/scope/index.ts"],"sourcesContent":["import Renamer from \"./lib/renamer.ts\";\nimport type NodePath from \"../path/index.ts\";\nimport traverse from \"../index.ts\";\nimport Binding from \"./binding.ts\";\nimport type { BindingKind } from \"./binding.ts\";\nimport globals from \"globals\";\nimport {\n  NOT_LOCAL_BINDING,\n  assignmentExpression,\n  callExpression,\n  cloneNode,\n  getBindingIdentifiers,\n  identifier,\n  isArrayExpression,\n  isBinary,\n  isCallExpression,\n  isClass,\n  isClassBody,\n  isClassDeclaration,\n  isExportAllDeclaration,\n  isExportDefaultDeclaration,\n  isExportNamedDeclaration,\n  isFunctionDeclaration,\n  isIdentifier,\n  isImportDeclaration,\n  isLiteral,\n  isMemberExpression,\n  isMethod,\n  isModuleSpecifier,\n  isNullLiteral,\n  isObjectExpression,\n  isProperty,\n  isPureish,\n  isRegExpLiteral,\n  isSuper,\n  isTaggedTemplateExpression,\n  isTemplateLiteral,\n  isThisExpression,\n  isUnaryExpression,\n  isVariableDeclaration,\n  expressionStatement,\n  matchesPattern,\n  memberExpression,\n  numericLiteral,\n  toIdentifier,\n  variableDeclaration,\n  variableDeclarator,\n  isRecordExpression,\n  isTupleExpression,\n  isObjectProperty,\n  isTopicReference,\n  isMetaProperty,\n  isPrivateName,\n  isExportDeclaration,\n  buildUndefinedNode,\n  sequenceExpression,\n} from \"@babel/types\";\nimport * as t from \"@babel/types\";\nimport { scope as scopeCache } from \"../cache.ts\";\nimport type { Visitor } from \"../types.ts\";\nimport { isExplodedVisitor } from \"../visitors.ts\";\n\ntype NodePart = string | number | boolean;\n// Recursively gathers the identifying names of a node.\nfunction gatherNodeParts(node: t.Node, parts: NodePart[]) {\n  switch (node?.type) {\n    default:\n      if (isImportDeclaration(node) || isExportDeclaration(node)) {\n        if (\n          (isExportAllDeclaration(node) ||\n            isExportNamedDeclaration(node) ||\n            isImportDeclaration(node)) &&\n          node.source\n        ) {\n          gatherNodeParts(node.source, parts);\n        } else if (\n          (isExportNamedDeclaration(node) || isImportDeclaration(node)) &&\n          node.specifiers?.length\n        ) {\n          for (const e of node.specifiers) gatherNodeParts(e, parts);\n        } else if (\n          (isExportDefaultDeclaration(node) ||\n            isExportNamedDeclaration(node)) &&\n          node.declaration\n        ) {\n          gatherNodeParts(node.declaration, parts);\n        }\n      } else if (isModuleSpecifier(node)) {\n        // todo(flow->ts): should condition instead be:\n        //    ```\n        //    t.isExportSpecifier(node) ||\n        //    t.isImportDefaultSpecifier(node) ||\n        //    t.isImportNamespaceSpecifier(node) ||\n        //    t.isImportSpecifier(node)\n        //    ```\n        //    allowing only nodes with `.local`?\n        // @ts-expect-error todo(flow->ts)\n        gatherNodeParts(node.local, parts);\n      } else if (\n        isLiteral(node) &&\n        !isNullLiteral(node) &&\n        !isRegExpLiteral(node) &&\n        !isTemplateLiteral(node)\n      ) {\n        parts.push(node.value);\n      }\n      break;\n\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n    case \"JSXMemberExpression\":\n      gatherNodeParts(node.object, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"Identifier\":\n    case \"JSXIdentifier\":\n      parts.push(node.name);\n      break;\n\n    case \"CallExpression\":\n    case \"OptionalCallExpression\":\n    case \"NewExpression\":\n      gatherNodeParts(node.callee, parts);\n      break;\n\n    case \"ObjectExpression\":\n    case \"ObjectPattern\":\n      for (const e of node.properties) {\n        gatherNodeParts(e, parts);\n      }\n      break;\n\n    case \"SpreadElement\":\n    case \"RestElement\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"ObjectProperty\":\n    case \"ObjectMethod\":\n    case \"ClassProperty\":\n    case \"ClassMethod\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n      gatherNodeParts(node.key, parts);\n      break;\n\n    case \"ThisExpression\":\n      parts.push(\"this\");\n      break;\n\n    case \"Super\":\n      parts.push(\"super\");\n      break;\n\n    case \"Import\":\n      parts.push(\"import\");\n      break;\n\n    case \"DoExpression\":\n      parts.push(\"do\");\n      break;\n\n    case \"YieldExpression\":\n      parts.push(\"yield\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AwaitExpression\":\n      parts.push(\"await\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AssignmentExpression\":\n      gatherNodeParts(node.left, parts);\n      break;\n\n    case \"VariableDeclarator\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"FunctionExpression\":\n    case \"FunctionDeclaration\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"PrivateName\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"ParenthesizedExpression\":\n      gatherNodeParts(node.expression, parts);\n      break;\n\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"MetaProperty\":\n      gatherNodeParts(node.meta, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"JSXElement\":\n      gatherNodeParts(node.openingElement, parts);\n      break;\n\n    case \"JSXOpeningElement\":\n      gatherNodeParts(node.name, parts);\n      break;\n\n    case \"JSXFragment\":\n      gatherNodeParts(node.openingFragment, parts);\n      break;\n\n    case \"JSXOpeningFragment\":\n      parts.push(\"Fragment\");\n      break;\n\n    case \"JSXNamespacedName\":\n      gatherNodeParts(node.namespace, parts);\n      gatherNodeParts(node.name, parts);\n      break;\n  }\n}\n\n//\ninterface CollectVisitorState {\n  assignments: NodePath<t.AssignmentExpression>[];\n  references: NodePath<t.Identifier | t.JSXIdentifier>[];\n  constantViolations: NodePath[];\n}\n\nconst collectorVisitor: Visitor<CollectVisitorState> = {\n  ForStatement(path) {\n    const declar = path.get(\"init\");\n    // delegate block scope handling to the `BlockScoped` method\n    if (declar.isVar()) {\n      const { scope } = path;\n      const parentScope = scope.getFunctionParent() || scope.getProgramParent();\n      parentScope.registerBinding(\"var\", declar);\n    }\n  },\n\n  Declaration(path) {\n    // delegate block scope handling to the `BlockScoped` method\n    if (path.isBlockScoped()) return;\n\n    // delegate import handing to the `ImportDeclaration` method\n    if (path.isImportDeclaration()) return;\n\n    // this will be hit again once we traverse into it after this iteration\n    if (path.isExportDeclaration()) return;\n\n    // we've ran into a declaration!\n    const parent =\n      path.scope.getFunctionParent() || path.scope.getProgramParent();\n    parent.registerDeclaration(path);\n  },\n\n  ImportDeclaration(path) {\n    // import may only appear in the top level or inside a module/namespace (for TS/flow)\n    const parent = path.scope.getBlockParent();\n\n    parent.registerDeclaration(path);\n  },\n\n  ReferencedIdentifier(path, state) {\n    state.references.push(path);\n  },\n\n  ForXStatement(path, state) {\n    const left = path.get(\"left\");\n    if (left.isPattern() || left.isIdentifier()) {\n      state.constantViolations.push(path);\n    }\n    // delegate block scope handling to the `BlockScoped` method\n    else if (left.isVar()) {\n      const { scope } = path;\n      const parentScope = scope.getFunctionParent() || scope.getProgramParent();\n      parentScope.registerBinding(\"var\", left);\n    }\n  },\n\n  ExportDeclaration: {\n    exit(path) {\n      const { node, scope } = path;\n      // ExportAllDeclaration does not have `declaration`\n      if (isExportAllDeclaration(node)) return;\n      const declar = node.declaration;\n      if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {\n        const id = declar.id;\n        if (!id) return;\n\n        const binding = scope.getBinding(id.name);\n        binding?.reference(path);\n      } else if (isVariableDeclaration(declar)) {\n        for (const decl of declar.declarations) {\n          for (const name of Object.keys(getBindingIdentifiers(decl))) {\n            const binding = scope.getBinding(name);\n            binding?.reference(path);\n          }\n        }\n      }\n    },\n  },\n\n  LabeledStatement(path) {\n    path.scope.getBlockParent().registerDeclaration(path);\n  },\n\n  AssignmentExpression(path, state) {\n    state.assignments.push(path);\n  },\n\n  UpdateExpression(path, state) {\n    state.constantViolations.push(path);\n  },\n\n  UnaryExpression(path, state) {\n    if (path.node.operator === \"delete\") {\n      state.constantViolations.push(path);\n    }\n  },\n\n  BlockScoped(path) {\n    let scope = path.scope;\n    if (scope.path === path) scope = scope.parent;\n\n    const parent = scope.getBlockParent();\n    parent.registerDeclaration(path);\n\n    // Register class identifier in class' scope if this is a class declaration.\n    if (path.isClassDeclaration() && path.node.id) {\n      const id = path.node.id;\n      const name = id.name;\n\n      path.scope.bindings[name] = path.scope.parent.getBinding(name);\n    }\n  },\n\n  CatchClause(path) {\n    path.scope.registerBinding(\"let\", path);\n  },\n\n  Function(path) {\n    const params: Array<NodePath> = path.get(\"params\");\n    for (const param of params) {\n      path.scope.registerBinding(\"param\", param);\n    }\n\n    // Register function expression id after params. When the id\n    // collides with a function param, the id effectively can't be\n    // referenced: here we registered it as a constantViolation\n    if (\n      path.isFunctionExpression() &&\n      path.node.id &&\n      // @ts-expect-error Fixme: document symbol ast properties\n      !path.node.id[NOT_LOCAL_BINDING]\n    ) {\n      path.scope.registerBinding(\"local\", path.get(\"id\"), path);\n    }\n  },\n\n  ClassExpression(path) {\n    if (\n      path.node.id &&\n      // @ts-expect-error Fixme: document symbol ast properties\n      !path.node.id[NOT_LOCAL_BINDING]\n    ) {\n      path.scope.registerBinding(\"local\", path.get(\"id\"), path);\n    }\n  },\n  TSTypeAnnotation(path) {\n    path.skip();\n  },\n};\n\nlet uid = 0;\n\nexport type { Binding };\n\nexport { Scope as default };\nclass Scope {\n  uid;\n\n  path: NodePath;\n  block: t.Pattern | t.Scopable;\n\n  inited;\n\n  labels: Map<string, NodePath<t.LabeledStatement>>;\n  bindings: { [name: string]: Binding };\n  references: { [name: string]: true };\n  globals: { [name: string]: t.Identifier | t.JSXIdentifier };\n  uids: { [name: string]: boolean };\n  data: { [key: string | symbol]: unknown };\n  crawling: boolean;\n\n  /**\n   * This searches the current \"scope\" and collects all references/bindings\n   * within.\n   */\n  constructor(path: NodePath<t.Pattern | t.Scopable>) {\n    const { node } = path;\n    const cached = scopeCache.get(node);\n    // Sometimes, a scopable path is placed higher in the AST tree.\n    // In these cases, have to create a new Scope.\n    if (cached?.path === path) {\n      return cached;\n    }\n    scopeCache.set(node, this);\n\n    this.uid = uid++;\n\n    this.block = node;\n    this.path = path;\n\n    this.labels = new Map();\n    this.inited = false;\n  }\n\n  /**\n   * Globals.\n   */\n\n  static globals = Object.keys(globals.builtin);\n\n  /**\n   * Variables available in current context.\n   */\n\n  static contextVariables = [\"arguments\", \"undefined\", \"Infinity\", \"NaN\"];\n\n  get parent() {\n    let parent,\n      path = this.path;\n    do {\n      // Skip method scope if coming from inside computed key or decorator expression\n      const shouldSkip = path.key === \"key\" || path.listKey === \"decorators\";\n      path = path.parentPath;\n      if (shouldSkip && path.isMethod()) path = path.parentPath;\n      if (path?.isScope()) parent = path;\n    } while (path && !parent);\n\n    return parent?.scope;\n  }\n\n  /**\n   * Generate a unique identifier and add it to the current scope.\n   */\n\n  generateDeclaredUidIdentifier(name?: string) {\n    const id = this.generateUidIdentifier(name);\n    this.push({ id });\n    return cloneNode(id);\n  }\n\n  /**\n   * Generate a unique identifier.\n   */\n\n  generateUidIdentifier(name?: string) {\n    return identifier(this.generateUid(name));\n  }\n\n  /**\n   * Generate a unique `_id1` binding.\n   */\n\n  generateUid(name: string = \"temp\"): string {\n    name = toIdentifier(name).replace(/^_+/, \"\").replace(/\\d+$/g, \"\");\n\n    let uid;\n    let i = 1;\n    do {\n      uid = `_${name}`;\n      if (i > 1) uid += i;\n      i++;\n    } while (\n      this.hasLabel(uid) ||\n      this.hasBinding(uid) ||\n      this.hasGlobal(uid) ||\n      this.hasReference(uid)\n    );\n\n    const program = this.getProgramParent();\n    program.references[uid] = true;\n    program.uids[uid] = true;\n\n    return uid;\n  }\n\n  generateUidBasedOnNode(node: t.Node, defaultName?: string) {\n    const parts: NodePart[] = [];\n    gatherNodeParts(node, parts);\n\n    let id = parts.join(\"$\");\n    id = id.replace(/^_/, \"\") || defaultName || \"ref\";\n\n    return this.generateUid(id.slice(0, 20));\n  }\n\n  /**\n   * Generate a unique identifier based on a node.\n   */\n\n  generateUidIdentifierBasedOnNode(node: t.Node, defaultName?: string) {\n    return identifier(this.generateUidBasedOnNode(node, defaultName));\n  }\n\n  /**\n   * Determine whether evaluating the specific input `node` is a consequenceless reference. ie.\n   * evaluating it won't result in potentially arbitrary code from being ran. The following are\n   * allowed and determined not to cause side effects:\n   *\n   *  - `this` expressions\n   *  - `super` expressions\n   *  - Bound identifiers\n   */\n\n  isStatic(node: t.Node): boolean {\n    if (isThisExpression(node) || isSuper(node) || isTopicReference(node)) {\n      return true;\n    }\n\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (binding) {\n        return binding.constant;\n      } else {\n        return this.hasBinding(node.name);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Possibly generate a memoised identifier if it is not static and has consequences.\n   */\n\n  maybeGenerateMemoised(node: t.Node, dontPush?: boolean) {\n    if (this.isStatic(node)) {\n      return null;\n    } else {\n      const id = this.generateUidIdentifierBasedOnNode(node);\n      if (!dontPush) {\n        this.push({ id });\n        return cloneNode(id);\n      }\n      return id;\n    }\n  }\n\n  checkBlockScopedCollisions(\n    local: Binding,\n    kind: BindingKind,\n    name: string,\n    id: any,\n  ) {\n    // ignore parameters\n    if (kind === \"param\") return;\n\n    // Ignore existing binding if it's the name of the current function or\n    // class expression\n    if (local.kind === \"local\") return;\n\n    const duplicate =\n      // don't allow duplicate bindings to exist alongside\n      kind === \"let\" ||\n      local.kind === \"let\" ||\n      local.kind === \"const\" ||\n      local.kind === \"module\" ||\n      // don't allow a local of param with a kind of let\n      (local.kind === \"param\" && kind === \"const\");\n\n    if (duplicate) {\n      throw this.path.hub.buildError(\n        id,\n        `Duplicate declaration \"${name}\"`,\n        TypeError,\n      );\n    }\n  }\n\n  rename(\n    oldName: string,\n    newName?: string,\n    // prettier-ignore\n    /* Babel 7 - block?: t.Pattern | t.Scopable */\n  ) {\n    const binding = this.getBinding(oldName);\n    if (binding) {\n      newName ||= this.generateUidIdentifier(oldName).name;\n      const renamer = new Renamer(binding, oldName, newName);\n      if (process.env.BABEL_8_BREAKING) {\n        renamer.rename();\n      } else {\n        // @ts-ignore(Babel 7 vs Babel 8) TODO: Delete this\n        renamer.rename(arguments[2]);\n      }\n    }\n  }\n\n  dump() {\n    const sep = \"-\".repeat(60);\n    console.log(sep);\n    let scope: Scope = this;\n    do {\n      console.log(\"#\", scope.block.type);\n      for (const name of Object.keys(scope.bindings)) {\n        const binding = scope.bindings[name];\n        console.log(\" -\", name, {\n          constant: binding.constant,\n          references: binding.references,\n          violations: binding.constantViolations.length,\n          kind: binding.kind,\n        });\n      }\n    } while ((scope = scope.parent));\n    console.log(sep);\n  }\n\n  hasLabel(name: string) {\n    return !!this.getLabel(name);\n  }\n\n  getLabel(name: string) {\n    return this.labels.get(name);\n  }\n\n  registerLabel(path: NodePath<t.LabeledStatement>) {\n    this.labels.set(path.node.label.name, path);\n  }\n\n  registerDeclaration(path: NodePath) {\n    if (path.isLabeledStatement()) {\n      this.registerLabel(path);\n    } else if (path.isFunctionDeclaration()) {\n      this.registerBinding(\"hoisted\", path.get(\"id\"), path);\n    } else if (path.isVariableDeclaration()) {\n      const declarations = path.get(\"declarations\");\n      const { kind } = path.node;\n      for (const declar of declarations) {\n        this.registerBinding(\n          kind === \"using\" || kind === \"await using\" ? \"const\" : kind,\n          declar,\n        );\n      }\n    } else if (path.isClassDeclaration()) {\n      if (path.node.declare) return;\n      this.registerBinding(\"let\", path);\n    } else if (path.isImportDeclaration()) {\n      const isTypeDeclaration =\n        path.node.importKind === \"type\" || path.node.importKind === \"typeof\";\n      const specifiers = path.get(\"specifiers\");\n      for (const specifier of specifiers) {\n        const isTypeSpecifier =\n          isTypeDeclaration ||\n          (specifier.isImportSpecifier() &&\n            (specifier.node.importKind === \"type\" ||\n              specifier.node.importKind === \"typeof\"));\n\n        this.registerBinding(isTypeSpecifier ? \"unknown\" : \"module\", specifier);\n      }\n    } else if (path.isExportDeclaration()) {\n      // todo: improve babel-types\n      const declar = path.get(\"declaration\") as NodePath;\n      if (\n        declar.isClassDeclaration() ||\n        declar.isFunctionDeclaration() ||\n        declar.isVariableDeclaration()\n      ) {\n        this.registerDeclaration(declar);\n      }\n    } else {\n      this.registerBinding(\"unknown\", path);\n    }\n  }\n\n  buildUndefinedNode() {\n    return buildUndefinedNode();\n  }\n\n  registerConstantViolation(path: NodePath) {\n    const ids = path.getAssignmentIdentifiers();\n    for (const name of Object.keys(ids)) {\n      this.getBinding(name)?.reassign(path);\n    }\n  }\n\n  registerBinding(\n    kind: Binding[\"kind\"],\n    path: NodePath,\n    bindingPath: NodePath = path,\n  ) {\n    if (!kind) throw new ReferenceError(\"no `kind`\");\n\n    if (path.isVariableDeclaration()) {\n      const declarators: Array<NodePath> = path.get(\"declarations\");\n      for (const declar of declarators) {\n        this.registerBinding(kind, declar);\n      }\n      return;\n    }\n\n    const parent = this.getProgramParent();\n    const ids = path.getOuterBindingIdentifiers(true);\n\n    for (const name of Object.keys(ids)) {\n      parent.references[name] = true;\n\n      for (const id of ids[name]) {\n        const local = this.getOwnBinding(name);\n\n        if (local) {\n          // same identifier so continue safely as we're likely trying to register it\n          // multiple times\n          if (local.identifier === id) continue;\n\n          this.checkBlockScopedCollisions(local, kind, name, id);\n        }\n\n        // A redeclaration of an existing variable is a modification\n        if (local) {\n          local.reassign(bindingPath);\n        } else {\n          this.bindings[name] = new Binding({\n            identifier: id,\n            scope: this,\n            path: bindingPath,\n            kind: kind,\n          });\n        }\n      }\n    }\n  }\n\n  addGlobal(node: t.Identifier | t.JSXIdentifier) {\n    this.globals[node.name] = node;\n  }\n\n  hasUid(name: string): boolean {\n    let scope: Scope = this;\n\n    do {\n      if (scope.uids[name]) return true;\n    } while ((scope = scope.parent));\n\n    return false;\n  }\n\n  hasGlobal(name: string): boolean {\n    let scope: Scope = this;\n\n    do {\n      if (scope.globals[name]) return true;\n    } while ((scope = scope.parent));\n\n    return false;\n  }\n\n  hasReference(name: string): boolean {\n    return !!this.getProgramParent().references[name];\n  }\n\n  isPure(node: t.Node, constantsOnly?: boolean): boolean {\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (!binding) return false;\n      if (constantsOnly) return binding.constant;\n      return true;\n    } else if (\n      isThisExpression(node) ||\n      isMetaProperty(node) ||\n      isTopicReference(node) ||\n      isPrivateName(node)\n    ) {\n      return true;\n    } else if (isClass(node)) {\n      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {\n        return false;\n      }\n      if (node.decorators?.length > 0) {\n        return false;\n      }\n      return this.isPure(node.body, constantsOnly);\n    } else if (isClassBody(node)) {\n      for (const method of node.body) {\n        if (!this.isPure(method, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isBinary(node)) {\n      return (\n        this.isPure(node.left, constantsOnly) &&\n        this.isPure(node.right, constantsOnly)\n      );\n    } else if (isArrayExpression(node) || isTupleExpression(node)) {\n      for (const elem of node.elements) {\n        if (elem !== null && !this.isPure(elem, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isObjectExpression(node) || isRecordExpression(node)) {\n      for (const prop of node.properties) {\n        if (!this.isPure(prop, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isMethod(node)) {\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (node.decorators?.length > 0) {\n        return false;\n      }\n      return true;\n    } else if (isProperty(node)) {\n      // @ts-expect-error todo(flow->ts): computed in not present on private properties\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (node.decorators?.length > 0) {\n        return false;\n      }\n      if (isObjectProperty(node) || node.static) {\n        if (node.value !== null && !this.isPure(node.value, constantsOnly)) {\n          return false;\n        }\n      }\n      return true;\n    } else if (isUnaryExpression(node)) {\n      return this.isPure(node.argument, constantsOnly);\n    } else if (isTemplateLiteral(node)) {\n      for (const expression of node.expressions) {\n        if (!this.isPure(expression, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isTaggedTemplateExpression(node)) {\n      return (\n        matchesPattern(node.tag, \"String.raw\") &&\n        !this.hasBinding(\"String\", { noGlobals: true }) &&\n        this.isPure(node.quasi, constantsOnly)\n      );\n    } else if (isMemberExpression(node)) {\n      return (\n        !node.computed &&\n        isIdentifier(node.object) &&\n        node.object.name === \"Symbol\" &&\n        isIdentifier(node.property) &&\n        node.property.name !== \"for\" &&\n        !this.hasBinding(\"Symbol\", { noGlobals: true })\n      );\n    } else if (isCallExpression(node)) {\n      return (\n        matchesPattern(node.callee, \"Symbol.for\") &&\n        !this.hasBinding(\"Symbol\", { noGlobals: true }) &&\n        node.arguments.length === 1 &&\n        t.isStringLiteral(node.arguments[0])\n      );\n    } else {\n      return isPureish(node);\n    }\n  }\n\n  /**\n   * Set some arbitrary data on the current scope.\n   */\n\n  setData(key: string | symbol, val: any) {\n    return (this.data[key] = val);\n  }\n\n  /**\n   * Recursively walk up scope tree looking for the data `key`.\n   */\n\n  getData(key: string | symbol): any {\n    let scope: Scope = this;\n    do {\n      const data = scope.data[key];\n      if (data != null) return data;\n    } while ((scope = scope.parent));\n  }\n\n  /**\n   * Recursively walk up scope tree looking for the data `key` and if it exists,\n   * remove it.\n   */\n\n  removeData(key: string) {\n    let scope: Scope = this;\n    do {\n      const data = scope.data[key];\n      if (data != null) scope.data[key] = null;\n    } while ((scope = scope.parent));\n  }\n\n  init() {\n    if (!this.inited) {\n      this.inited = true;\n      this.crawl();\n    }\n  }\n\n  crawl() {\n    const path = this.path;\n\n    this.references = Object.create(null);\n    this.bindings = Object.create(null);\n    this.globals = Object.create(null);\n    this.uids = Object.create(null);\n    this.data = Object.create(null);\n\n    let scope: Scope = this;\n    do {\n      if (scope.crawling) return;\n      if (scope.path.isProgram()) {\n        break;\n      }\n    } while ((scope = scope.parent));\n\n    const programParent = scope;\n\n    const state: CollectVisitorState = {\n      references: [],\n      constantViolations: [],\n      assignments: [],\n    };\n\n    this.crawling = true;\n    // traverse does not visit the root node, here we explicitly collect\n    // root node binding info when the root is not a Program.\n    if (path.type !== \"Program\" && isExplodedVisitor(collectorVisitor)) {\n      for (const visit of collectorVisitor.enter) {\n        visit.call(state, path, state);\n      }\n      const typeVisitors = collectorVisitor[path.type];\n      if (typeVisitors) {\n        for (const visit of typeVisitors.enter) {\n          visit.call(state, path, state);\n        }\n      }\n    }\n    path.traverse(collectorVisitor, state);\n    this.crawling = false;\n\n    // register assignments\n    for (const path of state.assignments) {\n      // register undeclared bindings as globals\n      const ids = path.getAssignmentIdentifiers();\n      for (const name of Object.keys(ids)) {\n        if (path.scope.getBinding(name)) continue;\n        programParent.addGlobal(ids[name]);\n      }\n\n      // register as constant violation\n      path.scope.registerConstantViolation(path);\n    }\n\n    // register references\n    for (const ref of state.references) {\n      const binding = ref.scope.getBinding(ref.node.name);\n      if (binding) {\n        binding.reference(ref);\n      } else {\n        programParent.addGlobal(ref.node);\n      }\n    }\n\n    // register constant violations\n    for (const path of state.constantViolations) {\n      path.scope.registerConstantViolation(path);\n    }\n  }\n\n  push(opts: {\n    id: t.ArrayPattern | t.Identifier | t.ObjectPattern;\n    init?: t.Expression;\n    unique?: boolean;\n    _blockHoist?: number | undefined;\n    kind?: \"var\" | \"let\" | \"const\";\n  }) {\n    let path = this.path;\n\n    if (path.isPattern()) {\n      path = this.getPatternParent().path;\n    } else if (!path.isBlockStatement() && !path.isProgram()) {\n      path = this.getBlockParent().path;\n    }\n\n    if (path.isSwitchStatement()) {\n      path = (this.getFunctionParent() || this.getProgramParent()).path;\n    }\n\n    const { init, unique, kind = \"var\", id } = opts;\n\n    // When injecting a non-const non-initialized binding inside\n    // an IIFE, if the number of call arguments is less than or\n    // equal to the number of function parameters, we can safely\n    // inject the binding into the parameter list.\n    if (\n      !init &&\n      !unique &&\n      (kind === \"var\" || kind === \"let\") &&\n      path.isFunction() &&\n      // @ts-expect-error ArrowFunctionExpression never has a name\n      !path.node.name &&\n      isCallExpression(path.parent, { callee: path.node }) &&\n      path.parent.arguments.length <= path.node.params.length &&\n      isIdentifier(id)\n    ) {\n      path.pushContainer(\"params\", id);\n      path.scope.registerBinding(\n        \"param\",\n        path.get(\"params\")[path.node.params.length - 1],\n      );\n      return;\n    }\n\n    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {\n      path.ensureBlock();\n      path = path.get(\"body\");\n    }\n\n    const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;\n\n    const dataKey = `declaration:${kind}:${blockHoist}`;\n    let declarPath = !unique && path.getData(dataKey);\n\n    if (!declarPath) {\n      const declar = variableDeclaration(kind, []);\n      // @ts-expect-error todo(flow->ts): avoid modifying nodes\n      declar._blockHoist = blockHoist;\n\n      [declarPath] = (path as NodePath<t.BlockStatement>).unshiftContainer(\n        \"body\",\n        [declar],\n      );\n      if (!unique) path.setData(dataKey, declarPath);\n    }\n\n    const declarator = variableDeclarator(id, init);\n    const len = declarPath.node.declarations.push(declarator);\n    path.scope.registerBinding(kind, declarPath.get(\"declarations\")[len - 1]);\n  }\n\n  /**\n   * Walk up to the top of the scope tree and get the `Program`.\n   */\n\n  getProgramParent() {\n    let scope: Scope = this;\n    do {\n      if (scope.path.isProgram()) {\n        return scope;\n      }\n    } while ((scope = scope.parent));\n    throw new Error(\"Couldn't find a Program\");\n  }\n\n  /**\n   * Walk up the scope tree until we hit either a Function or return null.\n   */\n\n  getFunctionParent(): Scope | null {\n    let scope: Scope = this;\n    do {\n      if (scope.path.isFunctionParent()) {\n        return scope;\n      }\n    } while ((scope = scope.parent));\n    return null;\n  }\n\n  /**\n   * Walk up the scope tree until we hit either a BlockStatement/Loop/Program/Function/Switch or reach the\n   * very top and hit Program.\n   */\n\n  getBlockParent() {\n    let scope: Scope = this;\n    do {\n      if (scope.path.isBlockParent()) {\n        return scope;\n      }\n    } while ((scope = scope.parent));\n    throw new Error(\n      \"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\",\n    );\n  }\n\n  /**\n   * Walk up from a pattern scope (function param initializer) until we hit a non-pattern scope,\n   * then returns its block parent\n   * @returns An ancestry scope whose path is a block parent\n   */\n  getPatternParent() {\n    let scope: Scope = this;\n    do {\n      if (!scope.path.isPattern()) {\n        return scope.getBlockParent();\n      }\n    } while ((scope = scope.parent.parent));\n    throw new Error(\n      \"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\",\n    );\n  }\n\n  /**\n   * Walks the scope tree and gathers **all** bindings.\n   */\n\n  getAllBindings(): Record<string, Binding> {\n    const ids = Object.create(null);\n\n    let scope: Scope = this;\n    do {\n      for (const key of Object.keys(scope.bindings)) {\n        if (key in ids === false) {\n          ids[key] = scope.bindings[key];\n        }\n      }\n      scope = scope.parent;\n    } while (scope);\n\n    return ids;\n  }\n\n  bindingIdentifierEquals(name: string, node: t.Node): boolean {\n    return this.getBindingIdentifier(name) === node;\n  }\n\n  getBinding(name: string): Binding | undefined {\n    let scope: Scope = this;\n    let previousPath;\n\n    do {\n      const binding = scope.getOwnBinding(name);\n      if (binding) {\n        // Check if a pattern is a part of parameter expressions.\n        // Note: for performance reason we skip checking previousPath.parentPath.isFunction()\n        // because `scope.path` is validated as scope in packages/babel-types/src/validators/isScope.js\n        // That is, if a scope path is pattern, its parent must be Function/CatchClause\n\n        // Spec 9.2.10.28: The closure created by this expression should not have visibility of\n        // declarations in the function body. If the binding is not a `param`-kind (as function parameters)\n        // or `local`-kind (as id in function expression),\n        // then it must be defined inside the function body, thus it should be skipped\n        if (\n          previousPath?.isPattern() &&\n          binding.kind !== \"param\" &&\n          binding.kind !== \"local\"\n        ) {\n          // do nothing\n        } else {\n          return binding;\n        }\n      } else if (\n        !binding &&\n        name === \"arguments\" &&\n        scope.path.isFunction() &&\n        !scope.path.isArrowFunctionExpression()\n      ) {\n        break;\n      }\n      previousPath = scope.path;\n    } while ((scope = scope.parent));\n  }\n\n  getOwnBinding(name: string): Binding | undefined {\n    return this.bindings[name];\n  }\n\n  // todo: return probably can be undefined…\n  getBindingIdentifier(name: string): t.Identifier {\n    return this.getBinding(name)?.identifier;\n  }\n\n  // todo: flow->ts return probably can be undefined\n  getOwnBindingIdentifier(name: string): t.Identifier {\n    const binding = this.bindings[name];\n    return binding?.identifier;\n  }\n\n  hasOwnBinding(name: string) {\n    return !!this.getOwnBinding(name);\n  }\n\n  // By default, we consider generated UIDs as bindings.\n  // This is because they are almost always used to declare variables,\n  // and since the scope isn't always up-to-date it's better to assume that\n  // there is a variable with that name. The `noUids` option can be used to\n  // turn off this behavior, for example if you know that the generate UID\n  // was used to declare a variable in a different scope.\n  hasBinding(\n    name: string,\n    opts?: boolean | { noGlobals?: boolean; noUids?: boolean },\n  ) {\n    if (!name) return false;\n    let scope: Scope = this;\n    do {\n      if (scope.hasOwnBinding(name)) {\n        return true;\n      }\n    } while ((scope = scope.parent));\n\n    // TODO: Only accept the object form.\n    let noGlobals;\n    let noUids;\n    if (typeof opts === \"object\") {\n      noGlobals = opts.noGlobals;\n      noUids = opts.noUids;\n    } else if (typeof opts === \"boolean\") {\n      noGlobals = opts;\n    }\n\n    if (!noUids && this.hasUid(name)) return true;\n    if (!noGlobals && Scope.globals.includes(name)) return true;\n    if (!noGlobals && Scope.contextVariables.includes(name)) return true;\n    return false;\n  }\n\n  parentHasBinding(\n    name: string,\n    opts?: { noGlobals?: boolean; noUids?: boolean },\n  ) {\n    return this.parent?.hasBinding(name, opts);\n  }\n\n  /**\n   * Move a binding of `name` to another `scope`.\n   */\n\n  moveBindingTo(name: string, scope: Scope) {\n    const info = this.getBinding(name);\n    if (info) {\n      info.scope.removeOwnBinding(name);\n      info.scope = scope;\n      scope.bindings[name] = info;\n    }\n  }\n\n  removeOwnBinding(name: string) {\n    delete this.bindings[name];\n  }\n\n  removeBinding(name: string) {\n    // clear literal binding\n    this.getBinding(name)?.scope.removeOwnBinding(name);\n\n    // clear uids with this name - https://github.com/babel/babel/issues/2101\n    let scope: Scope = this;\n    do {\n      if (scope.uids[name]) {\n        scope.uids[name] = false;\n      }\n    } while ((scope = scope.parent));\n  }\n\n  /**\n   * Hoist all the `var` variable to the beginning of the function/program\n   * scope where their binding will be actually defined. For exmaple,\n   *     { var x = 2 }\n   * will be transformed to\n   *     var x; { x = 2 }\n   *\n   * @param emit A custom function to emit `var` declarations, for example to\n   *   emit them in a different scope.\n   */\n  hoistVariables(\n    emit: (id: t.Identifier, hasInit: boolean) => void = id =>\n      this.push({ id }),\n  ) {\n    this.crawl();\n\n    const seen = new Set();\n    for (const name of Object.keys(this.bindings)) {\n      const binding = this.bindings[name];\n      if (!binding) continue;\n      const { path } = binding;\n      if (!path.isVariableDeclarator()) continue;\n      const { parent, parentPath } = path;\n\n      if (parent.kind !== \"var\" || seen.has(parent)) continue;\n      seen.add(path.parent);\n\n      let firstId;\n      const init = [];\n      for (const decl of parent.declarations) {\n        firstId ??= decl.id;\n        if (decl.init) {\n          init.push(assignmentExpression(\"=\", decl.id, decl.init));\n        }\n\n        const ids = Object.keys(getBindingIdentifiers(decl, false, true, true));\n        for (const name of ids) {\n          emit(identifier(name), decl.init != null);\n        }\n      }\n\n      // for (var i in test)\n      if (parentPath.parentPath.isFor({ left: parent })) {\n        parentPath.replaceWith(firstId);\n      } else if (init.length === 0) {\n        parentPath.remove();\n      } else {\n        const expr = init.length === 1 ? init[0] : sequenceExpression(init);\n        if (parentPath.parentPath.isForStatement({ init: parent })) {\n          parentPath.replaceWith(expr);\n        } else {\n          parentPath.replaceWith(expressionStatement(expr));\n        }\n      }\n    }\n  }\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  /** @deprecated Not used in our codebase */\n  // @ts-expect-error Babel 7 compatibility\n  Scope.prototype._renameFromMap = function _renameFromMap(\n    map: Record<string | symbol, unknown>,\n    oldName: string | symbol,\n    newName: string | symbol,\n    value: unknown,\n  ) {\n    if (map[oldName]) {\n      map[newName] = value;\n      map[oldName] = null;\n    }\n  };\n\n  /**\n   * Traverse node with current scope and path.\n   *\n   * !!! WARNING !!!\n   * This method assumes that `this.path` is the NodePath representing `node`.\n   * After running the traversal, the `.parentPath` of the NodePaths\n   * corresponding to `node`'s children will be set to `this.path`.\n   *\n   * There is no good reason to use this method, since the only safe way to use\n   * it is equivalent to `scope.path.traverse(opts, state)`.\n   */\n  // @ts-expect-error Babel 7 compatibility\n  Scope.prototype.traverse = function <S>(\n    this: Scope,\n    node: any,\n    opts: any,\n    state?: S,\n  ) {\n    traverse(node, opts, this, state, this.path);\n  };\n\n  /**\n   * Generate an `_id1`.\n   */\n  // @ts-expect-error Babel 7 compatibility\n  Scope.prototype._generateUid = function _generateUid(\n    name: string,\n    i: number,\n  ) {\n    let id = name;\n    if (i > 1) id += i;\n    return `_${id}`;\n  };\n\n  // TODO: (Babel 8) Split i in two parameters, and use an object of flags\n  // @ts-expect-error Babel 7 compatibility\n  Scope.prototype.toArray = function toArray(\n    this: Scope,\n    node: t.Node,\n    i?: number | boolean,\n    arrayLikeIsIterable?: boolean | void,\n  ) {\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (binding?.constant && binding.path.isGenericType(\"Array\")) {\n        return node;\n      }\n    }\n\n    if (isArrayExpression(node)) {\n      return node;\n    }\n\n    if (isIdentifier(node, { name: \"arguments\" })) {\n      return callExpression(\n        memberExpression(\n          memberExpression(\n            memberExpression(identifier(\"Array\"), identifier(\"prototype\")),\n            identifier(\"slice\"),\n          ),\n          identifier(\"call\"),\n        ),\n        [node],\n      );\n    }\n\n    let helperName;\n    const args = [node];\n    if (i === true) {\n      // Used in array-spread to create an array.\n      helperName = \"toConsumableArray\";\n    } else if (typeof i === \"number\") {\n      args.push(numericLiteral(i));\n\n      // Used in array-rest to create an array from a subset of an iterable.\n      helperName = \"slicedToArray\";\n      // TODO if (this.hub.isLoose(\"es6.forOf\")) helperName += \"-loose\";\n    } else {\n      // Used in array-rest to create an array\n      helperName = \"toArray\";\n    }\n\n    if (arrayLikeIsIterable) {\n      args.unshift(this.path.hub.addHelper(helperName));\n      helperName = \"maybeArrayLike\";\n    }\n\n    // @ts-expect-error todo(flow->ts): t.Node is not valid to use in args, function argument typeneeds to be clarified\n    return callExpression(this.path.hub.addHelper(helperName), args);\n  };\n\n  /**\n   * Walks the scope tree and gathers all declarations of `kind`.\n   */\n  // @ts-expect-error Babel 7 compatibility\n  Scope.prototype.getAllBindingsOfKind = function getAllBindingsOfKind(\n    ...kinds: string[]\n  ): Record<string, Binding> {\n    const ids = Object.create(null);\n\n    for (const kind of kinds) {\n      let scope: Scope = this;\n      do {\n        for (const name of Object.keys(scope.bindings)) {\n          const binding = scope.bindings[name];\n          if (binding.kind === kind) ids[name] = binding;\n        }\n        scope = scope.parent;\n      } while (scope);\n    }\n\n    return ids;\n  };\n\n  Object.defineProperties(Scope.prototype, {\n    parentBlock: {\n      configurable: true,\n      enumerable: true,\n      get(this: Scope) {\n        return this.path.parent;\n      },\n    },\n    hub: {\n      configurable: true,\n      enumerable: true,\n      get(this: Scope) {\n        return this.path.hub;\n      },\n    },\n  });\n}\n\ntype _Binding = Binding;\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace Scope {\n  export type Binding = _Binding;\n}\n"],"names":["_renamer","require","_index","_binding","_globals","_t","t","_cache","_visitors","NOT_LOCAL_BINDING","assignmentExpression","callExpression","cloneNode","getBindingIdentifiers","identifier","isArrayExpression","isBinary","isCallExpression","isClass","isClassBody","isClassDeclaration","isExportAllDeclaration","isExportDefaultDeclaration","isExportNamedDeclaration","isFunctionDeclaration","isIdentifier","isImportDeclaration","isLiteral","isMemberExpression","isMethod","isModuleSpecifier","isNullLiteral","isObjectExpression","isProperty","isPureish","isRegExpLiteral","isSuper","isTaggedTemplateExpression","isTemplateLiteral","isThisExpression","isUnaryExpression","isVariableDeclaration","expressionStatement","matchesPattern","memberExpression","numericLiteral","toIdentifier","variableDeclaration","variableDeclarator","isRecordExpression","isTupleExpression","isObjectProperty","isTopicReference","isMetaProperty","isPrivateName","isExportDeclaration","buildUndefinedNode","sequenceExpression","gatherNodeParts","node","parts","type","_node$specifiers","source","specifiers","length","e","declaration","local","push","value","object","property","name","callee","properties","argument","key","left","id","expression","meta","openingElement","openingFragment","namespace","collectorVisitor","ForStatement","path","declar","get","isVar","scope","parentScope","getFunctionParent","getProgramParent","registerBinding","Declaration","isBlockScoped","parent","registerDeclaration","ImportDeclaration","getBlockParent","ReferencedIdentifier","state","references","ForXStatement","isPattern","constantViolations","ExportDeclaration","exit","binding","getBinding","reference","decl","declarations","Object","keys","LabeledStatement","AssignmentExpression","assignments","UpdateExpression","UnaryExpression","operator","BlockScoped","bindings","CatchClause","Function","params","param","isFunctionExpression","ClassExpression","TSTypeAnnotation","skip","uid","Scope","constructor","block","inited","labels","globals","uids","data","crawling","cached","scopeCache","set","Map","_parent","_path","shouldSkip","listKey","parentPath","isScope","generateDeclaredUidIdentifier","generateUidIdentifier","generateUid","replace","i","hasLabel","hasBinding","hasGlobal","hasReference","program","generateUidBasedOnNode","defaultName","join","slice","generateUidIdentifierBasedOnNode","isStatic","constant","maybeGenerateMemoised","dontPush","checkBlockScopedCollisions","kind","duplicate","hub","buildError","TypeError","rename","oldName","newName","renamer","Renamer","arguments","dump","sep","repeat","console","log","violations","getLabel","registerLabel","label","isLabeledStatement","declare","isTypeDeclaration","importKind","specifier","isTypeSpecifier","isImportSpecifier","registerConstantViolation","ids","getAssignmentIdentifiers","_this$getBinding","reassign","bindingPath","ReferenceError","declarators","getOuterBindingIdentifiers","getOwnBinding","Binding","addGlobal","hasUid","isPure","constantsOnly","_node$decorators","superClass","decorators","body","method","right","elem","elements","prop","_node$decorators2","computed","_node$decorators3","static","expressions","tag","noGlobals","quasi","isStringLiteral","setData","val","getData","removeData","init","crawl","create","isProgram","programParent","isExplodedVisitor","visit","enter","call","typeVisitors","traverse","ref","opts","getPatternParent","isBlockStatement","isSwitchStatement","unique","isFunction","pushContainer","isLoop","isCatchClause","ensureBlock","blockHoist","_blockHoist","dataKey","declarPath","unshiftContainer","declarator","len","Error","isFunctionParent","isBlockParent","getAllBindings","bindingIdentifierEquals","getBindingIdentifier","previousPath","_previousPath","isArrowFunctionExpression","_this$getBinding2","getOwnBindingIdentifier","hasOwnBinding","noUids","includes","contextVariables","parentHasBinding","_this$parent","moveBindingTo","info","removeOwnBinding","removeBinding","_this$getBinding3","hoistVariables","emit","seen","Set","isVariableDeclarator","has","add","firstId","_firstId","isFor","replaceWith","remove","expr","isForStatement","exports","default","builtin","prototype","_renameFromMap","map","_generateUid","toArray","arrayLikeIsIterable","isGenericType","helperName","args","unshift","addHelper","getAllBindingsOfKind","kinds","defineProperties","parentBlock","configurable","enumerable"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1613, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1618, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/ancestry.ts"],"sourcesContent":["// This file contains that retrieve or validate anything related to the current paths ancestry.\n\nimport { VISITOR_KEYS } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type NodePath from \"./index.ts\";\n\n/**\n * Starting at the parent path of the current `NodePath` and going up the\n * tree, return the first `NodePath` that causes the provided `callback`\n * to return a truthy value, or `null` if the `callback` never returns a\n * truthy value.\n */\n\nexport function findParent(\n  this: NodePath,\n  callback: (path: NodePath) => boolean,\n): NodePath | null {\n  let path = this;\n  while ((path = path.parentPath)) {\n    if (callback(path)) return path;\n  }\n  return null;\n}\n\n/**\n * Starting at current `NodePath` and going up the tree, return the first\n * `NodePath` that causes the provided `callback` to return a truthy value,\n * or `null` if the `callback` never returns a truthy value.\n */\n\nexport function find(\n  this: NodePath,\n  callback: (path: NodePath) => boolean,\n): NodePath | null {\n  let path = this;\n  do {\n    if (callback(path)) return path;\n  } while ((path = path.parentPath));\n  return null;\n}\n\n/**\n * Get the parent function of the current path.\n */\n\nexport function getFunctionParent(this: NodePath): NodePath<t.Function> | null {\n  return this.findParent(p => p.isFunction()) as NodePath<t.Function> | null;\n}\n\n/**\n * Walk up the tree until we hit a parent node path in a list.\n */\n\nexport function getStatementParent(this: NodePath): NodePath<t.Statement> {\n  let path = this;\n\n  do {\n    if (\n      !path.parentPath ||\n      (Array.isArray(path.container) && path.isStatement())\n    ) {\n      break;\n    } else {\n      path = path.parentPath;\n    }\n  } while (path);\n\n  if (path && (path.isProgram() || path.isFile())) {\n    throw new Error(\n      \"File/Program node, we can't possibly find a statement parent to this\",\n    );\n  }\n\n  return path as NodePath<t.Statement>;\n}\n\n/**\n * Get the deepest common ancestor and then from it, get the earliest relationship path\n * to that ancestor.\n *\n * Earliest is defined as being \"before\" all the other nodes in terms of list container\n * position and visiting key.\n */\n\nexport function getEarliestCommonAncestorFrom(\n  this: NodePath,\n  paths: Array<NodePath>,\n): NodePath {\n  return this.getDeepestCommonAncestorFrom(\n    paths,\n    function (deepest, i, ancestries) {\n      let earliest;\n      const keys = VISITOR_KEYS[deepest.type];\n\n      for (const ancestry of ancestries) {\n        const path = ancestry[i + 1];\n\n        // first path\n        if (!earliest) {\n          earliest = path;\n          continue;\n        }\n\n        // handle containers\n        if (path.listKey && earliest.listKey === path.listKey) {\n          // we're in the same container so check if we're earlier\n          if (path.key < earliest.key) {\n            earliest = path;\n            continue;\n          }\n        }\n\n        // handle keys\n        const earliestKeyIndex = keys.indexOf(earliest.parentKey);\n        const currentKeyIndex = keys.indexOf(path.parentKey);\n        if (earliestKeyIndex > currentKeyIndex) {\n          // key appears before so it's earlier\n          earliest = path;\n        }\n      }\n\n      return earliest;\n    },\n  );\n}\n\n/**\n * Get the earliest path in the tree where the provided `paths` intersect.\n *\n * TODO: Possible optimisation target.\n */\n\nexport function getDeepestCommonAncestorFrom(\n  this: NodePath,\n  paths: Array<NodePath>,\n  filter?: (deepest: NodePath, i: number, ancestries: NodePath[][]) => NodePath,\n): NodePath {\n  if (!paths.length) {\n    return this;\n  }\n\n  if (paths.length === 1) {\n    return paths[0];\n  }\n\n  // minimum depth of the tree so we know the highest node\n  let minDepth = Infinity;\n\n  // last common ancestor\n  let lastCommonIndex, lastCommon;\n\n  // get the ancestors of the path, breaking when the parent exceeds ourselves\n  const ancestries = paths.map(path => {\n    const ancestry: NodePath[] = [];\n\n    do {\n      ancestry.unshift(path);\n    } while ((path = path.parentPath) && path !== this);\n\n    // save min depth to avoid going too far in\n    if (ancestry.length < minDepth) {\n      minDepth = ancestry.length;\n    }\n\n    return ancestry;\n  });\n\n  // get the first ancestry so we have a seed to assess all other ancestries with\n  const first = ancestries[0];\n\n  // check ancestor equality\n  depthLoop: for (let i = 0; i < minDepth; i++) {\n    const shouldMatch = first[i];\n\n    for (const ancestry of ancestries) {\n      if (ancestry[i] !== shouldMatch) {\n        // we've hit a snag\n        break depthLoop;\n      }\n    }\n\n    // next iteration may break so store these so they can be returned\n    lastCommonIndex = i;\n    lastCommon = shouldMatch;\n  }\n\n  if (lastCommon) {\n    if (filter) {\n      return filter(lastCommon, lastCommonIndex, ancestries);\n    } else {\n      return lastCommon;\n    }\n  } else {\n    throw new Error(\"Couldn't find intersection\");\n  }\n}\n\n/**\n * Build an array of node paths containing the entire ancestry of the current node path.\n *\n * NOTE: The current node path is included in this.\n */\n\nexport function getAncestry(this: NodePath): Array<NodePath> {\n  let path = this;\n  const paths = [];\n  do {\n    paths.push(path);\n  } while ((path = path.parentPath));\n  return paths;\n}\n\n/**\n * A helper to find if `this` path is an ancestor of @param maybeDescendant\n */\nexport function isAncestor(this: NodePath, maybeDescendant: NodePath): boolean {\n  return maybeDescendant.isDescendant(this);\n}\n\n/**\n * A helper to find if `this` path is a descendant of @param maybeAncestor\n */\nexport function isDescendant(this: NodePath, maybeAncestor: NodePath): boolean {\n  return !!this.findParent(parent => parent === maybeAncestor);\n}\n\nexport function inType(this: NodePath, ...candidateTypes: string[]): boolean {\n  let path = this;\n  while (path) {\n    for (const type of candidateTypes) {\n      if (path.node.type === type) return true;\n    }\n    path = path.parentPath;\n  }\n\n  return false;\n}\n"],"names":["_t","require","VISITOR_KEYS","findParent","callback","path","parentPath","find","getFunctionParent","p","isFunction","getStatementParent","Array","isArray","container","isStatement","isProgram","isFile","Error","getEarliestCommonAncestorFrom","paths","getDeepestCommonAncestorFrom","deepest","i","ancestries","earliest","keys","type","ancestry","listKey","key","earliestKeyIndex","indexOf","parentKey","currentKeyIndex","filter","length","minDepth","Infinity","lastCommonIndex","lastCommon","map","unshift","first","depthLoop","shouldMatch","getAncestry","push","isAncestor","maybeDescendant","isDescendant","maybeAncestor","parent","inType","candidateTypes","node"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1754, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1759, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/inference/util.ts"],"sourcesContent":["import {\n  createFlowUnionType,\n  createTSUnionType,\n  createUnionTypeAnnotation,\n  isFlowType,\n  isTSType,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nexport function createUnionType(\n  types: (t.FlowType | t.TSType)[],\n): t.FlowType | t.TSType | undefined {\n  if (process.env.BABEL_8_BREAKING) {\n    if (types.every(v => isFlowType(v))) {\n      return createFlowUnionType(types);\n    }\n    if (types.every(v => isTSType(v))) {\n      return createTSUnionType(types);\n    }\n  } else {\n    if (types.every(v => isFlowType(v))) {\n      if (createFlowUnionType) {\n        return createFlowUnionType(types);\n      }\n\n      return createUnionTypeAnnotation(types);\n    } else if (types.every(v => isTSType(v))) {\n      if (createTSUnionType) {\n        return createTSUnionType(types);\n      }\n    }\n  }\n}\n"],"names":["_t","require","createFlowUnionType","createTSUnionType","createUnionTypeAnnotation","isFlowType","isTSType","createUnionType","types","every","v"],"mappings":";;;;;AAAA,IAAAA,EAAA,GAAAC,OAAA;AAMsB,MAAA,EALpBC,mBAAmB,EACnBC,iBAAiB,EACjBC,yBAAyB,EACzBC,UAAU,EACVC,QAAAA,EAAQ,GAAAN,EAAA;AAIH,SAASO,eAAeA,CAC7BC,KAAgC,EACG;IAQ5B;QACL,IAAIA,KAAK,CAACC,KAAK,EAACC,CAAC,GAAIL,UAAU,CAACK,CAAC,CAAC,CAAC,EAAE;YACnC,IAAIR,mBAAmB,EAAE;gBACvB,OAAOA,mBAAmB,CAACM,KAAK,CAAC;YACnC;YAEA,OAAOJ,yBAAyB,CAACI,KAAK,CAAC;QACzC,CAAC,MAAM,IAAIA,KAAK,CAACC,KAAK,EAACC,CAAC,GAAIJ,QAAQ,CAACI,CAAC,CAAC,CAAC,EAAE;YACxC,IAAIP,iBAAiB,EAAE;gBACrB,OAAOA,iBAAiB,CAACK,KAAK,CAAC;YACjC;QACF;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 1780, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1785, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/inference/inferer-reference.ts"],"sourcesContent":["import type NodePath from \"../index.ts\";\nimport {\n  BOOLEAN_NUMBER_BINARY_OPERATORS,\n  createTypeAnnotationBasedOnTypeof,\n  numberTypeAnnotation,\n  voidTypeAnnotation,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type Binding from \"../../scope/binding.ts\";\n\nimport { createUnionType } from \"./util.ts\";\n\nexport default function (this: NodePath<t.Identifier>, node: t.Identifier) {\n  if (!this.isReferenced()) return;\n\n  // check if a binding exists of this value and if so then return a union type of all\n  // possible types that the binding could be\n  const binding = this.scope.getBinding(node.name);\n  if (binding) {\n    if (binding.identifier.typeAnnotation) {\n      return binding.identifier.typeAnnotation;\n    } else {\n      return getTypeAnnotationBindingConstantViolations(\n        binding,\n        this,\n        node.name,\n      );\n    }\n  }\n\n  // built-in values\n  if (node.name === \"undefined\") {\n    return voidTypeAnnotation();\n  } else if (node.name === \"NaN\" || node.name === \"Infinity\") {\n    return numberTypeAnnotation();\n  } else if (node.name === \"arguments\") {\n    // todo\n  }\n}\n\nfunction getTypeAnnotationBindingConstantViolations(\n  binding: Binding,\n  path: NodePath<t.Identifier>,\n  name: string,\n) {\n  const types = [];\n\n  const functionConstantViolations: NodePath[] = [];\n  let constantViolations = getConstantViolationsBefore(\n    binding,\n    path,\n    functionConstantViolations,\n  );\n\n  const testType = getConditionalAnnotation(binding, path, name);\n  if (testType) {\n    const testConstantViolations = getConstantViolationsBefore(\n      binding,\n      testType.ifStatement,\n    );\n\n    // remove constant violations observed before the IfStatement\n    constantViolations = constantViolations.filter(\n      path => !testConstantViolations.includes(path),\n    );\n\n    // clear current types and add in observed test type\n    types.push(testType.typeAnnotation);\n  }\n\n  if (constantViolations.length) {\n    // pick one constant from each scope which will represent the last possible\n    // control flow path that it could've taken/been\n    /* This code is broken for the following problems:\n     * It thinks that assignments can only happen in scopes.\n     * What about conditionals, if statements without block,\n     * or guarded assignments.\n     * It also checks to see if one of the assignments is in the\n     * same scope and uses that as the only \"violation\". However,\n     * the binding is returned by `getConstantViolationsBefore` so we for\n     * sure always going to return that as the only \"violation\".\n    let rawConstantViolations = constantViolations.reverse();\n    let visitedScopes = [];\n    constantViolations = [];\n    for (let violation of (rawConstantViolations: Array<NodePath>)) {\n      let violationScope = violation.scope;\n      if (visitedScopes.indexOf(violationScope) >= 0) continue;\n\n      visitedScopes.push(violationScope);\n      constantViolations.push(violation);\n\n      if (violationScope === path.scope) {\n        constantViolations = [violation];\n        break;\n      }\n    }*/\n\n    // add back on function constant violations since we can't track calls\n    constantViolations.push(...functionConstantViolations);\n\n    // push on inferred types of violated paths\n    for (const violation of constantViolations) {\n      types.push(violation.getTypeAnnotation());\n    }\n  }\n\n  if (!types.length) {\n    return;\n  }\n\n  return createUnionType(types);\n}\n\nfunction getConstantViolationsBefore(\n  binding: Binding,\n  path: NodePath,\n  functions?: NodePath[],\n) {\n  const violations = binding.constantViolations.slice();\n  violations.unshift(binding.path);\n  return violations.filter(violation => {\n    violation = violation.resolve();\n    const status = violation._guessExecutionStatusRelativeTo(path);\n    if (functions && status === \"unknown\") functions.push(violation);\n    return status === \"before\";\n  });\n}\n\nfunction inferAnnotationFromBinaryExpression(\n  name: string,\n  path: NodePath<t.BinaryExpression>,\n) {\n  const operator = path.node.operator;\n\n  const right = path.get(\"right\").resolve();\n  const left = path.get(\"left\").resolve();\n\n  let target;\n  if (left.isIdentifier({ name })) {\n    target = right;\n  } else if (right.isIdentifier({ name })) {\n    target = left;\n  }\n\n  if (target) {\n    if (operator === \"===\") {\n      return target.getTypeAnnotation();\n    }\n    if (BOOLEAN_NUMBER_BINARY_OPERATORS.includes(operator)) {\n      return numberTypeAnnotation();\n    }\n\n    return;\n  }\n\n  if (operator !== \"===\" && operator !== \"==\") return;\n\n  let typeofPath: NodePath<t.UnaryExpression>;\n  let typePath: NodePath<t.Expression>;\n  if (left.isUnaryExpression({ operator: \"typeof\" })) {\n    typeofPath = left;\n    typePath = right as NodePath<t.Expression>;\n  } else if (right.isUnaryExpression({ operator: \"typeof\" })) {\n    typeofPath = right;\n    typePath = left as NodePath<t.Expression>;\n  }\n\n  if (!typeofPath) return;\n  // and that the argument of the typeof path references us!\n  if (!typeofPath.get(\"argument\").isIdentifier({ name })) return;\n\n  // ensure that the type path is a Literal\n  typePath = typePath.resolve() as NodePath<t.Expression>;\n  if (!typePath.isLiteral()) return;\n\n  // and that it's a string so we can infer it\n  // @ts-expect-error todo(flow->ts): value is not defined for NullLiteral and some other\n  const typeValue = typePath.node.value;\n  if (typeof typeValue !== \"string\") return;\n\n  // turn type value into a type annotation\n  // @ts-expect-error todo(flow->ts): move validation from helper or relax type constraint to just a string\n  return createTypeAnnotationBasedOnTypeof(typeValue);\n}\n\nfunction getParentConditionalPath(\n  binding: Binding,\n  path: NodePath,\n  name: string,\n) {\n  let parentPath;\n  while ((parentPath = path.parentPath)) {\n    if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {\n      if (path.key === \"test\") {\n        return;\n      }\n\n      return parentPath as NodePath<t.IfStatement | t.ConditionalExpression>;\n    }\n    if (parentPath.isFunction()) {\n      if (parentPath.parentPath.scope.getBinding(name) !== binding) return;\n    }\n\n    path = parentPath;\n  }\n}\n\nfunction getConditionalAnnotation<T extends t.Node>(\n  binding: Binding,\n  path: NodePath<T>,\n  name?: string,\n): {\n  typeAnnotation: t.FlowType | t.TSType;\n  ifStatement: NodePath<t.IfStatement | t.ConditionalExpression>;\n} {\n  const ifStatement = getParentConditionalPath(binding, path, name);\n  if (!ifStatement) return;\n\n  const test = ifStatement.get(\"test\");\n  const paths = [test];\n  const types = [];\n\n  for (let i = 0; i < paths.length; i++) {\n    const path = paths[i];\n\n    if (path.isLogicalExpression()) {\n      if (path.node.operator === \"&&\") {\n        paths.push(path.get(\"left\"));\n        paths.push(path.get(\"right\"));\n      }\n    } else if (path.isBinaryExpression()) {\n      const type = inferAnnotationFromBinaryExpression(name, path);\n      if (type) types.push(type);\n    }\n  }\n\n  if (types.length) {\n    return {\n      typeAnnotation: createUnionType(types),\n      ifStatement,\n    };\n  }\n\n  return getConditionalAnnotation(binding, ifStatement, name);\n}\n"],"names":["_t","require","_util","BOOLEAN_NUMBER_BINARY_OPERATORS","createTypeAnnotationBasedOnTypeof","numberTypeAnnotation","voidTypeAnnotation","_default","node","isReferenced","binding","scope","getBinding","name","identifier","typeAnnotation","getTypeAnnotationBindingConstantViolations","path","types","functionConstantViolations","constantViolations","getConstantViolationsBefore","testType","getConditionalAnnotation","testConstantViolations","ifStatement","filter","includes","push","length","violation","getTypeAnnotation","createUnionType","functions","violations","slice","unshift","resolve","status","_guessExecutionStatusRelativeTo","inferAnnotationFromBinaryExpression","operator","right","get","left","target","isIdentifier","typeofPath","typePath","isUnaryExpression","isLiteral","typeValue","value","getParentConditionalPath","parentPath","isIfStatement","isConditionalExpression","key","isFunction","test","paths","i","isLogicalExpression","isBinaryExpression","type"],"mappings":";;;;;AACA,IAAAA,EAAA,GAAAC,OAAA;AASA,IAAAC,KAAA,GAAAD,OAAA;AAA4C,MAAA,EAR1CE,+BAA+B,EAC/BC,iCAAiC,EACjCC,oBAAoB,EACpBC,kBAAAA,EAAkB,GAAAN,EAAA;AAOL,SAAAO,SAAwCC,IAAkB,EAAE;IACzE,IAAI,CAAC,IAAI,CAACC,YAAY,CAAC,CAAC,EAAE;IAI1B,MAAMC,OAAO,GAAG,IAAI,CAACC,KAAK,CAACC,UAAU,CAACJ,IAAI,CAACK,IAAI,CAAC;IAChD,IAAIH,OAAO,EAAE;QACX,IAAIA,OAAO,CAACI,UAAU,CAACC,cAAc,EAAE;YACrC,OAAOL,OAAO,CAACI,UAAU,CAACC,cAAc;QAC1C,CAAC,MAAM;YACL,OAAOC,0CAA0C,CAC/CN,OAAO,EACP,IAAI,EACJF,IAAI,CAACK,IACP,CAAC;QACH;IACF;IAGA,IAAIL,IAAI,CAACK,IAAI,KAAK,WAAW,EAAE;QAC7B,OAAOP,kBAAkB,CAAC,CAAC;IAC7B,CAAC,MAAM,IAAIE,IAAI,CAACK,IAAI,KAAK,KAAK,IAAIL,IAAI,CAACK,IAAI,KAAK,UAAU,EAAE;QAC1D,OAAOR,oBAAoB,CAAC,CAAC;IAC/B,CAAC,MAAM,IAAIG,IAAI,CAACK,IAAI,KAAK,WAAW,EAAE,CAEtC;AACF;AAEA,SAASG,0CAA0CA,CACjDN,OAAgB,EAChBO,IAA4B,EAC5BJ,IAAY,EACZ;IACA,MAAMK,KAAK,GAAG,EAAE;IAEhB,MAAMC,0BAAsC,GAAG,EAAE;IACjD,IAAIC,kBAAkB,GAAGC,2BAA2B,CAClDX,OAAO,EACPO,IAAI,EACJE,0BACF,CAAC;IAED,MAAMG,QAAQ,GAAGC,wBAAwB,CAACb,OAAO,EAAEO,IAAI,EAAEJ,IAAI,CAAC;IAC9D,IAAIS,QAAQ,EAAE;QACZ,MAAME,sBAAsB,GAAGH,2BAA2B,CACxDX,OAAO,EACPY,QAAQ,CAACG,WACX,CAAC;QAGDL,kBAAkB,GAAGA,kBAAkB,CAACM,MAAM,EAC5CT,IAAI,GAAI,CAACO,sBAAsB,CAACG,QAAQ,CAACV,IAAI,CAC/C,CAAC;QAGDC,KAAK,CAACU,IAAI,CAACN,QAAQ,CAACP,cAAc,CAAC;IACrC;IAEA,IAAIK,kBAAkB,CAACS,MAAM,EAAE;QA4B7BT,kBAAkB,CAACQ,IAAI,CAAC,GAAGT,0BAA0B,CAAC;QAGtD,KAAK,MAAMW,SAAS,IAAIV,kBAAkB,CAAE;YAC1CF,KAAK,CAACU,IAAI,CAACE,SAAS,CAACC,iBAAiB,CAAC,CAAC,CAAC;QAC3C;IACF;IAEA,IAAI,CAACb,KAAK,CAACW,MAAM,EAAE;QACjB;IACF;IAEA,OAAO,CAAA,GAAAG,MAAAA,eAAe,EAACd,KAAK,CAAC;AAC/B;AAEA,SAASG,2BAA2BA,CAClCX,OAAgB,EAChBO,IAAc,EACdgB,SAAsB,EACtB;IACA,MAAMC,UAAU,GAAGxB,OAAO,CAACU,kBAAkB,CAACe,KAAK,CAAC,CAAC;IACrDD,UAAU,CAACE,OAAO,CAAC1B,OAAO,CAACO,IAAI,CAAC;IAChC,OAAOiB,UAAU,CAACR,MAAM,EAACI,SAAS,IAAI;QACpCA,SAAS,GAAGA,SAAS,CAACO,OAAO,CAAC,CAAC;QAC/B,MAAMC,MAAM,GAAGR,SAAS,CAACS,+BAA+B,CAACtB,IAAI,CAAC;QAC9D,IAAIgB,SAAS,IAAIK,MAAM,KAAK,SAAS,EAAEL,SAAS,CAACL,IAAI,CAACE,SAAS,CAAC;QAChE,OAAOQ,MAAM,KAAK,QAAQ;IAC5B,CAAC,CAAC;AACJ;AAEA,SAASE,mCAAmCA,CAC1C3B,IAAY,EACZI,IAAkC,EAClC;IACA,MAAMwB,QAAQ,GAAGxB,IAAI,CAACT,IAAI,CAACiC,QAAQ;IAEnC,MAAMC,KAAK,GAAGzB,IAAI,CAAC0B,GAAG,CAAC,OAAO,CAAC,CAACN,OAAO,CAAC,CAAC;IACzC,MAAMO,IAAI,GAAG3B,IAAI,CAAC0B,GAAG,CAAC,MAAM,CAAC,CAACN,OAAO,CAAC,CAAC;IAEvC,IAAIQ,MAAM;IACV,IAAID,IAAI,CAACE,YAAY,CAAC;QAAEjC;IAAK,CAAC,CAAC,EAAE;QAC/BgC,MAAM,GAAGH,KAAK;IAChB,CAAC,MAAM,IAAIA,KAAK,CAACI,YAAY,CAAC;QAAEjC;IAAK,CAAC,CAAC,EAAE;QACvCgC,MAAM,GAAGD,IAAI;IACf;IAEA,IAAIC,MAAM,EAAE;QACV,IAAIJ,QAAQ,KAAK,KAAK,EAAE;YACtB,OAAOI,MAAM,CAACd,iBAAiB,CAAC,CAAC;QACnC;QACA,IAAI5B,+BAA+B,CAACwB,QAAQ,CAACc,QAAQ,CAAC,EAAE;YACtD,OAAOpC,oBAAoB,CAAC,CAAC;QAC/B;QAEA;IACF;IAEA,IAAIoC,QAAQ,KAAK,KAAK,IAAIA,QAAQ,KAAK,IAAI,EAAE;IAE7C,IAAIM,UAAuC;IAC3C,IAAIC,QAAgC;IACpC,IAAIJ,IAAI,CAACK,iBAAiB,CAAC;QAAER,QAAQ,EAAE;IAAS,CAAC,CAAC,EAAE;QAClDM,UAAU,GAAGH,IAAI;QACjBI,QAAQ,GAAGN,KAA+B;IAC5C,CAAC,MAAM,IAAIA,KAAK,CAACO,iBAAiB,CAAC;QAAER,QAAQ,EAAE;IAAS,CAAC,CAAC,EAAE;QAC1DM,UAAU,GAAGL,KAAK;QAClBM,QAAQ,GAAGJ,IAA8B;IAC3C;IAEA,IAAI,CAACG,UAAU,EAAE;IAEjB,IAAI,CAACA,UAAU,CAACJ,GAAG,CAAC,UAAU,CAAC,CAACG,YAAY,CAAC;QAAEjC;IAAK,CAAC,CAAC,EAAE;IAGxDmC,QAAQ,GAAGA,QAAQ,CAACX,OAAO,CAAC,CAA2B;IACvD,IAAI,CAACW,QAAQ,CAACE,SAAS,CAAC,CAAC,EAAE;IAI3B,MAAMC,SAAS,GAAGH,QAAQ,CAACxC,IAAI,CAAC4C,KAAK;IACrC,IAAI,OAAOD,SAAS,KAAK,QAAQ,EAAE;IAInC,OAAO/C,iCAAiC,CAAC+C,SAAS,CAAC;AACrD;AAEA,SAASE,wBAAwBA,CAC/B3C,OAAgB,EAChBO,IAAc,EACdJ,IAAY,EACZ;IACA,IAAIyC,UAAU;IACd,MAAQA,UAAU,GAAGrC,IAAI,CAACqC,UAAU,CAAG;QACrC,IAAIA,UAAU,CAACC,aAAa,CAAC,CAAC,IAAID,UAAU,CAACE,uBAAuB,CAAC,CAAC,EAAE;YACtE,IAAIvC,IAAI,CAACwC,GAAG,KAAK,MAAM,EAAE;gBACvB;YACF;YAEA,OAAOH,UAAU;QACnB;QACA,IAAIA,UAAU,CAACI,UAAU,CAAC,CAAC,EAAE;YAC3B,IAAIJ,UAAU,CAACA,UAAU,CAAC3C,KAAK,CAACC,UAAU,CAACC,IAAI,CAAC,KAAKH,OAAO,EAAE;QAChE;QAEAO,IAAI,GAAGqC,UAAU;IACnB;AACF;AAEA,SAAS/B,wBAAwBA,CAC/Bb,OAAgB,EAChBO,IAAiB,EACjBJ,IAAa,EAIb;IACA,MAAMY,WAAW,GAAG4B,wBAAwB,CAAC3C,OAAO,EAAEO,IAAI,EAAEJ,IAAI,CAAC;IACjE,IAAI,CAACY,WAAW,EAAE;IAElB,MAAMkC,IAAI,GAAGlC,WAAW,CAACkB,GAAG,CAAC,MAAM,CAAC;IACpC,MAAMiB,KAAK,GAAG;QAACD,IAAI;KAAC;IACpB,MAAMzC,KAAK,GAAG,EAAE;IAEhB,IAAK,IAAI2C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAAC/B,MAAM,EAAEgC,CAAC,EAAE,CAAE;QACrC,MAAM5C,IAAI,GAAG2C,KAAK,CAACC,CAAC,CAAC;QAErB,IAAI5C,IAAI,CAAC6C,mBAAmB,CAAC,CAAC,EAAE;YAC9B,IAAI7C,IAAI,CAACT,IAAI,CAACiC,QAAQ,KAAK,IAAI,EAAE;gBAC/BmB,KAAK,CAAChC,IAAI,CAACX,IAAI,CAAC0B,GAAG,CAAC,MAAM,CAAC,CAAC;gBAC5BiB,KAAK,CAAChC,IAAI,CAACX,IAAI,CAAC0B,GAAG,CAAC,OAAO,CAAC,CAAC;YAC/B;QACF,CAAC,MAAM,IAAI1B,IAAI,CAAC8C,kBAAkB,CAAC,CAAC,EAAE;YACpC,MAAMC,IAAI,GAAGxB,mCAAmC,CAAC3B,IAAI,EAAEI,IAAI,CAAC;YAC5D,IAAI+C,IAAI,EAAE9C,KAAK,CAACU,IAAI,CAACoC,IAAI,CAAC;QAC5B;IACF;IAEA,IAAI9C,KAAK,CAACW,MAAM,EAAE;QAChB,OAAO;YACLd,cAAc,EAAE,CAAA,GAAAiB,MAAAA,eAAe,EAACd,KAAK,CAAC;YACtCO;QACF,CAAC;IACH;IAEA,OAAOF,wBAAwB,CAACb,OAAO,EAAEe,WAAW,EAAEZ,IAAI,CAAC;AAC7D","ignoreList":[0]}},
    {"offset": {"line": 1930, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1935, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/inference/inferers.ts"],"sourcesContent":["import {\n  BOOLEAN_BINARY_OPERATORS,\n  BOOLEAN_UNARY_OPERATORS,\n  NUMBER_BINARY_OPERATORS,\n  NUMBER_UNARY_OPERATORS,\n  STRING_UNARY_OPERATORS,\n  anyTypeAnnotation,\n  arrayTypeAnnotation,\n  booleanTypeAnnotation,\n  buildMatchMemberExpression,\n  genericTypeAnnotation,\n  identifier,\n  nullLiteralTypeAnnotation,\n  numberTypeAnnotation,\n  stringTypeAnnotation,\n  tupleTypeAnnotation,\n  unionTypeAnnotation,\n  voidTypeAnnotation,\n  isIdentifier,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nexport { default as Identifier } from \"./inferer-reference.ts\";\n\nimport { createUnionType } from \"./util.ts\";\nimport type NodePath from \"../index.ts\";\n\nexport function VariableDeclarator(this: NodePath<t.VariableDeclarator>) {\n  if (!this.get(\"id\").isIdentifier()) return;\n  return this.get(\"init\").getTypeAnnotation();\n}\n\nexport function TypeCastExpression(node: t.TypeCastExpression) {\n  return node.typeAnnotation;\n}\n\nTypeCastExpression.validParent = true;\n\nexport function TSAsExpression(node: t.TSAsExpression) {\n  return node.typeAnnotation;\n}\n\nTSAsExpression.validParent = true;\n\nexport function TSNonNullExpression(this: NodePath<t.TSNonNullExpression>) {\n  return this.get(\"expression\").getTypeAnnotation();\n}\n\nexport function NewExpression(\n  this: NodePath<t.NewExpression>,\n  node: t.NewExpression,\n) {\n  if (node.callee.type === \"Identifier\") {\n    // only resolve identifier callee\n    return genericTypeAnnotation(node.callee);\n  }\n}\n\nexport function TemplateLiteral() {\n  return stringTypeAnnotation();\n}\n\nexport function UnaryExpression(node: t.UnaryExpression) {\n  const operator = node.operator;\n\n  if (operator === \"void\") {\n    return voidTypeAnnotation();\n  } else if (NUMBER_UNARY_OPERATORS.includes(operator)) {\n    return numberTypeAnnotation();\n  } else if (STRING_UNARY_OPERATORS.includes(operator)) {\n    return stringTypeAnnotation();\n  } else if (BOOLEAN_UNARY_OPERATORS.includes(operator)) {\n    return booleanTypeAnnotation();\n  }\n}\n\nexport function BinaryExpression(\n  this: NodePath<t.BinaryExpression>,\n  node: t.BinaryExpression,\n) {\n  const operator = node.operator;\n\n  if (NUMBER_BINARY_OPERATORS.includes(operator)) {\n    return numberTypeAnnotation();\n  } else if (BOOLEAN_BINARY_OPERATORS.includes(operator)) {\n    return booleanTypeAnnotation();\n  } else if (operator === \"+\") {\n    const right = this.get(\"right\");\n    const left = this.get(\"left\");\n\n    if (left.isBaseType(\"number\") && right.isBaseType(\"number\")) {\n      // both numbers so this will be a number\n      return numberTypeAnnotation();\n    } else if (left.isBaseType(\"string\") || right.isBaseType(\"string\")) {\n      // one is a string so the result will be a string\n      return stringTypeAnnotation();\n    }\n\n    // unsure if left and right are strings or numbers so stay on the safe side\n    return unionTypeAnnotation([\n      stringTypeAnnotation(),\n      numberTypeAnnotation(),\n    ]);\n  }\n}\n\nexport function LogicalExpression(this: NodePath<t.LogicalExpression>) {\n  const argumentTypes = [\n    this.get(\"left\").getTypeAnnotation(),\n    this.get(\"right\").getTypeAnnotation(),\n  ];\n\n  return createUnionType(argumentTypes);\n}\n\nexport function ConditionalExpression(this: NodePath<t.ConditionalExpression>) {\n  const argumentTypes = [\n    this.get(\"consequent\").getTypeAnnotation(),\n    this.get(\"alternate\").getTypeAnnotation(),\n  ];\n\n  return createUnionType(argumentTypes);\n}\n\nexport function SequenceExpression(this: NodePath<t.SequenceExpression>) {\n  return this.get(\"expressions\").pop().getTypeAnnotation();\n}\n\nexport function ParenthesizedExpression(\n  this: NodePath<t.ParenthesizedExpression>,\n) {\n  return this.get(\"expression\").getTypeAnnotation();\n}\n\nexport function AssignmentExpression(this: NodePath<t.AssignmentExpression>) {\n  return this.get(\"right\").getTypeAnnotation();\n}\n\nexport function UpdateExpression(\n  this: NodePath<t.UpdateExpression>,\n  node: t.UpdateExpression,\n) {\n  const operator = node.operator;\n  if (operator === \"++\" || operator === \"--\") {\n    return numberTypeAnnotation();\n  }\n}\n\nexport function StringLiteral() {\n  return stringTypeAnnotation();\n}\n\nexport function NumericLiteral() {\n  return numberTypeAnnotation();\n}\n\nexport function BooleanLiteral() {\n  return booleanTypeAnnotation();\n}\n\nexport function NullLiteral() {\n  return nullLiteralTypeAnnotation();\n}\n\nexport function RegExpLiteral() {\n  return genericTypeAnnotation(identifier(\"RegExp\"));\n}\n\nexport function ObjectExpression() {\n  return genericTypeAnnotation(identifier(\"Object\"));\n}\n\nexport function ArrayExpression() {\n  return genericTypeAnnotation(identifier(\"Array\"));\n}\n\nexport function RestElement() {\n  return ArrayExpression();\n}\n\nRestElement.validParent = true;\n\nfunction Func() {\n  return genericTypeAnnotation(identifier(\"Function\"));\n}\n\nexport {\n  Func as FunctionExpression,\n  Func as ArrowFunctionExpression,\n  Func as FunctionDeclaration,\n  Func as ClassExpression,\n  Func as ClassDeclaration,\n};\n\nconst isArrayFrom = buildMatchMemberExpression(\"Array.from\");\nconst isObjectKeys = buildMatchMemberExpression(\"Object.keys\");\nconst isObjectValues = buildMatchMemberExpression(\"Object.values\");\nconst isObjectEntries = buildMatchMemberExpression(\"Object.entries\");\nexport function CallExpression(this: NodePath<t.CallExpression>) {\n  const { callee } = this.node;\n  if (isObjectKeys(callee)) {\n    return arrayTypeAnnotation(stringTypeAnnotation());\n  } else if (\n    isArrayFrom(callee) ||\n    isObjectValues(callee) ||\n    // Detect \"var foo = Array()\" calls so we can optimize for arrays vs iterables.\n    isIdentifier(callee, { name: \"Array\" })\n  ) {\n    return arrayTypeAnnotation(anyTypeAnnotation());\n  } else if (isObjectEntries(callee)) {\n    return arrayTypeAnnotation(\n      tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]),\n    );\n  }\n\n  return resolveCall(this.get(\"callee\"));\n}\n\nexport function TaggedTemplateExpression(\n  this: NodePath<t.TaggedTemplateExpression>,\n) {\n  return resolveCall(this.get(\"tag\"));\n}\n\nfunction resolveCall(callee: NodePath) {\n  callee = callee.resolve();\n\n  if (callee.isFunction()) {\n    const { node } = callee;\n    if (node.async) {\n      if (node.generator) {\n        return genericTypeAnnotation(identifier(\"AsyncIterator\"));\n      } else {\n        return genericTypeAnnotation(identifier(\"Promise\"));\n      }\n    } else {\n      if (node.generator) {\n        return genericTypeAnnotation(identifier(\"Iterator\"));\n      } else if (callee.node.returnType) {\n        return callee.node.returnType;\n      } else {\n        // todo: get union type of all return arguments\n      }\n    }\n  }\n}\n"],"names":["_t","require","_infererReference","_util","BOOLEAN_BINARY_OPERATORS","BOOLEAN_UNARY_OPERATORS","NUMBER_BINARY_OPERATORS","NUMBER_UNARY_OPERATORS","STRING_UNARY_OPERATORS","anyTypeAnnotation","arrayTypeAnnotation","booleanTypeAnnotation","buildMatchMemberExpression","genericTypeAnnotation","identifier","nullLiteralTypeAnnotation","numberTypeAnnotation","stringTypeAnnotation","tupleTypeAnnotation","unionTypeAnnotation","voidTypeAnnotation","isIdentifier","VariableDeclarator","get","getTypeAnnotation","TypeCastExpression","node","typeAnnotation","validParent","TSAsExpression","TSNonNullExpression","NewExpression","callee","type","TemplateLiteral","UnaryExpression","operator","includes","BinaryExpression","right","left","isBaseType","LogicalExpression","argumentTypes","createUnionType","ConditionalExpression","SequenceExpression","pop","ParenthesizedExpression","AssignmentExpression","UpdateExpression","StringLiteral","NumericLiteral","BooleanLiteral","NullLiteral","RegExpLiteral","ObjectExpression","ArrayExpression","RestElement","Func","isArrayFrom","isObjectKeys","isObjectValues","isObjectEntries","CallExpression","name","resolveCall","TaggedTemplateExpression","resolve","isFunction","async","generator","returnType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,EAAA,GAAAC,OAAA;AAsBA,IAAAC,iBAAA,GAAAD,OAAA;AAEA,IAAAE,KAAA,GAAAF,OAAA;AAA4C,MAAA,EAvB1CG,wBAAwB,EACxBC,uBAAuB,EACvBC,uBAAuB,EACvBC,sBAAsB,EACtBC,sBAAsB,EACtBC,iBAAiB,EACjBC,mBAAmB,EACnBC,qBAAqB,EACrBC,0BAA0B,EAC1BC,qBAAqB,EACrBC,UAAU,EACVC,yBAAyB,EACzBC,oBAAoB,EACpBC,oBAAoB,EACpBC,mBAAmB,EACnBC,mBAAmB,EACnBC,kBAAkB,EAClBC,YAAAA,EAAY,GAAArB,EAAA;AASP,SAASsB,kBAAkBA,CAAA,EAAuC;IACvE,IAAI,CAAC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC,CAACF,YAAY,CAAC,CAAC,EAAE;IACpC,OAAO,IAAI,CAACE,GAAG,CAAC,MAAM,CAAC,CAACC,iBAAiB,CAAC,CAAC;AAC7C;AAEO,SAASC,kBAAkBA,CAACC,IAA0B,EAAE;IAC7D,OAAOA,IAAI,CAACC,cAAc;AAC5B;AAEAF,kBAAkB,CAACG,WAAW,GAAG,IAAI;AAE9B,SAASC,cAAcA,CAACH,IAAsB,EAAE;IACrD,OAAOA,IAAI,CAACC,cAAc;AAC5B;AAEAE,cAAc,CAACD,WAAW,GAAG,IAAI;AAE1B,SAASE,mBAAmBA,CAAA,EAAwC;IACzE,OAAO,IAAI,CAACP,GAAG,CAAC,YAAY,CAAC,CAACC,iBAAiB,CAAC,CAAC;AACnD;AAEO,SAASO,aAAaA,CAE3BL,IAAqB,EACrB;IACA,IAAIA,IAAI,CAACM,MAAM,CAACC,IAAI,KAAK,YAAY,EAAE;QAErC,OAAOpB,qBAAqB,CAACa,IAAI,CAACM,MAAM,CAAC;IAC3C;AACF;AAEO,SAASE,eAAeA,CAAA,EAAG;IAChC,OAAOjB,oBAAoB,CAAC,CAAC;AAC/B;AAEO,SAASkB,eAAeA,CAACT,IAAuB,EAAE;IACvD,MAAMU,QAAQ,GAAGV,IAAI,CAACU,QAAQ;IAE9B,IAAIA,QAAQ,KAAK,MAAM,EAAE;QACvB,OAAOhB,kBAAkB,CAAC,CAAC;IAC7B,CAAC,MAAM,IAAIb,sBAAsB,CAAC8B,QAAQ,CAACD,QAAQ,CAAC,EAAE;QACpD,OAAOpB,oBAAoB,CAAC,CAAC;IAC/B,CAAC,MAAM,IAAIR,sBAAsB,CAAC6B,QAAQ,CAACD,QAAQ,CAAC,EAAE;QACpD,OAAOnB,oBAAoB,CAAC,CAAC;IAC/B,CAAC,MAAM,IAAIZ,uBAAuB,CAACgC,QAAQ,CAACD,QAAQ,CAAC,EAAE;QACrD,OAAOzB,qBAAqB,CAAC,CAAC;IAChC;AACF;AAEO,SAAS2B,gBAAgBA,CAE9BZ,IAAwB,EACxB;IACA,MAAMU,QAAQ,GAAGV,IAAI,CAACU,QAAQ;IAE9B,IAAI9B,uBAAuB,CAAC+B,QAAQ,CAACD,QAAQ,CAAC,EAAE;QAC9C,OAAOpB,oBAAoB,CAAC,CAAC;IAC/B,CAAC,MAAM,IAAIZ,wBAAwB,CAACiC,QAAQ,CAACD,QAAQ,CAAC,EAAE;QACtD,OAAOzB,qBAAqB,CAAC,CAAC;IAChC,CAAC,MAAM,IAAIyB,QAAQ,KAAK,GAAG,EAAE;QAC3B,MAAMG,KAAK,GAAG,IAAI,CAAChB,GAAG,CAAC,OAAO,CAAC;QAC/B,MAAMiB,IAAI,GAAG,IAAI,CAACjB,GAAG,CAAC,MAAM,CAAC;QAE7B,IAAIiB,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC,IAAIF,KAAK,CAACE,UAAU,CAAC,QAAQ,CAAC,EAAE;YAE3D,OAAOzB,oBAAoB,CAAC,CAAC;QAC/B,CAAC,MAAM,IAAIwB,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC,IAAIF,KAAK,CAACE,UAAU,CAAC,QAAQ,CAAC,EAAE;YAElE,OAAOxB,oBAAoB,CAAC,CAAC;QAC/B;QAGA,OAAOE,mBAAmB,CAAC;YACzBF,oBAAoB,CAAC,CAAC;YACtBD,oBAAoB,CAAC,CAAC;SACvB,CAAC;IACJ;AACF;AAEO,SAAS0B,iBAAiBA,CAAA,EAAsC;IACrE,MAAMC,aAAa,GAAG;QACpB,IAAI,CAACpB,GAAG,CAAC,MAAM,CAAC,CAACC,iBAAiB,CAAC,CAAC;QACpC,IAAI,CAACD,GAAG,CAAC,OAAO,CAAC,CAACC,iBAAiB,CAAC,CAAC;KACtC;IAED,OAAO,CAAA,GAAAoB,MAAAA,eAAe,EAACD,aAAa,CAAC;AACvC;AAEO,SAASE,qBAAqBA,CAAA,EAA0C;IAC7E,MAAMF,aAAa,GAAG;QACpB,IAAI,CAACpB,GAAG,CAAC,YAAY,CAAC,CAACC,iBAAiB,CAAC,CAAC;QAC1C,IAAI,CAACD,GAAG,CAAC,WAAW,CAAC,CAACC,iBAAiB,CAAC,CAAC;KAC1C;IAED,OAAO,CAAA,GAAAoB,MAAAA,eAAe,EAACD,aAAa,CAAC;AACvC;AAEO,SAASG,kBAAkBA,CAAA,EAAuC;IACvE,OAAO,IAAI,CAACvB,GAAG,CAAC,aAAa,CAAC,CAACwB,GAAG,CAAC,CAAC,CAACvB,iBAAiB,CAAC,CAAC;AAC1D;AAEO,SAASwB,uBAAuBA,CAAA,EAErC;IACA,OAAO,IAAI,CAACzB,GAAG,CAAC,YAAY,CAAC,CAACC,iBAAiB,CAAC,CAAC;AACnD;AAEO,SAASyB,oBAAoBA,CAAA,EAAyC;IAC3E,OAAO,IAAI,CAAC1B,GAAG,CAAC,OAAO,CAAC,CAACC,iBAAiB,CAAC,CAAC;AAC9C;AAEO,SAAS0B,gBAAgBA,CAE9BxB,IAAwB,EACxB;IACA,MAAMU,QAAQ,GAAGV,IAAI,CAACU,QAAQ;IAC9B,IAAIA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,IAAI,EAAE;QAC1C,OAAOpB,oBAAoB,CAAC,CAAC;IAC/B;AACF;AAEO,SAASmC,aAAaA,CAAA,EAAG;IAC9B,OAAOlC,oBAAoB,CAAC,CAAC;AAC/B;AAEO,SAASmC,cAAcA,CAAA,EAAG;IAC/B,OAAOpC,oBAAoB,CAAC,CAAC;AAC/B;AAEO,SAASqC,cAAcA,CAAA,EAAG;IAC/B,OAAO1C,qBAAqB,CAAC,CAAC;AAChC;AAEO,SAAS2C,WAAWA,CAAA,EAAG;IAC5B,OAAOvC,yBAAyB,CAAC,CAAC;AACpC;AAEO,SAASwC,aAAaA,CAAA,EAAG;IAC9B,OAAO1C,qBAAqB,CAACC,UAAU,CAAC,QAAQ,CAAC,CAAC;AACpD;AAEO,SAAS0C,gBAAgBA,CAAA,EAAG;IACjC,OAAO3C,qBAAqB,CAACC,UAAU,CAAC,QAAQ,CAAC,CAAC;AACpD;AAEO,SAAS2C,eAAeA,CAAA,EAAG;IAChC,OAAO5C,qBAAqB,CAACC,UAAU,CAAC,OAAO,CAAC,CAAC;AACnD;AAEO,SAAS4C,WAAWA,CAAA,EAAG;IAC5B,OAAOD,eAAe,CAAC,CAAC;AAC1B;AAEAC,WAAW,CAAC9B,WAAW,GAAG,IAAI;AAE9B,SAAS+B,IAAIA,CAAA,EAAG;IACd,OAAO9C,qBAAqB,CAACC,UAAU,CAAC,UAAU,CAAC,CAAC;AACtD;AAUA,MAAM8C,WAAW,GAAGhD,0BAA0B,CAAC,YAAY,CAAC;AAC5D,MAAMiD,YAAY,GAAGjD,0BAA0B,CAAC,aAAa,CAAC;AAC9D,MAAMkD,cAAc,GAAGlD,0BAA0B,CAAC,eAAe,CAAC;AAClE,MAAMmD,eAAe,GAAGnD,0BAA0B,CAAC,gBAAgB,CAAC;AAC7D,SAASoD,cAAcA,CAAA,EAAmC;IAC/D,MAAM,EAAEhC,MAAAA,EAAQ,GAAG,IAAI,CAACN,IAAI;IAC5B,IAAImC,YAAY,CAAC7B,MAAM,CAAC,EAAE;QACxB,OAAOtB,mBAAmB,CAACO,oBAAoB,CAAC,CAAC,CAAC;IACpD,CAAC,MAAM,IACL2C,WAAW,CAAC5B,MAAM,CAAC,IACnB8B,cAAc,CAAC9B,MAAM,CAAC,IAEtBX,YAAY,CAACW,MAAM,EAAE;QAAEiC,IAAI,EAAE;IAAQ,CAAC,CAAC,EACvC;QACA,OAAOvD,mBAAmB,CAACD,iBAAiB,CAAC,CAAC,CAAC;IACjD,CAAC,MAAM,IAAIsD,eAAe,CAAC/B,MAAM,CAAC,EAAE;QAClC,OAAOtB,mBAAmB,CACxBQ,mBAAmB,CAAC;YAACD,oBAAoB,CAAC,CAAC;YAAER,iBAAiB,CAAC,CAAC;SAAC,CACnE,CAAC;IACH;IAEA,OAAOyD,WAAW,CAAC,IAAI,CAAC3C,GAAG,CAAC,QAAQ,CAAC,CAAC;AACxC;AAEO,SAAS4C,wBAAwBA,CAAA,EAEtC;IACA,OAAOD,WAAW,CAAC,IAAI,CAAC3C,GAAG,CAAC,KAAK,CAAC,CAAC;AACrC;AAEA,SAAS2C,WAAWA,CAAClC,MAAgB,EAAE;IACrCA,MAAM,GAAGA,MAAM,CAACoC,OAAO,CAAC,CAAC;IAEzB,IAAIpC,MAAM,CAACqC,UAAU,CAAC,CAAC,EAAE;QACvB,MAAM,EAAE3C,IAAAA,EAAM,GAAGM,MAAM;QACvB,IAAIN,IAAI,CAAC4C,KAAK,EAAE;YACd,IAAI5C,IAAI,CAAC6C,SAAS,EAAE;gBAClB,OAAO1D,qBAAqB,CAACC,UAAU,CAAC,eAAe,CAAC,CAAC;YAC3D,CAAC,MAAM;gBACL,OAAOD,qBAAqB,CAACC,UAAU,CAAC,SAAS,CAAC,CAAC;YACrD;QACF,CAAC,MAAM;YACL,IAAIY,IAAI,CAAC6C,SAAS,EAAE;gBAClB,OAAO1D,qBAAqB,CAACC,UAAU,CAAC,UAAU,CAAC,CAAC;YACtD,CAAC,MAAM,IAAIkB,MAAM,CAACN,IAAI,CAAC8C,UAAU,EAAE;gBACjC,OAAOxC,MAAM,CAACN,IAAI,CAAC8C,UAAU;YAC/B,CAAC,MAAM,CAEP;QACF;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 2128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2133, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/inference/index.ts"],"sourcesContent":["import type NodePath from \"../index.ts\";\nimport * as inferers from \"./inferers.ts\";\nimport {\n  anyTypeAnnotation,\n  isAnyTypeAnnotation,\n  isArrayTypeAnnotation,\n  isBooleanTypeAnnotation,\n  isEmptyTypeAnnotation,\n  isFlowBaseAnnotation,\n  isGenericTypeAnnotation,\n  isIdentifier,\n  isMixedTypeAnnotation,\n  isNumberTypeAnnotation,\n  isStringTypeAnnotation,\n  isTSArrayType,\n  isTSTypeAnnotation,\n  isTSTypeReference,\n  isTupleTypeAnnotation,\n  isTypeAnnotation,\n  isUnionTypeAnnotation,\n  isVoidTypeAnnotation,\n  stringTypeAnnotation,\n  voidTypeAnnotation,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\n/**\n * Infer the type of the current `NodePath`.\n */\n\nexport function getTypeAnnotation(this: NodePath): t.FlowType | t.TSType {\n  let type = this.getData(\"typeAnnotation\");\n  if (type != null) {\n    return type;\n  }\n  type = _getTypeAnnotation.call(this) || anyTypeAnnotation();\n  if (isTypeAnnotation(type) || isTSTypeAnnotation(type)) {\n    type = type.typeAnnotation;\n  }\n  this.setData(\"typeAnnotation\", type);\n  return type;\n}\n\n// Used to avoid infinite recursion in cases like\n//   var b, c; if (0) { c = 1; b = c; } c = b;\n// It also works with indirect recursion.\nconst typeAnnotationInferringNodes = new WeakSet();\n\n/**\n * todo: split up this method\n */\n\nexport function _getTypeAnnotation(this: NodePath): any {\n  const node = this.node;\n\n  if (!node) {\n    // handle initializerless variables, add in checks for loop initializers too\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n\n      // for (let NODE in bar) {}\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return stringTypeAnnotation();\n      }\n\n      // for (let NODE of bar) {}\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return anyTypeAnnotation();\n      }\n\n      return voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  // @ts-expect-error typeAnnotation may not index node\n  if (node.typeAnnotation) {\n    // @ts-expect-error typeAnnotation may not index node\n    return node.typeAnnotation;\n  }\n\n  if (typeAnnotationInferringNodes.has(node)) {\n    // Bail out from type inference to avoid infinite loops\n    return;\n  }\n  typeAnnotationInferringNodes.add(node);\n\n  try {\n    let inferer =\n      // @ts-expect-error inferers do not cover all AST types\n      inferers[node.type];\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    // @ts-expect-error inferers do not cover all AST types\n    inferer = inferers[this.parentPath.type];\n    if (inferer?.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\n\nexport function isBaseType(\n  this: NodePath,\n  baseName: string,\n  soft?: boolean,\n): boolean {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(\n  baseName: string,\n  type?: t.FlowType | t.TSType,\n  soft?: boolean,\n): boolean {\n  if (baseName === \"string\") {\n    return isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\n\nexport function couldBeBaseType(this: NodePath, name: string): boolean {\n  const type = this.getTypeAnnotation();\n  if (isAnyTypeAnnotation(type)) return true;\n\n  if (isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nexport function baseTypeStrictlyMatches(\n  this: NodePath,\n  rightArg: NodePath,\n): boolean {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n\n  if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n  return false;\n}\n\nexport function isGenericType(this: NodePath, genericName: string): boolean {\n  const type = this.getTypeAnnotation();\n  if (genericName === \"Array\") {\n    // T[]\n    if (\n      isTSArrayType(type) ||\n      isArrayTypeAnnotation(type) ||\n      isTupleTypeAnnotation(type)\n    ) {\n      return true;\n    }\n  }\n  return (\n    (isGenericTypeAnnotation(type) &&\n      isIdentifier(type.id, {\n        name: genericName,\n      })) ||\n    (isTSTypeReference(type) &&\n      isIdentifier(type.typeName, {\n        name: genericName,\n      }))\n  );\n}\n"],"names":["inferers","require","_t","anyTypeAnnotation","isAnyTypeAnnotation","isArrayTypeAnnotation","isBooleanTypeAnnotation","isEmptyTypeAnnotation","isFlowBaseAnnotation","isGenericTypeAnnotation","isIdentifier","isMixedTypeAnnotation","isNumberTypeAnnotation","isStringTypeAnnotation","isTSArrayType","isTSTypeAnnotation","isTSTypeReference","isTupleTypeAnnotation","isTypeAnnotation","isUnionTypeAnnotation","isVoidTypeAnnotation","stringTypeAnnotation","voidTypeAnnotation","getTypeAnnotation","type","getData","_getTypeAnnotation","call","typeAnnotation","setData","typeAnnotationInferringNodes","WeakSet","node","key","parentPath","isVariableDeclarator","declar","declarParent","isForInStatement","isForOfStatement","has","add","_inferer","inferer","validParent","delete","isBaseType","baseName","soft","_isBaseType","Error","couldBeBaseType","name","type2","types","baseTypeStrictlyMatches","rightArg","left","right","isGenericType","genericName","id","typeName"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2258, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2263, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/lib/hoister.ts"],"sourcesContent":["// Remove this file in Babel 8\n\nimport { react } from \"@babel/types\";\nimport {\n  cloneNode,\n  jsxExpressionContainer,\n  variableDeclaration,\n  variableDeclarator,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type Scope from \"../../scope/index.ts\";\nimport type NodePath from \"../index.ts\";\nimport type Binding from \"../../scope/binding.ts\";\nimport type { Visitor } from \"../../types.ts\";\n\nconst referenceVisitor: Visitor<PathHoister> = {\n  // This visitor looks for bindings to establish a topmost scope for hoisting.\n  ReferencedIdentifier(path, state) {\n    // Don't hoist regular JSX identifiers ('div', 'span', etc).\n    // We do have to consider member expressions for hoisting (e.g. `this.component`)\n    if (\n      path.isJSXIdentifier() &&\n      react.isCompatTag(path.node.name) &&\n      !path.parentPath.isJSXMemberExpression()\n    ) {\n      return;\n    }\n\n    // If the identifier refers to `this`, we need to break on the closest non-arrow scope.\n    if (path.node.name === \"this\") {\n      let scope = path.scope;\n      do {\n        if (\n          scope.path.isFunction() &&\n          !scope.path.isArrowFunctionExpression()\n        ) {\n          break;\n        }\n      } while ((scope = scope.parent));\n      if (scope) state.breakOnScopePaths.push(scope.path);\n    }\n\n    // direct references that we need to track to hoist this to the highest scope we can\n    const binding = path.scope.getBinding(path.node.name);\n    if (!binding) return;\n\n    // we can handle reassignments only if they happen in the same scope as the declaration\n    for (const violation of binding.constantViolations) {\n      if (violation.scope !== binding.path.scope) {\n        state.mutableBinding = true;\n        path.stop();\n        return;\n      }\n    }\n\n    // this binding isn't accessible from the parent scope so we can safely ignore it\n    // eg. it's in a closure etc\n    if (binding !== state.scope.getBinding(path.node.name)) return;\n\n    state.bindings[path.node.name] = binding;\n  },\n};\n\nexport default class PathHoister<T extends t.Node = t.Node> {\n  breakOnScopePaths: NodePath[];\n  bindings: { [k: string]: Binding };\n  mutableBinding: boolean;\n  private scopes: Scope[];\n  scope: Scope;\n  private path: NodePath<T>;\n  private attachAfter: boolean;\n\n  constructor(path: NodePath<T>, scope: Scope) {\n    // Storage for scopes we can't hoist above.\n    this.breakOnScopePaths = [];\n    // Storage for bindings that may affect what path we can hoist to.\n    this.bindings = {};\n    // \"true\" if the current path contains a reference to a binding whose\n    // value can change and thus can't be safely hoisted.\n    this.mutableBinding = false;\n    // Storage for eligible scopes.\n    this.scopes = [];\n    // Our original scope and path.\n    this.scope = scope;\n    this.path = path;\n    // By default, we attach as far up as we can; but if we're trying\n    // to avoid referencing a binding, we may have to go after.\n    this.attachAfter = false;\n  }\n\n  // A scope is compatible if all required bindings are reachable.\n  isCompatibleScope(scope: Scope) {\n    for (const key of Object.keys(this.bindings)) {\n      const binding = this.bindings[key];\n      if (!scope.bindingIdentifierEquals(key, binding.identifier)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Look through all scopes and push compatible ones.\n  getCompatibleScopes() {\n    let scope = this.path.scope;\n    do {\n      if (this.isCompatibleScope(scope)) {\n        this.scopes.push(scope);\n      } else {\n        break;\n      }\n\n      // deopt: These scopes are set in the visitor on const violations\n      if (this.breakOnScopePaths.includes(scope.path)) {\n        break;\n      }\n    } while ((scope = scope.parent));\n  }\n\n  getAttachmentPath() {\n    let path = this._getAttachmentPath();\n    if (!path) return;\n\n    let targetScope = path.scope;\n\n    // don't allow paths that have their own lexical environments to pollute\n    if (targetScope.path === path) {\n      targetScope = path.scope.parent;\n    }\n\n    // avoid hoisting to a scope that contains bindings that are executed after our attachment path\n    if (targetScope.path.isProgram() || targetScope.path.isFunction()) {\n      for (const name of Object.keys(this.bindings)) {\n        // check binding is a direct child of this paths scope\n        if (!targetScope.hasOwnBinding(name)) continue;\n\n        const binding = this.bindings[name];\n\n        // allow parameter references and expressions in params (like destructuring rest)\n        if (binding.kind === \"param\" || binding.path.parentKey === \"params\") {\n          continue;\n        }\n\n        // For each binding, get its attachment parent. This gives us an idea of where we might\n        // introduce conflicts.\n        const bindingParentPath = this.getAttachmentParentForPath(binding.path);\n\n        // If the binding's attachment appears at or after our attachment point, then we move after it.\n        if (bindingParentPath.key >= path.key) {\n          this.attachAfter = true;\n          path = binding.path;\n\n          // We also move past any constant violations.\n          for (const violationPath of binding.constantViolations) {\n            if (this.getAttachmentParentForPath(violationPath).key > path.key) {\n              path = violationPath;\n            }\n          }\n        }\n      }\n    }\n\n    return path;\n  }\n\n  _getAttachmentPath() {\n    const scopes = this.scopes;\n\n    const scope = scopes.pop();\n    // deopt: no compatible scopes\n    if (!scope) return;\n\n    if (scope.path.isFunction()) {\n      if (this.hasOwnParamBindings(scope)) {\n        // deopt: should ignore this scope since it's ourselves\n        if (this.scope === scope) return;\n\n        // needs to be attached to the body\n        const bodies = scope.path.get(\"body\").get(\"body\") as NodePath[];\n        for (let i = 0; i < bodies.length; i++) {\n          // Don't attach to something that's going to get hoisted,\n          // like a default parameter\n          // @ts-expect-error todo(flow->ts): avoid mutating the node, introducing new fields\n          if (bodies[i].node._blockHoist) continue;\n          return bodies[i];\n        }\n        // deopt: If here, no attachment path found\n      } else {\n        // doesn't need to be be attached to this scope\n        return this.getNextScopeAttachmentParent();\n      }\n    } else if (scope.path.isProgram()) {\n      return this.getNextScopeAttachmentParent();\n    }\n  }\n\n  getNextScopeAttachmentParent() {\n    const scope = this.scopes.pop();\n    if (scope) return this.getAttachmentParentForPath(scope.path);\n  }\n\n  // Find an attachment for this path.\n  getAttachmentParentForPath(path: NodePath) {\n    do {\n      if (\n        // Beginning of the scope\n        !path.parentPath ||\n        // Has siblings and is a statement\n        (Array.isArray(path.container) && path.isStatement())\n      ) {\n        return path;\n      }\n    } while ((path = path.parentPath));\n  }\n\n  // Returns true if a scope has param bindings.\n  hasOwnParamBindings(scope: Scope) {\n    for (const name of Object.keys(this.bindings)) {\n      if (!scope.hasOwnBinding(name)) continue;\n\n      const binding = this.bindings[name];\n      // Ensure constant; without it we could place behind a reassignment\n      if (binding.kind === \"param\" && binding.constant) return true;\n    }\n    return false;\n  }\n\n  run(): NodePath<t.Expression> | undefined {\n    this.path.traverse(referenceVisitor, this);\n\n    if (this.mutableBinding) return;\n\n    this.getCompatibleScopes();\n\n    const attachTo = this.getAttachmentPath();\n    if (!attachTo) return;\n\n    // don't bother hoisting to the same function as this will cause multiple branches to be\n    // evaluated more than once leading to a bad optimisation\n    if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;\n\n    // generate declaration and insert it to our point\n    let uid: t.Identifier | t.JSXExpressionContainer =\n      attachTo.scope.generateUidIdentifier(\"ref\");\n\n    // @ts-expect-error todo(flow->ts): more specific type for this.path\n    const declarator = variableDeclarator(uid, this.path.node);\n\n    const insertFn = this.attachAfter ? \"insertAfter\" : \"insertBefore\";\n    const [attached] = attachTo[insertFn]([\n      attachTo.isVariableDeclarator()\n        ? declarator\n        : variableDeclaration(\"var\", [declarator]),\n    ]);\n\n    const parent = this.path.parentPath;\n    if (parent.isJSXElement() && this.path.container === parent.node.children) {\n      // turning the `span` in `<div><span /></div>` to an expression so we need to wrap it with\n      // an expression container\n      uid = jsxExpressionContainer(uid);\n    }\n\n    this.path.replaceWith(cloneNode(uid));\n\n    // @ts-expect-error TS cannot refine the type of `attached`\n    // TODO: Should we use `attached.isVariableDeclaration()`?\n    return attachTo.isVariableDeclarator()\n      ? attached.get(\"init\")\n      : attached.get(\"declarations.0.init\");\n  }\n}\n"],"names":["_t","require","_t2","react","cloneNode","jsxExpressionContainer","variableDeclaration","variableDeclarator","referenceVisitor","ReferencedIdentifier","path","state","isJSXIdentifier","isCompatTag","node","name","parentPath","isJSXMemberExpression","scope","isFunction","isArrowFunctionExpression","parent","breakOnScopePaths","push","binding","getBinding","violation","constantViolations","mutableBinding","stop","bindings","PathHoister","constructor","scopes","attachAfter","isCompatibleScope","key","Object","keys","bindingIdentifierEquals","identifier","getCompatibleScopes","includes","getAttachmentPath","_getAttachmentPath","targetScope","isProgram","hasOwnBinding","kind","parentKey","bindingParentPath","getAttachmentParentForPath","violationPath","pop","hasOwnParamBindings","bodies","get","i","length","_blockHoist","getNextScopeAttachmentParent","Array","isArray","container","isStatement","constant","run","traverse","attachTo","getFunctionParent","uid","generateUidIdentifier","declarator","insertFn","attached","isVariableDeclarator","isJSXElement","children","replaceWith","exports","default"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2428, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2433, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/lib/removal-hooks.ts"],"sourcesContent":["// this file contains hooks that handle ancestry cleanup of parent nodes when removing children\n\nimport type NodePath from \"../index.ts\";\nimport type * as t from \"@babel/types\";\n/**\n * Pre hooks should be used for either rejecting removal or delegating removal\n */\n\nexport const hooks = [\n  function (self: NodePath, parent: NodePath) {\n    const removeParent =\n      // while (NODE);\n      // removing the test of a while/switch, we can either just remove it entirely *or* turn the\n      // `test` into `true` unlikely that the latter will ever be what's wanted so we just remove\n      // the loop to avoid infinite recursion\n      (self.key === \"test\" && (parent.isWhile() || parent.isSwitchCase())) ||\n      // export NODE;\n      // just remove a declaration for an export as this is no longer valid\n      (self.key === \"declaration\" && parent.isExportDeclaration()) ||\n      // label: NODE\n      // stray labeled statement with no body\n      (self.key === \"body\" && parent.isLabeledStatement()) ||\n      // let NODE;\n      // remove an entire declaration if there are no declarators left\n      (self.listKey === \"declarations\" &&\n        parent.isVariableDeclaration() &&\n        parent.node.declarations.length === 1) ||\n      // NODE;\n      // remove the entire expression statement if there's no expression\n      (self.key === \"expression\" && parent.isExpressionStatement());\n\n    if (removeParent) {\n      parent.remove();\n      return true;\n    }\n  },\n\n  function (self: NodePath, parent: NodePath) {\n    if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {\n      // (node, NODE);\n      // we've just removed the second element of a sequence expression so let's turn that sequence\n      // expression into a regular expression\n      parent.replaceWith(parent.node.expressions[0]);\n      return true;\n    }\n  },\n\n  function (self: NodePath, parent: NodePath) {\n    if (parent.isBinary()) {\n      // left + NODE;\n      // NODE + right;\n      // we're in a binary expression, better remove it and replace it with the last expression\n      if (self.key === \"left\") {\n        parent.replaceWith(parent.node.right);\n      } else {\n        // key === \"right\"\n        parent.replaceWith(parent.node.left);\n      }\n      return true;\n    }\n  },\n\n  function (self: NodePath, parent: NodePath) {\n    if (\n      (parent.isIfStatement() && self.key === \"consequent\") ||\n      (self.key === \"body\" &&\n        (parent.isLoop() || parent.isArrowFunctionExpression()))\n    ) {\n      self.replaceWith({\n        type: \"BlockStatement\",\n        body: [],\n      } as t.BlockStatement);\n      return true;\n    }\n  },\n];\n"],"names":["hooks","exports","self","parent","removeParent","key","isWhile","isSwitchCase","isExportDeclaration","isLabeledStatement","listKey","isVariableDeclaration","node","declarations","length","isExpressionStatement","remove","isSequenceExpression","expressions","replaceWith","isBinary","right","left","isIfStatement","isLoop","isArrowFunctionExpression","type","body"],"mappings":";;;;;AAQO,MAAMA,KAAK,GAAAC,OAAA,CAAAD,KAAA,GAAG;IACnB,SAAUE,IAAc,EAAEC,MAAgB,EAAE;QAC1C,MAAMC,YAAY,GAKfF,IAAI,CAACG,GAAG,KAAK,MAAM,IAAA,CAAKF,MAAM,CAACG,OAAO,CAAC,CAAC,IAAIH,MAAM,CAACI,YAAY,CAAC,CAAC,CAAC,IAGlEL,IAAI,CAACG,GAAG,KAAK,aAAa,IAAIF,MAAM,CAACK,mBAAmB,CAAC,CAAE,IAG3DN,IAAI,CAACG,GAAG,KAAK,MAAM,IAAIF,MAAM,CAACM,kBAAkB,CAAC,CAAE,IAGnDP,IAAI,CAACQ,OAAO,KAAK,cAAc,IAC9BP,MAAM,CAACQ,qBAAqB,CAAC,CAAC,IAC9BR,MAAM,CAACS,IAAI,CAACC,YAAY,CAACC,MAAM,KAAK,CAAE,IAGvCZ,IAAI,CAACG,GAAG,KAAK,YAAY,IAAIF,MAAM,CAACY,qBAAqB,CAAC,CAAE;QAE/D,IAAIX,YAAY,EAAE;YAChBD,MAAM,CAACa,MAAM,CAAC,CAAC;YACf,OAAO,IAAI;QACb;IACF,CAAC;IAED,SAAUd,IAAc,EAAEC,MAAgB,EAAE;QAC1C,IAAIA,MAAM,CAACc,oBAAoB,CAAC,CAAC,IAAId,MAAM,CAACS,IAAI,CAACM,WAAW,CAACJ,MAAM,KAAK,CAAC,EAAE;YAIzEX,MAAM,CAACgB,WAAW,CAAChB,MAAM,CAACS,IAAI,CAACM,WAAW,CAAC,CAAC,CAAC,CAAC;YAC9C,OAAO,IAAI;QACb;IACF,CAAC;IAED,SAAUhB,IAAc,EAAEC,MAAgB,EAAE;QAC1C,IAAIA,MAAM,CAACiB,QAAQ,CAAC,CAAC,EAAE;YAIrB,IAAIlB,IAAI,CAACG,GAAG,KAAK,MAAM,EAAE;gBACvBF,MAAM,CAACgB,WAAW,CAAChB,MAAM,CAACS,IAAI,CAACS,KAAK,CAAC;YACvC,CAAC,MAAM;gBAELlB,MAAM,CAACgB,WAAW,CAAChB,MAAM,CAACS,IAAI,CAACU,IAAI,CAAC;YACtC;YACA,OAAO,IAAI;QACb;IACF,CAAC;IAED,SAAUpB,IAAc,EAAEC,MAAgB,EAAE;QAC1C,IACGA,MAAM,CAACoB,aAAa,CAAC,CAAC,IAAIrB,IAAI,CAACG,GAAG,KAAK,YAAY,IACnDH,IAAI,CAACG,GAAG,KAAK,MAAM,IAAA,CACjBF,MAAM,CAACqB,MAAM,CAAC,CAAC,IAAIrB,MAAM,CAACsB,yBAAyB,CAAC,CAAC,CAAE,EAC1D;YACAvB,IAAI,CAACiB,WAAW,CAAC;gBACfO,IAAI,EAAE,gBAAgB;gBACtBC,IAAI,EAAE,EAAA;YACR,CAAqB,CAAC;YACtB,OAAO,IAAI;QACb;IACF,CAAC;CACF","ignoreList":[0]}},
    {"offset": {"line": 2472, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2477, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/removal.ts"],"sourcesContent":["// This file contains methods responsible for removing a node.\n\nimport { hooks } from \"./lib/removal-hooks.ts\";\nimport { getCachedPaths } from \"../cache.ts\";\nimport { _replaceWith } from \"./replacement.ts\";\nimport type NodePath from \"./index.ts\";\nimport { REMOVED, SHOULD_SKIP } from \"./index.ts\";\nimport { getBindingIdentifiers } from \"@babel/types\";\nimport { updateSiblingKeys } from \"./modification.ts\";\nimport { resync } from \"./context.ts\";\n\nexport function remove(this: NodePath) {\n  _assertUnremoved.call(this);\n\n  resync.call(this);\n\n  if (_callRemovalHooks.call(this)) {\n    _markRemoved.call(this);\n    return;\n  }\n\n  if (!this.opts?.noScope) {\n    _removeFromScope.call(this);\n  }\n\n  this.shareCommentsWithSiblings();\n  _remove.call(this);\n  _markRemoved.call(this);\n}\n\nexport function _removeFromScope(this: NodePath) {\n  const bindings = getBindingIdentifiers(this.node, false, false, true);\n  Object.keys(bindings).forEach(name => this.scope.removeBinding(name));\n}\n\nexport function _callRemovalHooks(this: NodePath) {\n  if (this.parentPath) {\n    for (const fn of hooks) {\n      if (fn(this, this.parentPath)) return true;\n    }\n  }\n}\n\nexport function _remove(this: NodePath) {\n  if (Array.isArray(this.container)) {\n    this.container.splice(this.key as number, 1);\n    updateSiblingKeys.call(this, this.key as number, -1);\n  } else {\n    _replaceWith.call(this, null);\n  }\n}\n\nexport function _markRemoved(this: NodePath) {\n  // this.shouldSkip = true; this.removed = true;\n  this._traverseFlags |= SHOULD_SKIP | REMOVED;\n  if (this.parent) {\n    getCachedPaths(this.hub, this.parent).delete(this.node);\n  }\n  this.node = null;\n}\n\nexport function _assertUnremoved(this: NodePath) {\n  if (this.removed) {\n    throw this.buildCodeFrameError(\n      \"NodePath has been removed so is read-only.\",\n    );\n  }\n}\n"],"names":["_removalHooks","require","_cache","_replacement","_index","_t","_modification","_context","getBindingIdentifiers","remove","_this$opts","_assertUnremoved","call","resync","_callRemovalHooks","_markRemoved","opts","noScope","_removeFromScope","shareCommentsWithSiblings","_remove","bindings","node","Object","keys","forEach","name","scope","removeBinding","parentPath","fn","hooks","Array","isArray","container","splice","key","updateSiblingKeys","_replaceWith","_traverseFlags","SHOULD_SKIP","REMOVED","parent","getCachedPaths","hub","delete","removed","buildCodeFrameError"],"mappings":";;;;;;;;;;AAEA,IAAAA,aAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AAEA,IAAAG,MAAA,GAAAH,OAAA;AACA,IAAAI,EAAA,GAAAJ,OAAA;AACA,IAAAK,aAAA,GAAAL,OAAA;AACA,IAAAM,QAAA,GAAAN,OAAA;AAAsC,MAAA,EAF7BO,qBAAAA,EAAqB,GAAAH,EAAA;AAIvB,SAASI,MAAMA,CAAA,EAAiB;IAAA,IAAAC,UAAA;IACrCC,gBAAgB,CAACC,IAAI,CAAC,IAAI,CAAC;IAE3BC,SAAAA,MAAM,CAACD,IAAI,CAAC,IAAI,CAAC;IAEjB,IAAIE,iBAAiB,CAACF,IAAI,CAAC,IAAI,CAAC,EAAE;QAChCG,YAAY,CAACH,IAAI,CAAC,IAAI,CAAC;QACvB;IACF;IAEA,IAAI,CAAA,CAAA,CAAAF,UAAA,GAAC,IAAI,CAACM,IAAI,KAAA,QAATN,UAAA,CAAWO,OAAO,GAAE;QACvBC,gBAAgB,CAACN,IAAI,CAAC,IAAI,CAAC;IAC7B;IAEA,IAAI,CAACO,yBAAyB,CAAC,CAAC;IAChCC,OAAO,CAACR,IAAI,CAAC,IAAI,CAAC;IAClBG,YAAY,CAACH,IAAI,CAAC,IAAI,CAAC;AACzB;AAEO,SAASM,gBAAgBA,CAAA,EAAiB;IAC/C,MAAMG,QAAQ,GAAGb,qBAAqB,CAAC,IAAI,CAACc,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;IACrEC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC,CAACI,OAAO,EAACC,IAAI,GAAI,IAAI,CAACC,KAAK,CAACC,aAAa,CAACF,IAAI,CAAC,CAAC;AACvE;AAEO,SAASZ,iBAAiBA,CAAA,EAAiB;IAChD,IAAI,IAAI,CAACe,UAAU,EAAE;QACnB,KAAK,MAAMC,EAAE,IAAIC,cAAAA,KAAK,CAAE;YACtB,IAAID,EAAE,CAAC,IAAI,EAAE,IAAI,CAACD,UAAU,CAAC,EAAE,OAAO,IAAI;QAC5C;IACF;AACF;AAEO,SAAST,OAAOA,CAAA,EAAiB;IACtC,IAAIY,KAAK,CAACC,OAAO,CAAC,IAAI,CAACC,SAAS,CAAC,EAAE;QACjC,IAAI,CAACA,SAAS,CAACC,MAAM,CAAC,IAAI,CAACC,GAAG,EAAY,CAAC,CAAC;QAC5CC,cAAAA,iBAAiB,CAACzB,IAAI,CAAC,IAAI,EAAE,IAAI,CAACwB,GAAG,EAAY,CAAC,CAAC,CAAC;IACtD,CAAC,MAAM;QACLE,aAAAA,YAAY,CAAC1B,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;IAC/B;AACF;AAEO,SAASG,YAAYA,CAAA,EAAiB;IAE3C,IAAI,CAACwB,cAAc,IAAIC,OAAAA,WAAW,GAAGC,OAAAA,OAAO;IAC5C,IAAI,IAAI,CAACC,MAAM,EAAE;QACf,CAAA,GAAAC,OAAAA,cAAc,EAAC,IAAI,CAACC,GAAG,EAAE,IAAI,CAACF,MAAM,CAAC,CAACG,MAAM,CAAC,IAAI,CAACvB,IAAI,CAAC;IACzD;IACA,IAAI,CAACA,IAAI,GAAG,IAAI;AAClB;AAEO,SAASX,gBAAgBA,CAAA,EAAiB;IAC/C,IAAI,IAAI,CAACmC,OAAO,EAAE;QAChB,MAAM,IAAI,CAACC,mBAAmB,CAC5B,4CACF,CAAC;IACH;AACF","ignoreList":[0]}},
    {"offset": {"line": 2541, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2546, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/modification.ts"],"sourcesContent":["// This file contains methods that modify the path/node in some ways.\n\nimport { getCachedPaths } from \"../cache.ts\";\nimport PathHoister from \"./lib/hoister.ts\";\nimport NodePath from \"./index.ts\";\nimport { _getQueueContexts, pushContext, setScope } from \"./context.ts\";\nimport { _assertUnremoved } from \"./removal.ts\";\nimport {\n  arrowFunctionExpression,\n  assertExpression,\n  assignmentExpression,\n  blockStatement,\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  isAssignmentExpression,\n  isCallExpression,\n  isExportNamedDeclaration,\n  isExpression,\n  isIdentifier,\n  isSequenceExpression,\n  isSuper,\n  thisExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type Scope from \"../scope/index.ts\";\n\n/**\n * Insert the provided nodes before the current one.\n */\n\nexport function insertBefore(\n  this: NodePath,\n  nodes_: t.Node | t.Node[],\n): NodePath[] {\n  _assertUnremoved.call(this);\n\n  const nodes = _verifyNodeList.call(this, nodes_);\n\n  const { parentPath, parent } = this;\n\n  if (\n    parentPath.isExpressionStatement() ||\n    parentPath.isLabeledStatement() ||\n    // https://github.com/babel/babel/issues/15293\n    // When Babel transforms `export class String { field }`, the class properties plugin will inject the defineProperty\n    // helper, which depends on the builtins e.g. String, Number, Symbol, etc. To prevent them from being shadowed by local\n    // exports, the helper injector replaces the named export into `class _String { field }; export { _String as String }`,\n    // with `parentPath` here changed to the moved ClassDeclaration, causing rare inconsistency between `parent` and `parentPath`.\n    // Here we retrieve the parent type from the `parent` property. This is a temporary fix and we should revisit when\n    // helpers should get injected.\n    isExportNamedDeclaration(parent) ||\n    (parentPath.isExportDefaultDeclaration() && this.isDeclaration())\n  ) {\n    return parentPath.insertBefore(nodes);\n  } else if (\n    (this.isNodeType(\"Expression\") && !this.isJSXElement()) ||\n    (parentPath.isForStatement() && this.key === \"init\")\n  ) {\n    if (this.node) nodes.push(this.node);\n    // @ts-expect-error todo(flow->ts): check that nodes is an array of statements\n    return this.replaceExpressionWithStatements(nodes);\n  } else if (Array.isArray(this.container)) {\n    return _containerInsertBefore.call(this, nodes);\n  } else if (this.isStatementOrBlock()) {\n    const node = this.node as t.Statement;\n    const shouldInsertCurrentNode =\n      node &&\n      (!this.isExpressionStatement() ||\n        (node as t.ExpressionStatement).expression != null);\n\n    this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));\n    return (this as NodePath<t.BlockStatement>).unshiftContainer(\n      \"body\",\n      // @ts-expect-error Fixme: refine nodes to t.BlockStatement[\"body\"] when this is a BlockStatement path\n      nodes,\n    );\n  } else {\n    throw new Error(\n      \"We don't know what to do with this node type. \" +\n        \"We were previously a Statement but we can't fit in here?\",\n    );\n  }\n}\n\nexport function _containerInsert<N extends t.Node>(\n  this: NodePath,\n  from: number,\n  nodes: N[],\n): NodePath<N>[] {\n  updateSiblingKeys.call(this, from, nodes.length);\n\n  const paths: NodePath<N>[] = [];\n\n  // @ts-expect-error todo(flow->ts): this.container could be a NodePath\n  this.container.splice(from, 0, ...nodes);\n  for (let i = 0; i < nodes.length; i++) {\n    const to = from + i;\n    const path = this.getSibling(to) as NodePath<N>;\n    paths.push(path);\n\n    if (this.context?.queue) {\n      pushContext.call(path, this.context);\n    }\n  }\n\n  const contexts = _getQueueContexts.call(this);\n\n  for (const path of paths) {\n    setScope.call(path);\n    path.debug(\"Inserted.\");\n\n    for (const context of contexts) {\n      context.maybeQueue(path, true);\n    }\n  }\n\n  return paths;\n}\n\nexport function _containerInsertBefore<N extends t.Node>(\n  this: NodePath,\n  nodes: N[],\n) {\n  return _containerInsert.call(this, this.key as number, nodes);\n}\n\nexport function _containerInsertAfter<N extends t.Node>(\n  this: NodePath,\n  nodes: N[],\n) {\n  return _containerInsert.call(this, (this.key as number) + 1, nodes);\n}\n\nconst last = <T>(arr: T[]) => arr[arr.length - 1];\n\nfunction isHiddenInSequenceExpression(path: NodePath): boolean {\n  return (\n    isSequenceExpression(path.parent) &&\n    (last(path.parent.expressions) !== path.node ||\n      isHiddenInSequenceExpression(path.parentPath))\n  );\n}\n\nfunction isAlmostConstantAssignment(\n  node: t.Node,\n  scope: Scope,\n): node is t.AssignmentExpression & { left: t.Identifier } {\n  if (!isAssignmentExpression(node) || !isIdentifier(node.left)) {\n    return false;\n  }\n\n  // Not every scope can contain variables. For example, we might be in\n  // a ClassScope either in the ClassHeritage or in a computed key.\n  const blockScope = scope.getBlockParent();\n\n  // If the variable is defined in the current scope and only assigned here,\n  // we can be sure that its value won't change.\n  return (\n    blockScope.hasOwnBinding(node.left.name) &&\n    blockScope.getOwnBinding(node.left.name).constantViolations.length <= 1\n  );\n}\n\n/**\n * Insert the provided nodes after the current one. When inserting nodes after an\n * expression, ensure that the completion record is correct by pushing the current node.\n */\n\nexport function insertAfter(\n  this: NodePath,\n  nodes_: t.Node | t.Node[],\n): NodePath[] {\n  _assertUnremoved.call(this);\n\n  if (this.isSequenceExpression()) {\n    return last(this.get(\"expressions\")).insertAfter(nodes_);\n  }\n\n  const nodes = _verifyNodeList.call(this, nodes_);\n\n  const { parentPath, parent } = this;\n  if (\n    parentPath.isExpressionStatement() ||\n    parentPath.isLabeledStatement() ||\n    // see insertBefore\n    isExportNamedDeclaration(parent) ||\n    (parentPath.isExportDefaultDeclaration() && this.isDeclaration())\n  ) {\n    return parentPath.insertAfter(\n      nodes.map(node => {\n        // Usually after an expression we can safely insert another expression:\n        //   A.insertAfter(B)\n        //     foo = A;  -> foo = (A, B);\n        // If A is an expression statement, it isn't safe anymore so we need to\n        // convert B to an expression statement\n        //     A;        -> A; B // No semicolon! It could break if followed by [!\n        return isExpression(node) ? expressionStatement(node) : node;\n      }),\n    );\n  } else if (\n    (this.isNodeType(\"Expression\") &&\n      !this.isJSXElement() &&\n      !parentPath.isJSXElement()) ||\n    (parentPath.isForStatement() && this.key === \"init\")\n  ) {\n    const self = this as NodePath<t.Expression | t.VariableDeclaration>;\n    if (self.node) {\n      const node = self.node;\n      let { scope } = this;\n\n      if (scope.path.isPattern()) {\n        assertExpression(node);\n\n        self.replaceWith(callExpression(arrowFunctionExpression([], node), []));\n        (self.get(\"callee.body\") as NodePath<t.Expression>).insertAfter(nodes);\n        return [self];\n      }\n\n      if (isHiddenInSequenceExpression(self)) {\n        nodes.unshift(node);\n      }\n      // We need to preserve the value of this expression.\n      else if (isCallExpression(node) && isSuper(node.callee)) {\n        nodes.unshift(node);\n        // `super(...)` always evaluates to `this`.\n        nodes.push(thisExpression());\n      } else if (isAlmostConstantAssignment(node, scope)) {\n        nodes.unshift(node);\n        nodes.push(cloneNode(node.left));\n      } else if (scope.isPure(node, true)) {\n        // Insert the nodes before rather than after; it's not observable.\n        nodes.push(node);\n      } else {\n        // Inserting after the computed key of a method should insert the\n        // temporary binding in the method's parent's scope.\n        if (parentPath.isMethod({ computed: true, key: node })) {\n          scope = scope.parent;\n        }\n        const temp = scope.generateDeclaredUidIdentifier();\n        nodes.unshift(\n          expressionStatement(\n            // @ts-expect-error todo(flow->ts): This can be a variable\n            // declaration in the \"init\" of a for statement, but that's\n            // invalid here.\n            assignmentExpression(\"=\", cloneNode(temp), node),\n          ),\n        );\n        nodes.push(expressionStatement(cloneNode(temp)));\n      }\n    }\n    // @ts-expect-error todo(flow->ts): check that nodes is an array of statements\n    return this.replaceExpressionWithStatements(nodes);\n  } else if (Array.isArray(this.container)) {\n    return _containerInsertAfter.call(this, nodes);\n  } else if (this.isStatementOrBlock()) {\n    const node = this.node as t.Statement;\n    const shouldInsertCurrentNode =\n      node &&\n      (!this.isExpressionStatement() ||\n        (node as t.ExpressionStatement).expression != null);\n\n    this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));\n    // @ts-expect-error Fixme: refine nodes to t.BlockStatement[\"body\"] when this is a BlockStatement path\n    return this.pushContainer(\"body\", nodes);\n  } else {\n    throw new Error(\n      \"We don't know what to do with this node type. \" +\n        \"We were previously a Statement but we can't fit in here?\",\n    );\n  }\n}\n\n/**\n * Update all sibling node paths after `fromIndex` by `incrementBy`.\n */\n\nexport function updateSiblingKeys(\n  this: NodePath,\n  fromIndex: number,\n  incrementBy: number,\n) {\n  if (!this.parent) return;\n\n  const paths = getCachedPaths(this.hub, this.parent) || ([] as never[]);\n\n  for (const [, path] of paths) {\n    if (\n      typeof path.key === \"number\" &&\n      path.container === this.container &&\n      path.key >= fromIndex\n    ) {\n      path.key += incrementBy;\n    }\n  }\n}\n\nexport function _verifyNodeList<N extends t.Node>(\n  this: NodePath,\n  nodes: N | N[],\n): N[] {\n  if (!nodes) {\n    return [];\n  }\n\n  if (!Array.isArray(nodes)) {\n    nodes = [nodes];\n  }\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    let msg;\n\n    if (!node) {\n      msg = \"has falsy node\";\n    } else if (typeof node !== \"object\") {\n      msg = \"contains a non-object node\";\n    } else if (!node.type) {\n      msg = \"without a type\";\n    } else if (node instanceof NodePath) {\n      msg = \"has a NodePath when it expected a raw object\";\n    }\n\n    if (msg) {\n      const type = Array.isArray(node) ? \"array\" : typeof node;\n      throw new Error(\n        `Node list ${msg} with the index of ${i} and type of ${type}`,\n      );\n    }\n  }\n\n  return nodes;\n}\n\nexport function unshiftContainer<N extends t.Node, K extends keyof N & string>(\n  this: NodePath<N>,\n  listKey: K,\n  nodes: N[K] extends (infer E)[]\n    ? E | E[]\n    : // todo: refine to t.Node[]\n      //  ? E extends t.Node\n      //    ? E | E[]\n      //    : never\n      never,\n) {\n  // todo: NodePaths<Nodes>\n  _assertUnremoved.call(this);\n\n  // @ts-expect-error fixme\n  nodes = _verifyNodeList.call(this, nodes);\n\n  // get the first path and insert our nodes before it, if it doesn't exist then it\n  // doesn't matter, our nodes will be inserted anyway\n  const path = NodePath.get({\n    parentPath: this,\n    parent: this.node,\n    container: (this.node as N)[listKey] as unknown as t.Node | t.Node[],\n    listKey,\n    key: 0,\n  }).setContext(this.context);\n\n  return _containerInsertBefore.call(\n    path,\n    // @ts-expect-error typings needed to narrow down nodes as t.Node[]\n    nodes,\n  );\n}\n\nexport function pushContainer<\n  P extends NodePath,\n  K extends string & keyof P[\"node\"],\n>(\n  this: P,\n  listKey: K,\n  nodes: P[\"node\"][K] extends (infer E)[]\n    ? E | E[]\n    : // todo: refine to t.Node[]\n      //  ? E extends t.Node\n      //    ? E | E[]\n      //    : never\n      never,\n) {\n  _assertUnremoved.call(this);\n\n  const verifiedNodes = _verifyNodeList.call(\n    this,\n    // @ts-expect-error refine typings\n    nodes,\n  );\n\n  // get an invisible path that represents the last node + 1 and replace it with our\n  // nodes, effectively inlining it\n\n  const container = (this.node as P[\"node\"])[listKey] as t.Node[];\n  const path = NodePath.get({\n    parentPath: this,\n    parent: this.node,\n    container: container as unknown as t.Node | t.Node[],\n    listKey,\n    key: container.length,\n  }).setContext(this.context);\n\n  return path.replaceWithMultiple(verifiedNodes);\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  /**\n   * Hoist the current node to the highest scope possible and return a UID\n   * referencing it.\n   */\n  // eslint-disable-next-line no-restricted-globals\n  exports.hoist = function hoist<T extends t.Node>(\n    this: NodePath<T>,\n    scope: Scope = this.scope,\n  ) {\n    const hoister = new PathHoister<T>(this, scope);\n    return hoister.run();\n  };\n}\n"],"names":["_cache","require","_hoister","_index","_context","_removal","_t","arrowFunctionExpression","assertExpression","assignmentExpression","blockStatement","callExpression","cloneNode","expressionStatement","isAssignmentExpression","isCallExpression","isExportNamedDeclaration","isExpression","isIdentifier","isSequenceExpression","isSuper","thisExpression","insertBefore","nodes_","_assertUnremoved","call","nodes","_verifyNodeList","parentPath","parent","isExpressionStatement","isLabeledStatement","isExportDefaultDeclaration","isDeclaration","isNodeType","isJSXElement","isForStatement","key","node","push","replaceExpressionWithStatements","Array","isArray","container","_containerInsertBefore","isStatementOrBlock","shouldInsertCurrentNode","expression","replaceWith","unshiftContainer","Error","_containerInsert","from","updateSiblingKeys","length","paths","splice","i","_this$context","to","path","getSibling","context","queue","pushContext","contexts","_getQueueContexts","setScope","debug","maybeQueue","_containerInsertAfter","last","arr","isHiddenInSequenceExpression","expressions","isAlmostConstantAssignment","scope","left","blockScope","getBlockParent","hasOwnBinding","name","getOwnBinding","constantViolations","insertAfter","get","map","self","isPattern","unshift","callee","isPure","isMethod","computed","temp","generateDeclaredUidIdentifier","pushContainer","fromIndex","incrementBy","getCachedPaths","hub","msg","type","NodePath","listKey","setContext","verifiedNodes","replaceWithMultiple","exports","hoist","hoister","PathHoister","run"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2756, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2761, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/replacement.ts"],"sourcesContent":["// This file contains methods responsible for replacing a node with another.\n\nimport { codeFrameColumns } from \"@babel/code-frame\";\nimport traverse from \"../index.ts\";\nimport NodePath from \"./index.ts\";\nimport { getCachedPaths } from \"../cache.ts\";\nimport { _verifyNodeList, _containerInsertAfter } from \"./modification.ts\";\nimport { parse } from \"@babel/parser\";\nimport {\n  FUNCTION_TYPES,\n  arrowFunctionExpression,\n  assignmentExpression,\n  awaitExpression,\n  blockStatement,\n  buildUndefinedNode,\n  callExpression,\n  cloneNode,\n  conditionalExpression,\n  expressionStatement,\n  getBindingIdentifiers,\n  identifier,\n  inheritLeadingComments,\n  inheritTrailingComments,\n  inheritsComments,\n  isBlockStatement,\n  isEmptyStatement,\n  isExpression,\n  isExpressionStatement,\n  isIfStatement,\n  isProgram,\n  isStatement,\n  isVariableDeclaration,\n  removeComments,\n  returnStatement,\n  sequenceExpression,\n  validate,\n  yieldExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport { resync, setScope } from \"./context.ts\";\n\n/**\n * Replace a node with an array of multiple. This method performs the following steps:\n *\n *  - Inherit the comments of first provided node with that of the current node.\n *  - Insert the provided nodes after the current node.\n *  - Remove the current node.\n */\n\nexport function replaceWithMultiple(\n  this: NodePath,\n  nodes: t.Node | t.Node[],\n): NodePath[] {\n  resync.call(this);\n\n  nodes = _verifyNodeList.call(this, nodes);\n  inheritLeadingComments(nodes[0], this.node);\n  inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  getCachedPaths(this.hub, this.parent)?.delete(this.node);\n  this.node =\n    // @ts-expect-error this.key must present in this.container\n    this.container[this.key] = null;\n  const paths = this.insertAfter(nodes);\n\n  if (this.node) {\n    this.requeue();\n  } else {\n    this.remove();\n  }\n  return paths;\n}\n\n/**\n * Parse a string as an expression and replace the current node with the result.\n *\n * NOTE: This is typically not a good idea to use. Building source strings when\n * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's\n * easier to use, your transforms will be extremely brittle.\n */\n\nexport function replaceWithSourceString(this: NodePath, replacement: string) {\n  resync.call(this);\n  let ast: t.File;\n\n  try {\n    replacement = `(${replacement})`;\n    // @ts-expect-error todo: use babel-types ast typings in Babel parser\n    ast = parse(replacement);\n  } catch (err) {\n    const loc = err.loc;\n    if (loc) {\n      err.message +=\n        \" - make sure this is an expression.\\n\" +\n        codeFrameColumns(replacement, {\n          start: {\n            line: loc.line,\n            column: loc.column + 1,\n          },\n        });\n      err.code = \"BABEL_REPLACE_SOURCE_ERROR\";\n    }\n    throw err;\n  }\n\n  const expressionAST = (ast.program.body[0] as t.ExpressionStatement)\n    .expression;\n  traverse.removeProperties(expressionAST);\n  return this.replaceWith(expressionAST);\n}\n\n/**\n * Replace the current node with another.\n */\nexport function replaceWith<R extends t.Node>(\n  this: NodePath,\n  replacementPath: R,\n): [NodePath<R>];\nexport function replaceWith<R extends NodePath>(\n  this: NodePath,\n  replacementPath: R,\n): [R];\nexport function replaceWith(\n  this: NodePath,\n  replacementPath: t.Node | NodePath,\n): [NodePath] {\n  resync.call(this);\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  let replacement: t.Node =\n    replacementPath instanceof NodePath\n      ? replacementPath.node\n      : replacementPath;\n\n  if (!replacement) {\n    throw new Error(\n      \"You passed `path.replaceWith()` a falsy node, use `path.remove()` instead\",\n    );\n  }\n\n  if (this.node === replacement) {\n    return [this];\n  }\n\n  if (this.isProgram() && !isProgram(replacement)) {\n    throw new Error(\n      \"You can only replace a Program root node with another Program node\",\n    );\n  }\n\n  if (Array.isArray(replacement)) {\n    throw new Error(\n      \"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\",\n    );\n  }\n\n  if (typeof replacement === \"string\") {\n    throw new Error(\n      \"Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`\",\n    );\n  }\n\n  let nodePath = \"\";\n\n  if (this.isNodeType(\"Statement\") && isExpression(replacement)) {\n    if (\n      !this.canHaveVariableDeclarationOrExpression() &&\n      !this.canSwapBetweenExpressionAndStatement(replacement) &&\n      !this.parentPath.isExportDefaultDeclaration()\n    ) {\n      // replacing a statement with an expression so wrap it in an expression statement\n      replacement = expressionStatement(replacement);\n      nodePath = \"expression\";\n    }\n  }\n\n  if (this.isNodeType(\"Expression\") && isStatement(replacement)) {\n    if (\n      !this.canHaveVariableDeclarationOrExpression() &&\n      !this.canSwapBetweenExpressionAndStatement(replacement)\n    ) {\n      // replacing an expression with a statement so let's explode it\n      return this.replaceExpressionWithStatements([replacement]) as [NodePath];\n    }\n  }\n\n  const oldNode = this.node;\n  if (oldNode) {\n    inheritsComments(replacement, oldNode);\n    removeComments(oldNode);\n  }\n\n  // replace the node\n  _replaceWith.call(this, replacement);\n  this.type = replacement.type;\n\n  // potentially create new scope\n  setScope.call(this);\n\n  // requeue for visiting\n  this.requeue();\n\n  return [nodePath ? this.get(nodePath) : this];\n}\n\nexport function _replaceWith(this: NodePath, node: t.Node) {\n  if (!this.container) {\n    throw new ReferenceError(\"Container is falsy\");\n  }\n\n  if (this.inList) {\n    // @ts-expect-error todo(flow->ts): check if validate accepts a numeric key\n    validate(this.parent, this.key, [node]);\n  } else {\n    validate(this.parent, this.key as string, node);\n  }\n\n  this.debug(`Replace with ${node?.type}`);\n  getCachedPaths(this.hub, this.parent)?.set(node, this).delete(this.node);\n\n  this.node =\n    // @ts-expect-error this.key must present in this.container\n    this.container[this.key] = node;\n}\n\n/**\n * This method takes an array of statements nodes and then explodes it\n * into expressions. This method retains completion records which is\n * extremely important to retain original semantics.\n */\n\nexport function replaceExpressionWithStatements(\n  this: NodePath,\n  nodes: Array<t.Statement>,\n) {\n  resync.call(this);\n\n  const declars: t.Identifier[] = [];\n  const nodesAsSingleExpression = gatherSequenceExpressions(nodes, declars);\n  if (nodesAsSingleExpression) {\n    for (const id of declars) this.scope.push({ id });\n    return this.replaceWith(nodesAsSingleExpression)[0].get(\"expressions\");\n  }\n\n  const functionParent = this.getFunctionParent();\n  const isParentAsync = functionParent?.node.async;\n  const isParentGenerator = functionParent?.node.generator;\n\n  const container = arrowFunctionExpression([], blockStatement(nodes));\n\n  this.replaceWith(callExpression(container, []));\n  // replaceWith changes the type of \"this\", but it isn't trackable by TS\n  type ThisType = NodePath<\n    t.CallExpression & {\n      callee: t.ArrowFunctionExpression & { body: t.BlockStatement };\n    }\n  >;\n\n  // hoist variable declaration in do block\n  // `(do { var x = 1; x;})` -> `var x; (() => { x = 1; return x; })()`\n  const callee = (this as ThisType).get(\"callee\");\n  callee.get(\"body\").scope.hoistVariables(id => this.scope.push({ id }));\n\n  // add implicit returns to all ending expression statements\n  const completionRecords: Array<NodePath> = callee.getCompletionRecords();\n  for (const path of completionRecords) {\n    if (!path.isExpressionStatement()) continue;\n\n    const loop = path.findParent(path => path.isLoop());\n    if (loop) {\n      let uid = loop.getData(\"expressionReplacementReturnUid\");\n\n      if (!uid) {\n        uid = callee.scope.generateDeclaredUidIdentifier(\"ret\");\n        callee\n          .get(\"body\")\n          .pushContainer(\"body\", returnStatement(cloneNode(uid)));\n        loop.setData(\"expressionReplacementReturnUid\", uid);\n      } else {\n        uid = identifier(uid.name);\n      }\n\n      path\n        .get(\"expression\")\n        .replaceWith(\n          assignmentExpression(\"=\", cloneNode(uid), path.node.expression),\n        );\n    } else {\n      path.replaceWith(returnStatement(path.node.expression));\n    }\n  }\n\n  // This is an IIFE, so we don't need to worry about the noNewArrows assumption\n  callee.arrowFunctionToExpression();\n  // Fixme: we can not `assert this is NodePath<t.FunctionExpression>` in `arrowFunctionToExpression`\n  // because it is not a class method known at compile time.\n  const newCallee = callee as unknown as NodePath<t.FunctionExpression>;\n\n  // (() => await xxx)() -> await (async () => await xxx)();\n  const needToAwaitFunction =\n    isParentAsync &&\n    traverse.hasType(\n      (this.get(\"callee.body\") as NodePath<t.BlockStatement>).node,\n      \"AwaitExpression\",\n      FUNCTION_TYPES,\n    );\n  const needToYieldFunction =\n    isParentGenerator &&\n    traverse.hasType(\n      (this.get(\"callee.body\") as NodePath<t.BlockStatement>).node,\n      \"YieldExpression\",\n      FUNCTION_TYPES,\n    );\n  if (needToAwaitFunction) {\n    newCallee.set(\"async\", true);\n    // yield* will await the generator return result\n    if (!needToYieldFunction) {\n      this.replaceWith(awaitExpression((this as ThisType).node));\n    }\n  }\n  if (needToYieldFunction) {\n    newCallee.set(\"generator\", true);\n    this.replaceWith(yieldExpression((this as ThisType).node, true));\n  }\n\n  return newCallee.get(\"body.body\");\n}\n\nfunction gatherSequenceExpressions(\n  nodes: ReadonlyArray<t.Node>,\n  declars: Array<t.Identifier>,\n) {\n  const exprs: t.Expression[] = [];\n  let ensureLastUndefined = true;\n\n  for (const node of nodes) {\n    // if we encounter emptyStatement before a non-emptyStatement\n    // we want to disregard that\n    if (!isEmptyStatement(node)) {\n      ensureLastUndefined = false;\n    }\n\n    if (isExpression(node)) {\n      exprs.push(node);\n    } else if (isExpressionStatement(node)) {\n      exprs.push(node.expression);\n    } else if (isVariableDeclaration(node)) {\n      if (node.kind !== \"var\") return; // bailed\n\n      for (const declar of node.declarations) {\n        const bindings = getBindingIdentifiers(declar);\n        for (const key of Object.keys(bindings)) {\n          declars.push(cloneNode(bindings[key]));\n        }\n\n        if (declar.init) {\n          exprs.push(assignmentExpression(\"=\", declar.id, declar.init));\n        }\n      }\n\n      ensureLastUndefined = true;\n    } else if (isIfStatement(node)) {\n      const consequent = node.consequent\n        ? gatherSequenceExpressions([node.consequent], declars)\n        : buildUndefinedNode();\n      const alternate = node.alternate\n        ? gatherSequenceExpressions([node.alternate], declars)\n        : buildUndefinedNode();\n      if (!consequent || !alternate) return; // bailed\n\n      exprs.push(conditionalExpression(node.test, consequent, alternate));\n    } else if (isBlockStatement(node)) {\n      const body = gatherSequenceExpressions(node.body, declars);\n      if (!body) return; // bailed\n\n      exprs.push(body);\n    } else if (isEmptyStatement(node)) {\n      // empty statement so ensure the last item is undefined if we're last\n      // checks if emptyStatement is first\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      // bailed, we can't turn this statement into an expression\n      return;\n    }\n  }\n\n  if (ensureLastUndefined) exprs.push(buildUndefinedNode());\n\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return sequenceExpression(exprs);\n  }\n}\n\nexport function replaceInline(this: NodePath, nodes: t.Node | Array<t.Node>) {\n  resync.call(this);\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = _verifyNodeList.call(this, nodes);\n      const paths = _containerInsertAfter.call(this, nodes);\n      this.remove();\n      return paths;\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}\n"],"names":["_codeFrame","require","_index","_index2","_cache","_modification","_parser","_t","_context","FUNCTION_TYPES","arrowFunctionExpression","assignmentExpression","awaitExpression","blockStatement","buildUndefinedNode","callExpression","cloneNode","conditionalExpression","expressionStatement","getBindingIdentifiers","identifier","inheritLeadingComments","inheritTrailingComments","inheritsComments","isBlockStatement","isEmptyStatement","isExpression","isExpressionStatement","isIfStatement","isProgram","isStatement","isVariableDeclaration","removeComments","returnStatement","sequenceExpression","validate","yieldExpression","replaceWithMultiple","nodes","_getCachedPaths","resync","call","_verifyNodeList","node","length","getCachedPaths","hub","parent","delete","container","key","paths","insertAfter","requeue","remove","replaceWithSourceString","replacement","ast","parse","err","loc","message","codeFrameColumns","start","line","column","code","expressionAST","program","body","expression","traverse","removeProperties","replaceWith","replacementPath","removed","Error","NodePath","Array","isArray","nodePath","isNodeType","canHaveVariableDeclarationOrExpression","canSwapBetweenExpressionAndStatement","parentPath","isExportDefaultDeclaration","replaceExpressionWithStatements","oldNode","_replaceWith","type","setScope","get","_getCachedPaths2","ReferenceError","inList","debug","set","declars","nodesAsSingleExpression","gatherSequenceExpressions","id","scope","push","functionParent","getFunctionParent","isParentAsync","async","isParentGenerator","generator","callee","hoistVariables","completionRecords","getCompletionRecords","path","loop","findParent","isLoop","uid","getData","generateDeclaredUidIdentifier","pushContainer","setData","name","arrowFunctionToExpression","newCallee","needToAwaitFunction","hasType","needToYieldFunction","exprs","ensureLastUndefined","kind","declar","declarations","bindings","Object","keys","init","consequent","alternate","test","indexOf","replaceInline","_containerInsertAfter"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3004, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3009, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/evaluation.ts"],"sourcesContent":["import type NodePath from \"./index.ts\";\nimport type * as t from \"@babel/types\";\n\n// This file contains Babels metainterpreter that can evaluate static code.\n\nconst VALID_OBJECT_CALLEES = [\"Number\", \"String\", \"Math\"] as const;\nconst VALID_IDENTIFIER_CALLEES = [\n  \"isFinite\",\n  \"isNaN\",\n  \"parseFloat\",\n  \"parseInt\",\n  \"decodeURI\",\n  \"decodeURIComponent\",\n  \"encodeURI\",\n  \"encodeURIComponent\",\n  process.env.BABEL_8_BREAKING ? \"btoa\" : null,\n  process.env.BABEL_8_BREAKING ? \"atob\" : null,\n] as const;\n\nconst INVALID_METHODS = [\"random\"] as const;\n\nfunction isValidObjectCallee(\n  val: string,\n): val is (typeof VALID_OBJECT_CALLEES)[number] {\n  return VALID_OBJECT_CALLEES.includes(\n    // @ts-expect-error val is a string\n    val,\n  );\n}\n\nfunction isValidIdentifierCallee(\n  val: string,\n): val is (typeof VALID_IDENTIFIER_CALLEES)[number] {\n  return VALID_IDENTIFIER_CALLEES.includes(\n    // @ts-expect-error val is a string\n    val,\n  );\n}\n\nfunction isInvalidMethod(val: string): val is (typeof INVALID_METHODS)[number] {\n  return INVALID_METHODS.includes(\n    // @ts-expect-error val is a string\n    val,\n  );\n}\n\n/**\n * Walk the input `node` and statically evaluate if it's truthy.\n *\n * Returning `true` when we're sure that the expression will evaluate to a\n * truthy value, `false` if we're sure that it will evaluate to a falsy\n * value and `undefined` if we aren't sure. Because of this please do not\n * rely on coercion when using this method and check with === if it's false.\n *\n * For example do:\n *\n *   if (t.evaluateTruthy(node) === false) falsyLogic();\n *\n * **AND NOT**\n *\n *   if (!t.evaluateTruthy(node)) falsyLogic();\n *\n */\n\nexport function evaluateTruthy(this: NodePath): boolean {\n  const res = this.evaluate();\n  if (res.confident) return !!res.value;\n}\n\ntype State = {\n  confident: boolean;\n  deoptPath: NodePath | null;\n  seen: Map<t.Node, Result>;\n};\n\ntype Result = {\n  resolved: boolean;\n  value?: any;\n};\n/**\n * Deopts the evaluation\n */\nfunction deopt(path: NodePath, state: State) {\n  if (!state.confident) return;\n  state.deoptPath = path;\n  state.confident = false;\n}\n\nconst Globals = new Map([\n  [\"undefined\", undefined],\n  [\"Infinity\", Infinity],\n  [\"NaN\", NaN],\n]);\n\n/**\n * We wrap the _evaluate method so we can track `seen` nodes, we push an item\n * to the map before we actually evaluate it so we can deopt on self recursive\n * nodes such as:\n *\n *   var g = a ? 1 : 2,\n *       a = g * this.foo\n */\nfunction evaluateCached(path: NodePath, state: State): any {\n  const { node } = path;\n  const { seen } = state;\n\n  if (seen.has(node)) {\n    const existing = seen.get(node);\n    if (existing.resolved) {\n      return existing.value;\n    } else {\n      deopt(path, state);\n      return;\n    }\n  } else {\n    const item: Result = { resolved: false };\n    seen.set(node, item);\n\n    const val = _evaluate(path, state);\n    if (state.confident) {\n      item.resolved = true;\n      item.value = val;\n    }\n    return val;\n  }\n}\n\nfunction _evaluate(path: NodePath, state: State): any {\n  if (!state.confident) return;\n\n  if (path.isSequenceExpression()) {\n    const exprs = path.get(\"expressions\");\n    return evaluateCached(exprs[exprs.length - 1], state);\n  }\n\n  if (\n    path.isStringLiteral() ||\n    path.isNumericLiteral() ||\n    path.isBooleanLiteral()\n  ) {\n    return path.node.value;\n  }\n\n  if (path.isNullLiteral()) {\n    return null;\n  }\n\n  if (path.isTemplateLiteral()) {\n    return evaluateQuasis(path, path.node.quasis, state);\n  }\n\n  if (\n    path.isTaggedTemplateExpression() &&\n    path.get(\"tag\").isMemberExpression()\n  ) {\n    const object = path.get(\"tag.object\") as NodePath;\n    const {\n      // @ts-expect-error todo(flow->ts): possible bug, object is can be any expression and so name might be undefined\n      node: { name },\n    } = object;\n    const property = path.get(\"tag.property\") as NodePath;\n\n    if (\n      object.isIdentifier() &&\n      name === \"String\" &&\n      // todo(flow->ts): was changed from getBinding(name, true)\n      //  should this be hasBinding(name, true) as the binding is never used later?\n      !path.scope.getBinding(name) &&\n      property.isIdentifier() &&\n      property.node.name === \"raw\"\n    ) {\n      return evaluateQuasis(path, path.node.quasi.quasis, state, true);\n    }\n  }\n\n  if (path.isConditionalExpression()) {\n    const testResult = evaluateCached(path.get(\"test\"), state);\n    if (!state.confident) return;\n    if (testResult) {\n      return evaluateCached(path.get(\"consequent\"), state);\n    } else {\n      return evaluateCached(path.get(\"alternate\"), state);\n    }\n  }\n\n  if (path.isExpressionWrapper()) {\n    // TypeCastExpression, ExpressionStatement etc\n    return evaluateCached(path.get(\"expression\"), state);\n  }\n\n  // \"foo\".length, \"foo\"[0]\n  if (\n    path.isMemberExpression() &&\n    !path.parentPath.isCallExpression({ callee: path.node })\n  ) {\n    const property = path.get(\"property\");\n    const object = path.get(\"object\");\n\n    if (object.isLiteral()) {\n      // @ts-expect-error todo(flow->ts): instead of typeof - would it be better to check type of ast node?\n      const value = object.node.value;\n      const type = typeof value;\n\n      let key = null;\n      if (path.node.computed) {\n        key = evaluateCached(property, state);\n        if (!state.confident) return;\n      } else if (property.isIdentifier()) {\n        key = property.node.name;\n      }\n      if (\n        (type === \"number\" || type === \"string\") &&\n        key != null &&\n        (typeof key === \"number\" || typeof key === \"string\")\n      ) {\n        return value[key];\n      }\n    }\n  }\n\n  if (path.isReferencedIdentifier()) {\n    const binding = path.scope.getBinding(path.node.name);\n\n    if (binding) {\n      if (\n        binding.constantViolations.length > 0 ||\n        path.node.start < binding.path.node.end\n      ) {\n        deopt(binding.path, state);\n        return;\n      }\n      if (binding.hasValue) {\n        return binding.value;\n      }\n    }\n\n    const name = path.node.name;\n    if (Globals.has(name)) {\n      if (!binding) {\n        return Globals.get(name);\n      }\n      deopt(binding.path, state);\n      return;\n    }\n\n    const resolved = path.resolve();\n    if (resolved === path) {\n      deopt(path, state);\n      return;\n    } else {\n      return evaluateCached(resolved, state);\n    }\n  }\n\n  if (path.isUnaryExpression({ prefix: true })) {\n    if (path.node.operator === \"void\") {\n      // we don't need to evaluate the argument to know what this will return\n      return undefined;\n    }\n\n    const argument = path.get(\"argument\");\n    if (\n      path.node.operator === \"typeof\" &&\n      (argument.isFunction() || argument.isClass())\n    ) {\n      return \"function\";\n    }\n\n    const arg = evaluateCached(argument, state);\n    if (!state.confident) return;\n    switch (path.node.operator) {\n      case \"!\":\n        return !arg;\n      case \"+\":\n        return +arg;\n      case \"-\":\n        return -arg;\n      case \"~\":\n        return ~arg;\n      case \"typeof\":\n        return typeof arg;\n    }\n  }\n\n  if (path.isArrayExpression()) {\n    const arr = [];\n    const elems: Array<NodePath> = path.get(\"elements\");\n    for (const elem of elems) {\n      const elemValue = elem.evaluate();\n\n      if (elemValue.confident) {\n        arr.push(elemValue.value);\n      } else {\n        deopt(elemValue.deopt, state);\n        return;\n      }\n    }\n    return arr;\n  }\n\n  if (path.isObjectExpression()) {\n    const obj = {};\n    const props = path.get(\"properties\");\n    for (const prop of props) {\n      if (prop.isObjectMethod() || prop.isSpreadElement()) {\n        deopt(prop, state);\n        return;\n      }\n      const keyPath = prop.get(\"key\");\n      let key;\n      if (prop.node.computed) {\n        key = keyPath.evaluate();\n        if (!key.confident) {\n          deopt(key.deopt, state);\n          return;\n        }\n        key = key.value;\n      } else if (keyPath.isIdentifier()) {\n        key = keyPath.node.name;\n      } else {\n        key = (\n          keyPath.node as t.StringLiteral | t.NumericLiteral | t.BigIntLiteral\n        ).value;\n      }\n      const valuePath = prop.get(\"value\");\n      let value = valuePath.evaluate();\n      if (!value.confident) {\n        deopt(value.deopt, state);\n        return;\n      }\n      value = value.value;\n      // @ts-expect-error key is any type\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  if (path.isLogicalExpression()) {\n    // If we are confident that the left side of an && is false, or the left\n    // side of an || is true, we can be confident about the entire expression\n    const wasConfident = state.confident;\n    const left = evaluateCached(path.get(\"left\"), state);\n    const leftConfident = state.confident;\n    state.confident = wasConfident;\n    const right = evaluateCached(path.get(\"right\"), state);\n    const rightConfident = state.confident;\n\n    switch (path.node.operator) {\n      case \"||\":\n        // TODO consider having a \"truthy type\" that doesn't bail on\n        // left uncertainty but can still evaluate to truthy.\n        state.confident = leftConfident && (!!left || rightConfident);\n        if (!state.confident) return;\n\n        return left || right;\n      case \"&&\":\n        state.confident = leftConfident && (!left || rightConfident);\n        if (!state.confident) return;\n\n        return left && right;\n      case \"??\":\n        state.confident = leftConfident && (left != null || rightConfident);\n        if (!state.confident) return;\n\n        return left ?? right;\n    }\n  }\n\n  if (path.isBinaryExpression()) {\n    const left = evaluateCached(path.get(\"left\"), state);\n    if (!state.confident) return;\n    const right = evaluateCached(path.get(\"right\"), state);\n    if (!state.confident) return;\n\n    switch (path.node.operator) {\n      case \"-\":\n        return left - right;\n      case \"+\":\n        return left + right;\n      case \"/\":\n        return left / right;\n      case \"*\":\n        return left * right;\n      case \"%\":\n        return left % right;\n      case \"**\":\n        return left ** right;\n      case \"<\":\n        return left < right;\n      case \">\":\n        return left > right;\n      case \"<=\":\n        return left <= right;\n      case \">=\":\n        return left >= right;\n      case \"==\":\n        return left == right; // eslint-disable-line eqeqeq\n      case \"!=\":\n        return left != right; // eslint-disable-line eqeqeq\n      case \"===\":\n        return left === right;\n      case \"!==\":\n        return left !== right;\n      case \"|\":\n        return left | right;\n      case \"&\":\n        return left & right;\n      case \"^\":\n        return left ^ right;\n      case \"<<\":\n        return left << right;\n      case \">>\":\n        return left >> right;\n      case \">>>\":\n        return left >>> right;\n    }\n  }\n\n  if (path.isCallExpression()) {\n    const callee = path.get(\"callee\");\n    let context;\n    let func;\n\n    // Number(1);\n    if (\n      callee.isIdentifier() &&\n      !path.scope.getBinding(callee.node.name) &&\n      (isValidObjectCallee(callee.node.name) ||\n        isValidIdentifierCallee(callee.node.name))\n    ) {\n      func = global[callee.node.name];\n    }\n\n    if (callee.isMemberExpression()) {\n      const object = callee.get(\"object\");\n      const property = callee.get(\"property\");\n\n      // Math.min(1, 2)\n      if (\n        object.isIdentifier() &&\n        property.isIdentifier() &&\n        isValidObjectCallee(object.node.name) &&\n        !isInvalidMethod(property.node.name)\n      ) {\n        context = global[object.node.name];\n        const key = property.node.name;\n        if (Object.hasOwn(context, key)) {\n          func = context[key as keyof typeof context];\n        }\n      }\n\n      // \"abc\".charCodeAt(4)\n      if (object.isLiteral() && property.isIdentifier()) {\n        // @ts-expect-error todo(flow->ts): consider checking ast node type instead of value type (StringLiteral and NumberLiteral)\n        const type = typeof object.node.value;\n        if (type === \"string\" || type === \"number\") {\n          // @ts-expect-error todo(flow->ts): consider checking ast node type instead of value type\n          context = object.node.value;\n          func = context[property.node.name];\n        }\n      }\n    }\n\n    if (func) {\n      const args = path.get(\"arguments\").map(arg => evaluateCached(arg, state));\n      if (!state.confident) return;\n\n      return func.apply(context, args);\n    }\n  }\n\n  deopt(path, state);\n}\n\nfunction evaluateQuasis(\n  path: NodePath<t.TaggedTemplateExpression | t.TemplateLiteral>,\n  quasis: Array<any>,\n  state: State,\n  raw = false,\n) {\n  let str = \"\";\n\n  let i = 0;\n  const exprs: Array<NodePath<t.Node>> = path.isTemplateLiteral()\n    ? path.get(\"expressions\")\n    : path.get(\"quasi.expressions\");\n\n  for (const elem of quasis) {\n    // not confident, evaluated an expression we don't like\n    if (!state.confident) break;\n\n    // add on element\n    str += raw ? elem.value.raw : elem.value.cooked;\n\n    // add on interpolated expression if it's present\n    const expr = exprs[i++];\n    if (expr) str += String(evaluateCached(expr, state));\n  }\n\n  if (!state.confident) return;\n  return str;\n}\n\n/**\n * Walk the input `node` and statically evaluate it.\n *\n * Returns an object in the form `{ confident, value, deopt }`. `confident`\n * indicates whether or not we had to drop out of evaluating the expression\n * because of hitting an unknown node that we couldn't confidently find the\n * value of, in which case `deopt` is the path of said node.\n *\n * Example:\n *\n *   t.evaluate(parse(\"5 + 5\")) // { confident: true, value: 10 }\n *   t.evaluate(parse(\"!true\")) // { confident: true, value: false }\n *   t.evaluate(parse(\"foo + foo\")) // { confident: false, value: undefined, deopt: NodePath }\n *\n */\n\nexport function evaluate(this: NodePath): {\n  confident: boolean;\n  value: any;\n  deopt?: NodePath;\n} {\n  const state: State = {\n    confident: true,\n    deoptPath: null,\n    seen: new Map(),\n  };\n  let value = evaluateCached(this, state);\n  if (!state.confident) value = undefined;\n\n  return {\n    confident: state.confident,\n    deopt: state.deoptPath,\n    value: value,\n  };\n}\n"],"names":["VALID_OBJECT_CALLEES","VALID_IDENTIFIER_CALLEES","INVALID_METHODS","isValidObjectCallee","val","includes","isValidIdentifierCallee","isInvalidMethod","evaluateTruthy","res","evaluate","confident","value","deopt","path","state","deoptPath","Globals","Map","undefined","Infinity","NaN","evaluateCached","node","seen","has","existing","get","resolved","item","set","_evaluate","isSequenceExpression","exprs","length","isStringLiteral","isNumericLiteral","isBooleanLiteral","isNullLiteral","isTemplateLiteral","evaluateQuasis","quasis","isTaggedTemplateExpression","isMemberExpression","object","name","property","isIdentifier","scope","getBinding","quasi","isConditionalExpression","testResult","isExpressionWrapper","parentPath","isCallExpression","callee","isLiteral","type","key","computed","isReferencedIdentifier","binding","constantViolations","start","end","hasValue","resolve","isUnaryExpression","prefix","operator","argument","isFunction","isClass","arg","isArrayExpression","arr","elems","elem","elemValue","push","isObjectExpression","obj","props","prop","isObjectMethod","isSpreadElement","keyPath","valuePath","isLogicalExpression","wasConfident","left","leftConfident","right","rightConfident","isBinaryExpression","Math","pow","context","func","global","hasOwnProperty","call","args","map","apply","raw","str","i","cooked","expr","String"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3375, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3380, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/conversion.ts"],"sourcesContent":["// This file contains methods that convert the path node into another node or some other type of data.\n\nimport {\n  arrowFunctionExpression,\n  assignmentExpression,\n  binaryExpression,\n  blockStatement,\n  callExpression,\n  conditionalExpression,\n  expressionStatement,\n  identifier,\n  isIdentifier,\n  jsxIdentifier,\n  logicalExpression,\n  LOGICAL_OPERATORS,\n  memberExpression,\n  metaProperty,\n  numericLiteral,\n  objectExpression,\n  restElement,\n  returnStatement,\n  sequenceExpression,\n  spreadElement,\n  stringLiteral,\n  super as _super,\n  thisExpression,\n  toExpression,\n  unaryExpression,\n  toBindingIdentifierName,\n  isFunction,\n  isAssignmentPattern,\n  isRestElement,\n  getFunctionName,\n  cloneNode,\n  variableDeclaration,\n  variableDeclarator,\n  exportNamedDeclaration,\n  exportSpecifier,\n  inherits,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport template from \"@babel/template\";\nimport { environmentVisitor } from \"../visitors.ts\";\nimport type NodePath from \"./index.ts\";\nimport type { Visitor } from \"../types.ts\";\nimport { setup } from \"./context.ts\";\n\nexport function toComputedKey(this: NodePath) {\n  let key;\n  if (this.isMemberExpression()) {\n    key = this.node.property;\n  } else if (this.isProperty() || this.isMethod()) {\n    key = this.node.key;\n  } else {\n    throw new ReferenceError(\"todo\");\n  }\n\n  // @ts-expect-error todo(flow->ts) computed does not exist in ClassPrivateProperty\n  if (!this.node.computed) {\n    if (isIdentifier(key)) key = stringLiteral(key.name);\n  }\n\n  return key;\n}\n\nexport function ensureBlock(\n  this: NodePath<\n    t.Loop | t.WithStatement | t.Function | t.LabeledStatement | t.CatchClause\n  >,\n): void {\n  const body = this.get(\"body\");\n  const bodyNode = body.node;\n\n  if (Array.isArray(body)) {\n    throw new Error(\"Can't convert array path to a block statement\");\n  }\n  if (!bodyNode) {\n    throw new Error(\"Can't convert node without a body\");\n  }\n\n  if (body.isBlockStatement()) {\n    // @ts-expect-error TS throws because ensureBlock returns the body node path\n    // however, we don't use the return value and treat it as a transform and\n    // assertion utilities. For better type inference we annotate it as an\n    // assertion method\n    // TODO: Unify the implementation with the type definition\n    return bodyNode;\n  }\n\n  const statements: Array<t.Statement> = [];\n\n  let stringPath = \"body\";\n  let key;\n  let listKey;\n  if (body.isStatement()) {\n    listKey = \"body\";\n    key = 0;\n    statements.push(body.node);\n  } else {\n    stringPath += \".body.0\";\n    if (this.isFunction()) {\n      key = \"argument\";\n      statements.push(returnStatement(body.node as t.Expression));\n    } else {\n      key = \"expression\";\n      statements.push(expressionStatement(body.node as t.Expression));\n    }\n  }\n\n  this.node.body = blockStatement(statements);\n  const parentPath = this.get(stringPath) as NodePath;\n  setup.call(\n    body,\n    parentPath,\n    listKey\n      ? // @ts-expect-error listKey must present in parent path\n        parentPath.node[listKey]\n      : parentPath.node,\n    listKey,\n    key,\n  );\n\n  // @ts-expect-error TS throws because ensureBlock returns the body node path\n  // however, we don't use the return value and treat it as a transform and\n  // assertion utilities. For better type inference we annotate it as an\n  // assertion method\n  // TODO: Unify the implementation with the type definition\n  return this.node;\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  /**\n   * Keeping this for backward-compatibility. You should use arrowFunctionToExpression() for >=7.x.\n   */\n  // eslint-disable-next-line no-restricted-globals\n  exports.arrowFunctionToShadowed = function (this: NodePath) {\n    if (!this.isArrowFunctionExpression()) return;\n\n    this.arrowFunctionToExpression();\n  };\n}\n\n/**\n * Given an arbitrary function, process its content as if it were an arrow function, moving references\n * to \"this\", \"arguments\", \"super\", and such into the function's parent scope. This method is useful if\n * you have wrapped some set of items in an IIFE or other function, but want \"this\", \"arguments\", and super\"\n * to continue behaving as expected.\n */\nexport function unwrapFunctionEnvironment(this: NodePath) {\n  if (\n    !this.isArrowFunctionExpression() &&\n    !this.isFunctionExpression() &&\n    !this.isFunctionDeclaration()\n  ) {\n    throw this.buildCodeFrameError(\n      \"Can only unwrap the environment of a function.\",\n    );\n  }\n\n  hoistFunctionEnvironment(this);\n}\n\nfunction setType<N extends t.Node, T extends N[\"type\"]>(\n  path: NodePath<N>,\n  type: T,\n): asserts path is NodePath<Extract<N, { type: T }>> {\n  path.node.type = type;\n}\n\n/**\n * Convert a given arrow function into a normal ES5 function expression.\n */\nexport function arrowFunctionToExpression(\n  this: NodePath<t.ArrowFunctionExpression>,\n  {\n    allowInsertArrow = true,\n    allowInsertArrowWithRest = allowInsertArrow,\n    noNewArrows = process.env.BABEL_8_BREAKING\n      ? // TODO(Babel 8): Consider defaulting to `false` for spec compliance\n        true\n      : !arguments[0]?.specCompliant,\n  }: {\n    allowInsertArrow?: boolean | void;\n    allowInsertArrowWithRest?: boolean | void;\n    noNewArrows?: boolean;\n  } = {},\n): NodePath<\n  Exclude<t.Function, t.Method | t.ArrowFunctionExpression> | t.CallExpression\n> {\n  if (!this.isArrowFunctionExpression()) {\n    throw (this as NodePath).buildCodeFrameError(\n      \"Cannot convert non-arrow function to a function expression.\",\n    );\n  }\n\n  let self = this;\n  if (!noNewArrows) {\n    // @ts-expect-error This is technicallynot valid on arrow functions\n    // because it adds an .id property, but we are going to convert it\n    // to a function expression anyway\n    self = self.ensureFunctionName(false) ?? self;\n  }\n\n  const { thisBinding, fnPath: fn } = hoistFunctionEnvironment(\n    self,\n    noNewArrows,\n    allowInsertArrow,\n    allowInsertArrowWithRest,\n  );\n\n  fn.ensureBlock();\n  setType(fn, \"FunctionExpression\");\n\n  if (!noNewArrows) {\n    const checkBinding = thisBinding\n      ? null\n      : fn.scope.generateUidIdentifier(\"arrowCheckId\");\n    if (checkBinding) {\n      fn.parentPath.scope.push({\n        id: checkBinding,\n        init: objectExpression([]),\n      });\n    }\n\n    fn.get(\"body\").unshiftContainer(\n      \"body\",\n      expressionStatement(\n        callExpression(this.hub.addHelper(\"newArrowCheck\"), [\n          thisExpression(),\n          checkBinding\n            ? identifier(checkBinding.name)\n            : identifier(thisBinding),\n        ]),\n      ),\n    );\n\n    fn.replaceWith(\n      callExpression(memberExpression(fn.node, identifier(\"bind\")), [\n        checkBinding ? identifier(checkBinding.name) : thisExpression(),\n      ]),\n    );\n\n    return fn.get(\"callee.object\");\n  }\n\n  return fn;\n}\n\nconst getSuperCallsVisitor = environmentVisitor<{\n  allSuperCalls: NodePath<t.CallExpression>[];\n}>({\n  CallExpression(child, { allSuperCalls }) {\n    if (!child.get(\"callee\").isSuper()) return;\n    allSuperCalls.push(child);\n  },\n});\n\n/**\n * Given a function, traverse its contents, and if there are references to \"this\", \"arguments\", \"super\",\n * or \"new.target\", ensure that these references reference the parent environment around this function.\n *\n * @returns `thisBinding`: the name of the injected reference to `this`; for example \"_this\"\n * @returns `fnPath`: the new path to the function node. This is different from the fnPath\n *                    parameter when the function node is wrapped in another node.\n */\nfunction hoistFunctionEnvironment(\n  fnPath: NodePath<t.Function>,\n  // TODO(Babel 8): Consider defaulting to `false` for spec compliance\n  noNewArrows: boolean | void = true,\n  allowInsertArrow: boolean | void = true,\n  allowInsertArrowWithRest: boolean | void = true,\n): { thisBinding: string; fnPath: NodePath<t.Function> } {\n  let arrowParent;\n  let thisEnvFn: NodePath<t.Function> = fnPath.findParent(p => {\n    if (p.isArrowFunctionExpression()) {\n      arrowParent ??= p;\n      return false;\n    }\n    return (\n      p.isFunction() ||\n      p.isProgram() ||\n      p.isClassProperty({ static: false }) ||\n      p.isClassPrivateProperty({ static: false })\n    );\n  }) as NodePath<t.Function>;\n  const inConstructor = thisEnvFn.isClassMethod({ kind: \"constructor\" });\n\n  if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) {\n    if (arrowParent) {\n      thisEnvFn = arrowParent;\n    } else if (allowInsertArrow) {\n      // It's safe to wrap this function in another and not hoist to the\n      // top level because the 'this' binding is constant in class\n      // properties (since 'super()' has already been called), so we don't\n      // need to capture/reassign it at the top level.\n      fnPath.replaceWith(\n        callExpression(\n          arrowFunctionExpression([], toExpression(fnPath.node)),\n          [],\n        ),\n      );\n      thisEnvFn = fnPath.get(\"callee\") as NodePath<t.ArrowFunctionExpression>;\n      fnPath = thisEnvFn.get(\"body\") as NodePath<t.FunctionExpression>;\n    } else {\n      throw fnPath.buildCodeFrameError(\n        \"Unable to transform arrow inside class property\",\n      );\n    }\n  }\n\n  const { thisPaths, argumentsPaths, newTargetPaths, superProps, superCalls } =\n    getScopeInformation(fnPath);\n\n  // Convert all super() calls in the constructor, if super is used in an arrow.\n  if (inConstructor && superCalls.length > 0) {\n    if (!allowInsertArrow) {\n      throw superCalls[0].buildCodeFrameError(\n        \"When using '@babel/plugin-transform-arrow-functions', \" +\n          \"it's not possible to compile `super()` in an arrow function without compiling classes.\\n\" +\n          \"Please add '@babel/plugin-transform-classes' to your Babel configuration.\",\n      );\n    }\n    if (!allowInsertArrowWithRest) {\n      // preset-env with target `since 2017` enables `transform-parameters` without `transform-classes`.\n      throw superCalls[0].buildCodeFrameError(\n        \"When using '@babel/plugin-transform-parameters', \" +\n          \"it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\\n\" +\n          \"Please add '@babel/plugin-transform-classes' to your Babel configuration.\",\n      );\n    }\n    const allSuperCalls: NodePath<t.CallExpression>[] = [];\n    thisEnvFn.traverse(getSuperCallsVisitor, { allSuperCalls });\n    const superBinding = getSuperBinding(thisEnvFn);\n    allSuperCalls.forEach(superCall => {\n      const callee = identifier(superBinding);\n      callee.loc = superCall.node.callee.loc;\n\n      superCall.get(\"callee\").replaceWith(callee);\n    });\n  }\n\n  // Convert all \"arguments\" references in the arrow to point at the alias.\n  if (argumentsPaths.length > 0) {\n    const argumentsBinding = getBinding(thisEnvFn, \"arguments\", () => {\n      const args = () => identifier(\"arguments\");\n      if (thisEnvFn.scope.path.isProgram()) {\n        return conditionalExpression(\n          binaryExpression(\n            \"===\",\n            unaryExpression(\"typeof\", args()),\n            stringLiteral(\"undefined\"),\n          ),\n          thisEnvFn.scope.buildUndefinedNode(),\n          args(),\n        );\n      } else {\n        return args();\n      }\n    });\n\n    argumentsPaths.forEach(argumentsChild => {\n      const argsRef = identifier(argumentsBinding);\n      argsRef.loc = argumentsChild.node.loc;\n\n      argumentsChild.replaceWith(argsRef);\n    });\n  }\n\n  // Convert all \"new.target\" references in the arrow to point at the alias.\n  if (newTargetPaths.length > 0) {\n    const newTargetBinding = getBinding(thisEnvFn, \"newtarget\", () =>\n      metaProperty(identifier(\"new\"), identifier(\"target\")),\n    );\n\n    newTargetPaths.forEach(targetChild => {\n      const targetRef = identifier(newTargetBinding);\n      targetRef.loc = targetChild.node.loc;\n\n      targetChild.replaceWith(targetRef);\n    });\n  }\n\n  // Convert all \"super.prop\" references to point at aliases.\n  if (superProps.length > 0) {\n    if (!allowInsertArrow) {\n      throw superProps[0].buildCodeFrameError(\n        \"When using '@babel/plugin-transform-arrow-functions', \" +\n          \"it's not possible to compile `super.prop` in an arrow function without compiling classes.\\n\" +\n          \"Please add '@babel/plugin-transform-classes' to your Babel configuration.\",\n      );\n    }\n\n    const flatSuperProps: NodePath<t.MemberExpression>[] = superProps.reduce(\n      (acc, superProp) => acc.concat(standardizeSuperProperty(superProp)),\n      [],\n    );\n\n    flatSuperProps.forEach(superProp => {\n      const key = superProp.node.computed\n        ? \"\"\n        : // @ts-expect-error super property must not contain private name\n          superProp.get(\"property\").node.name;\n\n      const superParentPath = superProp.parentPath;\n\n      const isAssignment = superParentPath.isAssignmentExpression({\n        left: superProp.node,\n      });\n      const isCall = superParentPath.isCallExpression({\n        callee: superProp.node,\n      });\n      const isTaggedTemplate = superParentPath.isTaggedTemplateExpression({\n        tag: superProp.node,\n      });\n      const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);\n\n      const args: t.Expression[] = [];\n      if (superProp.node.computed) {\n        // SuperProperty must not be a private name\n        args.push(superProp.get(\"property\").node as t.Expression);\n      }\n\n      if (isAssignment) {\n        const value = superParentPath.node.right;\n        args.push(value);\n      }\n\n      const call = callExpression(identifier(superBinding), args);\n\n      if (isCall) {\n        superParentPath.unshiftContainer(\"arguments\", thisExpression());\n        superProp.replaceWith(memberExpression(call, identifier(\"call\")));\n\n        thisPaths.push(\n          superParentPath.get(\"arguments.0\") as NodePath<t.ThisExpression>,\n        );\n      } else if (isAssignment) {\n        // Replace not only the super.prop, but the whole assignment\n        superParentPath.replaceWith(call);\n      } else if (isTaggedTemplate) {\n        superProp.replaceWith(\n          callExpression(memberExpression(call, identifier(\"bind\"), false), [\n            thisExpression(),\n          ]),\n        );\n\n        thisPaths.push(\n          superProp.get(\"arguments.0\") as NodePath<t.ThisExpression>,\n        );\n      } else {\n        superProp.replaceWith(call);\n      }\n    });\n  }\n\n  // Convert all \"this\" references in the arrow to point at the alias.\n  let thisBinding: string | null;\n  if (thisPaths.length > 0 || !noNewArrows) {\n    thisBinding = getThisBinding(thisEnvFn, inConstructor);\n\n    if (\n      noNewArrows ||\n      // In subclass constructors, still need to rewrite because \"this\" can't be bound in spec mode\n      // because it might not have been initialized yet.\n      (inConstructor && hasSuperClass(thisEnvFn))\n    ) {\n      thisPaths.forEach(thisChild => {\n        const thisRef = thisChild.isJSX()\n          ? jsxIdentifier(thisBinding)\n          : identifier(thisBinding);\n\n        thisRef.loc = thisChild.node.loc;\n        thisChild.replaceWith(thisRef);\n      });\n\n      if (!noNewArrows) thisBinding = null;\n    }\n  }\n\n  return { thisBinding, fnPath };\n}\n\ntype LogicalOp = Parameters<typeof logicalExpression>[0];\ntype BinaryOp = Parameters<typeof binaryExpression>[0];\n\nfunction isLogicalOp(op: string): op is LogicalOp {\n  return LOGICAL_OPERATORS.includes(op);\n}\n\nfunction standardizeSuperProperty(\n  superProp: NodePath<t.MemberExpression>,\n):\n  | [NodePath<t.MemberExpression>]\n  | [NodePath<t.MemberExpression>, NodePath<t.MemberExpression>] {\n  if (\n    superProp.parentPath.isAssignmentExpression() &&\n    superProp.parentPath.node.operator !== \"=\"\n  ) {\n    const assignmentPath = superProp.parentPath;\n\n    const op = assignmentPath.node.operator.slice(0, -1) as\n      | LogicalOp\n      | BinaryOp;\n\n    const value = assignmentPath.node.right;\n\n    const isLogicalAssignment = isLogicalOp(op);\n\n    if (superProp.node.computed) {\n      // from: super[foo] **= 4;\n      // to:   super[tmp = foo] = super[tmp] ** 4;\n\n      // from: super[foo] ??= 4;\n      // to:   super[tmp = foo] ?? super[tmp] = 4;\n\n      const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n\n      const object = superProp.node.object;\n      const property = superProp.node.property as t.Expression;\n\n      assignmentPath\n        .get(\"left\")\n        .replaceWith(\n          memberExpression(\n            object,\n            assignmentExpression(\"=\", tmp, property),\n            true /* computed */,\n          ),\n        );\n\n      assignmentPath\n        .get(\"right\")\n        .replaceWith(\n          rightExpression(\n            isLogicalAssignment ? \"=\" : op,\n            memberExpression(object, identifier(tmp.name), true /* computed */),\n            value,\n          ),\n        );\n    } else {\n      // from: super.foo **= 4;\n      // to:   super.foo = super.foo ** 4;\n\n      // from: super.foo ??= 4;\n      // to:   super.foo ?? super.foo = 4;\n\n      const object = superProp.node.object;\n      const property = superProp.node.property as t.Identifier;\n\n      assignmentPath\n        .get(\"left\")\n        .replaceWith(memberExpression(object, property));\n\n      assignmentPath\n        .get(\"right\")\n        .replaceWith(\n          rightExpression(\n            isLogicalAssignment ? \"=\" : op,\n            memberExpression(object, identifier(property.name)),\n            value,\n          ),\n        );\n    }\n\n    if (isLogicalAssignment) {\n      assignmentPath.replaceWith(\n        logicalExpression(\n          op,\n          assignmentPath.node.left as t.MemberExpression,\n          assignmentPath.node.right,\n        ),\n      );\n    } else {\n      assignmentPath.node.operator = \"=\";\n    }\n\n    return [\n      assignmentPath.get(\"left\") as NodePath<t.MemberExpression>,\n      assignmentPath.get(\"right\").get(\"left\") as NodePath<t.MemberExpression>,\n    ];\n  } else if (superProp.parentPath.isUpdateExpression()) {\n    const updateExpr = superProp.parentPath;\n\n    const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n    const computedKey = superProp.node.computed\n      ? superProp.scope.generateDeclaredUidIdentifier(\"prop\")\n      : null;\n\n    const parts: t.Expression[] = [\n      assignmentExpression(\n        \"=\",\n        tmp,\n        memberExpression(\n          superProp.node.object,\n          computedKey\n            ? assignmentExpression(\n                \"=\",\n                computedKey,\n                superProp.node.property as t.Expression,\n              )\n            : superProp.node.property,\n          superProp.node.computed,\n        ),\n      ),\n      assignmentExpression(\n        \"=\",\n        memberExpression(\n          superProp.node.object,\n          computedKey ? identifier(computedKey.name) : superProp.node.property,\n          superProp.node.computed,\n        ),\n        binaryExpression(\n          // map `++` to `+`, and `--` to `-`\n          superProp.parentPath.node.operator[0] as \"+\" | \"-\",\n          identifier(tmp.name),\n          numericLiteral(1),\n        ),\n      ),\n    ];\n\n    if (!superProp.parentPath.node.prefix) {\n      parts.push(identifier(tmp.name));\n    }\n\n    updateExpr.replaceWith(sequenceExpression(parts));\n\n    const left = updateExpr.get(\n      \"expressions.0.right\",\n    ) as NodePath<t.MemberExpression>;\n    const right = updateExpr.get(\n      \"expressions.1.left\",\n    ) as NodePath<t.MemberExpression>;\n    return [left, right];\n  }\n\n  return [superProp];\n\n  function rightExpression(\n    op: BinaryOp | \"=\",\n    left: t.MemberExpression,\n    right: t.Expression,\n  ) {\n    if (op === \"=\") {\n      return assignmentExpression(\"=\", left, right);\n    } else {\n      return binaryExpression(op, left, right);\n    }\n  }\n}\n\nfunction hasSuperClass(thisEnvFn: NodePath<t.Function>) {\n  return (\n    thisEnvFn.isClassMethod() &&\n    !!(thisEnvFn.parentPath.parentPath.node as t.Class).superClass\n  );\n}\n\nconst assignSuperThisVisitor = environmentVisitor<{\n  supers: WeakSet<t.CallExpression>;\n  thisBinding: string;\n}>({\n  CallExpression(child, { supers, thisBinding }) {\n    if (!child.get(\"callee\").isSuper()) return;\n    if (supers.has(child.node)) return;\n    supers.add(child.node);\n\n    child.replaceWithMultiple([\n      child.node,\n      assignmentExpression(\"=\", identifier(thisBinding), identifier(\"this\")),\n    ]);\n  },\n});\n\n// Create a binding that evaluates to the \"this\" of the given function.\nfunction getThisBinding(\n  thisEnvFn: NodePath<t.Function>,\n  inConstructor: boolean,\n) {\n  return getBinding(thisEnvFn, \"this\", thisBinding => {\n    if (!inConstructor || !hasSuperClass(thisEnvFn)) return thisExpression();\n\n    thisEnvFn.traverse(assignSuperThisVisitor, {\n      supers: new WeakSet(),\n      thisBinding,\n    });\n  });\n}\n\n// Create a binding for a function that will call \"super()\" with arguments passed through.\nfunction getSuperBinding(thisEnvFn: NodePath<t.Function>) {\n  return getBinding(thisEnvFn, \"supercall\", () => {\n    const argsBinding = thisEnvFn.scope.generateUidIdentifier(\"args\");\n    return arrowFunctionExpression(\n      [restElement(argsBinding)],\n      callExpression(_super(), [spreadElement(identifier(argsBinding.name))]),\n    );\n  });\n}\n\n// Create a binding for a function that will call \"super.foo\" or \"super[foo]\".\nfunction getSuperPropBinding(\n  thisEnvFn: NodePath<t.Function>,\n  isAssignment: boolean,\n  propName: string,\n) {\n  const op = isAssignment ? \"set\" : \"get\";\n\n  return getBinding(thisEnvFn, `superprop_${op}:${propName || \"\"}`, () => {\n    const argsList = [];\n\n    let fnBody;\n    if (propName) {\n      // () => super.foo\n      fnBody = memberExpression(_super(), identifier(propName));\n    } else {\n      const method = thisEnvFn.scope.generateUidIdentifier(\"prop\");\n      // (method) => super[method]\n      argsList.unshift(method);\n      fnBody = memberExpression(\n        _super(),\n        identifier(method.name),\n        true /* computed */,\n      );\n    }\n\n    if (isAssignment) {\n      const valueIdent = thisEnvFn.scope.generateUidIdentifier(\"value\");\n      argsList.push(valueIdent);\n\n      fnBody = assignmentExpression(\"=\", fnBody, identifier(valueIdent.name));\n    }\n\n    return arrowFunctionExpression(argsList, fnBody);\n  });\n}\n\nfunction getBinding(\n  thisEnvFn: NodePath,\n  key: string,\n  init: (name: string) => t.Expression,\n) {\n  const cacheKey = \"binding:\" + key;\n  let data: string | undefined = thisEnvFn.getData(cacheKey);\n  if (!data) {\n    const id = thisEnvFn.scope.generateUidIdentifier(key);\n    data = id.name;\n    thisEnvFn.setData(cacheKey, data);\n\n    thisEnvFn.scope.push({\n      id: id,\n      init: init(data),\n    });\n  }\n\n  return data;\n}\n\ntype ScopeInfo = {\n  thisPaths: NodePath<t.ThisExpression | t.JSXIdentifier>[];\n  superCalls: NodePath<t.CallExpression>[];\n  superProps: NodePath<t.MemberExpression>[];\n  argumentsPaths: NodePath<t.Identifier | t.JSXIdentifier>[];\n  newTargetPaths: NodePath<t.MetaProperty>[];\n};\n\nconst getScopeInformationVisitor = environmentVisitor<ScopeInfo>({\n  ThisExpression(child, { thisPaths }) {\n    thisPaths.push(child);\n  },\n  JSXIdentifier(child, { thisPaths }) {\n    if (child.node.name !== \"this\") return;\n    if (\n      !child.parentPath.isJSXMemberExpression({ object: child.node }) &&\n      !child.parentPath.isJSXOpeningElement({ name: child.node })\n    ) {\n      return;\n    }\n\n    thisPaths.push(child);\n  },\n  CallExpression(child, { superCalls }) {\n    if (child.get(\"callee\").isSuper()) superCalls.push(child);\n  },\n  MemberExpression(child, { superProps }) {\n    if (child.get(\"object\").isSuper()) superProps.push(child);\n  },\n  Identifier(child, { argumentsPaths }) {\n    if (!child.isReferencedIdentifier({ name: \"arguments\" })) return;\n\n    let curr = child.scope;\n    do {\n      if (curr.hasOwnBinding(\"arguments\")) {\n        curr.rename(\"arguments\");\n        return;\n      }\n      if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {\n        break;\n      }\n    } while ((curr = curr.parent));\n\n    argumentsPaths.push(child);\n  },\n  MetaProperty(child, { newTargetPaths }) {\n    if (!child.get(\"meta\").isIdentifier({ name: \"new\" })) return;\n    if (!child.get(\"property\").isIdentifier({ name: \"target\" })) return;\n\n    newTargetPaths.push(child);\n  },\n});\n\nfunction getScopeInformation(fnPath: NodePath) {\n  const thisPaths: ScopeInfo[\"thisPaths\"] = [];\n  const argumentsPaths: ScopeInfo[\"argumentsPaths\"] = [];\n  const newTargetPaths: ScopeInfo[\"newTargetPaths\"] = [];\n  const superProps: ScopeInfo[\"superProps\"] = [];\n  const superCalls: ScopeInfo[\"superCalls\"] = [];\n\n  fnPath.traverse(getScopeInformationVisitor, {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls,\n  });\n\n  return {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls,\n  };\n}\n\nexport function splitExportDeclaration(\n  this: NodePath<t.ExportDefaultDeclaration | t.ExportNamedDeclaration>,\n): NodePath<t.Declaration> {\n  if (!this.isExportDeclaration() || this.isExportAllDeclaration()) {\n    throw new Error(\"Only default and named export declarations can be split.\");\n  }\n  if (this.isExportNamedDeclaration() && this.get(\"specifiers\").length > 0) {\n    throw new Error(\"It doesn't make sense to split exported specifiers.\");\n  }\n\n  const declaration = this.get(\"declaration\");\n\n  if (this.isExportDefaultDeclaration()) {\n    const standaloneDeclaration =\n      declaration.isFunctionDeclaration() || declaration.isClassDeclaration();\n    const exportExpr =\n      declaration.isFunctionExpression() || declaration.isClassExpression();\n\n    const scope = declaration.isScope()\n      ? declaration.scope.parent\n      : declaration.scope;\n\n    // @ts-expect-error id is not defined in expressions other than function/class\n    let id = declaration.node.id;\n    let needBindingRegistration = false;\n\n    if (!id) {\n      needBindingRegistration = true;\n\n      id = scope.generateUidIdentifier(\"default\");\n\n      if (standaloneDeclaration || exportExpr) {\n        declaration.node.id = cloneNode(id);\n      }\n    } else if (exportExpr && scope.hasBinding(id.name)) {\n      needBindingRegistration = true;\n\n      id = scope.generateUidIdentifier(id.name);\n    }\n\n    const updatedDeclaration = standaloneDeclaration\n      ? declaration.node\n      : variableDeclaration(\"var\", [\n          variableDeclarator(\n            cloneNode(id),\n            // @ts-expect-error When `standaloneDeclaration` is false, declaration must not be a Function/ClassDeclaration\n            declaration.node,\n          ),\n        ]);\n\n    const updatedExportDeclaration = exportNamedDeclaration(null, [\n      exportSpecifier(cloneNode(id), identifier(\"default\")),\n    ]);\n\n    this.insertAfter(updatedExportDeclaration);\n    this.replaceWith(updatedDeclaration);\n\n    if (needBindingRegistration) {\n      scope.registerDeclaration(this);\n    }\n\n    return this;\n  } else if (this.get(\"specifiers\").length > 0) {\n    throw new Error(\"It doesn't make sense to split exported specifiers.\");\n  }\n\n  const bindingIdentifiers = declaration.getOuterBindingIdentifiers();\n\n  const specifiers = Object.keys(bindingIdentifiers).map(name => {\n    return exportSpecifier(identifier(name), identifier(name));\n  });\n\n  const aliasDeclar = exportNamedDeclaration(null, specifiers);\n\n  this.insertAfter(aliasDeclar);\n  this.replaceWith(declaration.node);\n  return this;\n}\n\nconst refersOuterBindingVisitor: Visitor<{\n  needsRename: boolean;\n  name: string;\n}> = {\n  \"ReferencedIdentifier|BindingIdentifier\"(\n    path: NodePath<t.Identifier>,\n    state,\n  ) {\n    // check if this node matches our function id\n    if (path.node.name !== state.name) return;\n    state.needsRename = true;\n    path.stop();\n  },\n  Scope(path, state) {\n    if (path.scope.hasOwnBinding(state.name)) {\n      path.skip();\n    }\n  },\n};\n\nexport function ensureFunctionName<\n  N extends t.FunctionExpression | t.ClassExpression,\n>(this: NodePath<N>, supportUnicodeId: boolean): null | NodePath<N> {\n  if (this.node.id) return this;\n\n  const res = getFunctionName(this.node, this.parent);\n  if (res == null) return this;\n  let { name } = res;\n\n  if (!supportUnicodeId && /[\\uD800-\\uDFFF]/.test(name)) {\n    return null;\n  }\n\n  if (name.startsWith(\"get \") || name.startsWith(\"set \")) {\n    // TODO: Remove this to support naming getters and setters\n    return null;\n  }\n\n  name = toBindingIdentifierName(name.replace(/[/ ]/g, \"_\"));\n  const id = identifier(name);\n  inherits(id, res.originalNode);\n\n  const state = { needsRename: false, name };\n\n  // check to see if we have a local binding of the id we're setting inside of\n  // the function, this is important as there are caveats associated\n\n  const { scope } = this;\n  const binding = scope.getOwnBinding(name);\n  if (binding) {\n    if (binding.kind === \"param\") {\n      // safari will blow up in strict mode with code like:\n      //\n      //   let t = function t(t) {};\n      //\n      // with the error:\n      //\n      //   Cannot declare a parameter named 't' as it shadows the name of a\n      //   strict mode function.\n      //\n      // this isn't to the spec and they've invented this behaviour which is\n      // **extremely** annoying so we avoid setting the name if it has a param\n      // with the same id\n      state.needsRename = true;\n    } else {\n      // otherwise it's defined somewhere in scope like:\n      //\n      //   let t = function () {\n      //     let t = 2;\n      //   };\n      //\n      // so we can safely just set the id and move along as it shadows the\n      // bound function id\n    }\n  } else if (scope.parent.hasBinding(name) || scope.hasGlobal(name)) {\n    this.traverse(refersOuterBindingVisitor, state);\n  }\n\n  if (!state.needsRename) {\n    this.node.id = id;\n    scope.getProgramParent().references[id.name] = true;\n    return this;\n  }\n\n  if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {\n    // we can just munge the local binding\n    scope.rename(id.name);\n    this.node.id = id;\n    scope.getProgramParent().references[id.name] = true;\n    return this;\n  }\n\n  // TODO: we don't currently support wrapping class expressions\n  if (!isFunction(this.node)) return null;\n\n  // need to add a wrapper since we can't change the references\n\n  const key = scope.generateUidIdentifier(id.name);\n  // shim in dummy params to retain function arity, if you try to read the\n  // source then you'll get the original since it's proxied so it's all good\n  const params = [];\n  for (let i = 0, len = getFunctionArity(this.node); i < len; i++) {\n    params.push(scope.generateUidIdentifier(\"x\"));\n  }\n  const call = template.expression.ast`\n    (function (${key}) {\n      function ${id}(${params}) {\n        return ${cloneNode(key)}.apply(this, arguments);\n      }\n\n      ${cloneNode(id)}.toString = function () {\n        return ${cloneNode(key)}.toString();\n      }\n\n      return ${cloneNode(id)};\n    })(${toExpression(this.node)})\n  ` as t.CallExpression;\n\n  return this.replaceWith(call)[0].get(\"arguments.0\") as NodePath<N>;\n}\n\nfunction getFunctionArity(node: t.Function): number {\n  const count = node.params.findIndex(\n    param => isAssignmentPattern(param) || isRestElement(param),\n  );\n  return count === -1 ? node.params.length : count;\n}\n"],"names":["_t","require","_template","_visitors","_context","arrowFunctionExpression","assignmentExpression","binaryExpression","blockStatement","callExpression","conditionalExpression","expressionStatement","identifier","isIdentifier","jsxIdentifier","logicalExpression","LOGICAL_OPERATORS","memberExpression","metaProperty","numericLiteral","objectExpression","restElement","returnStatement","sequenceExpression","spreadElement","stringLiteral","super","_super","thisExpression","toExpression","unaryExpression","toBindingIdentifierName","isFunction","isAssignmentPattern","isRestElement","getFunctionName","cloneNode","variableDeclaration","variableDeclarator","exportNamedDeclaration","exportSpecifier","inherits","toComputedKey","key","isMemberExpression","node","property","isProperty","isMethod","ReferenceError","computed","name","ensureBlock","body","get","bodyNode","Array","isArray","Error","isBlockStatement","statements","stringPath","listKey","isStatement","push","parentPath","setup","call","exports","arrowFunctionToShadowed","isArrowFunctionExpression","arrowFunctionToExpression","unwrapFunctionEnvironment","isFunctionExpression","isFunctionDeclaration","buildCodeFrameError","hoistFunctionEnvironment","setType","path","type","allowInsertArrow","allowInsertArrowWithRest","noNewArrows","_arguments$","arguments","specCompliant","self","_self$ensureFunctionN","ensureFunctionName","thisBinding","fnPath","fn","checkBinding","scope","generateUidIdentifier","id","init","unshiftContainer","hub","addHelper","replaceWith","getSuperCallsVisitor","environmentVisitor","CallExpression","child","allSuperCalls","isSuper","arrowParent","thisEnvFn","findParent","p","_arrowParent","isProgram","isClassProperty","static","isClassPrivateProperty","inConstructor","isClassMethod","kind","thisPaths","argumentsPaths","newTargetPaths","superProps","superCalls","getScopeInformation","length","traverse","superBinding","getSuperBinding","forEach","superCall","callee","loc","argumentsBinding","getBinding","args","buildUndefinedNode","argumentsChild","argsRef","newTargetBinding","targetChild","targetRef","flatSuperProps","reduce","acc","superProp","concat","standardizeSuperProperty","superParentPath","isAssignment","isAssignmentExpression","left","isCall","isCallExpression","isTaggedTemplate","isTaggedTemplateExpression","tag","getSuperPropBinding","value","right","getThisBinding","hasSuperClass","thisChild","thisRef","isJSX","isLogicalOp","op","includes","operator","assignmentPath","slice","isLogicalAssignment","tmp","generateDeclaredUidIdentifier","object","rightExpression","isUpdateExpression","updateExpr","computedKey","parts","prefix","superClass","assignSuperThisVisitor","supers","has","add","replaceWithMultiple","WeakSet","argsBinding","propName","argsList","fnBody","method","unshift","valueIdent","cacheKey","data","getData","setData","getScopeInformationVisitor","ThisExpression","JSXIdentifier","isJSXMemberExpression","isJSXOpeningElement","MemberExpression","Identifier","isReferencedIdentifier","curr","hasOwnBinding","rename","parent","MetaProperty","splitExportDeclaration","isExportDeclaration","isExportAllDeclaration","isExportNamedDeclaration","declaration","isExportDefaultDeclaration","standaloneDeclaration","isClassDeclaration","exportExpr","isClassExpression","isScope","needBindingRegistration","hasBinding","updatedDeclaration","updatedExportDeclaration","insertAfter","registerDeclaration","bindingIdentifiers","getOuterBindingIdentifiers","specifiers","Object","keys","map","aliasDeclar","refersOuterBindingVisitor","ReferencedIdentifier|BindingIdentifier","state","needsRename","stop","Scope","skip","supportUnicodeId","res","test","startsWith","replace","originalNode","binding","getOwnBinding","hasGlobal","getProgramParent","references","params","i","len","getFunctionArity","template","expression","ast","count","findIndex","param"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3944, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3949, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/introspection.ts"],"sourcesContent":["// This file contains methods responsible for introspecting the current path for certain values.\n\nimport type NodePath from \"./index.ts\";\nimport {\n  STATEMENT_OR_BLOCK_KEYS,\n  VISITOR_KEYS,\n  isBlockStatement,\n  isExpression,\n  isIdentifier,\n  isLiteral,\n  isStringLiteral,\n  isType,\n  matchesPattern as _matchesPattern,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\n/**\n * Match the current node if it matches the provided `pattern`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\n\nexport function matchesPattern(\n  this: NodePath,\n  pattern: string,\n  allowPartial?: boolean,\n): boolean {\n  return _matchesPattern(this.node, pattern, allowPartial);\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  /**\n   * Check whether we have the input `key`. If the `key` references an array then we check\n   * if the array has any items, otherwise we just check if it's falsy.\n   */\n  // eslint-disable-next-line no-restricted-globals\n  exports.has = function has<N extends t.Node>(\n    this: NodePath<N>,\n    key: keyof N,\n  ): boolean {\n    const val = (this.node as N)?.[key];\n    if (val && Array.isArray(val)) {\n      return !!val.length;\n    } else {\n      return !!val;\n    }\n  };\n}\n\nexport function isStatic(this: NodePath): boolean {\n  return this.scope.isStatic(this.node);\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  /**\n   * Alias of `has`.\n   */\n  // eslint-disable-next-line no-restricted-globals\n  exports.is = exports.has;\n\n  /**\n   * Opposite of `has`.\n   */\n  // eslint-disable-next-line no-restricted-globals\n  exports.isnt = function isnt<N extends t.Node>(\n    this: NodePath<N>,\n    key: keyof N,\n  ): boolean {\n    // @ts-expect-error Babel 7\n    return !this.has(key);\n  };\n\n  /**\n   * Check whether the path node `key` strict equals `value`.\n   */\n  // eslint-disable-next-line no-restricted-globals\n  exports.equals = function equals<N extends t.Node>(\n    this: NodePath<N>,\n    key: keyof N,\n    value: any,\n  ): boolean {\n    return (this.node as N)[key] === value;\n  };\n}\n\n/**\n * Check the type against our stored internal type of the node. This is handy when a node has\n * been removed yet we still internally know the type and need it to calculate node replacement.\n */\n\nexport function isNodeType(this: NodePath, type: string): boolean {\n  return isType(this.type, type);\n}\n\n/**\n * This checks whether or not we're in one of the following positions:\n *\n *   for (KEY in right);\n *   for (KEY;;);\n *\n * This is because these spots allow VariableDeclarations AND normal expressions so we need\n * to tell the path replacement that it's ok to replace this with an expression.\n */\n\nexport function canHaveVariableDeclarationOrExpression(this: NodePath) {\n  return (\n    (this.key === \"init\" || this.key === \"left\") && this.parentPath.isFor()\n  );\n}\n\n/**\n * This checks whether we are swapping an arrow function's body between an\n * expression and a block statement (or vice versa).\n *\n * This is because arrow functions may implicitly return an expression, which\n * is the same as containing a block statement.\n */\n\nexport function canSwapBetweenExpressionAndStatement(\n  this: NodePath,\n  replacement: t.Node,\n): boolean {\n  if (this.key !== \"body\" || !this.parentPath.isArrowFunctionExpression()) {\n    return false;\n  }\n\n  if (this.isExpression()) {\n    return isBlockStatement(replacement);\n  } else if (this.isBlockStatement()) {\n    return isExpression(replacement);\n  }\n\n  return false;\n}\n\n/**\n * Check whether the current path references a completion record\n */\n\nexport function isCompletionRecord(\n  this: NodePath,\n  allowInsideFunction?: boolean,\n): boolean {\n  let path = this;\n  let first = true;\n\n  do {\n    const { type, container } = path;\n\n    // we're in a function so can't be a completion record\n    if (!first && (path.isFunction() || type === \"StaticBlock\")) {\n      return !!allowInsideFunction;\n    }\n\n    first = false;\n\n    // check to see if we're the last item in the container and if we are\n    // we're a completion record!\n    if (Array.isArray(container) && path.key !== container.length - 1) {\n      return false;\n    }\n  } while (\n    (path = path.parentPath) &&\n    !path.isProgram() &&\n    !path.isDoExpression()\n  );\n\n  return true;\n}\n\n/**\n * Check whether or not the current `key` allows either a single statement or block statement\n * so we can explode it if necessary.\n */\n\nexport function isStatementOrBlock(this: NodePath): boolean {\n  if (\n    this.parentPath.isLabeledStatement() ||\n    isBlockStatement(this.container as t.Node)\n  ) {\n    return false;\n  } else {\n    return STATEMENT_OR_BLOCK_KEYS.includes(this.key as string);\n  }\n}\n\n/**\n * Check if the currently assigned path references the `importName` of `moduleSource`.\n */\n\nexport function referencesImport(\n  this: NodePath,\n  moduleSource: string,\n  importName: string,\n): boolean {\n  if (!this.isReferencedIdentifier()) {\n    if (\n      (this.isJSXMemberExpression() &&\n        this.node.property.name === importName) ||\n      ((this.isMemberExpression() || this.isOptionalMemberExpression()) &&\n        (this.node.computed\n          ? isStringLiteral(this.node.property, { value: importName })\n          : (this.node.property as t.Identifier).name === importName))\n    ) {\n      const object = (\n        this as NodePath<t.MemberExpression | t.OptionalMemberExpression>\n      ).get(\"object\");\n      return (\n        object.isReferencedIdentifier() &&\n        object.referencesImport(moduleSource, \"*\")\n      );\n    }\n\n    return false;\n  }\n\n  const binding = this.scope.getBinding((this.node as t.Identifier).name);\n  if (!binding || binding.kind !== \"module\") return false;\n\n  const path = binding.path;\n  const parent = path.parentPath;\n  if (!parent.isImportDeclaration()) return false;\n\n  // check moduleSource\n  if (parent.node.source.value === moduleSource) {\n    if (!importName) return true;\n  } else {\n    return false;\n  }\n\n  if (path.isImportDefaultSpecifier() && importName === \"default\") {\n    return true;\n  }\n\n  if (path.isImportNamespaceSpecifier() && importName === \"*\") {\n    return true;\n  }\n\n  if (\n    path.isImportSpecifier() &&\n    isIdentifier(path.node.imported, { name: importName })\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Get the source code associated with this node.\n */\n\nexport function getSource(this: NodePath): string {\n  const node = this.node;\n  if (node.end) {\n    const code = this.hub.getCode();\n    if (code) return code.slice(node.start, node.end);\n  }\n  return \"\";\n}\n\nexport function willIMaybeExecuteBefore(\n  this: NodePath,\n  target: NodePath,\n): boolean {\n  return this._guessExecutionStatusRelativeTo(target) !== \"after\";\n}\n\nfunction getOuterFunction(path: NodePath) {\n  return path.isProgram()\n    ? path\n    : (\n        path.parentPath.scope.getFunctionParent() ||\n        path.parentPath.scope.getProgramParent()\n      ).path;\n}\n\nfunction isExecutionUncertain(type: t.Node[\"type\"], key: string) {\n  switch (type) {\n    // a && FOO\n    // a || FOO\n    case \"LogicalExpression\":\n      return key === \"right\";\n\n    // a ? FOO : FOO\n    // if (a) FOO; else FOO;\n    case \"ConditionalExpression\":\n    case \"IfStatement\":\n      return key === \"consequent\" || key === \"alternate\";\n\n    // while (a) FOO;\n    case \"WhileStatement\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForOfStatement\":\n      return key === \"body\";\n\n    // for (a; b; FOO) FOO;\n    case \"ForStatement\":\n      return key === \"body\" || key === \"update\";\n\n    // switch (a) { FOO }\n    case \"SwitchStatement\":\n      return key === \"cases\";\n\n    // try { a } catch FOO finally { b }\n    case \"TryStatement\":\n      return key === \"handler\";\n\n    // var [ x = FOO ]\n    case \"AssignmentPattern\":\n      return key === \"right\";\n\n    // a?.[FOO]\n    case \"OptionalMemberExpression\":\n      return key === \"property\";\n\n    // a?.(FOO)\n    case \"OptionalCallExpression\":\n      return key === \"arguments\";\n\n    default:\n      return false;\n  }\n}\n\nfunction isExecutionUncertainInList(paths: NodePath[], maxIndex: number) {\n  for (let i = 0; i < maxIndex; i++) {\n    const path = paths[i];\n    if (isExecutionUncertain(path.parent.type, path.parentKey)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// TODO(Babel 8)\n// This can be { before: boolean, after: boolean, unknown: boolean }.\n// This allows transforms like the tdz one to treat cases when the status\n// is both before and unknown/after like if it were before.\ntype RelativeExecutionStatus = \"before\" | \"after\" | \"unknown\";\n\n// Used to avoid infinite recursion in cases like\n//   function f() { if (false) f(); }\n//   f();\n// It also works with indirect recursion.\nconst SYMBOL_CHECKING = Symbol();\n\ntype ExecutionStatusCache = Map<\n  t.Node,\n  Map<t.Node, RelativeExecutionStatus | typeof SYMBOL_CHECKING>\n>;\n\n/**\n * Given a `target` check the execution status of it relative to the current path.\n *\n * \"Execution status\" simply refers to where or not we **think** this will execute\n * before or after the input `target` element.\n */\n\nexport function _guessExecutionStatusRelativeTo(\n  this: NodePath,\n  target: NodePath,\n): RelativeExecutionStatus {\n  return _guessExecutionStatusRelativeToCached(this, target, new Map());\n}\n\nfunction _guessExecutionStatusRelativeToCached(\n  base: NodePath,\n  target: NodePath,\n  cache: ExecutionStatusCache,\n): RelativeExecutionStatus {\n  // check if the two paths are in different functions, we can't track execution of these\n  const funcParent = {\n    this: getOuterFunction(base),\n    target: getOuterFunction(target),\n  };\n\n  // here we check the `node` equality as sometimes we may have different paths for the\n  // same node due to path thrashing\n  if (funcParent.target.node !== funcParent.this.node) {\n    return _guessExecutionStatusRelativeToDifferentFunctionsCached(\n      base,\n      funcParent.target,\n      cache,\n    );\n  }\n\n  const paths = {\n    target: target.getAncestry(),\n    this: base.getAncestry(),\n  };\n\n  // If this is an ancestor of the target path,\n  // e.g. f(g); where this is f and target is g.\n  if (paths.target.includes(base)) return \"after\";\n  if (paths.this.includes(target)) return \"before\";\n\n  // get ancestor where the branches intersect\n  let commonPath;\n  const commonIndex = { target: 0, this: 0 };\n\n  while (!commonPath && commonIndex.this < paths.this.length) {\n    const path = paths.this[commonIndex.this];\n    commonIndex.target = paths.target.indexOf(path);\n    if (commonIndex.target >= 0) {\n      commonPath = path;\n    } else {\n      commonIndex.this++;\n    }\n  }\n\n  if (!commonPath) {\n    throw new Error(\n      \"Internal Babel error - The two compared nodes\" +\n        \" don't appear to belong to the same program.\",\n    );\n  }\n\n  if (\n    isExecutionUncertainInList(paths.this, commonIndex.this - 1) ||\n    isExecutionUncertainInList(paths.target, commonIndex.target - 1)\n  ) {\n    return \"unknown\";\n  }\n\n  const divergence = {\n    this: paths.this[commonIndex.this - 1],\n    target: paths.target[commonIndex.target - 1],\n  };\n\n  // container list so let's see which one is after the other\n  // e.g. [ THIS, TARGET ]\n  if (\n    divergence.target.listKey &&\n    divergence.this.listKey &&\n    divergence.target.container === divergence.this.container\n  ) {\n    return divergence.target.key > divergence.this.key ? \"before\" : \"after\";\n  }\n\n  // otherwise we're associated by a parent node, check which key comes before the other\n  const keys = VISITOR_KEYS[commonPath.type];\n  const keyPosition = {\n    this: keys.indexOf(divergence.this.parentKey),\n    target: keys.indexOf(divergence.target.parentKey),\n  };\n  return keyPosition.target > keyPosition.this ? \"before\" : \"after\";\n}\n\nfunction _guessExecutionStatusRelativeToDifferentFunctionsInternal(\n  base: NodePath,\n  target: NodePath,\n  cache: ExecutionStatusCache,\n): RelativeExecutionStatus {\n  if (!target.isFunctionDeclaration()) {\n    if (\n      _guessExecutionStatusRelativeToCached(base, target, cache) === \"before\"\n    ) {\n      return \"before\";\n    }\n    return \"unknown\";\n  } else if (target.parentPath.isExportDeclaration()) {\n    return \"unknown\";\n  }\n\n  // so we're in a completely different function, if this is a function declaration\n  // then we can be a bit smarter and handle cases where the function is either\n  // a. not called at all (part of an export)\n  // b. called directly\n  const binding = target.scope.getBinding(target.node.id.name);\n\n  // no references!\n  if (!binding.references) return \"before\";\n\n  const referencePaths: Array<NodePath> = binding.referencePaths;\n\n  let allStatus;\n\n  // verify that all the calls have the same execution status\n  for (const path of referencePaths) {\n    // if a reference is a child of the function we're checking against then we can\n    // safely ignore it\n    const childOfFunction = !!path.find(path => path.node === target.node);\n    if (childOfFunction) continue;\n\n    if (path.key !== \"callee\" || !path.parentPath.isCallExpression()) {\n      // This function is passed as a reference, so we don't\n      // know when it will be called.\n      return \"unknown\";\n    }\n\n    const status = _guessExecutionStatusRelativeToCached(base, path, cache);\n\n    if (allStatus && allStatus !== status) {\n      return \"unknown\";\n    } else {\n      allStatus = status;\n    }\n  }\n\n  return allStatus;\n}\n\nfunction _guessExecutionStatusRelativeToDifferentFunctionsCached(\n  base: NodePath,\n  target: NodePath,\n  cache: ExecutionStatusCache,\n): RelativeExecutionStatus {\n  let nodeMap = cache.get(base.node);\n  let cached;\n\n  if (!nodeMap) {\n    cache.set(base.node, (nodeMap = new Map()));\n  } else if ((cached = nodeMap.get(target.node))) {\n    if (cached === SYMBOL_CHECKING) {\n      return \"unknown\";\n    }\n    return cached;\n  }\n\n  nodeMap.set(target.node, SYMBOL_CHECKING);\n\n  const result = _guessExecutionStatusRelativeToDifferentFunctionsInternal(\n    base,\n    target,\n    cache,\n  );\n\n  nodeMap.set(target.node, result);\n  return result;\n}\n\n/**\n * Resolve a \"pointer\" `NodePath` to it's absolute path.\n */\nexport function resolve(\n  this: NodePath,\n  dangerous?: boolean,\n  resolved?: NodePath[],\n) {\n  return _resolve.call(this, dangerous, resolved) || this;\n}\n\nexport function _resolve(\n  this: NodePath,\n  dangerous?: boolean,\n  resolved?: NodePath[],\n): NodePath | undefined | null {\n  // detect infinite recursion\n  // todo: possibly have a max length on this just to be safe\n  if (resolved?.includes(this)) return;\n\n  // we store all the paths we've \"resolved\" in this array to prevent infinite recursion\n  resolved = resolved || [];\n  resolved.push(this);\n\n  if (this.isVariableDeclarator()) {\n    if (this.get(\"id\").isIdentifier()) {\n      return this.get(\"init\").resolve(dangerous, resolved);\n    } else {\n      // otherwise it's a request for a pattern and that's a bit more tricky\n    }\n  } else if (this.isReferencedIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return;\n\n    // reassigned so we can't really resolve it\n    if (!binding.constant) return;\n\n    // todo - lookup module in dependency graph\n    if (binding.kind === \"module\") return;\n\n    if (binding.path !== this) {\n      const ret = binding.path.resolve(dangerous, resolved);\n      // If the identifier resolves to parent node then we can't really resolve it.\n      if (this.find(parent => parent.node === ret.node)) return;\n      return ret;\n    }\n  } else if (this.isTypeCastExpression()) {\n    // @ ts-ignore todo: babel-types\n    return this.get(\"expression\").resolve(dangerous, resolved);\n  } else if (dangerous && this.isMemberExpression()) {\n    // this is dangerous, as non-direct target assignments will mutate it's state\n    // making this resolution inaccurate\n\n    const targetKey = this.toComputedKey();\n    if (!isLiteral(targetKey)) return;\n\n    // @ts-expect-error todo(flow->ts): NullLiteral\n    const targetName = targetKey.value;\n\n    const target = this.get(\"object\").resolve(dangerous, resolved);\n\n    if (target.isObjectExpression()) {\n      const props = target.get(\"properties\");\n      for (const prop of props as any[]) {\n        if (!prop.isProperty()) continue;\n\n        const key = prop.get(\"key\");\n\n        // { foo: obj }\n        let match =\n          prop.isnt(\"computed\") && key.isIdentifier({ name: targetName });\n\n        // { \"foo\": \"obj\" } or { [\"foo\"]: \"obj\" }\n        match = match || key.isLiteral({ value: targetName });\n\n        if (match) return prop.get(\"value\").resolve(dangerous, resolved);\n      }\n    } else if (target.isArrayExpression() && !isNaN(+targetName)) {\n      const elems = target.get(\"elements\");\n      const elem = elems[targetName];\n      if (elem) return elem.resolve(dangerous, resolved);\n    }\n  }\n}\n\nexport function isConstantExpression(this: NodePath): boolean {\n  if (this.isIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return false;\n    return binding.constant;\n  }\n\n  if (this.isLiteral()) {\n    if (this.isRegExpLiteral()) {\n      return false;\n    }\n\n    if (this.isTemplateLiteral()) {\n      return this.get(\"expressions\").every(expression =>\n        expression.isConstantExpression(),\n      );\n    }\n\n    return true;\n  }\n\n  if (this.isUnaryExpression()) {\n    if (this.node.operator !== \"void\") {\n      return false;\n    }\n\n    return this.get(\"argument\").isConstantExpression();\n  }\n\n  if (this.isBinaryExpression()) {\n    const { operator } = this.node;\n    return (\n      operator !== \"in\" &&\n      operator !== \"instanceof\" &&\n      this.get(\"left\").isConstantExpression() &&\n      this.get(\"right\").isConstantExpression()\n    );\n  }\n\n  if (this.isMemberExpression()) {\n    return (\n      !this.node.computed &&\n      this.get(\"object\").isIdentifier({ name: \"Symbol\" }) &&\n      !this.scope.hasBinding(\"Symbol\", { noGlobals: true })\n    );\n  }\n\n  if (this.isCallExpression()) {\n    return (\n      this.node.arguments.length === 1 &&\n      this.get(\"callee\").matchesPattern(\"Symbol.for\") &&\n      !this.scope.hasBinding(\"Symbol\", { noGlobals: true }) &&\n      this.get(\"arguments\")[0].isStringLiteral()\n    );\n  }\n\n  return false;\n}\n\nexport function isInStrictMode(this: NodePath) {\n  const start = this.isProgram() ? this : this.parentPath;\n\n  const strictParent = start.find(path => {\n    if (path.isProgram({ sourceType: \"module\" })) return true;\n\n    if (path.isClass()) return true;\n\n    if (\n      path.isArrowFunctionExpression() &&\n      !path.get(\"body\").isBlockStatement()\n    ) {\n      return false;\n    }\n\n    let body: t.BlockStatement | t.Program;\n    if (path.isFunction()) {\n      body = path.node.body as t.BlockStatement;\n    } else if (path.isProgram()) {\n      // @ts-expect-error TODO: TS thinks that `path` here cannot be\n      // Program due to the `isProgram()` check at the beginning of\n      // the function\n      body = path.node;\n    } else {\n      return false;\n    }\n\n    for (const directive of body.directives) {\n      if (directive.value.value === \"use strict\") {\n        return true;\n      }\n    }\n  });\n\n  return !!strictParent;\n}\n"],"names":["_t","require","STATEMENT_OR_BLOCK_KEYS","VISITOR_KEYS","isBlockStatement","isExpression","isIdentifier","isLiteral","isStringLiteral","isType","matchesPattern","_matchesPattern","pattern","allowPartial","node","exports","has","key","_this$node","val","Array","isArray","length","isStatic","scope","is","isnt","equals","value","isNodeType","type","canHaveVariableDeclarationOrExpression","parentPath","isFor","canSwapBetweenExpressionAndStatement","replacement","isArrowFunctionExpression","isCompletionRecord","allowInsideFunction","path","first","container","isFunction","isProgram","isDoExpression","isStatementOrBlock","isLabeledStatement","includes","referencesImport","moduleSource","importName","isReferencedIdentifier","isJSXMemberExpression","property","name","isMemberExpression","isOptionalMemberExpression","computed","object","get","binding","getBinding","kind","parent","isImportDeclaration","source","isImportDefaultSpecifier","isImportNamespaceSpecifier","isImportSpecifier","imported","getSource","end","code","hub","getCode","slice","start","willIMaybeExecuteBefore","target","_guessExecutionStatusRelativeTo","getOuterFunction","getFunctionParent","getProgramParent","isExecutionUncertain","isExecutionUncertainInList","paths","maxIndex","i","parentKey","SYMBOL_CHECKING","Symbol","_guessExecutionStatusRelativeToCached","Map","base","cache","funcParent","this","_guessExecutionStatusRelativeToDifferentFunctionsCached","getAncestry","commonPath","commonIndex","indexOf","Error","divergence","listKey","keys","keyPosition","_guessExecutionStatusRelativeToDifferentFunctionsInternal","isFunctionDeclaration","isExportDeclaration","id","references","referencePaths","allStatus","childOfFunction","find","isCallExpression","status","nodeMap","cached","set","result","resolve","dangerous","resolved","_resolve","call","_resolved","push","isVariableDeclarator","constant","ret","isTypeCastExpression","targetKey","toComputedKey","targetName","isObjectExpression","props","prop","isProperty","match","isArrayExpression","isNaN","elems","elem","isConstantExpression","isRegExpLiteral","isTemplateLiteral","every","expression","isUnaryExpression","operator","isBinaryExpression","hasBinding","noGlobals","arguments","isInStrictMode","strictParent","sourceType","isClass","body","directive","directives"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4327, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4332, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/family.ts"],"sourcesContent":["// This file contains methods responsible for dealing with/retrieving children or siblings.\n\nimport type TraversalContext from \"../context.ts\";\nimport NodePath from \"./index.ts\";\nimport {\n  getAssignmentIdentifiers as _getAssignmentIdentifiers,\n  getBindingIdentifiers as _getBindingIdentifiers,\n  getOuterBindingIdentifiers as _getOuterBindingIdentifiers,\n  numericLiteral,\n  unaryExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nconst NORMAL_COMPLETION = 0;\nconst BREAK_COMPLETION = 1;\n\ntype Completion = {\n  path: NodePath;\n  type: 0 | 1;\n};\n\ntype CompletionContext = {\n  // whether the current context allows `break` statement. When it allows, we have\n  // to search all the statements for potential `break`\n  canHaveBreak: boolean;\n  // whether the statement is an immediate descendant of a switch case clause\n  inCaseClause: boolean;\n  // whether the `break` statement record should be populated to upper level\n  // when a `break` statement is an immediate descendant of a block statement, e.g.\n  // `{ break }`, it can influence the control flow in the upper levels.\n  shouldPopulateBreak: boolean;\n};\n\nfunction NormalCompletion(path: NodePath): Completion {\n  return { type: NORMAL_COMPLETION, path };\n}\n\nfunction BreakCompletion(path: NodePath): Completion {\n  return { type: BREAK_COMPLETION, path };\n}\n\nexport function getOpposite(this: NodePath): NodePath | null {\n  if (this.key === \"left\") {\n    return this.getSibling(\"right\");\n  } else if (this.key === \"right\") {\n    return this.getSibling(\"left\");\n  }\n  return null;\n}\n\nfunction addCompletionRecords(\n  path: NodePath | null | undefined,\n  records: Completion[],\n  context: CompletionContext,\n): Completion[] {\n  if (path) {\n    records.push(..._getCompletionRecords(path, context));\n  }\n  return records;\n}\n\nfunction completionRecordForSwitch(\n  cases: NodePath<t.SwitchCase>[],\n  records: Completion[],\n  context: CompletionContext,\n): Completion[] {\n  // https://tc39.es/ecma262/#sec-runtime-semantics-caseblockevaluation\n  let lastNormalCompletions: Completion[] = [];\n  for (let i = 0; i < cases.length; i++) {\n    const casePath = cases[i];\n    const caseCompletions = _getCompletionRecords(casePath, context);\n    const normalCompletions = [];\n    const breakCompletions = [];\n    for (const c of caseCompletions) {\n      if (c.type === NORMAL_COMPLETION) {\n        normalCompletions.push(c);\n      }\n      if (c.type === BREAK_COMPLETION) {\n        breakCompletions.push(c);\n      }\n    }\n    if (normalCompletions.length) {\n      lastNormalCompletions = normalCompletions;\n    }\n    records.push(...breakCompletions);\n  }\n  records.push(...lastNormalCompletions);\n  return records;\n}\n\nfunction normalCompletionToBreak(completions: Completion[]) {\n  completions.forEach(c => {\n    c.type = BREAK_COMPLETION;\n  });\n}\n\n/**\n * Determine how we should handle the break statement for break completions\n *\n * @param {Completion[]} completions\n * @param {boolean} reachable Whether the break statement is reachable after\n   we mark the normal completions _before_ the given break completions as the final\n   completions. For example,\n   `{ 0 }; break;` is transformed to `{ return 0 }; break;`, the `break` here is unreachable\n   and thus can be removed without consequences. We may in the future reserve them instead since\n   we do not consistently remove unreachable statements _after_ break\n   `{ var x = 0 }; break;` is transformed to `{ var x = 0 }; return void 0;`, the `break` is reachable\n   because we can not wrap variable declaration under a return statement\n */\nfunction replaceBreakStatementInBreakCompletion(\n  completions: Completion[],\n  reachable: boolean,\n) {\n  completions.forEach(c => {\n    if (c.path.isBreakStatement({ label: null })) {\n      if (reachable) {\n        c.path.replaceWith(unaryExpression(\"void\", numericLiteral(0)));\n      } else {\n        c.path.remove();\n      }\n    }\n  });\n}\n\nfunction getStatementListCompletion(\n  paths: NodePath[],\n  context: CompletionContext,\n): Completion[] {\n  const completions = [];\n  if (context.canHaveBreak) {\n    let lastNormalCompletions = [];\n    for (let i = 0; i < paths.length; i++) {\n      const path = paths[i];\n      const newContext = { ...context, inCaseClause: false };\n      if (\n        path.isBlockStatement() &&\n        (context.inCaseClause || // case test: { break }\n          context.shouldPopulateBreak) // case test: { { break } }\n      ) {\n        newContext.shouldPopulateBreak = true;\n      } else {\n        newContext.shouldPopulateBreak = false;\n      }\n      const statementCompletions = _getCompletionRecords(path, newContext);\n      if (\n        statementCompletions.length > 0 &&\n        // we can stop search `paths` when we have seen a `path` that is\n        // effectively a `break` statement. Examples are\n        // - `break`\n        // - `if (true) { 1; break } else { 2; break }`\n        // - `{ break }```\n        // In other words, the paths after this `path` are unreachable\n        statementCompletions.every(c => c.type === BREAK_COMPLETION)\n      ) {\n        if (\n          lastNormalCompletions.length > 0 &&\n          statementCompletions.every(c =>\n            c.path.isBreakStatement({ label: null }),\n          )\n        ) {\n          // when a break completion has a path as BreakStatement, it must be `{ break }`\n          // whose completion value we can not determine, otherwise it would have been\n          // replaced by `replaceBreakStatementInBreakCompletion`\n          // When we have seen normal completions from the last statement\n          // it is safe to stop populating break and mark normal completions as break\n          normalCompletionToBreak(lastNormalCompletions);\n          completions.push(...lastNormalCompletions);\n          // Declarations have empty completion record, however they can not be nested\n          // directly in return statement, i.e. `return (var a = 1)` is invalid.\n          if (lastNormalCompletions.some(c => c.path.isDeclaration())) {\n            completions.push(...statementCompletions);\n            replaceBreakStatementInBreakCompletion(\n              statementCompletions,\n              /* reachable */ true,\n            );\n          }\n          replaceBreakStatementInBreakCompletion(\n            statementCompletions,\n            /* reachable */ false,\n          );\n        } else {\n          completions.push(...statementCompletions);\n          if (!context.shouldPopulateBreak) {\n            replaceBreakStatementInBreakCompletion(\n              statementCompletions,\n              /* reachable */ true,\n            );\n          }\n        }\n        break;\n      }\n      if (i === paths.length - 1) {\n        completions.push(...statementCompletions);\n      } else {\n        lastNormalCompletions = [];\n        for (let i = 0; i < statementCompletions.length; i++) {\n          const c = statementCompletions[i];\n          if (c.type === BREAK_COMPLETION) {\n            completions.push(c);\n          }\n          if (c.type === NORMAL_COMPLETION) {\n            lastNormalCompletions.push(c);\n          }\n        }\n      }\n    }\n  } else if (paths.length) {\n    // When we are in a context where `break` must not exist, we can skip linear\n    // search on statement lists and assume that the last\n    // non-variable-declaration statement determines the completion.\n    for (let i = paths.length - 1; i >= 0; i--) {\n      const pathCompletions = _getCompletionRecords(paths[i], context);\n      if (\n        pathCompletions.length > 1 ||\n        (pathCompletions.length === 1 &&\n          !pathCompletions[0].path.isVariableDeclaration())\n      ) {\n        completions.push(...pathCompletions);\n        break;\n      }\n    }\n  }\n  return completions;\n}\n\nfunction _getCompletionRecords(\n  path: NodePath,\n  context: CompletionContext,\n): Completion[] {\n  let records: Completion[] = [];\n  if (path.isIfStatement()) {\n    records = addCompletionRecords(path.get(\"consequent\"), records, context);\n    records = addCompletionRecords(path.get(\"alternate\"), records, context);\n  } else if (\n    path.isDoExpression() ||\n    path.isFor() ||\n    path.isWhile() ||\n    path.isLabeledStatement()\n  ) {\n    return addCompletionRecords(path.get(\"body\"), records, context);\n  } else if (path.isProgram() || path.isBlockStatement()) {\n    return getStatementListCompletion(path.get(\"body\"), context);\n  } else if (path.isFunction()) {\n    return _getCompletionRecords(path.get(\"body\"), context);\n  } else if (path.isTryStatement()) {\n    records = addCompletionRecords(path.get(\"block\"), records, context);\n    records = addCompletionRecords(path.get(\"handler\"), records, context);\n  } else if (path.isCatchClause()) {\n    return addCompletionRecords(path.get(\"body\"), records, context);\n  } else if (path.isSwitchStatement()) {\n    return completionRecordForSwitch(path.get(\"cases\"), records, context);\n  } else if (path.isSwitchCase()) {\n    return getStatementListCompletion(path.get(\"consequent\"), {\n      canHaveBreak: true,\n      shouldPopulateBreak: false,\n      inCaseClause: true,\n    });\n  } else if (path.isBreakStatement()) {\n    records.push(BreakCompletion(path));\n  } else {\n    records.push(NormalCompletion(path));\n  }\n\n  return records;\n}\n\n/**\n * Retrieve the completion records of a given path.\n * Note: to ensure proper support on `break` statement, this method\n * will manipulate the AST around the break statement. Do not call the method\n * twice for the same path.\n *\n * @export\n * @param {NodePath} this\n * @returns {NodePath[]} Completion records\n */\nexport function getCompletionRecords(this: NodePath): NodePath[] {\n  const records = _getCompletionRecords(this, {\n    canHaveBreak: false,\n    shouldPopulateBreak: false,\n    inCaseClause: false,\n  });\n  return records.map(r => r.path);\n}\n\nexport function getSibling(this: NodePath, key: string | number): NodePath {\n  return NodePath.get({\n    parentPath: this.parentPath,\n    parent: this.parent,\n    container: this.container,\n    listKey: this.listKey,\n    key: key,\n  }).setContext(this.context);\n}\n\nexport function getPrevSibling(this: NodePath): NodePath {\n  // @ts-expect-error todo(flow->ts) this.key could be a string\n  return this.getSibling(this.key - 1);\n}\n\nexport function getNextSibling(this: NodePath): NodePath {\n  // @ts-expect-error todo(flow->ts) this.key could be a string\n  return this.getSibling(this.key + 1);\n}\n\nexport function getAllNextSiblings(this: NodePath): NodePath[] {\n  // @ts-expect-error todo(flow->ts) this.key could be a string\n  let _key: number = this.key;\n  let sibling = this.getSibling(++_key);\n  const siblings = [];\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(++_key);\n  }\n  return siblings;\n}\n\nexport function getAllPrevSiblings(this: NodePath): NodePath[] {\n  // @ts-expect-error todo(flow->ts) this.key could be a string\n  let _key: number = this.key;\n  let sibling = this.getSibling(--_key);\n  const siblings = [];\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(--_key);\n  }\n  return siblings;\n}\n\n// convert \"1\" to 1 (string index to number index)\ntype MaybeToIndex<T extends string> = T extends `${bigint}` ? number : T;\n\ntype Pattern<Obj extends string, Prop extends string> = `${Obj}.${Prop}`;\n\n// split \"body.body.1\" to [\"body\", \"body\", 1]\ntype Split<P extends string> =\n  P extends Pattern<infer O, infer U>\n    ? [MaybeToIndex<O>, ...Split<U>]\n    : [MaybeToIndex<P>];\n\n// traverse the Node with tuple path [\"body\", \"body\", 1]\n// Path should be created with Split\ntype Trav<\n  Node extends t.Node | t.Node[],\n  Path extends unknown[],\n> = Path extends [infer K, ...infer R]\n  ? K extends keyof Node\n    ? Node[K] extends t.Node | t.Node[]\n      ? R extends []\n        ? Node[K]\n        : Trav<Node[K], R>\n      : never\n    : never\n  : never;\n\ntype ToNodePath<T> =\n  T extends Array<t.Node | null | undefined>\n    ? Array<NodePath<T[number]>>\n    : T extends t.Node | null | undefined\n      ? NodePath<T>\n      : never;\n\nfunction get<T extends NodePath, K extends keyof T[\"node\"]>(\n  this: T,\n  key: K,\n  context?: boolean | TraversalContext,\n): T extends any\n  ? T[\"node\"][K] extends Array<t.Node | null | undefined>\n    ? Array<NodePath<T[\"node\"][K][number]>>\n    : T[\"node\"][K] extends t.Node | null | undefined\n      ? NodePath<T[\"node\"][K]>\n      : never\n  : never;\n\nfunction get<T extends NodePath, K extends string>(\n  this: T,\n  key: K,\n  context?: boolean | TraversalContext,\n): T extends any ? ToNodePath<Trav<T[\"node\"], Split<K>>> : never;\n\nfunction get(\n  this: NodePath,\n  key: string,\n  context?: true | TraversalContext,\n): NodePath | NodePath[];\n\nfunction get(\n  this: NodePath,\n  key: string,\n  context: true | TraversalContext = true,\n): NodePath | NodePath[] {\n  if (context === true) context = this.context;\n  const parts = key.split(\".\");\n  if (parts.length === 1) {\n    // \"foo\"\n    // @ts-expect-error key may not index T\n    return _getKey.call(this, key, context);\n  } else {\n    // \"foo.bar\"\n    return _getPattern.call(this, parts, context);\n  }\n}\n\nexport { get };\n\nexport function _getKey<T extends t.Node>(\n  this: NodePath<T>,\n  key: keyof T & string,\n  context?: TraversalContext,\n): NodePath | NodePath[] {\n  const node = this.node as T;\n  const container = node[key];\n\n  if (Array.isArray(container)) {\n    // requested a container so give them all the paths\n    return container.map((_, i) => {\n      return NodePath.get({\n        listKey: key,\n        parentPath: this,\n        parent: node,\n        container: container,\n        key: i,\n      }).setContext(context);\n    });\n  } else {\n    return NodePath.get({\n      parentPath: this,\n      parent: node,\n      container: node,\n      key: key,\n    }).setContext(context);\n  }\n}\n\nexport function _getPattern(\n  this: NodePath,\n  parts: string[],\n  context?: TraversalContext,\n): NodePath | NodePath[] {\n  let path: NodePath | NodePath[] = this;\n  for (const part of parts) {\n    if (part === \".\") {\n      // @ts-expect-error todo(flow-ts): Can path be an array here?\n      path = path.parentPath;\n    } else {\n      if (Array.isArray(path)) {\n        // @ts-expect-error part may not index path\n        path = path[part];\n      } else {\n        path = path.get(part, context);\n      }\n    }\n  }\n  return path;\n}\n\nexport function getAssignmentIdentifiers(this: NodePath) {\n  return _getAssignmentIdentifiers(this.node);\n}\n\nfunction getBindingIdentifiers(\n  duplicates: true,\n): Record<string, t.Identifier[]>;\nfunction getBindingIdentifiers(\n  duplicates?: false,\n): Record<string, t.Identifier>;\nfunction getBindingIdentifiers(\n  duplicates: boolean,\n): Record<string, t.Identifier[] | t.Identifier>;\n\nfunction getBindingIdentifiers(\n  this: NodePath,\n  duplicates?: boolean,\n): Record<string, t.Identifier[] | t.Identifier> {\n  return _getBindingIdentifiers(this.node, duplicates);\n}\n\nexport { getBindingIdentifiers };\n\nfunction getOuterBindingIdentifiers(\n  duplicates: true,\n): Record<string, t.Identifier[]>;\nfunction getOuterBindingIdentifiers(\n  duplicates?: false,\n): Record<string, t.Identifier>;\nfunction getOuterBindingIdentifiers(\n  duplicates: boolean,\n): Record<string, t.Identifier[] | t.Identifier>;\n\nfunction getOuterBindingIdentifiers(\n  this: NodePath,\n  duplicates?: boolean,\n): Record<string, t.Identifier[] | t.Identifier> {\n  return _getOuterBindingIdentifiers(this.node, duplicates);\n}\n\nexport { getOuterBindingIdentifiers };\n\nfunction getBindingIdentifierPaths(\n  duplicates: true,\n  outerOnly?: boolean,\n): Record<string, NodePath<t.Identifier>[]>;\nfunction getBindingIdentifierPaths(\n  duplicates: false,\n  outerOnly?: boolean,\n): Record<string, NodePath<t.Identifier>>;\nfunction getBindingIdentifierPaths(\n  duplicates?: boolean,\n  outerOnly?: boolean,\n): Record<string, NodePath<t.Identifier> | NodePath<t.Identifier>[]>;\n\n// original source - https://github.com/babel/babel/blob/main/packages/babel-types/src/retrievers/getBindingIdentifiers.js\n// path.getBindingIdentifiers returns nodes where the following re-implementation returns paths\nfunction getBindingIdentifierPaths(\n  this: NodePath,\n  duplicates: boolean = false,\n  outerOnly: boolean = false,\n): Record<string, NodePath<t.Identifier> | NodePath<t.Identifier>[]> {\n  const path = this;\n  const search = [path];\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n    if (!id.node) continue;\n\n    const keys = _getBindingIdentifiers.keys[id.node.type];\n\n    if (id.isIdentifier()) {\n      if (duplicates) {\n        const _ids = (ids[id.node.name] = ids[id.node.name] || []);\n        _ids.push(id);\n      } else {\n        ids[id.node.name] = id;\n      }\n      continue;\n    }\n\n    if (id.isExportDeclaration()) {\n      const declaration = id.get(\"declaration\");\n      if (declaration.isDeclaration()) {\n        search.push(declaration);\n      }\n      continue;\n    }\n\n    if (outerOnly) {\n      if (id.isFunctionDeclaration()) {\n        search.push(id.get(\"id\"));\n        continue;\n      }\n      if (id.isFunctionExpression()) {\n        continue;\n      }\n    }\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const child = id.get(key);\n        if (Array.isArray(child)) {\n          search.push(...child);\n        } else if (child.node) {\n          search.push(child);\n        }\n      }\n    }\n  }\n\n  return ids;\n}\n\nexport { getBindingIdentifierPaths };\n\nfunction getOuterBindingIdentifierPaths(\n  duplicates: true,\n): Record<string, NodePath<t.Identifier>[]>;\nfunction getOuterBindingIdentifierPaths(\n  duplicates?: false,\n): Record<string, NodePath<t.Identifier>>;\nfunction getOuterBindingIdentifierPaths(\n  duplicates?: boolean,\n): Record<string, NodePath<t.Identifier> | NodePath<t.Identifier>[]>;\n\nfunction getOuterBindingIdentifierPaths(\n  this: NodePath,\n  duplicates: boolean = false,\n) {\n  return this.getBindingIdentifierPaths(duplicates, true);\n}\n\nexport { getOuterBindingIdentifierPaths };\n"],"names":["_index","require","_t","getAssignmentIdentifiers","_getAssignmentIdentifiers","getBindingIdentifiers","_getBindingIdentifiers","getOuterBindingIdentifiers","_getOuterBindingIdentifiers","numericLiteral","unaryExpression","NORMAL_COMPLETION","BREAK_COMPLETION","NormalCompletion","path","type","BreakCompletion","getOpposite","key","getSibling","addCompletionRecords","records","context","push","_getCompletionRecords","completionRecordForSwitch","cases","lastNormalCompletions","i","length","casePath","caseCompletions","normalCompletions","breakCompletions","c","normalCompletionToBreak","completions","forEach","replaceBreakStatementInBreakCompletion","reachable","isBreakStatement","label","replaceWith","remove","getStatementListCompletion","paths","canHaveBreak","newContext","Object","assign","inCaseClause","isBlockStatement","shouldPopulateBreak","statementCompletions","every","some","isDeclaration","pathCompletions","isVariableDeclaration","isIfStatement","get","isDoExpression","isFor","isWhile","isLabeledStatement","isProgram","isFunction","isTryStatement","isCatchClause","isSwitchStatement","isSwitchCase","getCompletionRecords","map","r","NodePath","parentPath","parent","container","listKey","setContext","getPrevSibling","getNextSibling","getAllNextSiblings","_key","sibling","siblings","node","getAllPrevSiblings","parts","split","_getKey","call","_getPattern","Array","isArray","_","part","duplicates","getBindingIdentifierPaths","outerOnly","search","ids","create","id","shift","keys","isIdentifier","_ids","name","isExportDeclaration","declaration","isFunctionDeclaration","isFunctionExpression","child","getOuterBindingIdentifierPaths"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4665, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4670, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/comments.ts"],"sourcesContent":["// This file contains methods responsible for dealing with comments.\nimport type * as t from \"@babel/types\";\nimport type NodePath from \"./index.ts\";\nimport {\n  addComment as _addComment,\n  addComments as _addComments,\n} from \"@babel/types\";\n\n/**\n * Share comments amongst siblings.\n */\n\nexport function shareCommentsWithSiblings(this: NodePath) {\n  // NOTE: this assumes numbered keys\n  if (typeof this.key === \"string\") return;\n\n  const node = this.node;\n  if (!node) return;\n\n  const trailing = node.trailingComments;\n  const leading = node.leadingComments;\n  if (!trailing && !leading) return;\n\n  const prev = this.getSibling(this.key - 1);\n  const next = this.getSibling(this.key + 1);\n  const hasPrev = Boolean(prev.node);\n  const hasNext = Boolean(next.node);\n\n  if (hasPrev) {\n    if (leading) {\n      prev.addComments(\n        \"trailing\",\n        removeIfExisting(leading, prev.node.trailingComments),\n      );\n    }\n    if (trailing && !hasNext) prev.addComments(\"trailing\", trailing);\n  }\n  if (hasNext) {\n    if (trailing) {\n      next.addComments(\n        \"leading\",\n        removeIfExisting(trailing, next.node.leadingComments),\n      );\n    }\n    if (leading && !hasPrev) next.addComments(\"leading\", leading);\n  }\n}\n\nfunction removeIfExisting<T>(list: T[], toRemove?: T[]): T[] {\n  if (!toRemove?.length) return list;\n  const set = new Set(toRemove);\n  return list.filter(el => {\n    return !set.has(el);\n  });\n}\n\nexport function addComment(\n  this: NodePath,\n  type: t.CommentTypeShorthand,\n  content: string,\n  line?: boolean,\n) {\n  _addComment(this.node, type, content, line);\n}\n\n/**\n * Give node `comments` of the specified `type`.\n */\n\nexport function addComments(\n  this: NodePath,\n  type: t.CommentTypeShorthand,\n  comments: t.Comment[],\n) {\n  _addComments(this.node, type, comments);\n}\n"],"names":["_t","require","addComment","_addComment","addComments","_addComments","shareCommentsWithSiblings","key","node","trailing","trailingComments","leading","leadingComments","prev","getSibling","next","hasPrev","Boolean","hasNext","removeIfExisting","list","toRemove","length","set","Set","filter","el","has","type","content","line","comments"],"mappings":";;;;;;;AAGA,IAAAA,EAAA,GAAAC,OAAA;AAGsB,MAAA,EAFpBC,UAAU,EAAIC,WAAW,EACzBC,WAAW,EAAIC,YAAAA,EAAY,GAAAL,EAAA;AAOtB,SAASM,yBAAyBA,CAAA,EAAiB;IAExD,IAAI,OAAO,IAAI,CAACC,GAAG,KAAK,QAAQ,EAAE;IAElC,MAAMC,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,IAAI,CAACA,IAAI,EAAE;IAEX,MAAMC,QAAQ,GAAGD,IAAI,CAACE,gBAAgB;IACtC,MAAMC,OAAO,GAAGH,IAAI,CAACI,eAAe;IACpC,IAAI,CAACH,QAAQ,IAAI,CAACE,OAAO,EAAE;IAE3B,MAAME,IAAI,GAAG,IAAI,CAACC,UAAU,CAAC,IAAI,CAACP,GAAG,GAAG,CAAC,CAAC;IAC1C,MAAMQ,IAAI,GAAG,IAAI,CAACD,UAAU,CAAC,IAAI,CAACP,GAAG,GAAG,CAAC,CAAC;IAC1C,MAAMS,OAAO,GAAGC,OAAO,CAACJ,IAAI,CAACL,IAAI,CAAC;IAClC,MAAMU,OAAO,GAAGD,OAAO,CAACF,IAAI,CAACP,IAAI,CAAC;IAElC,IAAIQ,OAAO,EAAE;QACX,IAAIL,OAAO,EAAE;YACXE,IAAI,CAACT,WAAW,CACd,UAAU,EACVe,gBAAgB,CAACR,OAAO,EAAEE,IAAI,CAACL,IAAI,CAACE,gBAAgB,CACtD,CAAC;QACH;QACA,IAAID,QAAQ,IAAI,CAACS,OAAO,EAAEL,IAAI,CAACT,WAAW,CAAC,UAAU,EAAEK,QAAQ,CAAC;IAClE;IACA,IAAIS,OAAO,EAAE;QACX,IAAIT,QAAQ,EAAE;YACZM,IAAI,CAACX,WAAW,CACd,SAAS,EACTe,gBAAgB,CAACV,QAAQ,EAAEM,IAAI,CAACP,IAAI,CAACI,eAAe,CACtD,CAAC;QACH;QACA,IAAID,OAAO,IAAI,CAACK,OAAO,EAAED,IAAI,CAACX,WAAW,CAAC,SAAS,EAAEO,OAAO,CAAC;IAC/D;AACF;AAEA,SAASQ,gBAAgBA,CAAIC,IAAS,EAAEC,QAAc,EAAO;IAC3D,IAAI,CAAA,CAACA,QAAQ,IAAA,QAARA,QAAQ,CAAEC,MAAM,GAAE,OAAOF,IAAI;IAClC,MAAMG,GAAG,GAAG,IAAIC,GAAG,CAACH,QAAQ,CAAC;IAC7B,OAAOD,IAAI,CAACK,MAAM,EAACC,EAAE,IAAI;QACvB,OAAO,CAACH,GAAG,CAACI,GAAG,CAACD,EAAE,CAAC;IACrB,CAAC,CAAC;AACJ;AAEO,SAASxB,UAAUA,CAExB0B,IAA4B,EAC5BC,OAAe,EACfC,IAAc,EACd;IACA3B,WAAW,CAAC,IAAI,CAACK,IAAI,EAAEoB,IAAI,EAAEC,OAAO,EAAEC,IAAI,CAAC;AAC7C;AAMO,SAAS1B,WAAWA,CAEzBwB,IAA4B,EAC5BG,QAAqB,EACrB;IACA1B,YAAY,CAAC,IAAI,CAACG,IAAI,EAAEoB,IAAI,EAAEG,QAAQ,CAAC;AACzC","ignoreList":[0]}},
    {"offset": {"line": 4716, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4721, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/index.ts"],"sourcesContent":["import type { HubInterface } from \"../hub.ts\";\nimport type TraversalContext from \"../context.ts\";\nimport type { ExplodedTraverseOptions } from \"../index.ts\";\nimport * as virtualTypes from \"./lib/virtual-types.ts\";\nimport buildDebug from \"debug\";\nimport traverse from \"../index.ts\";\nimport type { Visitor } from \"../types.ts\";\nimport Scope from \"../scope/index.ts\";\nimport { validate } from \"@babel/types\";\nimport * as t from \"@babel/types\";\nimport * as cache from \"../cache.ts\";\nimport generator from \"@babel/generator\";\n\n// NodePath is split across many files.\nimport * as NodePath_ancestry from \"./ancestry.ts\";\nimport * as NodePath_inference from \"./inference/index.ts\";\nimport * as NodePath_replacement from \"./replacement.ts\";\nimport * as NodePath_evaluation from \"./evaluation.ts\";\nimport * as NodePath_conversion from \"./conversion.ts\";\nimport * as NodePath_introspection from \"./introspection.ts\";\nimport * as NodePath_context from \"./context.ts\";\nimport * as NodePath_removal from \"./removal.ts\";\nimport * as NodePath_modification from \"./modification.ts\";\nimport * as NodePath_family from \"./family.ts\";\nimport * as NodePath_comments from \"./comments.ts\";\nimport * as NodePath_virtual_types_validator from \"./lib/virtual-types-validator.ts\";\nimport type { NodePathAssertions } from \"./generated/asserts.ts\";\nimport type { NodePathValidators } from \"./generated/validators.ts\";\nimport { setup } from \"./context.ts\";\n\nconst debug = buildDebug(\"babel\");\n\nexport const REMOVED = 1 << 0;\nexport const SHOULD_STOP = 1 << 1;\nexport const SHOULD_SKIP = 1 << 2;\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<any>;\n\nconst NodePath_Final = class NodePath {\n  constructor(hub: HubInterface, parent: t.Node | null) {\n    this.parent = parent;\n    this.hub = hub;\n    this.data = null;\n\n    this.context = null;\n    this.scope = null;\n  }\n\n  declare parent: t.Node;\n  declare hub: HubInterface;\n  declare data: Record<string | symbol, unknown>;\n  // TraversalContext is configured by setContext\n  declare context: TraversalContext;\n  declare scope: Scope;\n\n  contexts: Array<TraversalContext> = [];\n  state: any = null;\n  opts: ExplodedTraverseOptions | null = null;\n\n  @bit.storage _traverseFlags: number;\n  @bit(REMOVED) accessor removed = false;\n  @bit(SHOULD_STOP) accessor shouldStop = false;\n  @bit(SHOULD_SKIP) accessor shouldSkip = false;\n\n  skipKeys: Record<string, boolean> | null = null;\n  parentPath: NodePath_Final | null = null;\n  container: t.Node | Array<t.Node> | null = null;\n  listKey: string | null = null;\n  key: string | number | null = null;\n  node: t.Node | null = null;\n  type: t.Node[\"type\"] | null = null;\n\n  static get({\n    hub,\n    parentPath,\n    parent,\n    container,\n    listKey,\n    key,\n  }: {\n    hub?: HubInterface;\n    parentPath: NodePath_Final | null;\n    parent: t.Node;\n    container: t.Node | t.Node[];\n    listKey?: string;\n    key: string | number;\n  }): NodePath_Final {\n    if (!hub && parentPath) {\n      hub = parentPath.hub;\n    }\n\n    if (!parent) {\n      throw new Error(\"To get a node path the parent needs to exist\");\n    }\n\n    const targetNode =\n      // @ts-expect-error key must present in container\n      container[key];\n\n    const paths = cache.getOrCreateCachedPaths(hub, parent);\n\n    let path = paths.get(targetNode);\n    if (!path) {\n      path = new NodePath(hub, parent) as NodePath_Final;\n      if (targetNode) paths.set(targetNode, path);\n    }\n\n    setup.call(path, parentPath, container, listKey, key);\n\n    return path;\n  }\n\n  getScope(this: NodePath_Final, scope: Scope): Scope {\n    return this.isScope() ? new Scope(this) : scope;\n  }\n\n  setData(key: string | symbol, val: any): any {\n    if (this.data == null) {\n      this.data = Object.create(null);\n    }\n    return (this.data[key] = val);\n  }\n\n  getData(key: string | symbol, def?: any): any {\n    if (this.data == null) {\n      this.data = Object.create(null);\n    }\n    let val = this.data[key];\n    if (val === undefined && def !== undefined) val = this.data[key] = def;\n    return val;\n  }\n\n  hasNode(): boolean {\n    return this.node != null;\n  }\n\n  buildCodeFrameError(\n    msg: string,\n    Error: new () => Error = SyntaxError,\n  ): Error {\n    return this.hub.buildError(this.node, msg, Error);\n  }\n\n  traverse<T>(this: NodePath_Final, visitor: Visitor<T>, state: T): void;\n  traverse(this: NodePath_Final, visitor: Visitor): void;\n  traverse(this: NodePath_Final, visitor: any, state?: any) {\n    traverse(this.node, visitor, this.scope, state, this);\n  }\n\n  set(key: string, node: any) {\n    validate(this.node, key, node);\n    // @ts-expect-error key must present in this.node\n    this.node[key] = node;\n  }\n\n  getPathLocation(this: NodePath_Final): string {\n    const parts = [];\n    let path: NodePath_Final = this;\n    do {\n      let key = path.key;\n      if (path.inList) key = `${path.listKey}[${key}]`;\n      parts.unshift(key);\n    } while ((path = path.parentPath));\n    return parts.join(\".\");\n  }\n\n  debug(this: NodePath_Final, message: string) {\n    if (!debug.enabled) return;\n    debug(`${this.getPathLocation()} ${this.type}: ${message}`);\n  }\n\n  toString() {\n    return generator(this.node).code;\n  }\n\n  get inList() {\n    return !!this.listKey;\n  }\n\n  set inList(inList) {\n    if (!inList) {\n      this.listKey = null;\n    }\n    // ignore inList = true as it should depend on `listKey`\n  }\n\n  get parentKey(): string {\n    return (this.listKey || this.key) as string;\n  }\n};\n\nconst methods = {\n  // NodePath_ancestry\n  findParent: NodePath_ancestry.findParent,\n  find: NodePath_ancestry.find,\n  getFunctionParent: NodePath_ancestry.getFunctionParent,\n  getStatementParent: NodePath_ancestry.getStatementParent,\n  getEarliestCommonAncestorFrom:\n    NodePath_ancestry.getEarliestCommonAncestorFrom,\n  getDeepestCommonAncestorFrom: NodePath_ancestry.getDeepestCommonAncestorFrom,\n  getAncestry: NodePath_ancestry.getAncestry,\n  isAncestor: NodePath_ancestry.isAncestor,\n  isDescendant: NodePath_ancestry.isDescendant,\n  inType: NodePath_ancestry.inType,\n\n  // NodePath_inference\n  getTypeAnnotation: NodePath_inference.getTypeAnnotation,\n  isBaseType: NodePath_inference.isBaseType,\n  couldBeBaseType: NodePath_inference.couldBeBaseType,\n  baseTypeStrictlyMatches: NodePath_inference.baseTypeStrictlyMatches,\n  isGenericType: NodePath_inference.isGenericType,\n\n  // NodePath_replacement\n  replaceWithMultiple: NodePath_replacement.replaceWithMultiple,\n  replaceWithSourceString: NodePath_replacement.replaceWithSourceString,\n  replaceWith: NodePath_replacement.replaceWith,\n  replaceExpressionWithStatements:\n    NodePath_replacement.replaceExpressionWithStatements,\n  replaceInline: NodePath_replacement.replaceInline,\n\n  // NodePath_evaluation\n  evaluateTruthy: NodePath_evaluation.evaluateTruthy,\n  evaluate: NodePath_evaluation.evaluate,\n\n  // NodePath_conversion\n  toComputedKey: NodePath_conversion.toComputedKey,\n  ensureBlock: NodePath_conversion.ensureBlock,\n  unwrapFunctionEnvironment: NodePath_conversion.unwrapFunctionEnvironment,\n  arrowFunctionToExpression: NodePath_conversion.arrowFunctionToExpression,\n  splitExportDeclaration: NodePath_conversion.splitExportDeclaration,\n  ensureFunctionName: NodePath_conversion.ensureFunctionName,\n\n  // NodePath_introspection\n  matchesPattern: NodePath_introspection.matchesPattern,\n  isStatic: NodePath_introspection.isStatic,\n  isNodeType: NodePath_introspection.isNodeType,\n  canHaveVariableDeclarationOrExpression:\n    NodePath_introspection.canHaveVariableDeclarationOrExpression,\n  canSwapBetweenExpressionAndStatement:\n    NodePath_introspection.canSwapBetweenExpressionAndStatement,\n  isCompletionRecord: NodePath_introspection.isCompletionRecord,\n  isStatementOrBlock: NodePath_introspection.isStatementOrBlock,\n  referencesImport: NodePath_introspection.referencesImport,\n  getSource: NodePath_introspection.getSource,\n  willIMaybeExecuteBefore: NodePath_introspection.willIMaybeExecuteBefore,\n  _guessExecutionStatusRelativeTo:\n    NodePath_introspection._guessExecutionStatusRelativeTo,\n  resolve: NodePath_introspection.resolve,\n  isConstantExpression: NodePath_introspection.isConstantExpression,\n  isInStrictMode: NodePath_introspection.isInStrictMode,\n\n  // NodePath_context\n  isDenylisted: NodePath_context.isDenylisted,\n  visit: NodePath_context.visit,\n  skip: NodePath_context.skip,\n  skipKey: NodePath_context.skipKey,\n  stop: NodePath_context.stop,\n  setContext: NodePath_context.setContext,\n  requeue: NodePath_context.requeue,\n  requeueComputedKeyAndDecorators:\n    NodePath_context.requeueComputedKeyAndDecorators,\n\n  // NodePath_removal\n  remove: NodePath_removal.remove,\n\n  // NodePath_modification\n  insertBefore: NodePath_modification.insertBefore,\n  insertAfter: NodePath_modification.insertAfter,\n  unshiftContainer: NodePath_modification.unshiftContainer,\n  pushContainer: NodePath_modification.pushContainer,\n\n  // NodePath_family\n  getOpposite: NodePath_family.getOpposite,\n  getCompletionRecords: NodePath_family.getCompletionRecords,\n  getSibling: NodePath_family.getSibling,\n  getPrevSibling: NodePath_family.getPrevSibling,\n  getNextSibling: NodePath_family.getNextSibling,\n  getAllNextSiblings: NodePath_family.getAllNextSiblings,\n  getAllPrevSiblings: NodePath_family.getAllPrevSiblings,\n  get: NodePath_family.get,\n  getAssignmentIdentifiers: NodePath_family.getAssignmentIdentifiers,\n  getBindingIdentifiers: NodePath_family.getBindingIdentifiers,\n  getOuterBindingIdentifiers: NodePath_family.getOuterBindingIdentifiers,\n  getBindingIdentifierPaths: NodePath_family.getBindingIdentifierPaths,\n  getOuterBindingIdentifierPaths:\n    NodePath_family.getOuterBindingIdentifierPaths,\n\n  // NodePath_comments\n  shareCommentsWithSiblings: NodePath_comments.shareCommentsWithSiblings,\n  addComment: NodePath_comments.addComment,\n  addComments: NodePath_comments.addComments,\n};\n\nObject.assign(NodePath_Final.prototype, methods);\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  // String(x) is workaround for rollup\n\n  // @ts-expect-error babel 7 only\n  NodePath_Final.prototype.arrowFunctionToShadowed =\n    // @ts-expect-error babel 7 only\n    NodePath_conversion[String(\"arrowFunctionToShadowed\")];\n\n  Object.assign(NodePath_Final.prototype, {\n    // @ts-expect-error Babel 7 only\n    has: NodePath_introspection[String(\"has\")],\n    // @ts-expect-error Babel 7 only\n    is: NodePath_introspection[String(\"is\")],\n    // @ts-expect-error Babel 7 only\n    isnt: NodePath_introspection[String(\"isnt\")],\n    // @ts-expect-error Babel 7 only\n    equals: NodePath_introspection[String(\"equals\")],\n    // @ts-expect-error Babel 7 only\n    hoist: NodePath_modification[String(\"hoist\")],\n    updateSiblingKeys: NodePath_modification.updateSiblingKeys,\n    call: NodePath_context.call,\n    // @ts-expect-error Babel 7 only\n    isBlacklisted: NodePath_context[String(\"isBlacklisted\")],\n    setScope: NodePath_context.setScope,\n    resync: NodePath_context.resync,\n    popContext: NodePath_context.popContext,\n    pushContext: NodePath_context.pushContext,\n    setup: NodePath_context.setup,\n    setKey: NodePath_context.setKey,\n  });\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error The original _guessExecutionStatusRelativeToDifferentFunctions only worked for paths in\n  // different functions, but _guessExecutionStatusRelativeTo works as a replacement in those cases.\n  NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions =\n    NodePath_introspection._guessExecutionStatusRelativeTo;\n\n  // @ts-expect-error The original _guessExecutionStatusRelativeToDifferentFunctions only worked for paths in\n  // different functions, but _guessExecutionStatusRelativeTo works as a replacement in those cases.\n  NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions =\n    NodePath_introspection._guessExecutionStatusRelativeTo;\n\n  Object.assign(NodePath_Final.prototype, {\n    // NodePath_inference\n    _getTypeAnnotation: NodePath_inference._getTypeAnnotation,\n\n    // NodePath_replacement\n    _replaceWith: NodePath_replacement._replaceWith,\n\n    // NodePath_introspection\n    _resolve: NodePath_introspection._resolve,\n\n    // NodePath_context\n    _call: NodePath_context._call,\n    _resyncParent: NodePath_context._resyncParent,\n    _resyncKey: NodePath_context._resyncKey,\n    _resyncList: NodePath_context._resyncList,\n    _resyncRemoved: NodePath_context._resyncRemoved,\n    _getQueueContexts: NodePath_context._getQueueContexts,\n\n    // NodePath_removal\n    _removeFromScope: NodePath_removal._removeFromScope,\n    _callRemovalHooks: NodePath_removal._callRemovalHooks,\n    _remove: NodePath_removal._remove,\n    _markRemoved: NodePath_removal._markRemoved,\n    _assertUnremoved: NodePath_removal._assertUnremoved,\n\n    // NodePath_modification\n    _containerInsert: NodePath_modification._containerInsert,\n    _containerInsertBefore: NodePath_modification._containerInsertBefore,\n    _containerInsertAfter: NodePath_modification._containerInsertAfter,\n    _verifyNodeList: NodePath_modification._verifyNodeList,\n\n    // NodePath_family\n    _getKey: NodePath_family._getKey,\n    _getPattern: NodePath_family._getPattern,\n  });\n}\n\n// we can not use `import { TYPES } from \"@babel/types\"` here\n// because the transformNamedBabelTypesImportToDestructuring plugin in babel.config.js\n// does not offer live bindings for `TYPES`\n// we can change to `import { TYPES }` when we are publishing ES modules only\nfor (const type of t.TYPES) {\n  const typeKey = `is${type}`;\n  // @ts-expect-error typeKey must present in t\n  const fn = t[typeKey];\n  // @ts-expect-error augmenting NodePath prototype\n  NodePath_Final.prototype[typeKey] = function (opts: any) {\n    return fn(this.node, opts);\n  };\n\n  // @ts-expect-error augmenting NodePath prototype\n  NodePath_Final.prototype[`assert${type}`] = function (opts: any) {\n    if (!fn(this.node, opts)) {\n      throw new TypeError(`Expected node path of type ${type}`);\n    }\n  };\n}\n\n// Register virtual types validators after base types validators\nObject.assign(NodePath_Final.prototype, NodePath_virtual_types_validator);\n\nfor (const type of Object.keys(virtualTypes) as (keyof typeof virtualTypes)[]) {\n  if (type[0] === \"_\") continue;\n  if (!t.TYPES.includes(type)) t.TYPES.push(type);\n}\n\ninterface NodePathOverwrites {\n  // We need to re-define these predicate and assertion\n  // methods here, because we cannot refine `this` in\n  // a function declaration.\n  // See https://github.com/microsoft/TypeScript/issues/38150\n\n  /**\n   * NOTE: This assertion doesn't narrow the type on unions of\n   * NodePaths, due to https://github.com/microsoft/TypeScript/issues/44212\n   *\n   * @see ./conversion.ts for implementation.\n   */\n  ensureBlock(\n    this: NodePath_Final,\n  ): asserts this is NodePath_Final<\n    (\n      | t.Loop\n      | t.WithStatement\n      | t.Function\n      | t.LabeledStatement\n      | t.CatchClause\n    ) & { body: t.BlockStatement }\n  >;\n  /**\n   * @see ./introspection.ts for implementation.\n   */\n  isStatementOrBlock(\n    this: NodePath_Final,\n  ): this is NodePath_Final<t.Statement | t.Block>;\n}\n\ntype NodePathMixins = Omit<typeof methods, keyof NodePathOverwrites>;\n\ninterface NodePath<T extends t.Node>\n  extends InstanceType<typeof NodePath_Final>,\n    NodePathAssertions,\n    NodePathValidators,\n    NodePathMixins,\n    NodePathOverwrites {\n  type: T[\"type\"] | null;\n  node: T;\n  parent: t.ParentMaps[T[\"type\"]];\n  parentPath: t.ParentMaps[T[\"type\"]] extends null\n    ? null\n    : NodePath_Final<t.ParentMaps[T[\"type\"]]> | null;\n}\n\n// This trick is necessary so that\n// NodePath_Final<A | B> is the same as NodePath_Final<A> | NodePath_Final<B>\ntype NodePath_Final<T extends t.Node = t.Node> = T extends any\n  ? NodePath<T>\n  : never;\n\nexport { NodePath_Final as default, type NodePath as NodePath_Internal };\n"],"names":["virtualTypes","require","_debug","_index","_index2","_t","t","cache","_generator","NodePath_ancestry","NodePath_inference","NodePath_replacement","NodePath_evaluation","NodePath_conversion","NodePath_introspection","_context","NodePath_context","NodePath_removal","NodePath_modification","NodePath_family","NodePath_comments","NodePath_virtual_types_validator","validate","debug","buildDebug","REMOVED","exports","SHOULD_STOP","SHOULD_SKIP","NodePath_Final","default","NodePath","constructor","hub","parent","contexts","state","opts","_traverseFlags","skipKeys","parentPath","container","listKey","key","node","type","data","context","scope","removed","v","shouldStop","shouldSkip","get","Error","targetNode","paths","getOrCreateCachedPaths","path","set","setup","call","getScope","isScope","Scope","setData","val","Object","create","getData","def","undefined","hasNode","buildCodeFrameError","msg","SyntaxError","buildError","traverse","visitor","getPathLocation","parts","inList","unshift","join","message","enabled","toString","generator","code","parentKey","methods","findParent","find","getFunctionParent","getStatementParent","getEarliestCommonAncestorFrom","getDeepestCommonAncestorFrom","getAncestry","isAncestor","isDescendant","inType","getTypeAnnotation","isBaseType","couldBeBaseType","baseTypeStrictlyMatches","isGenericType","replaceWithMultiple","replaceWithSourceString","replaceWith","replaceExpressionWithStatements","replaceInline","evaluateTruthy","evaluate","toComputedKey","ensureBlock","unwrapFunctionEnvironment","arrowFunctionToExpression","splitExportDeclaration","ensureFunctionName","matchesPattern","isStatic","isNodeType","canHaveVariableDeclarationOrExpression","canSwapBetweenExpressionAndStatement","isCompletionRecord","isStatementOrBlock","referencesImport","getSource","willIMaybeExecuteBefore","_guessExecutionStatusRelativeTo","resolve","isConstantExpression","isInStrictMode","isDenylisted","visit","skip","skipKey","stop","setContext","requeue","requeueComputedKeyAndDecorators","remove","insertBefore","insertAfter","unshiftContainer","pushContainer","getOpposite","getCompletionRecords","getSibling","getPrevSibling","getNextSibling","getAllNextSiblings","getAllPrevSiblings","getAssignmentIdentifiers","getBindingIdentifiers","getOuterBindingIdentifiers","getBindingIdentifierPaths","getOuterBindingIdentifierPaths","shareCommentsWithSiblings","addComment","addComments","assign","prototype","arrowFunctionToShadowed","String","has","is","isnt","equals","hoist","updateSiblingKeys","isBlacklisted","setScope","resync","popContext","pushContext","setKey","_guessExecutionStatusRelativeToDifferentFunctions","_getTypeAnnotation","_replaceWith","_resolve","_call","_resyncParent","_resyncKey","_resyncList","_resyncRemoved","_getQueueContexts","_removeFromScope","_callRemovalHooks","_remove","_markRemoved","_assertUnremoved","_containerInsert","_containerInsertBefore","_containerInsertAfter","_verifyNodeList","_getKey","_getPattern","TYPES","typeKey","fn","TypeError","keys","includes","push"],"mappings":";;;;;AAGA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAF,OAAA;AAEA,IAAAG,OAAA,GAAAH,OAAA;AACA,IAAAI,EAAA,GAAAJ,OAAA;AAAwC,IAAAK,CAAA,GAAAD,EAAA;AAExC,IAAAE,KAAA,GAAAN,OAAA;AACA,IAAAO,UAAA,GAAAP,OAAA;AAGA,IAAAQ,iBAAA,GAAAR,OAAA;AACA,IAAAS,kBAAA,GAAAT,OAAA;AACA,IAAAU,oBAAA,GAAAV,OAAA;AACA,IAAAW,mBAAA,GAAAX,OAAA;AACA,IAAAY,mBAAA,GAAAZ,OAAA;AACA,IAAAa,sBAAA,GAAAb,OAAA;AACA,IAAAc,QAAA,GAAAd,OAAA;AAAiD,IAAAe,gBAAA,GAAAD,QAAA;AACjD,IAAAE,gBAAA,GAAAhB,OAAA;AACA,IAAAiB,qBAAA,GAAAjB,OAAA;AACA,IAAAkB,eAAA,GAAAlB,OAAA;AACA,IAAAmB,iBAAA,GAAAnB,OAAA;AACA,IAAAoB,gCAAA,GAAApB,OAAA;AAAqF,MAAA,EAjB5EqB,QAAAA,EAAQ,GAAAjB,EAAA;AAsBjB,MAAMkB,KAAK,GAAGC,MAAU,CAAC,OAAO,CAAC;AAE1B,MAAMC,OAAO,GAAAC,OAAA,CAAAD,OAAA,GAAG,CAAC,IAAI,CAAC;AACtB,MAAME,WAAW,GAAAD,OAAA,CAAAC,WAAA,GAAG,CAAC,IAAI,CAAC;AAC1B,MAAMC,WAAW,GAAAF,OAAA,CAAAE,WAAA,GAAG,CAAC,IAAI,CAAC;AAIjC,MAAMC,cAAc,GAAAH,OAAA,CAAAI,OAAA,GAAG,MAAMC,QAAQ,CAAC;IACpCC,WAAWA,CAACC,GAAiB,EAAEC,MAAqB,CAAE;QAAA,IAAA,CAgBtDC,QAAQ,GAA4B,EAAE;QAAA,IAAA,CACtCC,KAAK,GAAQ,IAAI;QAAA,IAAA,CACjBC,IAAI,GAAmC,IAAI;QAAA,IAAA,CAE9BC,cAAc,GAAA;QAAA,IAAA,CAK3BC,QAAQ,GAAmC,IAAI;QAAA,IAAA,CAC/CC,UAAU,GAA0B,IAAI;QAAA,IAAA,CACxCC,SAAS,GAAkC,IAAI;QAAA,IAAA,CAC/CC,OAAO,GAAkB,IAAI;QAAA,IAAA,CAC7BC,GAAG,GAA2B,IAAI;QAAA,IAAA,CAClCC,IAAI,GAAkB,IAAI;QAAA,IAAA,CAC1BC,IAAI,GAA0B,IAAI;QA9BhC,IAAI,CAACX,MAAM,GAAGA,MAAM;QACpB,IAAI,CAACD,GAAG,GAAGA,GAAG;QACd,IAAI,CAACa,IAAI,GAAG,IAAI;QAEhB,IAAI,CAACC,OAAO,GAAG,IAAI;QACnB,IAAI,CAACC,KAAK,GAAG,IAAI;IACnB;IAAC,IAcsBC,OAAOA,CAAA,EAAA;QAAA,OAAA,CAAA,IAAA,CADjBX,cAAc,GAAA,CAAA,IAAA;IAAA;IAAA,IACJW,OAAOA,CAAAC,CAAA,EAAA;QAAA,IAAAA,CAAA,EAAA,IAAA,CADjBZ,cAAc,IAAA;aAAA,IAAA,CAAdA,cAAc,IAAA,CAAA;IAAA;IAAA,IAEAa,UAAUA,CAAA,EAAA;QAAA,OAAA,CAAA,IAAA,CAFxBb,cAAc,GAAA,CAAA,IAAA;IAAA;IAAA,IAEAa,UAAUA,CAAAD,CAAA,EAAA;QAAA,IAAAA,CAAA,EAAA,IAAA,CAFxBZ,cAAc,IAAA;aAAA,IAAA,CAAdA,cAAc,IAAA,CAAA;IAAA;IAAA,IAGAc,UAAUA,CAAA,EAAA;QAAA,OAAA,CAAA,IAAA,CAHxBd,cAAc,GAAA,CAAA,IAAA;IAAA;IAAA,IAGAc,UAAUA,CAAAF,CAAA,EAAA;QAAA,IAAAA,CAAA,EAAA,IAAA,CAHxBZ,cAAc,IAAA;aAAA,IAAA,CAAdA,cAAc,IAAA,CAAA;IAAA;IAa3B,OAAOe,GAAGA,CAAC,EACTpB,GAAG,EACHO,UAAU,EACVN,MAAM,EACNO,SAAS,EACTC,OAAO,EACPC,GAAAA,EAQD,EAAkB;QACjB,IAAI,CAACV,GAAG,IAAIO,UAAU,EAAE;YACtBP,GAAG,GAAGO,UAAU,CAACP,GAAG;QACtB;QAEA,IAAI,CAACC,MAAM,EAAE;YACX,MAAM,IAAIoB,KAAK,CAAC,8CAA8C,CAAC;QACjE;QAEA,MAAMC,UAAU,GAEdd,SAAS,CAACE,GAAG,CAAC;QAEhB,MAAMa,KAAK,GAAGjD,KAAK,CAACkD,sBAAsB,CAACxB,GAAG,EAAEC,MAAM,CAAC;QAEvD,IAAIwB,IAAI,GAAGF,KAAK,CAACH,GAAG,CAACE,UAAU,CAAC;QAChC,IAAI,CAACG,IAAI,EAAE;YACTA,IAAI,GAAG,IAAI3B,QAAQ,CAACE,GAAG,EAAEC,MAAM,CAAmB;YAClD,IAAIqB,UAAU,EAAEC,KAAK,CAACG,GAAG,CAACJ,UAAU,EAAEG,IAAI,CAAC;QAC7C;QAEAE,SAAAA,KAAK,CAACC,IAAI,CAACH,IAAI,EAAElB,UAAU,EAAEC,SAAS,EAAEC,OAAO,EAAEC,GAAG,CAAC;QAErD,OAAOe,IAAI;IACb;IAEAI,QAAQA,CAAuBd,KAAY,EAAS;QAClD,OAAO,IAAI,CAACe,OAAO,CAAC,CAAC,GAAG,IAAIC,QAAAA,OAAK,CAAC,IAAI,CAAC,GAAGhB,KAAK;IACjD;IAEAiB,OAAOA,CAACtB,GAAoB,EAAEuB,GAAQ,EAAO;QAC3C,IAAI,IAAI,CAACpB,IAAI,IAAI,IAAI,EAAE;YACrB,IAAI,CAACA,IAAI,GAAGqB,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QACjC;QACA,OAAQ,IAAI,CAACtB,IAAI,CAACH,GAAG,CAAC,GAAGuB,GAAG;IAC9B;IAEAG,OAAOA,CAAC1B,GAAoB,EAAE2B,GAAS,EAAO;QAC5C,IAAI,IAAI,CAACxB,IAAI,IAAI,IAAI,EAAE;YACrB,IAAI,CAACA,IAAI,GAAGqB,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QACjC;QACA,IAAIF,GAAG,GAAG,IAAI,CAACpB,IAAI,CAACH,GAAG,CAAC;QACxB,IAAIuB,GAAG,KAAKK,SAAS,IAAID,GAAG,KAAKC,SAAS,EAAEL,GAAG,GAAG,IAAI,CAACpB,IAAI,CAACH,GAAG,CAAC,GAAG2B,GAAG;QACtE,OAAOJ,GAAG;IACZ;IAEAM,OAAOA,CAAA,EAAY;QACjB,OAAO,IAAI,CAAC5B,IAAI,IAAI,IAAI;IAC1B;IAEA6B,mBAAmBA,CACjBC,GAAW,EACXpB,KAAsB,IAAGqB,WAAW,EAC7B;QACP,OAAO,IAAI,CAAC1C,GAAG,CAAC2C,UAAU,CAAC,IAAI,CAAChC,IAAI,EAAE8B,GAAG,EAAEpB,KAAK,CAAC;IACnD;IAIAuB,QAAQA,CAAuBC,OAAY,EAAE1C,KAAW,EAAE;QACxD,CAAA,GAAAyC,OAAAA,OAAQ,EAAC,IAAI,CAACjC,IAAI,EAAEkC,OAAO,EAAE,IAAI,CAAC9B,KAAK,EAAEZ,KAAK,EAAE,IAAI,CAAC;IACvD;IAEAuB,GAAGA,CAAChB,GAAW,EAAEC,IAAS,EAAE;QAC1BtB,QAAQ,CAAC,IAAI,CAACsB,IAAI,EAAED,GAAG,EAAEC,IAAI,CAAC;QAE9B,IAAI,CAACA,IAAI,CAACD,GAAG,CAAC,GAAGC,IAAI;IACvB;IAEAmC,eAAeA,CAAA,EAA+B;QAC5C,MAAMC,KAAK,GAAG,EAAE;QAChB,IAAItB,IAAoB,GAAG,IAAI;QAC/B,GAAG;YACD,IAAIf,GAAG,GAAGe,IAAI,CAACf,GAAG;YAClB,IAAIe,IAAI,CAACuB,MAAM,EAAEtC,GAAG,GAAG,GAAGe,IAAI,CAAChB,OAAO,CAAA,CAAA,EAAIC,GAAG,CAAA,CAAA,CAAG;YAChDqC,KAAK,CAACE,OAAO,CAACvC,GAAG,CAAC;QACpB,CAAC,OAASe,IAAI,GAAGA,IAAI,CAAClB,UAAU,CAAA;QAChC,OAAOwC,KAAK,CAACG,IAAI,CAAC,GAAG,CAAC;IACxB;IAEA5D,KAAKA,CAAuB6D,OAAe,EAAE;QAC3C,IAAI,CAAC7D,KAAK,CAAC8D,OAAO,EAAE;QACpB9D,KAAK,CAAC,GAAG,IAAI,CAACwD,eAAe,CAAC,CAAC,CAAA,CAAA,EAAI,IAAI,CAAClC,IAAI,CAAA,EAAA,EAAKuC,OAAO,EAAE,CAAC;IAC7D;IAEAE,QAAQA,CAAA,EAAG;QACT,OAAO,CAAA,GAAAC,WAAAA,OAAS,EAAC,IAAI,CAAC3C,IAAI,CAAC,CAAC4C,IAAI;IAClC;IAEA,IAAIP,MAAMA,CAAA,EAAG;QACX,OAAO,CAAC,CAAC,IAAI,CAACvC,OAAO;IACvB;IAEA,IAAIuC,MAAMA,CAACA,MAAM,EAAE;QACjB,IAAI,CAACA,MAAM,EAAE;YACX,IAAI,CAACvC,OAAO,GAAG,IAAI;QACrB;IAEF;IAEA,IAAI+C,SAASA,CAAA,EAAW;QACtB,OAAQ,IAAI,CAAC/C,OAAO,IAAI,IAAI,CAACC,GAAG;IAClC;AACF,CAAC;AAED,MAAM+C,OAAO,GAAG;IAEdC,UAAU,EAAElF,iBAAiB,CAACkF,UAAU;IACxCC,IAAI,EAAEnF,iBAAiB,CAACmF,IAAI;IAC5BC,iBAAiB,EAAEpF,iBAAiB,CAACoF,iBAAiB;IACtDC,kBAAkB,EAAErF,iBAAiB,CAACqF,kBAAkB;IACxDC,6BAA6B,EAC3BtF,iBAAiB,CAACsF,6BAA6B;IACjDC,4BAA4B,EAAEvF,iBAAiB,CAACuF,4BAA4B;IAC5EC,WAAW,EAAExF,iBAAiB,CAACwF,WAAW;IAC1CC,UAAU,EAAEzF,iBAAiB,CAACyF,UAAU;IACxCC,YAAY,EAAE1F,iBAAiB,CAAC0F,YAAY;IAC5CC,MAAM,EAAE3F,iBAAiB,CAAC2F,MAAM;IAGhCC,iBAAiB,EAAE3F,kBAAkB,CAAC2F,iBAAiB;IACvDC,UAAU,EAAE5F,kBAAkB,CAAC4F,UAAU;IACzCC,eAAe,EAAE7F,kBAAkB,CAAC6F,eAAe;IACnDC,uBAAuB,EAAE9F,kBAAkB,CAAC8F,uBAAuB;IACnEC,aAAa,EAAE/F,kBAAkB,CAAC+F,aAAa;IAG/CC,mBAAmB,EAAE/F,oBAAoB,CAAC+F,mBAAmB;IAC7DC,uBAAuB,EAAEhG,oBAAoB,CAACgG,uBAAuB;IACrEC,WAAW,EAAEjG,oBAAoB,CAACiG,WAAW;IAC7CC,+BAA+B,EAC7BlG,oBAAoB,CAACkG,+BAA+B;IACtDC,aAAa,EAAEnG,oBAAoB,CAACmG,aAAa;IAGjDC,cAAc,EAAEnG,mBAAmB,CAACmG,cAAc;IAClDC,QAAQ,EAAEpG,mBAAmB,CAACoG,QAAQ;IAGtCC,aAAa,EAAEpG,mBAAmB,CAACoG,aAAa;IAChDC,WAAW,EAAErG,mBAAmB,CAACqG,WAAW;IAC5CC,yBAAyB,EAAEtG,mBAAmB,CAACsG,yBAAyB;IACxEC,yBAAyB,EAAEvG,mBAAmB,CAACuG,yBAAyB;IACxEC,sBAAsB,EAAExG,mBAAmB,CAACwG,sBAAsB;IAClEC,kBAAkB,EAAEzG,mBAAmB,CAACyG,kBAAkB;IAG1DC,cAAc,EAAEzG,sBAAsB,CAACyG,cAAc;IACrDC,QAAQ,EAAE1G,sBAAsB,CAAC0G,QAAQ;IACzCC,UAAU,EAAE3G,sBAAsB,CAAC2G,UAAU;IAC7CC,sCAAsC,EACpC5G,sBAAsB,CAAC4G,sCAAsC;IAC/DC,oCAAoC,EAClC7G,sBAAsB,CAAC6G,oCAAoC;IAC7DC,kBAAkB,EAAE9G,sBAAsB,CAAC8G,kBAAkB;IAC7DC,kBAAkB,EAAE/G,sBAAsB,CAAC+G,kBAAkB;IAC7DC,gBAAgB,EAAEhH,sBAAsB,CAACgH,gBAAgB;IACzDC,SAAS,EAAEjH,sBAAsB,CAACiH,SAAS;IAC3CC,uBAAuB,EAAElH,sBAAsB,CAACkH,uBAAuB;IACvEC,+BAA+B,EAC7BnH,sBAAsB,CAACmH,+BAA+B;IACxDC,OAAO,EAAEpH,sBAAsB,CAACoH,OAAO;IACvCC,oBAAoB,EAAErH,sBAAsB,CAACqH,oBAAoB;IACjEC,cAAc,EAAEtH,sBAAsB,CAACsH,cAAc;IAGrDC,YAAY,EAAErH,gBAAgB,CAACqH,YAAY;IAC3CC,KAAK,EAAEtH,gBAAgB,CAACsH,KAAK;IAC7BC,IAAI,EAAEvH,gBAAgB,CAACuH,IAAI;IAC3BC,OAAO,EAAExH,gBAAgB,CAACwH,OAAO;IACjCC,IAAI,EAAEzH,gBAAgB,CAACyH,IAAI;IAC3BC,UAAU,EAAE1H,gBAAgB,CAAC0H,UAAU;IACvCC,OAAO,EAAE3H,gBAAgB,CAAC2H,OAAO;IACjCC,+BAA+B,EAC7B5H,gBAAgB,CAAC4H,+BAA+B;IAGlDC,MAAM,EAAE5H,gBAAgB,CAAC4H,MAAM;IAG/BC,YAAY,EAAE5H,qBAAqB,CAAC4H,YAAY;IAChDC,WAAW,EAAE7H,qBAAqB,CAAC6H,WAAW;IAC9CC,gBAAgB,EAAE9H,qBAAqB,CAAC8H,gBAAgB;IACxDC,aAAa,EAAE/H,qBAAqB,CAAC+H,aAAa;IAGlDC,WAAW,EAAE/H,eAAe,CAAC+H,WAAW;IACxCC,oBAAoB,EAAEhI,eAAe,CAACgI,oBAAoB;IAC1DC,UAAU,EAAEjI,eAAe,CAACiI,UAAU;IACtCC,cAAc,EAAElI,eAAe,CAACkI,cAAc;IAC9CC,cAAc,EAAEnI,eAAe,CAACmI,cAAc;IAC9CC,kBAAkB,EAAEpI,eAAe,CAACoI,kBAAkB;IACtDC,kBAAkB,EAAErI,eAAe,CAACqI,kBAAkB;IACtDnG,GAAG,EAAElC,eAAe,CAACkC,GAAG;IACxBoG,wBAAwB,EAAEtI,eAAe,CAACsI,wBAAwB;IAClEC,qBAAqB,EAAEvI,eAAe,CAACuI,qBAAqB;IAC5DC,0BAA0B,EAAExI,eAAe,CAACwI,0BAA0B;IACtEC,yBAAyB,EAAEzI,eAAe,CAACyI,yBAAyB;IACpEC,8BAA8B,EAC5B1I,eAAe,CAAC0I,8BAA8B;IAGhDC,yBAAyB,EAAE1I,iBAAiB,CAAC0I,yBAAyB;IACtEC,UAAU,EAAE3I,iBAAiB,CAAC2I,UAAU;IACxCC,WAAW,EAAE5I,iBAAiB,CAAC4I,WAAAA;AACjC,CAAC;AAED7F,MAAM,CAAC8F,MAAM,CAACpI,cAAc,CAACqI,SAAS,EAAExE,OAAO,CAAC;AAED;IAI7C7D,cAAc,CAACqI,SAAS,CAACC,uBAAuB,GAE9CtJ,mBAAmB,CAACuJ,MAAM,CAAC,yBAAyB,CAAC,CAAC;IAExDjG,MAAM,CAAC8F,MAAM,CAACpI,cAAc,CAACqI,SAAS,EAAE;QAEtCG,GAAG,EAAEvJ,sBAAsB,CAACsJ,MAAM,CAAC,KAAK,CAAC,CAAC;QAE1CE,EAAE,EAAExJ,sBAAsB,CAACsJ,MAAM,CAAC,IAAI,CAAC,CAAC;QAExCG,IAAI,EAAEzJ,sBAAsB,CAACsJ,MAAM,CAAC,MAAM,CAAC,CAAC;QAE5CI,MAAM,EAAE1J,sBAAsB,CAACsJ,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEhDK,KAAK,EAAEvJ,qBAAqB,CAACkJ,MAAM,CAAC,OAAO,CAAC,CAAC;QAC7CM,iBAAiB,EAAExJ,qBAAqB,CAACwJ,iBAAiB;QAC1D7G,IAAI,EAAE7C,gBAAgB,CAAC6C,IAAI;QAE3B8G,aAAa,EAAE3J,gBAAgB,CAACoJ,MAAM,CAAC,eAAe,CAAC,CAAC;QACxDQ,QAAQ,EAAE5J,gBAAgB,CAAC4J,QAAQ;QACnCC,MAAM,EAAE7J,gBAAgB,CAAC6J,MAAM;QAC/BC,UAAU,EAAE9J,gBAAgB,CAAC8J,UAAU;QACvCC,WAAW,EAAE/J,gBAAgB,CAAC+J,WAAW;QACzCnH,KAAK,EAAE5C,gBAAgB,CAAC4C,KAAK;QAC7BoH,MAAM,EAAEhK,gBAAgB,CAACgK,MAAAA;IAC3B,CAAC,CAAC;AACJ,CAEmC;IAGjCnJ,cAAc,CAACqI,SAAS,CAACe,iDAAiD,GACxEnK,sBAAsB,CAACmH,+BAA+B;IAIxDpG,cAAc,CAACqI,SAAS,CAACe,iDAAiD,GACxEnK,sBAAsB,CAACmH,+BAA+B;IAExD9D,MAAM,CAAC8F,MAAM,CAACpI,cAAc,CAACqI,SAAS,EAAE;QAEtCgB,kBAAkB,EAAExK,kBAAkB,CAACwK,kBAAkB;QAGzDC,YAAY,EAAExK,oBAAoB,CAACwK,YAAY;QAG/CC,QAAQ,EAAEtK,sBAAsB,CAACsK,QAAQ;QAGzCC,KAAK,EAAErK,gBAAgB,CAACqK,KAAK;QAC7BC,aAAa,EAAEtK,gBAAgB,CAACsK,aAAa;QAC7CC,UAAU,EAAEvK,gBAAgB,CAACuK,UAAU;QACvCC,WAAW,EAAExK,gBAAgB,CAACwK,WAAW;QACzCC,cAAc,EAAEzK,gBAAgB,CAACyK,cAAc;QAC/CC,iBAAiB,EAAE1K,gBAAgB,CAAC0K,iBAAiB;QAGrDC,gBAAgB,EAAE1K,gBAAgB,CAAC0K,gBAAgB;QACnDC,iBAAiB,EAAE3K,gBAAgB,CAAC2K,iBAAiB;QACrDC,OAAO,EAAE5K,gBAAgB,CAAC4K,OAAO;QACjCC,YAAY,EAAE7K,gBAAgB,CAAC6K,YAAY;QAC3CC,gBAAgB,EAAE9K,gBAAgB,CAAC8K,gBAAgB;QAGnDC,gBAAgB,EAAE9K,qBAAqB,CAAC8K,gBAAgB;QACxDC,sBAAsB,EAAE/K,qBAAqB,CAAC+K,sBAAsB;QACpEC,qBAAqB,EAAEhL,qBAAqB,CAACgL,qBAAqB;QAClEC,eAAe,EAAEjL,qBAAqB,CAACiL,eAAe;QAGtDC,OAAO,EAAEjL,eAAe,CAACiL,OAAO;QAChCC,WAAW,EAAElL,eAAe,CAACkL,WAAAA;IAC/B,CAAC,CAAC;AACJ,CAMA,KAAK,MAAMxJ,IAAI,IAAIvC,CAAC,CAACgM,KAAK,CAAE;IAC1B,MAAMC,OAAO,GAAG,CAAA,EAAA,EAAK1J,IAAI,EAAE;IAE3B,MAAM2J,EAAE,GAAGlM,CAAC,CAACiM,OAAO,CAAC;IAErB1K,cAAc,CAACqI,SAAS,CAACqC,OAAO,CAAC,GAAG,SAAUlK,IAAS,EAAE;QACvD,OAAOmK,EAAE,CAAC,IAAI,CAAC5J,IAAI,EAAEP,IAAI,CAAC;IAC5B,CAAC;IAGDR,cAAc,CAACqI,SAAS,CAAC,CAAA,MAAA,EAASrH,IAAI,EAAE,CAAC,GAAG,SAAUR,IAAS,EAAE;QAC/D,IAAI,CAACmK,EAAE,CAAC,IAAI,CAAC5J,IAAI,EAAEP,IAAI,CAAC,EAAE;YACxB,MAAM,IAAIoK,SAAS,CAAC,CAAA,2BAAA,EAA8B5J,IAAI,EAAE,CAAC;QAC3D;IACF,CAAC;AACH;AAGAsB,MAAM,CAAC8F,MAAM,CAACpI,cAAc,CAACqI,SAAS,EAAE7I,gCAAgC,CAAC;AAEzE,KAAK,MAAMwB,IAAI,IAAIsB,MAAM,CAACuI,IAAI,CAAC1M,YAAY,CAAC,CAAmC;IAC7E,IAAI6C,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACrB,IAAI,CAACvC,CAAC,CAACgM,KAAK,CAACK,QAAQ,CAAC9J,IAAI,CAAC,EAAEvC,CAAC,CAACgM,KAAK,CAACM,IAAI,CAAC/J,IAAI,CAAC;AACjD","ignoreList":[0]}},
    {"offset": {"line": 5002, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5007, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/context.ts"],"sourcesContent":["import NodePath from \"./path/index.ts\";\nimport { VISITOR_KEYS } from \"@babel/types\";\nimport type Scope from \"./scope/index.ts\";\nimport type { ExplodedTraverseOptions } from \"./index.ts\";\nimport type * as t from \"@babel/types\";\nimport type { Visitor } from \"./types.ts\";\nimport { popContext, pushContext, resync } from \"./path/context.ts\";\n\nexport default class TraversalContext<S = unknown> {\n  constructor(\n    scope: Scope,\n    opts: ExplodedTraverseOptions<S>,\n    state: S,\n    parentPath: NodePath,\n  ) {\n    this.parentPath = parentPath;\n    this.scope = scope;\n    this.state = state;\n    this.opts = opts;\n  }\n\n  declare parentPath: NodePath;\n  declare scope: Scope;\n  declare state: S;\n  declare opts: ExplodedTraverseOptions<S>;\n  queue: Array<NodePath> | null = null;\n  priorityQueue: Array<NodePath> | null = null;\n\n  /**\n   * This method does a simple check to determine whether or not we really need to attempt\n   * visit a node. This will prevent us from constructing a NodePath.\n   */\n\n  shouldVisit(node: t.Node): boolean {\n    const opts = this.opts as Visitor;\n    if (opts.enter || opts.exit) return true;\n\n    // check if we have a visitor for this node\n    if (opts[node.type]) return true;\n\n    // check if we're going to traverse into this node\n    const keys: Array<string> | undefined = VISITOR_KEYS[node.type];\n    if (!keys?.length) return false;\n\n    // we need to traverse into this node so ensure that it has children to traverse into!\n    for (const key of keys) {\n      if (\n        // @ts-expect-error key is from visitor keys\n        node[key]\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  create(\n    node: t.Node,\n    container: t.Node | t.Node[],\n    key: string | number,\n    listKey?: string,\n  ): NodePath {\n    // We don't need to `.setContext()` here, since `.visitQueue()` already\n    // calls `.pushContext`.\n    return NodePath.get({\n      parentPath: this.parentPath,\n      parent: node,\n      container,\n      key: key,\n      listKey,\n    });\n  }\n\n  maybeQueue(path: NodePath, notPriority?: boolean) {\n    if (this.queue) {\n      if (notPriority) {\n        this.queue.push(path);\n      } else {\n        this.priorityQueue.push(path);\n      }\n    }\n  }\n\n  visitMultiple(container: t.Node[], parent: t.Node, listKey: string) {\n    // nothing to traverse!\n    if (container.length === 0) return false;\n\n    const queue = [];\n\n    // build up initial queue\n    for (let key = 0; key < container.length; key++) {\n      const node = container[key];\n      if (node && this.shouldVisit(node)) {\n        queue.push(this.create(parent, container, key, listKey));\n      }\n    }\n\n    return this.visitQueue(queue);\n  }\n\n  visitSingle(node: t.Node, key: string): boolean {\n    if (\n      this.shouldVisit(\n        // @ts-expect-error key may not index node\n        node[key],\n      )\n    ) {\n      return this.visitQueue([this.create(node, node, key)]);\n    } else {\n      return false;\n    }\n  }\n\n  visitQueue(queue: Array<NodePath>): boolean {\n    // set queue\n    this.queue = queue;\n    this.priorityQueue = [];\n\n    const visited = new WeakSet();\n    let stop = false;\n    let visitIndex = 0;\n\n    // visit the queue\n    for (; visitIndex < queue.length; ) {\n      const path = queue[visitIndex];\n      visitIndex++;\n      resync.call(path);\n\n      if (\n        path.contexts.length === 0 ||\n        path.contexts[path.contexts.length - 1] !== this\n      ) {\n        // The context might already have been pushed when this path was inserted and queued.\n        // If we always re-pushed here, we could get duplicates and risk leaving contexts\n        // on the stack after the traversal has completed, which could break things.\n        pushContext.call(path, this);\n      }\n\n      // this path no longer belongs to the tree\n      if (path.key === null) continue;\n\n      // ensure we don't visit the same node twice\n      const { node } = path;\n      if (visited.has(node)) continue;\n      if (node) visited.add(node);\n\n      if (path.visit()) {\n        stop = true;\n        break;\n      }\n\n      if (this.priorityQueue.length) {\n        stop = this.visitQueue(this.priorityQueue);\n        this.priorityQueue = [];\n        this.queue = queue;\n        if (stop) break;\n      }\n    }\n\n    // pop contexts\n    for (let i = 0; i < visitIndex; i++) {\n      popContext.call(queue[i]);\n    }\n\n    // clear queue\n    this.queue = null;\n\n    return stop;\n  }\n\n  visit(node: t.Node, key: string) {\n    // @ts-expect-error key may not index node\n    const nodes = node[key] as t.Node | t.Node[] | null;\n    if (!nodes) return false;\n\n    if (Array.isArray(nodes)) {\n      return this.visitMultiple(nodes, node, key);\n    } else {\n      return this.visitSingle(node, key);\n    }\n  }\n}\n"],"names":["_index","require","_t","_context","VISITOR_KEYS","TraversalContext","constructor","scope","opts","state","parentPath","queue","priorityQueue","shouldVisit","node","enter","exit","type","keys","length","key","create","container","listKey","NodePath","get","parent","maybeQueue","path","notPriority","push","visitMultiple","visitQueue","visitSingle","visited","WeakSet","stop","visitIndex","resync","call","contexts","pushContext","has","add","visit","i","popContext","nodes","Array","isArray","exports","default"],"mappings":";;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,EAAA,GAAAD,OAAA;AAKA,IAAAE,QAAA,GAAAF,OAAA;AAAoE,MAAA,EAL3DG,YAAAA,EAAY,GAAAF,EAAA;AAON,MAAMG,gBAAgB,CAAc;IACjDC,WAAWA,CACTC,KAAY,EACZC,IAAgC,EAChCC,KAAQ,EACRC,UAAoB,CACpB;QAAA,IAAA,CAWFC,KAAK,GAA2B,IAAI;QAAA,IAAA,CACpCC,aAAa,GAA2B,IAAI;QAX1C,IAAI,CAACF,UAAU,GAAGA,UAAU;QAC5B,IAAI,CAACH,KAAK,GAAGA,KAAK;QAClB,IAAI,CAACE,KAAK,GAAGA,KAAK;QAClB,IAAI,CAACD,IAAI,GAAGA,IAAI;IAClB;IAcAK,WAAWA,CAACC,IAAY,EAAW;QACjC,MAAMN,IAAI,GAAG,IAAI,CAACA,IAAe;QACjC,IAAIA,IAAI,CAACO,KAAK,IAAIP,IAAI,CAACQ,IAAI,EAAE,OAAO,IAAI;QAGxC,IAAIR,IAAI,CAACM,IAAI,CAACG,IAAI,CAAC,EAAE,OAAO,IAAI;QAGhC,MAAMC,IAA+B,GAAGd,YAAY,CAACU,IAAI,CAACG,IAAI,CAAC;QAC/D,IAAI,CAAA,CAACC,IAAI,IAAA,QAAJA,IAAI,CAAEC,MAAM,GAAE,OAAO,KAAK;QAG/B,KAAK,MAAMC,GAAG,IAAIF,IAAI,CAAE;YACtB,IAEEJ,IAAI,CAACM,GAAG,CAAC,EACT;gBACA,OAAO,IAAI;YACb;QACF;QAEA,OAAO,KAAK;IACd;IAEAC,MAAMA,CACJP,IAAY,EACZQ,SAA4B,EAC5BF,GAAoB,EACpBG,OAAgB,EACN;QAGV,OAAOC,OAAAA,OAAQ,CAACC,GAAG,CAAC;YAClBf,UAAU,EAAE,IAAI,CAACA,UAAU;YAC3BgB,MAAM,EAAEZ,IAAI;YACZQ,SAAS;YACTF,GAAG,EAAEA,GAAG;YACRG;QACF,CAAC,CAAC;IACJ;IAEAI,UAAUA,CAACC,IAAc,EAAEC,WAAqB,EAAE;QAChD,IAAI,IAAI,CAAClB,KAAK,EAAE;YACd,IAAIkB,WAAW,EAAE;gBACf,IAAI,CAAClB,KAAK,CAACmB,IAAI,CAACF,IAAI,CAAC;YACvB,CAAC,MAAM;gBACL,IAAI,CAAChB,aAAa,CAACkB,IAAI,CAACF,IAAI,CAAC;YAC/B;QACF;IACF;IAEAG,aAAaA,CAACT,SAAmB,EAAEI,MAAc,EAAEH,OAAe,EAAE;QAElE,IAAID,SAAS,CAACH,MAAM,KAAK,CAAC,EAAE,OAAO,KAAK;QAExC,MAAMR,KAAK,GAAG,EAAE;QAGhB,IAAK,IAAIS,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGE,SAAS,CAACH,MAAM,EAAEC,GAAG,EAAE,CAAE;YAC/C,MAAMN,IAAI,GAAGQ,SAAS,CAACF,GAAG,CAAC;YAC3B,IAAIN,IAAI,IAAI,IAAI,CAACD,WAAW,CAACC,IAAI,CAAC,EAAE;gBAClCH,KAAK,CAACmB,IAAI,CAAC,IAAI,CAACT,MAAM,CAACK,MAAM,EAAEJ,SAAS,EAAEF,GAAG,EAAEG,OAAO,CAAC,CAAC;YAC1D;QACF;QAEA,OAAO,IAAI,CAACS,UAAU,CAACrB,KAAK,CAAC;IAC/B;IAEAsB,WAAWA,CAACnB,IAAY,EAAEM,GAAW,EAAW;QAC9C,IACE,IAAI,CAACP,WAAW,CAEdC,IAAI,CAACM,GAAG,CACV,CAAC,EACD;YACA,OAAO,IAAI,CAACY,UAAU,CAAC;gBAAC,IAAI,CAACX,MAAM,CAACP,IAAI,EAAEA,IAAI,EAAEM,GAAG,CAAC;aAAC,CAAC;QACxD,CAAC,MAAM;YACL,OAAO,KAAK;QACd;IACF;IAEAY,UAAUA,CAACrB,KAAsB,EAAW;QAE1C,IAAI,CAACA,KAAK,GAAGA,KAAK;QAClB,IAAI,CAACC,aAAa,GAAG,EAAE;QAEvB,MAAMsB,OAAO,GAAG,IAAIC,OAAO,CAAC,CAAC;QAC7B,IAAIC,IAAI,GAAG,KAAK;QAChB,IAAIC,UAAU,GAAG,CAAC;QAGlB,MAAOA,UAAU,GAAG1B,KAAK,CAACQ,MAAM,EAAI;YAClC,MAAMS,IAAI,GAAGjB,KAAK,CAAC0B,UAAU,CAAC;YAC9BA,UAAU,EAAE;YACZC,SAAAA,MAAM,CAACC,IAAI,CAACX,IAAI,CAAC;YAEjB,IACEA,IAAI,CAACY,QAAQ,CAACrB,MAAM,KAAK,CAAC,IAC1BS,IAAI,CAACY,QAAQ,CAACZ,IAAI,CAACY,QAAQ,CAACrB,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,EAChD;gBAIAsB,SAAAA,WAAW,CAACF,IAAI,CAACX,IAAI,EAAE,IAAI,CAAC;YAC9B;YAGA,IAAIA,IAAI,CAACR,GAAG,KAAK,IAAI,EAAE;YAGvB,MAAM,EAAEN,IAAAA,EAAM,GAAGc,IAAI;YACrB,IAAIM,OAAO,CAACQ,GAAG,CAAC5B,IAAI,CAAC,EAAE;YACvB,IAAIA,IAAI,EAAEoB,OAAO,CAACS,GAAG,CAAC7B,IAAI,CAAC;YAE3B,IAAIc,IAAI,CAACgB,KAAK,CAAC,CAAC,EAAE;gBAChBR,IAAI,GAAG,IAAI;gBACX;YACF;YAEA,IAAI,IAAI,CAACxB,aAAa,CAACO,MAAM,EAAE;gBAC7BiB,IAAI,GAAG,IAAI,CAACJ,UAAU,CAAC,IAAI,CAACpB,aAAa,CAAC;gBAC1C,IAAI,CAACA,aAAa,GAAG,EAAE;gBACvB,IAAI,CAACD,KAAK,GAAGA,KAAK;gBAClB,IAAIyB,IAAI,EAAE;YACZ;QACF;QAGA,IAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,UAAU,EAAEQ,CAAC,EAAE,CAAE;YACnCC,SAAAA,UAAU,CAACP,IAAI,CAAC5B,KAAK,CAACkC,CAAC,CAAC,CAAC;QAC3B;QAGA,IAAI,CAAClC,KAAK,GAAG,IAAI;QAEjB,OAAOyB,IAAI;IACb;IAEAQ,KAAKA,CAAC9B,IAAY,EAAEM,GAAW,EAAE;QAE/B,MAAM2B,KAAK,GAAGjC,IAAI,CAACM,GAAG,CAA6B;QACnD,IAAI,CAAC2B,KAAK,EAAE,OAAO,KAAK;QAExB,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;YACxB,OAAO,IAAI,CAAChB,aAAa,CAACgB,KAAK,EAAEjC,IAAI,EAAEM,GAAG,CAAC;QAC7C,CAAC,MAAM;YACL,OAAO,IAAI,CAACa,WAAW,CAACnB,IAAI,EAAEM,GAAG,CAAC;QACpC;IACF;AACF;AAAC8B,OAAA,CAAAC,OAAA,GAAA9C,gBAAA","ignoreList":[0]}},
    {"offset": {"line": 5121, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5126, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/traverse-node.ts"],"sourcesContent":["import TraversalContext from \"./context.ts\";\nimport type { ExplodedTraverseOptions } from \"./index.ts\";\nimport type NodePath from \"./path/index.ts\";\nimport type Scope from \"./scope/index.ts\";\nimport type * as t from \"@babel/types\";\nimport { VISITOR_KEYS } from \"@babel/types\";\n\n/**\n * Traverse the children of given node\n * @param {Node} node\n * @param {TraverseOptions} opts The traverse options used to create a new traversal context\n * @param {scope} scope A traversal scope used to create a new traversal context. When opts.noScope is true, scope should not be provided\n * @param {any} state A user data storage provided as the second callback argument for traversal visitors\n * @param {NodePath} path A NodePath of given node\n * @param {Record<string, boolean>} skipKeys A map from key names to whether that should be skipped during traversal. The skipKeys are applied to every descendants\n * @returns {boolean} Whether the traversal stops early\n\n * @note This function does not visit the given `node`.\n */\nexport function traverseNode<S = unknown>(\n  node: t.Node,\n  opts: ExplodedTraverseOptions<S>,\n  scope?: Scope,\n  state?: S,\n  path?: NodePath,\n  skipKeys?: Record<string, boolean>,\n  visitSelf?: boolean,\n): boolean {\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return false;\n\n  const context = new TraversalContext<S>(scope, opts, state, path);\n  if (visitSelf) {\n    if (skipKeys?.[path.parentKey]) return false;\n    return context.visitQueue([path]);\n  }\n\n  for (const key of keys) {\n    if (skipKeys?.[key]) continue;\n    if (context.visit(node, key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],"names":["_context","require","_t","VISITOR_KEYS","traverseNode","node","opts","scope","state","path","skipKeys","visitSelf","keys","type","context","TraversalContext","parentKey","visitQueue","key","visit"],"mappings":";;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AAKA,IAAAC,EAAA,GAAAD,OAAA;AAA4C,MAAA,EAAnCE,YAAAA,EAAY,GAAAD,EAAA;AAcd,SAASE,YAAYA,CAC1BC,IAAY,EACZC,IAAgC,EAChCC,KAAa,EACbC,KAAS,EACTC,IAAe,EACfC,QAAkC,EAClCC,SAAmB,EACV;IACT,MAAMC,IAAI,GAAGT,YAAY,CAACE,IAAI,CAACQ,IAAI,CAAC;IACpC,IAAI,CAACD,IAAI,EAAE,OAAO,KAAK;IAEvB,MAAME,OAAO,GAAG,IAAIC,SAAAA,OAAgB,CAAIR,KAAK,EAAED,IAAI,EAAEE,KAAK,EAAEC,IAAI,CAAC;IACjE,IAAIE,SAAS,EAAE;QACb,IAAID,QAAQ,IAAA,QAARA,QAAQ,CAAGD,IAAI,CAACO,SAAS,CAAC,EAAE,OAAO,KAAK;QAC5C,OAAOF,OAAO,CAACG,UAAU,CAAC;YAACR,IAAI;SAAC,CAAC;IACnC;IAEA,KAAK,MAAMS,GAAG,IAAIN,IAAI,CAAE;QACtB,IAAIF,QAAQ,IAAA,QAARA,QAAQ,CAAGQ,GAAG,CAAC,EAAE;QACrB,IAAIJ,OAAO,CAACK,KAAK,CAACd,IAAI,EAAEa,GAAG,CAAC,EAAE;YAC5B,OAAO,IAAI;QACb;IACF;IAEA,OAAO,KAAK;AACd","ignoreList":[0]}},
    {"offset": {"line": 5152, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5157, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/path/context.ts"],"sourcesContent":["// This file contains methods responsible for maintaining a TraversalContext.\n\nimport { traverseNode } from \"../traverse-node.ts\";\nimport { SHOULD_SKIP, SHOULD_STOP } from \"./index.ts\";\nimport { _markRemoved } from \"./removal.ts\";\nimport type TraversalContext from \"../context.ts\";\nimport type { VisitPhase } from \"../types.ts\";\nimport type NodePath from \"./index.ts\";\nimport * as t from \"@babel/types\";\n\nexport function call(this: NodePath, key: VisitPhase): boolean {\n  const opts = this.opts;\n\n  this.debug(key);\n\n  if (this.node) {\n    if (_call.call(this, opts[key])) return true;\n  }\n\n  if (this.node) {\n    return _call.call(this, opts[this.node.type]?.[key]);\n  }\n\n  return false;\n}\n\nexport function _call(this: NodePath, fns?: Array<Function>): boolean {\n  if (!fns) return false;\n\n  for (const fn of fns) {\n    if (!fn) continue;\n\n    const node = this.node;\n    if (!node) return true;\n\n    const ret = fn.call(this.state, this, this.state);\n    if (ret && typeof ret === \"object\" && typeof ret.then === \"function\") {\n      throw new Error(\n        `You appear to be using a plugin with an async traversal visitor, ` +\n          `which your current version of Babel does not support. ` +\n          `If you're using a published plugin, you may need to upgrade ` +\n          `your @babel/core version.`,\n      );\n    }\n    if (ret) {\n      throw new Error(`Unexpected return value from visitor method ${fn}`);\n    }\n\n    // node has been replaced, it will have been requeued\n    if (this.node !== node) return true;\n\n    // this.shouldSkip || this.shouldStop || this.removed\n    if (this._traverseFlags > 0) return true;\n  }\n\n  return false;\n}\n\nexport function isDenylisted(this: NodePath): boolean {\n  // @ts-expect-error TODO(Babel 8): Remove blacklist\n  const denylist = this.opts.denylist ?? this.opts.blacklist;\n  return denylist?.includes(this.node.type);\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.isBlacklisted = isDenylisted;\n}\n\nfunction restoreContext(path: NodePath, context: TraversalContext) {\n  if (path.context !== context) {\n    path.context = context;\n    path.state = context.state;\n    path.opts = context.opts;\n  }\n}\n\nexport function visit(this: NodePath): boolean {\n  if (!this.node) {\n    return false;\n  }\n\n  if (this.isDenylisted()) {\n    return false;\n  }\n\n  if (this.opts.shouldSkip?.(this)) {\n    return false;\n  }\n\n  const currentContext = this.context;\n  // Note: We need to check \"this.shouldSkip\" first because\n  // another visitor can set it to true. Usually .shouldSkip is false\n  // before calling the enter visitor, but it can be true in case of\n  // a requeued node (e.g. by .replaceWith()) that is then marked\n  // with .skip().\n  if (this.shouldSkip || call.call(this, \"enter\")) {\n    this.debug(\"Skip...\");\n    return this.shouldStop;\n  }\n  restoreContext(this, currentContext);\n\n  this.debug(\"Recursing into...\");\n  this.shouldStop = traverseNode(\n    this.node,\n    this.opts,\n    this.scope,\n    this.state,\n    this,\n    this.skipKeys,\n  );\n\n  restoreContext(this, currentContext);\n\n  call.call(this, \"exit\");\n\n  return this.shouldStop;\n}\n\nexport function skip(this: NodePath) {\n  this.shouldSkip = true;\n}\n\nexport function skipKey(this: NodePath, key: string) {\n  if (this.skipKeys == null) {\n    this.skipKeys = {};\n  }\n  this.skipKeys[key] = true;\n}\n\nexport function stop(this: NodePath) {\n  // this.shouldSkip = true; this.shouldStop = true;\n  this._traverseFlags |= SHOULD_SKIP | SHOULD_STOP;\n}\n\nexport function setScope(this: NodePath) {\n  if (this.opts?.noScope) return;\n\n  let path = this.parentPath;\n\n  if (\n    // Skip method scope if is computed method key or decorator expression\n    ((this.key === \"key\" || this.listKey === \"decorators\") &&\n      path.isMethod()) ||\n    // Skip switch scope if for discriminant (`x` in `switch (x) {}`).\n    (this.key === \"discriminant\" && path.isSwitchStatement())\n  ) {\n    path = path.parentPath;\n  }\n\n  let target;\n  while (path && !target) {\n    if (path.opts?.noScope) return;\n\n    target = path.scope;\n    path = path.parentPath;\n  }\n\n  this.scope = this.getScope(target);\n  this.scope?.init();\n}\n\nexport function setContext<S = unknown>(\n  this: NodePath,\n  context?: TraversalContext<S>,\n) {\n  if (this.skipKeys != null) {\n    this.skipKeys = {};\n  }\n  // this.shouldSkip = false; this.shouldStop = false; this.removed = false;\n  this._traverseFlags = 0;\n\n  if (context) {\n    this.context = context;\n    this.state = context.state;\n    // Discard the S type parameter from context.opts\n    this.opts = context.opts as typeof this.opts;\n  }\n\n  setScope.call(this);\n\n  return this;\n}\n\n/**\n * Here we resync the node paths `key` and `container`. If they've changed according\n * to what we have stored internally then we attempt to resync by crawling and looking\n * for the new values.\n */\n\nexport function resync(this: NodePath) {\n  if (this.removed) return;\n\n  _resyncParent.call(this);\n  _resyncList.call(this);\n  _resyncKey.call(this);\n  //this._resyncRemoved();\n}\n\nexport function _resyncParent(this: NodePath) {\n  if (this.parentPath) {\n    this.parent = this.parentPath.node;\n  }\n}\n\nexport function _resyncKey(this: NodePath) {\n  if (!this.container) return;\n\n  if (\n    this.node ===\n    // @ts-expect-error this.key should present in this.container\n    this.container[this.key]\n  ) {\n    return;\n  }\n\n  // grrr, path key is out of sync. this is likely due to a modification to the AST\n  // not done through our path APIs\n\n  if (Array.isArray(this.container)) {\n    for (let i = 0; i < this.container.length; i++) {\n      if (this.container[i] === this.node) {\n        setKey.call(this, i);\n        return;\n      }\n    }\n  } else {\n    for (const key of Object.keys(this.container)) {\n      // @ts-expect-error this.key should present in this.container\n      if (this.container[key] === this.node) {\n        setKey.call(this, key);\n        return;\n      }\n    }\n  }\n\n  // ¯\\_(ツ)_/¯ who knows where it's gone lol\n  this.key = null;\n}\n\nexport function _resyncList(this: NodePath) {\n  if (!this.parent || !this.inList) return;\n\n  const newContainer =\n    // @ts-expect-error this.listKey should present in this.parent\n    this.parent[this.listKey];\n  if (this.container === newContainer) return;\n\n  // container is out of sync. this is likely the result of it being reassigned\n  this.container = newContainer || null;\n}\n\nexport function _resyncRemoved(this: NodePath) {\n  if (\n    this.key == null ||\n    !this.container ||\n    // @ts-expect-error this.key should present in this.container\n    this.container[this.key] !== this.node\n  ) {\n    _markRemoved.call(this);\n  }\n}\n\nexport function popContext(this: NodePath) {\n  this.contexts.pop();\n  if (this.contexts.length > 0) {\n    this.setContext(this.contexts[this.contexts.length - 1]);\n  } else {\n    this.setContext(undefined);\n  }\n}\n\nexport function pushContext(this: NodePath, context: TraversalContext) {\n  this.contexts.push(context);\n  this.setContext(context);\n}\n\nexport function setup(\n  this: NodePath,\n  parentPath: NodePath | undefined,\n  container: t.Node | t.Node[],\n  listKey: string,\n  key: string | number,\n) {\n  this.listKey = listKey;\n  this.container = container;\n\n  this.parentPath = parentPath || this.parentPath;\n  setKey.call(this, key);\n}\n\nexport function setKey(this: NodePath, key: string | number) {\n  this.key = key;\n  this.node =\n    // @ts-expect-error this.key must present in this.container\n    this.container[this.key];\n  this.type = this.node?.type;\n}\n\nexport function requeue(this: NodePath, pathToQueue = this) {\n  if (pathToQueue.removed) return;\n\n  // If a path is skipped, and then replaced with a\n  // new one, the new one shouldn't probably be skipped.\n  if (process.env.BABEL_8_BREAKING) {\n    pathToQueue.shouldSkip = false;\n  }\n\n  // TODO(loganfsmyth): This should be switched back to queue in parent contexts\n  // automatically once #2892 and #4135 have been resolved. See #4140.\n  // let contexts = this._getQueueContexts();\n  const contexts = this.contexts;\n\n  for (const context of contexts) {\n    context.maybeQueue(pathToQueue);\n  }\n}\n\nexport function requeueComputedKeyAndDecorators(\n  this: NodePath<t.Method | t.Property>,\n) {\n  const { context, node } = this;\n  if (!t.isPrivate(node) && node.computed) {\n    context.maybeQueue(this.get(\"key\"));\n  }\n  if (node.decorators) {\n    for (const decorator of this.get(\"decorators\")) {\n      context.maybeQueue(decorator);\n    }\n  }\n}\n\nexport function _getQueueContexts(this: NodePath) {\n  let path = this;\n  let contexts = this.contexts;\n  while (!contexts.length) {\n    path = path.parentPath;\n    if (!path) break;\n    contexts = path.contexts;\n  }\n  return contexts;\n}\n"],"names":["_traverseNode","require","_index","_removal","t","call","key","opts","debug","node","_call","_opts$this$node$type","type","fns","fn","ret","state","then","Error","_traverseFlags","isDenylisted","_this$opts$denylist","denylist","blacklist","includes","exports","isBlacklisted","restoreContext","path","context","visit","_this$opts$shouldSkip","_this$opts","shouldSkip","currentContext","shouldStop","traverseNode","scope","skipKeys","skip","skipKey","stop","SHOULD_SKIP","SHOULD_STOP","setScope","_this$opts2","_this$scope","noScope","parentPath","listKey","isMethod","isSwitchStatement","target","_path$opts","getScope","init","setContext","resync","removed","_resyncParent","_resyncList","_resyncKey","parent","container","Array","isArray","i","length","setKey","Object","keys","inList","newContainer","_resyncRemoved","_markRemoved","popContext","contexts","pop","undefined","pushContext","push","setup","_this$node","requeue","pathToQueue","maybeQueue","requeueComputedKeyAndDecorators","isPrivate","computed","get","decorators","decorator","_getQueueContexts"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5392, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5397, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/hub.ts"],"sourcesContent":["import type Scope from \"./scope/index.ts\";\nimport type { Node } from \"@babel/types\";\n\nexport interface HubInterface {\n  getCode(): string | void;\n  getScope(): Scope | void;\n  addHelper(name: string): any;\n  buildError(node: Node, msg: string, Error: new () => Error): Error;\n}\n\nexport default class Hub implements HubInterface {\n  getCode() {}\n\n  getScope() {}\n\n  addHelper() {\n    throw new Error(\"Helpers are not supported by the default hub.\");\n  }\n\n  buildError(node: Node, msg: string, Error = TypeError): Error {\n    return new Error(msg);\n  }\n}\n"],"names":["Hub","getCode","getScope","addHelper","Error","buildError","node","msg","TypeError","exports","default"],"mappings":";;;;;AAUe,MAAMA,GAAG,CAAyB;IAC/CC,OAAOA,CAAA,EAAG,CAAC;IAEXC,QAAQA,CAAA,EAAG,CAAC;IAEZC,SAASA,CAAA,EAAG;QACV,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;IAClE;IAEAC,UAAUA,CAACC,IAAU,EAAEC,GAAW,EAAEH,KAAK,IAAGI,SAAS,EAAS;QAC5D,OAAO,IAAIJ,KAAK,EAACG,GAAG,CAAC;IACvB;AACF;AAACE,OAAA,CAAAC,OAAA,GAAAV,GAAA","ignoreList":[0]}},
    {"offset": {"line": 5413, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5418, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyeon/Desktop/coding/4thTeamProject/node_modules/%40babel/traverse/src/index.ts"],"sourcesContent":["import \"./path/context.ts\"; // We have some cycles, this ensures correct order to avoid TDZ\nimport * as visitors from \"./visitors.ts\";\nimport {\n  VISITOR_KEYS,\n  removeProperties,\n  type RemovePropertiesOptions,\n  traverseFast,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport * as cache from \"./cache.ts\";\nimport type NodePath from \"./path/index.ts\";\nimport type { default as Scope, Binding } from \"./scope/index.ts\";\nimport type { ExplodedVisitor, Visitor, VisitorBase } from \"./types.ts\";\nimport { traverseNode } from \"./traverse-node.ts\";\n\nexport type { ExplodedVisitor, Visitor, VisitorBase, Binding };\nexport { default as NodePath } from \"./path/index.ts\";\nexport { default as Scope } from \"./scope/index.ts\";\nexport { default as Hub } from \"./hub.ts\";\nexport type { HubInterface } from \"./hub.ts\";\n\nexport { visitors };\n\nexport type TraverseOptions<S = t.Node> = {\n  scope?: Scope;\n  noScope?: boolean;\n  denylist?: string[];\n  shouldSkip?: (node: NodePath) => boolean;\n} & Visitor<S>;\n\nexport type ExplodedTraverseOptions<S = t.Node> = TraverseOptions<S> &\n  ExplodedVisitor<S>;\n\nfunction traverse<S>(\n  parent: t.Node,\n  opts: TraverseOptions<S>,\n  scope: Scope | undefined,\n  state: S,\n  parentPath?: NodePath,\n  visitSelf?: boolean,\n): void;\n\nfunction traverse(\n  parent: t.Node,\n  opts: TraverseOptions,\n  scope?: Scope,\n  state?: any,\n  parentPath?: NodePath,\n  visitSelf?: boolean,\n): void;\n\nfunction traverse<Options extends TraverseOptions>(\n  parent: t.Node,\n  // @ts-expect-error provide {} as default value for Options\n  opts: Options = {},\n  scope?: Scope,\n  state?: any,\n  parentPath?: NodePath,\n  visitSelf?: boolean,\n) {\n  if (!parent) return;\n\n  if (!opts.noScope && !scope) {\n    if (parent.type !== \"Program\" && parent.type !== \"File\") {\n      throw new Error(\n        \"You must pass a scope and parentPath unless traversing a Program/File. \" +\n          `Instead of that you tried to traverse a ${parent.type} node without ` +\n          \"passing scope and parentPath.\",\n      );\n    }\n  }\n\n  if (!parentPath && visitSelf) {\n    throw new Error(\"visitSelf can only be used when providing a NodePath.\");\n  }\n\n  if (!VISITOR_KEYS[parent.type]) {\n    return;\n  }\n\n  visitors.explode(opts as Visitor);\n\n  traverseNode(\n    parent,\n    opts as ExplodedVisitor,\n    scope,\n    state,\n    parentPath,\n    /* skipKeys */ null,\n    visitSelf,\n  );\n}\n\nexport default traverse;\n\ntraverse.visitors = visitors;\ntraverse.verify = visitors.verify;\ntraverse.explode = visitors.explode;\n\ntraverse.cheap = function (node: t.Node, enter: (node: t.Node) => void) {\n  traverseFast(node, enter);\n  return;\n};\n\ntraverse.node = function (\n  node: t.Node,\n  opts: ExplodedTraverseOptions,\n  scope?: Scope,\n  state?: any,\n  path?: NodePath,\n  skipKeys?: Record<string, boolean>,\n) {\n  traverseNode(node, opts, scope, state, path, skipKeys);\n  // traverse.node always returns undefined\n};\n\ntraverse.clearNode = function (node: t.Node, opts?: RemovePropertiesOptions) {\n  removeProperties(node, opts);\n};\n\ntraverse.removeProperties = function (\n  tree: t.Node,\n  opts?: RemovePropertiesOptions,\n) {\n  traverseFast(tree, traverse.clearNode, opts);\n  return tree;\n};\n\ntype HasDenylistedTypeState = {\n  has: boolean;\n  type: t.Node[\"type\"];\n};\nfunction hasDenylistedType(path: NodePath, state: HasDenylistedTypeState) {\n  if (path.node.type === state.type) {\n    state.has = true;\n    path.stop();\n  }\n}\n\ntraverse.hasType = function (\n  tree: t.Node,\n  type: t.Node[\"type\"],\n  denylistTypes?: Array<string>,\n): boolean {\n  // the node we're searching in is denylisted\n  if (denylistTypes?.includes(tree.type)) return false;\n\n  // the type we're looking for is the same as the passed node\n  if (tree.type === type) return true;\n\n  const state: HasDenylistedTypeState = {\n    has: false,\n    type: type,\n  };\n\n  traverse(\n    tree,\n    {\n      noScope: true,\n      denylist: denylistTypes,\n      enter: hasDenylistedType,\n    },\n    null,\n    state,\n  );\n\n  return state.has;\n};\n\ntraverse.cache = cache;\n"],"names":["require","visitors","exports","_t","cache","_traverseNode","_index","_index2","_hub","VISITOR_KEYS","removeProperties","traverseFast","traverse","parent","opts","scope","state","parentPath","visitSelf","noScope","type","Error","explode","traverseNode","_default","default","verify","cheap","node","enter","path","skipKeys","clearNode","tree","hasDenylistedType","has","stop","hasType","denylistTypes","includes","denylist"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5506, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}