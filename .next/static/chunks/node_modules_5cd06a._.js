(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_5cd06a._.js", {

"[project]/node_modules/@emotion/memoize/dist/emotion-memoize.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>memoize)
});
function memoize(fn) {
    var cache = Object.create(null);
    return function(arg) {
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}
;
}}),
"[project]/node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>isPropValid)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$memoize$2f$dist$2f$emotion$2d$memoize$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@emotion/memoize/dist/emotion-memoize.esm.js [app-client] (ecmascript)");
;
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23
var isPropValid = /* #__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$memoize$2f$dist$2f$emotion$2d$memoize$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
});
;
}}),
"[project]/node_modules/@emotion/unitless/dist/emotion-unitless.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>unitlessKeys)
});
var unitlessKeys = {
    animationIterationCount: 1,
    aspectRatio: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
};
;
}}),
"[project]/node_modules/shallowequal/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
//
module.exports = function shallowEqual(objA, objB, compare, compareContext) {
    var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
    if (ret !== void 0) {
        return !!ret;
    }
    if (objA === objB) {
        return true;
    }
    if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
        return false;
    }
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) {
        return false;
    }
    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
    // Test for A's keys different from B.
    for(var idx = 0; idx < keysA.length; idx++){
        var key = keysA[idx];
        if (!bHasOwnProperty(key)) {
            return false;
        }
        var valueA = objA[key];
        var valueB = objB[key];
        ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
        if (ret === false || ret === void 0 && valueA !== valueB) {
            return false;
        }
    }
    return true;
};
}}),
"[project]/node_modules/styled-components/node_modules/tslib/tslib.es6.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ __turbopack_esm__({
    "__addDisposableResource": (()=>__addDisposableResource),
    "__assign": (()=>__assign),
    "__asyncDelegator": (()=>__asyncDelegator),
    "__asyncGenerator": (()=>__asyncGenerator),
    "__asyncValues": (()=>__asyncValues),
    "__await": (()=>__await),
    "__awaiter": (()=>__awaiter),
    "__classPrivateFieldGet": (()=>__classPrivateFieldGet),
    "__classPrivateFieldIn": (()=>__classPrivateFieldIn),
    "__classPrivateFieldSet": (()=>__classPrivateFieldSet),
    "__createBinding": (()=>__createBinding),
    "__decorate": (()=>__decorate),
    "__disposeResources": (()=>__disposeResources),
    "__esDecorate": (()=>__esDecorate),
    "__exportStar": (()=>__exportStar),
    "__extends": (()=>__extends),
    "__generator": (()=>__generator),
    "__importDefault": (()=>__importDefault),
    "__importStar": (()=>__importStar),
    "__makeTemplateObject": (()=>__makeTemplateObject),
    "__metadata": (()=>__metadata),
    "__param": (()=>__param),
    "__propKey": (()=>__propKey),
    "__read": (()=>__read),
    "__rest": (()=>__rest),
    "__runInitializers": (()=>__runInitializers),
    "__setFunctionName": (()=>__setFunctionName),
    "__spread": (()=>__spread),
    "__spreadArray": (()=>__spreadArray),
    "__spreadArrays": (()=>__spreadArrays),
    "__values": (()=>__values),
    "default": (()=>__TURBOPACK__default__export__)
});
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
;
function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++){
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
}
;
function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
}
;
function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
        configurable: true,
        value: prefix ? "".concat(prefix, " ", name) : name
    });
}
;
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    "TURBOPACK unreachable";
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    "TURBOPACK unreachable";
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    "TURBOPACK unreachable";
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: false
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    "TURBOPACK unreachable";
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {
            value: raw
        });
    } else {
        cooked.raw = raw;
    }
    return cooked;
}
;
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        env.stack.push({
            value: value,
            dispose: dispose,
            async: async
        });
    } else if (async) {
        env.stack.push({
            async: true
        });
    }
    return value;
}
var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function __disposeResources(env) {
    function fail(e) {
        env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
    }
    function next() {
        while(env.stack.length){
            var rec = env.stack.pop();
            try {
                var result = rec.dispose && rec.dispose.call(rec.value);
                if (rec.async) return Promise.resolve(result).then(next, function(e) {
                    fail(e);
                    return next();
                });
            } catch (e) {
                fail(e);
            }
        }
        if (env.hasError) throw env.error;
    }
    return next();
}
const __TURBOPACK__default__export__ = {
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __createBinding,
    __exportStar,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __spreadArray,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet,
    __classPrivateFieldIn,
    __addDisposableResource,
    __disposeResources
};
}}),
"[project]/node_modules/styled-components/dist/styled-components.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ServerStyleSheet": (()=>vt),
    "StyleSheetConsumer": (()=>Be),
    "StyleSheetContext": (()=>$e),
    "StyleSheetManager": (()=>Ye),
    "ThemeConsumer": (()=>tt),
    "ThemeContext": (()=>et),
    "ThemeProvider": (()=>ot),
    "__PRIVATE__": (()=>gt),
    "createGlobalStyle": (()=>ft),
    "css": (()=>lt),
    "default": (()=>dt),
    "isStyledComponent": (()=>se),
    "keyframes": (()=>mt),
    "styled": (()=>dt),
    "useTheme": (()=>nt),
    "version": (()=>v),
    "withTheme": (()=>yt)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$is$2d$prop$2d$valid$2f$dist$2f$emotion$2d$is$2d$prop$2d$valid$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$shallowequal$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/shallowequal/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$unitless$2f$dist$2f$emotion$2d$unitless$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@emotion/unitless/dist/emotion-unitless.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/styled-components/node_modules/tslib/tslib.es6.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/index.js [app-client] (ecmascript)");
;
;
;
;
;
;
var f = "undefined" != typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] && void 0 !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env && (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.REACT_APP_SC_ATTR || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.SC_ATTR) || "data-styled", m = "active", y = "data-styled-version", v = "6.1.14", g = "/*!sc*/\n", S = "undefined" != typeof window && "HTMLElement" in window, w = Boolean("boolean" == typeof SC_DISABLE_SPEEDY ? SC_DISABLE_SPEEDY : "undefined" != typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] && void 0 !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env && void 0 !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.REACT_APP_SC_DISABLE_SPEEDY && "" !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.REACT_APP_SC_DISABLE_SPEEDY ? "false" !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.REACT_APP_SC_DISABLE_SPEEDY && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.REACT_APP_SC_DISABLE_SPEEDY : "undefined" != typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] && void 0 !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env && void 0 !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.SC_DISABLE_SPEEDY && "" !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.SC_DISABLE_SPEEDY ? "false" !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.SC_DISABLE_SPEEDY && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.SC_DISABLE_SPEEDY : "production" !== ("TURBOPACK compile-time value", "development")), b = {}, E = /invalid hook call/i, N = new Set, P = function(t, n) {
    if ("TURBOPACK compile-time truthy", 1) {
        var o = n ? ' with the id of "'.concat(n, '"') : "", s = "The component ".concat(t).concat(o, " has been created dynamically.\n") + "You may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.", i = console.error;
        try {
            var a = !0;
            console.error = function(t) {
                for(var n = [], o = 1; o < arguments.length; o++)n[o - 1] = arguments[o];
                E.test(t) ? (a = !1, N.delete(s)) : i.apply(void 0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__spreadArray"])([
                    t
                ], n, !1));
            }, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRef"])(), a && !N.has(s) && (console.warn(s), N.add(s));
        } catch (e) {
            E.test(e.message) && N.delete(s);
        } finally{
            console.error = i;
        }
    }
}, _ = Object.freeze([]), C = Object.freeze({});
function I(e, t, n) {
    return void 0 === n && (n = C), e.theme !== n.theme && e.theme || t || n.theme;
}
var A = new Set([
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "track",
    "u",
    "ul",
    "use",
    "var",
    "video",
    "wbr",
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "marker",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
]), O = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g, D = /(^-|-$)/g;
function R(e) {
    return e.replace(O, "-").replace(D, "");
}
var T = /(a)(d)/gi, k = 52, j = function(e) {
    return String.fromCharCode(e + (e > 25 ? 39 : 97));
};
function x(e) {
    var t, n = "";
    for(t = Math.abs(e); t > k; t = t / k | 0)n = j(t % k) + n;
    return (j(t % k) + n).replace(T, "$1-$2");
}
var V, F = 5381, M = function(e, t) {
    for(var n = t.length; n;)e = 33 * e ^ t.charCodeAt(--n);
    return e;
}, z = function(e) {
    return M(F, e);
};
function $(e) {
    return x(z(e) >>> 0);
}
function B(e) {
    return "production" !== ("TURBOPACK compile-time value", "development") && "string" == typeof e && e || e.displayName || e.name || "Component";
}
function L(e) {
    return "string" == typeof e && ("production" === ("TURBOPACK compile-time value", "development") || e.charAt(0) === e.charAt(0).toLowerCase());
}
var G = "function" == typeof Symbol && Symbol.for, Y = G ? Symbol.for("react.memo") : 60115, W = G ? Symbol.for("react.forward_ref") : 60112, q = {
    childContextTypes: !0,
    contextType: !0,
    contextTypes: !0,
    defaultProps: !0,
    displayName: !0,
    getDefaultProps: !0,
    getDerivedStateFromError: !0,
    getDerivedStateFromProps: !0,
    mixins: !0,
    propTypes: !0,
    type: !0
}, H = {
    name: !0,
    length: !0,
    prototype: !0,
    caller: !0,
    callee: !0,
    arguments: !0,
    arity: !0
}, U = {
    $$typeof: !0,
    compare: !0,
    defaultProps: !0,
    displayName: !0,
    propTypes: !0,
    type: !0
}, J = ((V = {})[W] = {
    $$typeof: !0,
    render: !0,
    defaultProps: !0,
    displayName: !0,
    propTypes: !0
}, V[Y] = U, V);
function X(e) {
    return ("type" in (t = e) && t.type.$$typeof) === Y ? U : "$$typeof" in e ? J[e.$$typeof] : q;
    "TURBOPACK unreachable";
    var t;
}
var Z = Object.defineProperty, K = Object.getOwnPropertyNames, Q = Object.getOwnPropertySymbols, ee = Object.getOwnPropertyDescriptor, te = Object.getPrototypeOf, ne = Object.prototype;
function oe(e, t, n) {
    if ("string" != typeof t) {
        if (ne) {
            var o = te(t);
            o && o !== ne && oe(e, o, n);
        }
        var r = K(t);
        Q && (r = r.concat(Q(t)));
        for(var s = X(e), i = X(t), a = 0; a < r.length; ++a){
            var c = r[a];
            if (!(c in H || n && n[c] || i && c in i || s && c in s)) {
                var l = ee(t, c);
                try {
                    Z(e, c, l);
                } catch (e) {}
            }
        }
    }
    return e;
}
function re(e) {
    return "function" == typeof e;
}
function se(e) {
    return "object" == typeof e && "styledComponentId" in e;
}
function ie(e, t) {
    return e && t ? "".concat(e, " ").concat(t) : e || t || "";
}
function ae(e, t) {
    if (0 === e.length) return "";
    for(var n = e[0], o = 1; o < e.length; o++)n += t ? t + e[o] : e[o];
    return n;
}
function ce(e) {
    return null !== e && "object" == typeof e && e.constructor.name === Object.name && !("props" in e && e.$$typeof);
}
function le(e, t, n) {
    if (void 0 === n && (n = !1), !n && !ce(e) && !Array.isArray(e)) return t;
    if (Array.isArray(t)) for(var o = 0; o < t.length; o++)e[o] = le(e[o], t[o]);
    else if (ce(t)) for(var o in t)e[o] = le(e[o], t[o]);
    return e;
}
function ue(e, t) {
    Object.defineProperty(e, "toString", {
        value: t
    });
}
var pe = ("TURBOPACK compile-time truthy", 1) ? {
    1: "Cannot create styled-component for component: %s.\n\n",
    2: "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",
    3: "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",
    4: "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",
    5: "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",
    6: "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",
    7: 'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n',
    8: 'ThemeProvider: Please make your "theme" prop an object.\n\n',
    9: "Missing document `<head>`\n\n",
    10: "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",
    11: "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",
    12: "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",
    13: "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n",
    14: 'ThemeProvider: "theme" prop is required.\n\n',
    15: "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n",
    16: "Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n",
    17: "CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n",
    18: "ThemeProvider: Please make sure your useTheme hook is within a `<ThemeProvider>`"
} : ("TURBOPACK unreachable", undefined);
function de() {
    for(var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t];
    for(var n = e[0], o = [], r = 1, s = e.length; r < s; r += 1)o.push(e[r]);
    return o.forEach(function(e) {
        n = n.replace(/%[a-z]/, e);
    }), n;
}
function he(t) {
    for(var n = [], o = 1; o < arguments.length; o++)n[o - 1] = arguments[o];
    return ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : new Error(de.apply(void 0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__spreadArray"])([
        pe[t]
    ], n, !1)).trim());
}
var fe = function() {
    function e(e) {
        this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e;
    }
    return e.prototype.indexOfGroup = function(e) {
        for(var t = 0, n = 0; n < e; n++)t += this.groupSizes[n];
        return t;
    }, e.prototype.insertRules = function(e, t) {
        if (e >= this.groupSizes.length) {
            for(var n = this.groupSizes, o = n.length, r = o; e >= r;)if ((r <<= 1) < 0) throw he(16, "".concat(e));
            this.groupSizes = new Uint32Array(r), this.groupSizes.set(n), this.length = r;
            for(var s = o; s < r; s++)this.groupSizes[s] = 0;
        }
        for(var i = this.indexOfGroup(e + 1), a = (s = 0, t.length); s < a; s++)this.tag.insertRule(i, t[s]) && (this.groupSizes[e]++, i++);
    }, e.prototype.clearGroup = function(e) {
        if (e < this.length) {
            var t = this.groupSizes[e], n = this.indexOfGroup(e), o = n + t;
            this.groupSizes[e] = 0;
            for(var r = n; r < o; r++)this.tag.deleteRule(n);
        }
    }, e.prototype.getGroup = function(e) {
        var t = "";
        if (e >= this.length || 0 === this.groupSizes[e]) return t;
        for(var n = this.groupSizes[e], o = this.indexOfGroup(e), r = o + n, s = o; s < r; s++)t += "".concat(this.tag.getRule(s)).concat(g);
        return t;
    }, e;
}(), me = 1 << 30, ye = new Map, ve = new Map, ge = 1, Se = function(e) {
    if (ye.has(e)) return ye.get(e);
    for(; ve.has(ge);)ge++;
    var t = ge++;
    if ("production" !== ("TURBOPACK compile-time value", "development") && ((0 | t) < 0 || t > me)) throw he(16, "".concat(t));
    return ye.set(e, t), ve.set(t, e), t;
}, we = function(e, t) {
    ge = t + 1, ye.set(e, t), ve.set(t, e);
}, be = "style[".concat(f, "][").concat(y, '="').concat(v, '"]'), Ee = new RegExp("^".concat(f, '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)')), Ne = function(e, t, n) {
    for(var o, r = n.split(","), s = 0, i = r.length; s < i; s++)(o = r[s]) && e.registerName(t, o);
}, Pe = function(e, t) {
    for(var n, o = (null !== (n = t.textContent) && void 0 !== n ? n : "").split(g), r = [], s = 0, i = o.length; s < i; s++){
        var a = o[s].trim();
        if (a) {
            var c = a.match(Ee);
            if (c) {
                var l = 0 | parseInt(c[1], 10), u = c[2];
                0 !== l && (we(u, l), Ne(e, u, c[3]), e.getTag().insertRules(l, r)), r.length = 0;
            } else r.push(a);
        }
    }
}, _e = function(e) {
    for(var t = document.querySelectorAll(be), n = 0, o = t.length; n < o; n++){
        var r = t[n];
        r && r.getAttribute(f) !== m && (Pe(e, r), r.parentNode && r.parentNode.removeChild(r));
    }
};
function Ce() {
    return "undefined" != typeof __webpack_nonce__ ? __webpack_nonce__ : null;
}
var Ie = function(e) {
    var t = document.head, n = e || t, o = document.createElement("style"), r = function(e) {
        var t = Array.from(e.querySelectorAll("style[".concat(f, "]")));
        return t[t.length - 1];
    }(n), s = void 0 !== r ? r.nextSibling : null;
    o.setAttribute(f, m), o.setAttribute(y, v);
    var i = Ce();
    return i && o.setAttribute("nonce", i), n.insertBefore(o, s), o;
}, Ae = function() {
    function e(e) {
        this.element = Ie(e), this.element.appendChild(document.createTextNode("")), this.sheet = function(e) {
            if (e.sheet) return e.sheet;
            for(var t = document.styleSheets, n = 0, o = t.length; n < o; n++){
                var r = t[n];
                if (r.ownerNode === e) return r;
            }
            throw he(17);
        }(this.element), this.length = 0;
    }
    return e.prototype.insertRule = function(e, t) {
        try {
            return this.sheet.insertRule(t, e), this.length++, !0;
        } catch (e) {
            return !1;
        }
    }, e.prototype.deleteRule = function(e) {
        this.sheet.deleteRule(e), this.length--;
    }, e.prototype.getRule = function(e) {
        var t = this.sheet.cssRules[e];
        return t && t.cssText ? t.cssText : "";
    }, e;
}(), Oe = function() {
    function e(e) {
        this.element = Ie(e), this.nodes = this.element.childNodes, this.length = 0;
    }
    return e.prototype.insertRule = function(e, t) {
        if (e <= this.length && e >= 0) {
            var n = document.createTextNode(t);
            return this.element.insertBefore(n, this.nodes[e] || null), this.length++, !0;
        }
        return !1;
    }, e.prototype.deleteRule = function(e) {
        this.element.removeChild(this.nodes[e]), this.length--;
    }, e.prototype.getRule = function(e) {
        return e < this.length ? this.nodes[e].textContent : "";
    }, e;
}(), De = function() {
    function e(e) {
        this.rules = [], this.length = 0;
    }
    return e.prototype.insertRule = function(e, t) {
        return e <= this.length && (this.rules.splice(e, 0, t), this.length++, !0);
    }, e.prototype.deleteRule = function(e) {
        this.rules.splice(e, 1), this.length--;
    }, e.prototype.getRule = function(e) {
        return e < this.length ? this.rules[e] : "";
    }, e;
}(), Re = S, Te = {
    isServer: !S,
    useCSSOMInjection: !w
}, ke = function() {
    function e(e, n, o) {
        void 0 === e && (e = C), void 0 === n && (n = {});
        var r = this;
        this.options = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])({}, Te), e), this.gs = n, this.names = new Map(o), this.server = !!e.isServer, !this.server && S && Re && (Re = !1, _e(this)), ue(this, function() {
            return function(e) {
                for(var t = e.getTag(), n = t.length, o = "", r = function(n) {
                    var r = function(e) {
                        return ve.get(e);
                    }(n);
                    if (void 0 === r) return "continue";
                    var s = e.names.get(r), i = t.getGroup(n);
                    if (void 0 === s || !s.size || 0 === i.length) return "continue";
                    var a = "".concat(f, ".g").concat(n, '[id="').concat(r, '"]'), c = "";
                    void 0 !== s && s.forEach(function(e) {
                        e.length > 0 && (c += "".concat(e, ","));
                    }), o += "".concat(i).concat(a, '{content:"').concat(c, '"}').concat(g);
                }, s = 0; s < n; s++)r(s);
                return o;
            }(r);
        });
    }
    return e.registerId = function(e) {
        return Se(e);
    }, e.prototype.rehydrate = function() {
        !this.server && S && _e(this);
    }, e.prototype.reconstructWithOptions = function(n, o) {
        return void 0 === o && (o = !0), new e((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])({}, this.options), n), this.gs, o && this.names || void 0);
    }, e.prototype.allocateGSInstance = function(e) {
        return this.gs[e] = (this.gs[e] || 0) + 1;
    }, e.prototype.getTag = function() {
        return this.tag || (this.tag = (e = function(e) {
            var t = e.useCSSOMInjection, n = e.target;
            return e.isServer ? new De(n) : t ? new Ae(n) : new Oe(n);
        }(this.options), new fe(e)));
        "TURBOPACK unreachable";
        var e;
    }, e.prototype.hasNameForId = function(e, t) {
        return this.names.has(e) && this.names.get(e).has(t);
    }, e.prototype.registerName = function(e, t) {
        if (Se(e), this.names.has(e)) this.names.get(e).add(t);
        else {
            var n = new Set;
            n.add(t), this.names.set(e, n);
        }
    }, e.prototype.insertRules = function(e, t, n) {
        this.registerName(e, t), this.getTag().insertRules(Se(e), n);
    }, e.prototype.clearNames = function(e) {
        this.names.has(e) && this.names.get(e).clear();
    }, e.prototype.clearRules = function(e) {
        this.getTag().clearGroup(Se(e)), this.clearNames(e);
    }, e.prototype.clearTag = function() {
        this.tag = void 0;
    }, e;
}(), je = /&/g, xe = /^\s*\/\/.*$/gm;
function Ve(e, t) {
    return e.map(function(e) {
        return "rule" === e.type && (e.value = "".concat(t, " ").concat(e.value), e.value = e.value.replaceAll(",", ",".concat(t, " ")), e.props = e.props.map(function(e) {
            return "".concat(t, " ").concat(e);
        })), Array.isArray(e.children) && "@keyframes" !== e.type && (e.children = Ve(e.children, t)), e;
    });
}
function Fe(e) {
    var t, n, o, r = void 0 === e ? C : e, s = r.options, i = void 0 === s ? C : s, a = r.plugins, c = void 0 === a ? _ : a, l = function(e, o, r) {
        return r.startsWith(n) && r.endsWith(n) && r.replaceAll(n, "").length > 0 ? ".".concat(t) : e;
    }, u = c.slice();
    u.push(function(e) {
        e.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.RULESET && e.value.includes("&") && (e.props[0] = e.props[0].replace(je, n).replace(o, l));
    }), i.prefix && u.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.prefixer), u.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.stringify);
    var p = function(e, r, s, a) {
        void 0 === r && (r = ""), void 0 === s && (s = ""), void 0 === a && (a = "&"), t = a, n = r, o = new RegExp("\\".concat(n, "\\b"), "g");
        var c = e.replace(xe, ""), l = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.compile(s || r ? "".concat(s, " ").concat(r, " { ").concat(c, " }") : c);
        i.namespace && (l = Ve(l, i.namespace));
        var p = [];
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.serialize(l, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.middleware(u.concat(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.rulesheet(function(e) {
            return p.push(e);
        })))), p;
    };
    return p.hash = c.length ? c.reduce(function(e, t) {
        return t.name || he(15), M(e, t.name);
    }, F).toString() : "", p;
}
var Me = new ke, ze = Fe(), $e = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createContext({
    shouldForwardProp: void 0,
    styleSheet: Me,
    stylis: ze
}), Be = $e.Consumer, Le = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createContext(void 0);
function Ge() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])($e);
}
function Ye(e) {
    var t = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(e.stylisPlugins), n = t[0], r = t[1], c = Ge().styleSheet, l = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useMemo"])(function() {
        var t = c;
        return e.sheet ? t = e.sheet : e.target && (t = t.reconstructWithOptions({
            target: e.target
        }, !1)), e.disableCSSOMInjection && (t = t.reconstructWithOptions({
            useCSSOMInjection: !1
        })), t;
    }, [
        e.disableCSSOMInjection,
        e.sheet,
        e.target,
        c
    ]), u = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useMemo"])(function() {
        return Fe({
            options: {
                namespace: e.namespace,
                prefix: e.enableVendorPrefixes
            },
            plugins: n
        });
    }, [
        e.enableVendorPrefixes,
        e.namespace,
        n
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])(function() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$shallowequal$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(n, e.stylisPlugins) || r(e.stylisPlugins);
    }, [
        e.stylisPlugins
    ]);
    var d = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useMemo"])(function() {
        return {
            shouldForwardProp: e.shouldForwardProp,
            styleSheet: l,
            stylis: u
        };
    }, [
        e.shouldForwardProp,
        l,
        u
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createElement($e.Provider, {
        value: d
    }, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createElement(Le.Provider, {
        value: u
    }, e.children));
}
var We = function() {
    function e(e, t) {
        var n = this;
        this.inject = function(e, t) {
            void 0 === t && (t = ze);
            var o = n.name + t.hash;
            e.hasNameForId(n.id, o) || e.insertRules(n.id, o, t(n.rules, o, "@keyframes"));
        }, this.name = e, this.id = "sc-keyframes-".concat(e), this.rules = t, ue(this, function() {
            throw he(12, String(n.name));
        });
    }
    return e.prototype.getName = function(e) {
        return void 0 === e && (e = ze), this.name + e.hash;
    }, e;
}(), qe = function(e) {
    return e >= "A" && e <= "Z";
};
function He(e) {
    for(var t = "", n = 0; n < e.length; n++){
        var o = e[n];
        if (1 === n && "-" === o && "-" === e[0]) return e;
        qe(o) ? t += "-" + o.toLowerCase() : t += o;
    }
    return t.startsWith("ms-") ? "-" + t : t;
}
var Ue = function(e) {
    return null == e || !1 === e || "" === e;
}, Je = function(t) {
    var n, o, r = [];
    for(var s in t){
        var i = t[s];
        t.hasOwnProperty(s) && !Ue(i) && (Array.isArray(i) && i.isCss || re(i) ? r.push("".concat(He(s), ":"), i, ";") : ce(i) ? r.push.apply(r, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__spreadArray"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__spreadArray"])([
            "".concat(s, " {")
        ], Je(i), !1), [
            "}"
        ], !1)) : r.push("".concat(He(s), ": ").concat((n = s, null == (o = i) || "boolean" == typeof o || "" === o ? "" : "number" != typeof o || 0 === o || n in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$unitless$2f$dist$2f$emotion$2d$unitless$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] || n.startsWith("--") ? String(o).trim() : "".concat(o, "px")), ";")));
    }
    return r;
};
function Xe(e, t, n, o) {
    if (Ue(e)) return [];
    if (se(e)) return [
        ".".concat(e.styledComponentId)
    ];
    if (re(e)) {
        if (!re(s = e) || s.prototype && s.prototype.isReactComponent || !t) return [
            e
        ];
        var r = e(t);
        return "production" === ("TURBOPACK compile-time value", "development") || "object" != typeof r || Array.isArray(r) || r instanceof We || ce(r) || null === r || console.error("".concat(B(e), " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.")), Xe(r, t, n, o);
    }
    var s;
    return e instanceof We ? n ? (e.inject(n, o), [
        e.getName(o)
    ]) : [
        e
    ] : ce(e) ? Je(e) : Array.isArray(e) ? Array.prototype.concat.apply(_, e.map(function(e) {
        return Xe(e, t, n, o);
    })) : [
        e.toString()
    ];
}
function Ze(e) {
    for(var t = 0; t < e.length; t += 1){
        var n = e[t];
        if (re(n) && !se(n)) return !1;
    }
    return !0;
}
var Ke = z(v), Qe = function() {
    function e(e, t, n) {
        this.rules = e, this.staticRulesId = "", this.isStatic = "production" === ("TURBOPACK compile-time value", "development") && (void 0 === n || n.isStatic) && Ze(e), this.componentId = t, this.baseHash = M(Ke, t), this.baseStyle = n, ke.registerId(t);
    }
    return e.prototype.generateAndInjectStyles = function(e, t, n) {
        var o = this.baseStyle ? this.baseStyle.generateAndInjectStyles(e, t, n) : "";
        if (this.isStatic && !n.hash) if (this.staticRulesId && t.hasNameForId(this.componentId, this.staticRulesId)) o = ie(o, this.staticRulesId);
        else {
            var r = ae(Xe(this.rules, e, t, n)), s = x(M(this.baseHash, r) >>> 0);
            if (!t.hasNameForId(this.componentId, s)) {
                var i = n(r, ".".concat(s), void 0, this.componentId);
                t.insertRules(this.componentId, s, i);
            }
            o = ie(o, s), this.staticRulesId = s;
        }
        else {
            for(var a = M(this.baseHash, n.hash), c = "", l = 0; l < this.rules.length; l++){
                var u = this.rules[l];
                if ("string" == typeof u) c += u, "production" !== ("TURBOPACK compile-time value", "development") && (a = M(a, u));
                else if (u) {
                    var p = ae(Xe(u, e, t, n));
                    a = M(a, p + l), c += p;
                }
            }
            if (c) {
                var d = x(a >>> 0);
                t.hasNameForId(this.componentId, d) || t.insertRules(this.componentId, d, n(c, ".".concat(d), void 0, this.componentId)), o = ie(o, d);
            }
        }
        return o;
    }, e;
}(), et = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createContext(void 0), tt = et.Consumer;
function nt() {
    var e = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(et);
    if (!e) throw he(18);
    return e;
}
function ot(e) {
    var n = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useContext(et), r = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useMemo"])(function() {
        return function(e, n) {
            if (!e) throw he(14);
            if (re(e)) {
                var o = e(n);
                if ("production" !== ("TURBOPACK compile-time value", "development") && (null === o || Array.isArray(o) || "object" != typeof o)) throw he(7);
                return o;
            }
            if (Array.isArray(e) || "object" != typeof e) throw he(8);
            return n ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])({}, n), e) : e;
        }(e.theme, n);
    }, [
        e.theme,
        n
    ]);
    return e.children ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createElement(et.Provider, {
        value: r
    }, e.children) : null;
}
var rt = {}, st = new Set;
function it(e, r, s) {
    var i = se(e), a = e, c = !L(e), p = r.attrs, d = void 0 === p ? _ : p, h = r.componentId, f = void 0 === h ? function(e, t) {
        var n = "string" != typeof e ? "sc" : R(e);
        rt[n] = (rt[n] || 0) + 1;
        var o = "".concat(n, "-").concat($(v + n + rt[n]));
        return t ? "".concat(t, "-").concat(o) : o;
    }(r.displayName, r.parentComponentId) : h, m = r.displayName, y = void 0 === m ? function(e) {
        return L(e) ? "styled.".concat(e) : "Styled(".concat(B(e), ")");
    }(e) : m, g = r.displayName && r.componentId ? "".concat(R(r.displayName), "-").concat(r.componentId) : r.componentId || f, S = i && a.attrs ? a.attrs.concat(d).filter(Boolean) : d, w = r.shouldForwardProp;
    if (i && a.shouldForwardProp) {
        var b = a.shouldForwardProp;
        if (r.shouldForwardProp) {
            var E = r.shouldForwardProp;
            w = function(e, t) {
                return b(e, t) && E(e, t);
            };
        } else w = b;
    }
    var N = new Qe(s, g, i ? a.componentStyle : void 0);
    function O(e, r) {
        return function(e, r, s) {
            var i = e.attrs, a = e.componentStyle, c = e.defaultProps, p = e.foldedComponentIds, d = e.styledComponentId, h = e.target, f = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useContext(et), m = Ge(), y = e.shouldForwardProp || m.shouldForwardProp;
            "production" !== ("TURBOPACK compile-time value", "development") && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useDebugValue"])(d);
            var v = I(r, f, c) || C, g = function(e, n, o) {
                for(var r, s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])({}, n), {
                    className: void 0,
                    theme: o
                }), i = 0; i < e.length; i += 1){
                    var a = re(r = e[i]) ? r(s) : r;
                    for(var c in a)s[c] = "className" === c ? ie(s[c], a[c]) : "style" === c ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])({}, s[c]), a[c]) : a[c];
                }
                return n.className && (s.className = ie(s.className, n.className)), s;
            }(i, r, v), S = g.as || h, w = {};
            for(var b in g)void 0 === g[b] || "$" === b[0] || "as" === b || "theme" === b && g.theme === v || ("forwardedAs" === b ? w.as = g.forwardedAs : y && !y(b, S) || (w[b] = g[b], y || "development" !== ("TURBOPACK compile-time value", "development") || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$emotion$2f$is$2d$prop$2d$valid$2f$dist$2f$emotion$2d$is$2d$prop$2d$valid$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(b) || st.has(b) || !A.has(S) || (st.add(b), console.warn('styled-components: it looks like an unknown prop "'.concat(b, '" is being sent through to the DOM, which will likely trigger a React console error. If you would like automatic filtering of unknown props, you can opt-into that behavior via `<StyleSheetManager shouldForwardProp={...}>` (connect an API like `@emotion/is-prop-valid`) or consider using transient props (`$` prefix for automatic filtering.)')))));
            var E = function(e, t) {
                var n = Ge(), o = e.generateAndInjectStyles(t, n.styleSheet, n.stylis);
                return "production" !== ("TURBOPACK compile-time value", "development") && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useDebugValue"])(o), o;
            }(a, g);
            "production" !== ("TURBOPACK compile-time value", "development") && e.warnTooManyClasses && e.warnTooManyClasses(E);
            var N = ie(p, d);
            return E && (N += " " + E), g.className && (N += " " + g.className), w[L(S) && !A.has(S) ? "class" : "className"] = N, s && (w.ref = s), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createElement"])(S, w);
        }(D, e, r);
    }
    O.displayName = y;
    var D = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].forwardRef(O);
    return D.attrs = S, D.componentStyle = N, D.displayName = y, D.shouldForwardProp = w, D.foldedComponentIds = i ? ie(a.foldedComponentIds, a.styledComponentId) : "", D.styledComponentId = g, D.target = i ? a.target : e, Object.defineProperty(D, "defaultProps", {
        get: function() {
            return this._foldedDefaultProps;
        },
        set: function(e) {
            this._foldedDefaultProps = i ? function(e) {
                for(var t = [], n = 1; n < arguments.length; n++)t[n - 1] = arguments[n];
                for(var o = 0, r = t; o < r.length; o++)le(e, r[o], !0);
                return e;
            }({}, a.defaultProps, e) : e;
        }
    }), "production" !== ("TURBOPACK compile-time value", "development") && (P(y, g), D.warnTooManyClasses = function(e, t) {
        var n = {}, o = !1;
        return function(r) {
            if (!o && (n[r] = !0, Object.keys(n).length >= 200)) {
                var s = t ? ' with the id of "'.concat(t, '"') : "";
                console.warn("Over ".concat(200, " classes were generated for component ").concat(e).concat(s, ".\n") + "Consider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"), o = !0, n = {};
            }
        };
    }(y, g)), ue(D, function() {
        return ".".concat(D.styledComponentId);
    }), c && oe(D, e, {
        attrs: !0,
        componentStyle: !0,
        displayName: !0,
        foldedComponentIds: !0,
        shouldForwardProp: !0,
        styledComponentId: !0,
        target: !0
    }), D;
}
function at(e, t) {
    for(var n = [
        e[0]
    ], o = 0, r = t.length; o < r; o += 1)n.push(t[o], e[o + 1]);
    return n;
}
var ct = function(e) {
    return Object.assign(e, {
        isCss: !0
    });
};
function lt(t) {
    for(var n = [], o = 1; o < arguments.length; o++)n[o - 1] = arguments[o];
    if (re(t) || ce(t)) return ct(Xe(at(_, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__spreadArray"])([
        t
    ], n, !0))));
    var r = t;
    return 0 === n.length && 1 === r.length && "string" == typeof r[0] ? Xe(r) : ct(Xe(at(r, n)));
}
function ut(n, o, r) {
    if (void 0 === r && (r = C), !o) throw he(1, o);
    var s = function(t) {
        for(var s = [], i = 1; i < arguments.length; i++)s[i - 1] = arguments[i];
        return n(o, r, lt.apply(void 0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__spreadArray"])([
            t
        ], s, !1)));
    };
    return s.attrs = function(e) {
        return ut(n, o, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])({}, r), {
            attrs: Array.prototype.concat(r.attrs, e).filter(Boolean)
        }));
    }, s.withConfig = function(e) {
        return ut(n, o, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])({}, r), e));
    }, s;
}
var pt = function(e) {
    return ut(it, e);
}, dt = pt;
A.forEach(function(e) {
    dt[e] = pt(e);
});
var ht = function() {
    function e(e, t) {
        this.rules = e, this.componentId = t, this.isStatic = Ze(e), ke.registerId(this.componentId + 1);
    }
    return e.prototype.createStyles = function(e, t, n, o) {
        var r = o(ae(Xe(this.rules, t, n, o)), ""), s = this.componentId + e;
        n.insertRules(s, s, r);
    }, e.prototype.removeStyles = function(e, t) {
        t.clearRules(this.componentId + e);
    }, e.prototype.renderStyles = function(e, t, n, o) {
        e > 2 && ke.registerId(this.componentId + e), this.removeStyles(e, n), this.createStyles(e, t, n, o);
    }, e;
}();
function ft(n) {
    for(var r = [], s = 1; s < arguments.length; s++)r[s - 1] = arguments[s];
    var i = lt.apply(void 0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__spreadArray"])([
        n
    ], r, !1)), a = "sc-global-".concat($(JSON.stringify(i))), c = new ht(i, a);
    "production" !== ("TURBOPACK compile-time value", "development") && P(a);
    var l = function(e) {
        var t = Ge(), n = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useContext(et), r = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useRef(t.styleSheet.allocateGSInstance(a)).current;
        return "production" !== ("TURBOPACK compile-time value", "development") && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Children.count(e.children) && console.warn("The global style component ".concat(a, " was given child JSX. createGlobalStyle does not render children.")), "production" !== ("TURBOPACK compile-time value", "development") && i.some(function(e) {
            return "string" == typeof e && -1 !== e.indexOf("@import");
        }) && console.warn("Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app."), t.styleSheet.server && u(r, e, t.styleSheet, n, t.stylis), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useLayoutEffect({
            "ft.l.useLayoutEffect": function() {
                if (!t.styleSheet.server) return u(r, e, t.styleSheet, n, t.stylis), ({
                    "ft.l.useLayoutEffect": function() {
                        return c.removeStyles(r, t.styleSheet);
                    }
                })["ft.l.useLayoutEffect"];
            }
        }["ft.l.useLayoutEffect"], [
            r,
            e,
            t.styleSheet,
            n,
            t.stylis
        ]), null;
    };
    function u(e, n, o, r, s) {
        if (c.isStatic) c.renderStyles(e, b, o, s);
        else {
            var i = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])({}, n), {
                theme: I(n, r, l.defaultProps)
            });
            c.renderStyles(e, i, o, s);
        }
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].memo(l);
}
function mt(t) {
    for(var n = [], o = 1; o < arguments.length; o++)n[o - 1] = arguments[o];
    "production" !== ("TURBOPACK compile-time value", "development") && "undefined" != typeof navigator && "ReactNative" === navigator.product && console.warn("`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.");
    var r = ae(lt.apply(void 0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__spreadArray"])([
        t
    ], n, !1))), s = $(r);
    return new We(s, r);
}
function yt(e) {
    var n = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].forwardRef(function(n, r) {
        var s = I(n, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useContext(et), e.defaultProps);
        return "production" !== ("TURBOPACK compile-time value", "development") && void 0 === s && console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class "'.concat(B(e), '"')), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createElement(e, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])({}, n, {
            theme: s,
            ref: r
        }));
    });
    return n.displayName = "WithTheme(".concat(B(e), ")"), oe(n, e);
}
var vt = function() {
    function e() {
        var e = this;
        this._emitSheetCSS = function() {
            var t = e.instance.toString();
            if (!t) return "";
            var n = Ce(), o = ae([
                n && 'nonce="'.concat(n, '"'),
                "".concat(f, '="true"'),
                "".concat(y, '="').concat(v, '"')
            ].filter(Boolean), " ");
            return "<style ".concat(o, ">").concat(t, "</style>");
        }, this.getStyleTags = function() {
            if (e.sealed) throw he(2);
            return e._emitSheetCSS();
        }, this.getStyleElement = function() {
            var n;
            if (e.sealed) throw he(2);
            var r = e.instance.toString();
            if (!r) return [];
            var s = ((n = {})[f] = "", n[y] = v, n.dangerouslySetInnerHTML = {
                __html: r
            }, n), i = Ce();
            return i && (s.nonce = i), [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createElement("style", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__assign"])({}, s, {
                    key: "sc-0-0"
                }))
            ];
        }, this.seal = function() {
            e.sealed = !0;
        }, this.instance = new ke({
            isServer: !0
        }), this.sealed = !1;
    }
    return e.prototype.collectStyles = function(e) {
        if (this.sealed) throw he(2);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createElement(Ye, {
            sheet: this.instance
        }, e);
    }, e.prototype.interleaveWithNodeStream = function(e) {
        throw he(3);
    }, e;
}(), gt = {
    StyleSheet: ke,
    mainSheet: Me
};
"production" !== ("TURBOPACK compile-time value", "development") && "undefined" != typeof navigator && "ReactNative" === navigator.product && console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native");
var St = "__sc-".concat(f, "__");
"production" !== ("TURBOPACK compile-time value", "development") && "test" !== ("TURBOPACK compile-time value", "development") && "undefined" != typeof window && (window[St] || (window[St] = 0), 1 === window[St] && console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."), window[St] += 1);
;
 //# sourceMappingURL=styled-components.browser.esm.js.map
}}),
"[project]/node_modules/stylis/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
;
;
;
;
;
}}),
"[project]/node_modules/stylis/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/stylis/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/stylis/src/Enum.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "CHARSET": (()=>CHARSET),
    "COMMENT": (()=>COMMENT),
    "COUNTER_STYLE": (()=>COUNTER_STYLE),
    "DECLARATION": (()=>DECLARATION),
    "DOCUMENT": (()=>DOCUMENT),
    "FONT_FACE": (()=>FONT_FACE),
    "FONT_FEATURE_VALUES": (()=>FONT_FEATURE_VALUES),
    "IMPORT": (()=>IMPORT),
    "KEYFRAMES": (()=>KEYFRAMES),
    "LAYER": (()=>LAYER),
    "MEDIA": (()=>MEDIA),
    "MOZ": (()=>MOZ),
    "MS": (()=>MS),
    "NAMESPACE": (()=>NAMESPACE),
    "PAGE": (()=>PAGE),
    "RULESET": (()=>RULESET),
    "SCOPE": (()=>SCOPE),
    "SUPPORTS": (()=>SUPPORTS),
    "VIEWPORT": (()=>VIEWPORT),
    "WEBKIT": (()=>WEBKIT)
});
var MS = '-ms-';
var MOZ = '-moz-';
var WEBKIT = '-webkit-';
var COMMENT = 'comm';
var RULESET = 'rule';
var DECLARATION = 'decl';
var PAGE = '@page';
var MEDIA = '@media';
var IMPORT = '@import';
var CHARSET = '@charset';
var VIEWPORT = '@viewport';
var SUPPORTS = '@supports';
var DOCUMENT = '@document';
var NAMESPACE = '@namespace';
var KEYFRAMES = '@keyframes';
var FONT_FACE = '@font-face';
var COUNTER_STYLE = '@counter-style';
var FONT_FEATURE_VALUES = '@font-feature-values';
var LAYER = '@layer';
var SCOPE = '@scope';
}}),
"[project]/node_modules/stylis/src/Utility.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @param {number}
 * @return {number}
 */ __turbopack_esm__({
    "abs": (()=>abs),
    "append": (()=>append),
    "assign": (()=>assign),
    "charat": (()=>charat),
    "combine": (()=>combine),
    "filter": (()=>filter),
    "from": (()=>from),
    "hash": (()=>hash),
    "indexof": (()=>indexof),
    "match": (()=>match),
    "replace": (()=>replace),
    "sizeof": (()=>sizeof),
    "strlen": (()=>strlen),
    "substr": (()=>substr),
    "trim": (()=>trim)
});
var abs = Math.abs;
var from = String.fromCharCode;
var assign = Object.assign;
function hash(value, length) {
    return charat(value, 0) ^ 45 ? (((length << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}
function trim(value) {
    return value.trim();
}
function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
}
function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
}
function indexof(value, search, position) {
    return value.indexOf(search, position);
}
function charat(value, index) {
    return value.charCodeAt(index) | 0;
}
function substr(value, begin, end) {
    return value.slice(begin, end);
}
function strlen(value) {
    return value.length;
}
function sizeof(value) {
    return value.length;
}
function append(value, array) {
    return array.push(value), value;
}
function combine(array, callback) {
    return array.map(callback).join('');
}
function filter(array, pattern) {
    return array.filter(function(value) {
        return !match(value, pattern);
    });
}
}}),
"[project]/node_modules/stylis/src/Tokenizer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "alloc": (()=>alloc),
    "caret": (()=>caret),
    "char": (()=>char),
    "character": (()=>character),
    "characters": (()=>characters),
    "column": (()=>column),
    "commenter": (()=>commenter),
    "copy": (()=>copy),
    "dealloc": (()=>dealloc),
    "delimit": (()=>delimit),
    "delimiter": (()=>delimiter),
    "escaping": (()=>escaping),
    "identifier": (()=>identifier),
    "length": (()=>length),
    "lift": (()=>lift),
    "line": (()=>line),
    "next": (()=>next),
    "node": (()=>node),
    "peek": (()=>peek),
    "position": (()=>position),
    "prev": (()=>prev),
    "slice": (()=>slice),
    "token": (()=>token),
    "tokenize": (()=>tokenize),
    "tokenizer": (()=>tokenizer),
    "whitespace": (()=>whitespace)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Utility.js [app-client] (ecmascript)");
;
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = '';
function node(value, root, parent, type, props, children, length, siblings) {
    return {
        value: value,
        root: root,
        parent: parent,
        type: type,
        props: props,
        children: children,
        line: line,
        column: column,
        length: length,
        return: '',
        siblings: siblings
    };
}
function copy(root, props) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])(node('', null, null, '', null, null, 0, root.siblings), root, {
        length: -root.length
    }, props);
}
function lift(root) {
    while(root.root)root = copy(root.root, {
        children: [
            root
        ]
    });
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["append"])(root, root.siblings);
}
function char() {
    return character;
}
function prev() {
    character = position > 0 ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(characters, --position) : 0;
    if (column--, character === 10) column = 1, line--;
    return character;
}
function next() {
    character = position < length ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(characters, position++) : 0;
    if (column++, character === 10) column = 1, line++;
    return character;
}
function peek() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(characters, position);
}
function caret() {
    return position;
}
function slice(begin, end) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["substr"])(characters, begin, end);
}
function token(type) {
    switch(type){
        // \0 \t \n \r \s whitespace token
        case 0:
        case 9:
        case 10:
        case 13:
        case 32:
            return 5;
        // ! + , / > @ ~ isolate token
        case 33:
        case 43:
        case 44:
        case 47:
        case 62:
        case 64:
        case 126:
        // ; { } breakpoint token
        case 59:
        case 123:
        case 125:
            return 4;
        // : accompanied token
        case 58:
            return 3;
        // " ' ( [ opening delimit token
        case 34:
        case 39:
        case 40:
        case 91:
            return 2;
        // ) ] closing delimit token
        case 41:
        case 93:
            return 1;
    }
    return 0;
}
function alloc(value) {
    return line = column = 1, length = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strlen"])(characters = value), position = 0, [];
}
function dealloc(value) {
    return characters = '', value;
}
function delimit(type) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trim"])(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function tokenize(value) {
    return dealloc(tokenizer(alloc(value)));
}
function whitespace(type) {
    while(character = peek())if (character < 33) next();
    else break;
    return token(type) > 2 || token(character) > 3 ? '' : ' ';
}
function tokenizer(children) {
    while(next())switch(token(character)){
        case 0:
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["append"])(identifier(position - 1), children);
            break;
        case 2:
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["append"])(delimit(character), children);
            break;
        default:
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["append"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["from"])(character), children);
    }
    return children;
}
function escaping(index, count) {
    while(--count && next())// not 0-9 A-F a-f
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97) break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
    while(next())switch(character){
        // ] ) " '
        case type:
            return position;
        // " '
        case 34:
        case 39:
            if (type !== 34 && type !== 39) delimiter(character);
            break;
        // (
        case 40:
            if (type === 41) delimiter(type);
            break;
        // \
        case 92:
            next();
            break;
    }
    return position;
}
function commenter(type, index) {
    while(next())// //
    if (type + character === 47 + 10) break;
    else if (type + character === 42 + 42 && peek() === 47) break;
    return '/*' + slice(index, position - 1) + '*' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["from"])(type === 47 ? type : next());
}
function identifier(index) {
    while(!token(peek()))next();
    return slice(index, position);
}
}}),
"[project]/node_modules/stylis/src/Parser.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "comment": (()=>comment),
    "compile": (()=>compile),
    "declaration": (()=>declaration),
    "parse": (()=>parse),
    "ruleset": (()=>ruleset)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Tokenizer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Utility.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Enum.js [app-client] (ecmascript)");
;
;
;
function compile(value) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dealloc"])(parse('', null, null, null, [
        ''
    ], value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["alloc"])(value), 0, [
        0
    ], value));
}
function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset = 0;
    var length = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character = 0;
    var type = '';
    var props = rules;
    var children = rulesets;
    var reference = rule;
    var characters = type;
    while(scanning)switch(previous = character, character = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["next"])()){
        // (
        case 40:
            if (previous != 108 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(characters, length - 1) == 58) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["indexof"])(characters += (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["delimit"])(character), '&', '&\f'), '&\f', (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["abs"])(index ? points[index - 1] : 0)) != -1) ampersand = -1;
                break;
            }
        // " ' [
        case 34:
        case 39:
        case 91:
            characters += (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["delimit"])(character);
            break;
        // \t \n \r \s
        case 9:
        case 10:
        case 13:
        case 32:
            characters += (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["whitespace"])(previous);
            break;
        // \
        case 92:
            characters += (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escaping"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["caret"])() - 1, 7);
            continue;
        // /
        case 47:
            switch((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["peek"])()){
                case 42:
                case 47:
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["append"])(comment((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["commenter"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["next"])(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["caret"])()), root, parent, declarations), declarations);
                    break;
                default:
                    characters += '/';
            }
            break;
        // {
        case 123 * variable:
            points[index++] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strlen"])(characters) * ampersand;
        // } ; \0
        case 125 * variable:
        case 59:
        case 0:
            switch(character){
                // \0 }
                case 0:
                case 125:
                    scanning = 0;
                // ;
                case 59 + offset:
                    if (ampersand == -1) characters = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(characters, /\f/g, '');
                    if (property > 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strlen"])(characters) - length) (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["append"])(property > 32 ? declaration(characters + ';', rule, parent, length - 1, declarations) : declaration((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(characters, ' ', '') + ';', rule, parent, length - 2, declarations), declarations);
                    break;
                // @ ;
                case 59:
                    characters += ';';
                // { rule/at-rule
                default:
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["append"])(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length, rulesets), rulesets);
                    if (character === 123) if (offset === 0) parse(characters, root, reference, reference, props, rulesets, length, points, children);
                    else switch(atrule === 99 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(characters, 3) === 110 ? 100 : atrule){
                        // d l m s
                        case 100:
                        case 108:
                        case 109:
                        case 115:
                            parse(value, reference, reference, rule && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["append"])(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length, children), children), rules, children, length, points, rule ? props : children);
                            break;
                        default:
                            parse(characters, reference, reference, reference, [
                                ''
                            ], children, 0, points, children);
                    }
            }
            index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
            break;
        // :
        case 58:
            length = 1 + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strlen"])(characters), property = previous;
        default:
            if (variable < 1) {
                if (character == 123) --variable;
                else if (character == 125 && variable++ == 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prev"])() == 125) continue;
            }
            switch(characters += (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["from"])(character), character * variable){
                // &
                case 38:
                    ampersand = offset > 0 ? 1 : (characters += '\f', -1);
                    break;
                // ,
                case 44:
                    points[index++] = ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strlen"])(characters) - 1) * ampersand, ampersand = 1;
                    break;
                // @
                case 64:
                    // -
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["peek"])() === 45) characters += (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["delimit"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["next"])());
                    atrule = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["peek"])(), offset = length = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strlen"])(type = characters += (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["identifier"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["caret"])())), character++;
                    break;
                // -
                case 45:
                    if (previous === 45 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strlen"])(characters) == 2) variable = 0;
            }
    }
    return rulesets;
}
function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length, siblings) {
    var post = offset - 1;
    var rule = offset === 0 ? rules : [
        ''
    ];
    var size = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sizeof"])(rule);
    for(var i = 0, j = 0, k = 0; i < index; ++i)for(var x = 0, y = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["substr"])(value, post + 1, post = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["abs"])(j = points[i])), z = value; x < size; ++x)if (z = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trim"])(j > 0 ? rule[x] + ' ' + y : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(y, /&\f/g, rule[x]))) props[k++] = z;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["node"])(value, root, parent, offset === 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RULESET"] : type, props, children, length, siblings);
}
function comment(value, root, parent, siblings) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["node"])(value, root, parent, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["COMMENT"], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["from"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["char"])()), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["substr"])(value, 2, -2), 0, siblings);
}
function declaration(value, root, parent, length, siblings) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["node"])(value, root, parent, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DECLARATION"], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["substr"])(value, 0, length), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["substr"])(value, length + 1, -1), length, siblings);
}
}}),
"[project]/node_modules/stylis/src/Prefixer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "prefix": (()=>prefix)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Utility.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Enum.js [app-client] (ecmascript)");
;
;
function prefix(value, length, children) {
    switch((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hash"])(value, length)){
        // color-adjust
        case 5103:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + 'print-' + value + value;
        // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921:
        // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005:
        // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855:
        // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + value;
        // tab-size
        case 4789:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOZ"] + value + value;
        // appearance, user-select, transform, hyphens, text-size-adjust
        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOZ"] + value + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + value + value;
        // writing-mode
        case 5936:
            switch((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(value, length + 11)){
                // vertical-l(r)
                case 114:
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
                // vertical-r(l)
                case 108:
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
                // horizontal(-)tb
                case 45:
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
            }
        // flex, flex-direction, scroll-snap-type, writing-mode
        case 6828:
        case 4268:
        case 2903:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + value + value;
        // order
        case 6165:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + 'flex-' + value + value;
        // align-items
        case 5187:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /(\w+).+(:[^]+)/, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + 'box-$1$2' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + 'flex-$1$2') + value;
        // align-self
        case 5443:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + 'flex-item-' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /flex-|-self/g, '') + (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(value, /flex-|baseline/) ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + 'grid-row-' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /flex-|-self/g, '') : '') + value;
        // align-content
        case 4675:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + 'flex-line-pack' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /align-content|flex-|-self/g, '') + value;
        // flex-shrink
        case 5548:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, 'shrink', 'negative') + value;
        // flex-basis
        case 5292:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, 'basis', 'preferred-size') + value;
        // flex-grow
        case 6060:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + 'box-' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, '-grow', '') + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, 'grow', 'positive') + value;
        // transition
        case 4554:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /([^-])(transform)/g, '$1' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + '$2') + value;
        // cursor
        case 6187:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /(zoom-|grab)/, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + '$1'), /(image-set)/, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + '$1'), value, '') + value;
        // background, background-image
        case 5495:
        case 3959:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /(image-set\([^]*)/, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + '$1' + '$`$1');
        // justify-content
        case 4968:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /(.+:)(flex-)?(.*)/, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + 'box-pack:$3' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + value + value;
        // justify-self
        case 4200:
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(value, /flex-|baseline/)) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + 'grid-column-align' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["substr"])(value, length) + value;
            break;
        // grid-template-(columns|rows)
        case 2592:
        case 3360:
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, 'template-', '') + value;
        // grid-(row|column)-start
        case 4384:
        case 3616:
            if (children && children.some(function(element, index) {
                return length = index, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(element.props, /grid-\w+-end/);
            })) {
                return ~(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["indexof"])(value + (children = children[length].value), 'span', 0) ? value : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, '-start', '') + value + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + 'grid-row-span:' + (~(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["indexof"])(children, 'span', 0) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(children, /\d+/) : +(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(children, /\d+/) - +(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(value, /\d+/)) + ';';
            }
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, '-start', '') + value;
        // grid-(row|column)-end
        case 4896:
        case 4128:
            return children && children.some(function(element) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(element.props, /grid-\w+-start/);
            }) ? value : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, '-end', '-span'), 'span ', '') + value;
        // (margin|padding)-inline-(start|end)
        case 4095:
        case 3583:
        case 4068:
        case 2532:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /(.+)-inline(.+)/, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + '$1$2') + value;
        // (min|max)?(width|height|inline-size|block-size)
        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
            // stretch, max-content, min-content, fill-available
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strlen"])(value) - 1 - length > 6) switch((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(value, length + 1)){
                // (m)ax-content, (m)in-content
                case 109:
                    // -
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(value, length + 4) !== 45) break;
                // (f)ill-available, (f)it-content
                case 102:
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /(.+:)(.+)-([^]+)/, '$1' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + '$2-$3' + '$1' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOZ"] + ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
                // (s)tretch
                case 115:
                    return ~(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["indexof"])(value, 'stretch', 0) ? prefix((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, 'stretch', 'fill-available'), length, children) + value : value;
            }
            break;
        // grid-(column|row)
        case 5152:
        case 5920:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function(_, a, b, c, d, e, f) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + a + ':' + b + f + (c ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + a + '-span:' + (d ? e : +e - +b) + f : '') + value;
            });
        // position: sticky
        case 4949:
            // stick(y)?
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(value, length + 6) === 121) return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, ':', ':' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"]) + value;
            break;
        // display: (flex|inline-flex|grid|inline-grid)
        case 6444:
            switch((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(value, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(value, 14) === 45 ? 18 : 11)){
                // (inline-)?fle(x)
                case 120:
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, '$1' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + '$2$3' + '$1' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + '$2box$3') + value;
                // (inline-)?gri(d)
                case 100:
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, ':', ':' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"]) + value;
            }
            break;
        // scroll-margin, scroll-margin-(top|right|bottom|left)
        case 5719:
        case 2647:
        case 2135:
        case 3927:
        case 2391:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, 'scroll-', 'scroll-snap-') + value;
    }
    return value;
}
}}),
"[project]/node_modules/stylis/src/Serializer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "serialize": (()=>serialize),
    "stringify": (()=>stringify)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Enum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Utility.js [app-client] (ecmascript)");
;
;
function serialize(children, callback) {
    var output = '';
    for(var i = 0; i < children.length; i++)output += callback(children[i], i, children, callback) || '';
    return output;
}
function stringify(element, index, children, callback) {
    switch(element.type){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LAYER"]:
            if (element.children.length) break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IMPORT"]:
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DECLARATION"]:
            return element.return = element.return || element.value;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["COMMENT"]:
            return '';
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEYFRAMES"]:
            return element.return = element.value + '{' + serialize(element.children, callback) + '}';
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RULESET"]:
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strlen"])(element.value = element.props.join(','))) return '';
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strlen"])(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : '';
}
}}),
"[project]/node_modules/stylis/src/Middleware.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "middleware": (()=>middleware),
    "namespace": (()=>namespace),
    "prefixer": (()=>prefixer),
    "rulesheet": (()=>rulesheet)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Utility.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Enum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Prefixer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Prefixer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Serializer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Serializer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Tokenizer.js [app-client] (ecmascript)");
;
;
;
;
;
function middleware(collection) {
    var length = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sizeof"])(collection);
    return function(element, index, children, callback) {
        var output = '';
        for(var i = 0; i < length; i++)output += collection[i](element, index, children, callback) || '';
        return output;
    };
}
function rulesheet(callback) {
    return function(element) {
        if (!element.root) {
            if (element = element.return) callback(element);
        }
    };
}
function prefixer(element, index, children, callback) {
    if (element.length > -1) {
        if (!element.return) switch(element.type){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DECLARATION"]:
                element.return = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Prefixer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prefix"])(element.value, element.length, children);
                return;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEYFRAMES"]:
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Serializer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["serialize"])([
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copy"])(element, {
                        value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(element.value, '@', '@' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"])
                    })
                ], callback);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RULESET"]:
                if (element.length) return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combine"])(children = element.props, function(value) {
                    switch((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"])(value, callback = /(::plac\w+|:read-\w+)/)){
                        // :read-(only|write)
                        case ':read-only':
                        case ':read-write':
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lift"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copy"])(element, {
                                props: [
                                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /:(read-\w+)/, ':' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOZ"] + '$1')
                                ]
                            }));
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lift"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copy"])(element, {
                                props: [
                                    value
                                ]
                            }));
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])(element, {
                                props: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["filter"])(children, callback)
                            });
                            break;
                        // :placeholder
                        case '::placeholder':
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lift"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copy"])(element, {
                                props: [
                                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /:(plac\w+)/, ':' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"] + 'input-$1')
                                ]
                            }));
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lift"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copy"])(element, {
                                props: [
                                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /:(plac\w+)/, ':' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOZ"] + '$1')
                                ]
                            }));
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lift"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copy"])(element, {
                                props: [
                                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"])(value, /:(plac\w+)/, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"] + 'input-$1')
                                ]
                            }));
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lift"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copy"])(element, {
                                props: [
                                    value
                                ]
                            }));
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])(element, {
                                props: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["filter"])(children, callback)
                            });
                            break;
                    }
                    return '';
                });
        }
    }
}
function namespace(element) {
    switch(element.type){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RULESET"]:
            element.props = element.props.map(function(value) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combine"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tokenize"])(value), function(value, index, children) {
                    switch((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"])(value, 0)){
                        // \f
                        case 12:
                            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["substr"])(value, 1, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strlen"])(value));
                        // \0 ( + > ~
                        case 0:
                        case 40:
                        case 43:
                        case 62:
                        case 126:
                            return value;
                        // :
                        case 58:
                            if (children[++index] === 'global') children[index] = '', children[++index] = '\f' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["substr"])(children[index], index = 1, -1);
                        // \s
                        case 32:
                            return index === 1 ? '' : value;
                        default:
                            switch(index){
                                case 0:
                                    element = value;
                                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sizeof"])(children) > 1 ? '' : value;
                                case index = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sizeof"])(children) - 1:
                                case 2:
                                    return index === 2 ? value + element + element : value + element;
                                default:
                                    return value;
                            }
                    }
                });
            });
    }
}
}}),
"[project]/node_modules/stylis/index.js [app-client] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "CHARSET": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CHARSET"]),
    "COMMENT": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["COMMENT"]),
    "COUNTER_STYLE": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["COUNTER_STYLE"]),
    "DECLARATION": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DECLARATION"]),
    "DOCUMENT": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DOCUMENT"]),
    "FONT_FACE": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FONT_FACE"]),
    "FONT_FEATURE_VALUES": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FONT_FEATURE_VALUES"]),
    "IMPORT": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IMPORT"]),
    "KEYFRAMES": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["KEYFRAMES"]),
    "LAYER": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LAYER"]),
    "MEDIA": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MEDIA"]),
    "MOZ": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOZ"]),
    "MS": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MS"]),
    "NAMESPACE": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NAMESPACE"]),
    "PAGE": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PAGE"]),
    "RULESET": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RULESET"]),
    "SCOPE": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SCOPE"]),
    "SUPPORTS": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SUPPORTS"]),
    "VIEWPORT": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VIEWPORT"]),
    "WEBKIT": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEBKIT"]),
    "abs": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["abs"]),
    "alloc": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["alloc"]),
    "append": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["append"]),
    "assign": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"]),
    "caret": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["caret"]),
    "char": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["char"]),
    "character": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["character"]),
    "characters": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["characters"]),
    "charat": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["charat"]),
    "column": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["column"]),
    "combine": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combine"]),
    "comment": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["comment"]),
    "commenter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["commenter"]),
    "compile": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compile"]),
    "copy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copy"]),
    "dealloc": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dealloc"]),
    "declaration": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["declaration"]),
    "delimit": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["delimit"]),
    "delimiter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["delimiter"]),
    "escaping": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escaping"]),
    "filter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["filter"]),
    "from": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["from"]),
    "hash": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hash"]),
    "identifier": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["identifier"]),
    "indexof": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["indexof"]),
    "length": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["length"]),
    "lift": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["lift"]),
    "line": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["line"]),
    "match": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["match"]),
    "middleware": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Middleware$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["middleware"]),
    "namespace": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Middleware$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["namespace"]),
    "next": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["next"]),
    "node": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["node"]),
    "parse": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parse"]),
    "peek": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["peek"]),
    "position": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["position"]),
    "prefix": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Prefixer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prefix"]),
    "prefixer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Middleware$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prefixer"]),
    "prev": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prev"]),
    "replace": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replace"]),
    "ruleset": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ruleset"]),
    "rulesheet": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Middleware$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["rulesheet"]),
    "serialize": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Serializer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["serialize"]),
    "sizeof": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sizeof"]),
    "slice": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slice"]),
    "stringify": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Serializer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringify"]),
    "strlen": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["strlen"]),
    "substr": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["substr"]),
    "token": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["token"]),
    "tokenize": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tokenize"]),
    "tokenizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tokenizer"]),
    "trim": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trim"]),
    "whitespace": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["whitespace"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Enum$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Enum.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Utility$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Utility.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Parser.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Prefixer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Prefixer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Tokenizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Tokenizer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Serializer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Serializer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$src$2f$Middleware$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/stylis/src/Middleware.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/stylis/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/stylis/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "CHARSET": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["CHARSET"]),
    "COMMENT": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["COMMENT"]),
    "COUNTER_STYLE": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["COUNTER_STYLE"]),
    "DECLARATION": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["DECLARATION"]),
    "DOCUMENT": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["DOCUMENT"]),
    "FONT_FACE": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["FONT_FACE"]),
    "FONT_FEATURE_VALUES": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["FONT_FEATURE_VALUES"]),
    "IMPORT": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["IMPORT"]),
    "KEYFRAMES": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["KEYFRAMES"]),
    "LAYER": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["LAYER"]),
    "MEDIA": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["MEDIA"]),
    "MOZ": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["MOZ"]),
    "MS": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["MS"]),
    "NAMESPACE": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["NAMESPACE"]),
    "PAGE": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["PAGE"]),
    "RULESET": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["RULESET"]),
    "SCOPE": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["SCOPE"]),
    "SUPPORTS": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["SUPPORTS"]),
    "VIEWPORT": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["VIEWPORT"]),
    "WEBKIT": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["WEBKIT"]),
    "abs": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["abs"]),
    "alloc": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["alloc"]),
    "append": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["append"]),
    "assign": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["assign"]),
    "caret": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["caret"]),
    "char": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["char"]),
    "character": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["character"]),
    "characters": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["characters"]),
    "charat": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["charat"]),
    "column": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["column"]),
    "combine": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["combine"]),
    "comment": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["comment"]),
    "commenter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["commenter"]),
    "compile": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["compile"]),
    "copy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["copy"]),
    "dealloc": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["dealloc"]),
    "declaration": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["declaration"]),
    "delimit": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["delimit"]),
    "delimiter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["delimiter"]),
    "escaping": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["escaping"]),
    "filter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["filter"]),
    "from": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["from"]),
    "hash": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["hash"]),
    "identifier": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["identifier"]),
    "indexof": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["indexof"]),
    "length": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["length"]),
    "lift": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["lift"]),
    "line": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["line"]),
    "match": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["match"]),
    "middleware": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["middleware"]),
    "namespace": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["namespace"]),
    "next": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["next"]),
    "node": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["node"]),
    "parse": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["parse"]),
    "peek": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["peek"]),
    "position": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["position"]),
    "prefix": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["prefix"]),
    "prefixer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["prefixer"]),
    "prev": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["prev"]),
    "replace": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["replace"]),
    "ruleset": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ruleset"]),
    "rulesheet": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["rulesheet"]),
    "serialize": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["serialize"]),
    "sizeof": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["sizeof"]),
    "slice": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["slice"]),
    "stringify": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["stringify"]),
    "strlen": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["strlen"]),
    "substr": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["substr"]),
    "token": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["token"]),
    "tokenize": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["tokenize"]),
    "tokenizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["tokenizer"]),
    "trim": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["trim"]),
    "whitespace": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["whitespace"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/stylis/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$stylis$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_import__("[project]/node_modules/stylis/index.js [app-client] (ecmascript) <exports>");
}}),
"[project]/node_modules/zustand/esm/vanilla.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "createStore": (()=>createStore)
});
const createStoreImpl = (createState)=>{
    let state;
    const listeners = /* @__PURE__ */ new Set();
    const setState = (partial, replace)=>{
        const nextState = typeof partial === "function" ? partial(state) : partial;
        if (!Object.is(nextState, state)) {
            const previousState = state;
            state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
            listeners.forEach((listener)=>listener(state, previousState));
        }
    };
    const getState = ()=>state;
    const getInitialState = ()=>initialState;
    const subscribe = (listener)=>{
        listeners.add(listener);
        return ()=>listeners.delete(listener);
    };
    const api = {
        setState,
        getState,
        getInitialState,
        subscribe
    };
    const initialState = state = createState(setState, getState, api);
    return api;
};
const createStore = (createState)=>createState ? createStoreImpl(createState) : createStoreImpl;
;
}}),
"[project]/node_modules/zustand/esm/react.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "create": (()=>create),
    "useStore": (()=>useStore)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zustand$2f$esm$2f$vanilla$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/zustand/esm/vanilla.mjs [app-client] (ecmascript)");
;
;
const identity = (arg)=>arg;
function useStore(api, selector = identity) {
    const slice = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useSyncExternalStore(api.subscribe, {
        "useStore.useSyncExternalStore[slice]": ()=>selector(api.getState())
    }["useStore.useSyncExternalStore[slice]"], {
        "useStore.useSyncExternalStore[slice]": ()=>selector(api.getInitialState())
    }["useStore.useSyncExternalStore[slice]"]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useDebugValue(slice);
    return slice;
}
const createImpl = (createState)=>{
    const api = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zustand$2f$esm$2f$vanilla$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createStore"])(createState);
    const useBoundStore = (selector)=>useStore(api, selector);
    Object.assign(useBoundStore, api);
    return useBoundStore;
};
const create = (createState)=>createState ? createImpl(createState) : createImpl;
;
}}),
"[project]/node_modules/gensync/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
// These use the global symbol registry so that multiple copies of this
// library can work together in case they are not deduped.
const GENSYNC_START = Symbol.for("gensync:v1:start");
const GENSYNC_SUSPEND = Symbol.for("gensync:v1:suspend");
const GENSYNC_EXPECTED_START = "GENSYNC_EXPECTED_START";
const GENSYNC_EXPECTED_SUSPEND = "GENSYNC_EXPECTED_SUSPEND";
const GENSYNC_OPTIONS_ERROR = "GENSYNC_OPTIONS_ERROR";
const GENSYNC_RACE_NONEMPTY = "GENSYNC_RACE_NONEMPTY";
const GENSYNC_ERRBACK_NO_CALLBACK = "GENSYNC_ERRBACK_NO_CALLBACK";
module.exports = Object.assign(function gensync(optsOrFn) {
    let genFn = optsOrFn;
    if (typeof optsOrFn !== "function") {
        genFn = newGenerator(optsOrFn);
    } else {
        genFn = wrapGenerator(optsOrFn);
    }
    return Object.assign(genFn, makeFunctionAPI(genFn));
}, {
    all: buildOperation({
        name: "all",
        arity: 1,
        sync: function(args) {
            const items = Array.from(args[0]);
            return items.map((item)=>evaluateSync(item));
        },
        async: function(args, resolve, reject) {
            const items = Array.from(args[0]);
            if (items.length === 0) {
                Promise.resolve().then(()=>resolve([]));
                return;
            }
            let count = 0;
            const results = items.map(()=>undefined);
            items.forEach((item, i)=>{
                evaluateAsync(item, (val)=>{
                    results[i] = val;
                    count += 1;
                    if (count === results.length) resolve(results);
                }, reject);
            });
        }
    }),
    race: buildOperation({
        name: "race",
        arity: 1,
        sync: function(args) {
            const items = Array.from(args[0]);
            if (items.length === 0) {
                throw makeError("Must race at least 1 item", GENSYNC_RACE_NONEMPTY);
            }
            return evaluateSync(items[0]);
        },
        async: function(args, resolve, reject) {
            const items = Array.from(args[0]);
            if (items.length === 0) {
                throw makeError("Must race at least 1 item", GENSYNC_RACE_NONEMPTY);
            }
            for (const item of items){
                evaluateAsync(item, resolve, reject);
            }
        }
    })
});
/**
 * Given a generator function, return the standard API object that executes
 * the generator and calls the callbacks.
 */ function makeFunctionAPI(genFn) {
    const fns = {
        sync: function(...args) {
            return evaluateSync(genFn.apply(this, args));
        },
        async: function(...args) {
            return new Promise((resolve, reject)=>{
                evaluateAsync(genFn.apply(this, args), resolve, reject);
            });
        },
        errback: function(...args) {
            const cb = args.pop();
            if (typeof cb !== "function") {
                throw makeError("Asynchronous function called without callback", GENSYNC_ERRBACK_NO_CALLBACK);
            }
            let gen;
            try {
                gen = genFn.apply(this, args);
            } catch (err) {
                cb(err);
                return;
            }
            evaluateAsync(gen, (val)=>cb(undefined, val), (err)=>cb(err));
        }
    };
    return fns;
}
function assertTypeof(type, name, value, allowUndefined) {
    if (typeof value === type || allowUndefined && typeof value === "undefined") {
        return;
    }
    let msg;
    if (allowUndefined) {
        msg = `Expected opts.${name} to be either a ${type}, or undefined.`;
    } else {
        msg = `Expected opts.${name} to be a ${type}.`;
    }
    throw makeError(msg, GENSYNC_OPTIONS_ERROR);
}
function makeError(msg, code) {
    return Object.assign(new Error(msg), {
        code
    });
}
/**
 * Given an options object, return a new generator that dispatches the
 * correct handler based on sync or async execution.
 */ function newGenerator({ name, arity, sync, async, errback }) {
    assertTypeof("string", "name", name, true);
    assertTypeof("number", "arity", arity, true);
    assertTypeof("function", "sync", sync);
    assertTypeof("function", "async", async, true);
    assertTypeof("function", "errback", errback, true);
    if (async && errback) {
        throw makeError("Expected one of either opts.async or opts.errback, but got _both_.", GENSYNC_OPTIONS_ERROR);
    }
    if (typeof name !== "string") {
        let fnName;
        if (errback && errback.name && errback.name !== "errback") {
            fnName = errback.name;
        }
        if (async && async.name && async.name !== "async") {
            fnName = async.name.replace(/Async$/, "");
        }
        if (sync && sync.name && sync.name !== "sync") {
            fnName = sync.name.replace(/Sync$/, "");
        }
        if (typeof fnName === "string") {
            name = fnName;
        }
    }
    if (typeof arity !== "number") {
        arity = sync.length;
    }
    return buildOperation({
        name,
        arity,
        sync: function(args) {
            return sync.apply(this, args);
        },
        async: function(args, resolve, reject) {
            if (async) {
                async.apply(this, args).then(resolve, reject);
            } else if (errback) {
                errback.call(this, ...args, (err, value)=>{
                    if (err == null) resolve(value);
                    else reject(err);
                });
            } else {
                resolve(sync.apply(this, args));
            }
        }
    });
}
function wrapGenerator(genFn) {
    return setFunctionMetadata(genFn.name, genFn.length, function(...args) {
        return genFn.apply(this, args);
    });
}
function buildOperation({ name, arity, sync, async }) {
    return setFunctionMetadata(name, arity, function*(...args) {
        const resume = yield GENSYNC_START;
        if (!resume) {
            // Break the tail call to avoid a bug in V8 v6.X with --harmony enabled.
            const res = sync.call(this, args);
            return res;
        }
        let result;
        try {
            async.call(this, args, (value)=>{
                if (result) return;
                result = {
                    value
                };
                resume();
            }, (err)=>{
                if (result) return;
                result = {
                    err
                };
                resume();
            });
        } catch (err) {
            result = {
                err
            };
            resume();
        }
        // Suspend until the callbacks run. Will resume synchronously if the
        // callback was already called.
        yield GENSYNC_SUSPEND;
        if (result.hasOwnProperty("err")) {
            throw result.err;
        }
        return result.value;
    });
}
function evaluateSync(gen) {
    let value;
    while(!({ value } = gen.next()).done){
        assertStart(value, gen);
    }
    return value;
}
function evaluateAsync(gen, resolve, reject) {
    (function step() {
        try {
            let value;
            while(!({ value } = gen.next()).done){
                assertStart(value, gen);
                // If this throws, it is considered to have broken the contract
                // established for async handlers. If these handlers are called
                // synchronously, it is also considered bad behavior.
                let sync = true;
                let didSyncResume = false;
                const out = gen.next(()=>{
                    if (sync) {
                        didSyncResume = true;
                    } else {
                        step();
                    }
                });
                sync = false;
                assertSuspend(out, gen);
                if (!didSyncResume) {
                    // Callback wasn't called synchronously, so break out of the loop
                    // and let it call 'step' later.
                    return;
                }
            }
            return resolve(value);
        } catch (err) {
            return reject(err);
        }
    })();
}
function assertStart(value, gen) {
    if (value === GENSYNC_START) return;
    throwError(gen, makeError(`Got unexpected yielded value in gensync generator: ${JSON.stringify(value)}. Did you perhaps mean to use 'yield*' instead of 'yield'?`, GENSYNC_EXPECTED_START));
}
function assertSuspend({ value, done }, gen) {
    if (!done && value === GENSYNC_SUSPEND) return;
    throwError(gen, makeError(done ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(value)}. If you get this, it is probably a gensync bug.`, GENSYNC_EXPECTED_SUSPEND));
}
function throwError(gen, err) {
    // Call `.throw` so that users can step in a debugger to easily see which
    // 'yield' passed an unexpected value. If the `.throw` call didn't throw
    // back to the generator, we explicitly do it to stop the error
    // from being swallowed by user code try/catches.
    if (gen.throw) gen.throw(err);
    throw err;
}
function isIterable(value) {
    return !!value && (typeof value === "object" || typeof value === "function") && !value[Symbol.iterator];
}
function setFunctionMetadata(name, arity, fn) {
    if (typeof name === "string") {
        // This should always work on the supported Node versions, but for the
        // sake of users that are compiling to older versions, we check for
        // configurability so we don't throw.
        const nameDesc = Object.getOwnPropertyDescriptor(fn, "name");
        if (!nameDesc || nameDesc.configurable) {
            Object.defineProperty(fn, "name", Object.assign(nameDesc || {}, {
                configurable: true,
                value: name
            }));
        }
    }
    if (typeof arity === "number") {
        const lengthDesc = Object.getOwnPropertyDescriptor(fn, "length");
        if (!lengthDesc || lengthDesc.configurable) {
            Object.defineProperty(fn, "length", Object.assign(lengthDesc || {}, {
                configurable: true,
                value: arity
            }));
        }
    }
    return fn;
}
}}),
"[project]/node_modules/node-releases/data/processed/envs.json (json)": ((__turbopack_context__) => {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_export_value__(JSON.parse("[{\"name\":\"nodejs\",\"version\":\"0.2.0\",\"date\":\"2011-08-26\",\"lts\":false,\"security\":false,\"v8\":\"2.3.8.0\"},{\"name\":\"nodejs\",\"version\":\"0.3.0\",\"date\":\"2011-08-26\",\"lts\":false,\"security\":false,\"v8\":\"2.5.1.0\"},{\"name\":\"nodejs\",\"version\":\"0.4.0\",\"date\":\"2011-08-26\",\"lts\":false,\"security\":false,\"v8\":\"3.1.2.0\"},{\"name\":\"nodejs\",\"version\":\"0.5.0\",\"date\":\"2011-08-26\",\"lts\":false,\"security\":false,\"v8\":\"3.1.8.25\"},{\"name\":\"nodejs\",\"version\":\"0.6.0\",\"date\":\"2011-11-04\",\"lts\":false,\"security\":false,\"v8\":\"3.6.6.6\"},{\"name\":\"nodejs\",\"version\":\"0.7.0\",\"date\":\"2012-01-17\",\"lts\":false,\"security\":false,\"v8\":\"3.8.6.0\"},{\"name\":\"nodejs\",\"version\":\"0.8.0\",\"date\":\"2012-06-22\",\"lts\":false,\"security\":false,\"v8\":\"3.11.10.10\"},{\"name\":\"nodejs\",\"version\":\"0.9.0\",\"date\":\"2012-07-20\",\"lts\":false,\"security\":false,\"v8\":\"3.11.10.15\"},{\"name\":\"nodejs\",\"version\":\"0.10.0\",\"date\":\"2013-03-11\",\"lts\":false,\"security\":false,\"v8\":\"3.14.5.8\"},{\"name\":\"nodejs\",\"version\":\"0.11.0\",\"date\":\"2013-03-28\",\"lts\":false,\"security\":false,\"v8\":\"3.17.13.0\"},{\"name\":\"nodejs\",\"version\":\"0.12.0\",\"date\":\"2015-02-06\",\"lts\":false,\"security\":false,\"v8\":\"3.28.73.0\"},{\"name\":\"nodejs\",\"version\":\"4.0.0\",\"date\":\"2015-09-08\",\"lts\":false,\"security\":false,\"v8\":\"4.5.103.30\"},{\"name\":\"nodejs\",\"version\":\"4.1.0\",\"date\":\"2015-09-17\",\"lts\":false,\"security\":false,\"v8\":\"4.5.103.33\"},{\"name\":\"nodejs\",\"version\":\"4.2.0\",\"date\":\"2015-10-12\",\"lts\":\"Argon\",\"security\":false,\"v8\":\"4.5.103.35\"},{\"name\":\"nodejs\",\"version\":\"4.3.0\",\"date\":\"2016-02-09\",\"lts\":\"Argon\",\"security\":false,\"v8\":\"4.5.103.35\"},{\"name\":\"nodejs\",\"version\":\"4.4.0\",\"date\":\"2016-03-08\",\"lts\":\"Argon\",\"security\":false,\"v8\":\"4.5.103.35\"},{\"name\":\"nodejs\",\"version\":\"4.5.0\",\"date\":\"2016-08-16\",\"lts\":\"Argon\",\"security\":false,\"v8\":\"4.5.103.37\"},{\"name\":\"nodejs\",\"version\":\"4.6.0\",\"date\":\"2016-09-27\",\"lts\":\"Argon\",\"security\":true,\"v8\":\"4.5.103.37\"},{\"name\":\"nodejs\",\"version\":\"4.7.0\",\"date\":\"2016-12-06\",\"lts\":\"Argon\",\"security\":false,\"v8\":\"4.5.103.43\"},{\"name\":\"nodejs\",\"version\":\"4.8.0\",\"date\":\"2017-02-21\",\"lts\":\"Argon\",\"security\":false,\"v8\":\"4.5.103.45\"},{\"name\":\"nodejs\",\"version\":\"4.9.0\",\"date\":\"2018-03-28\",\"lts\":\"Argon\",\"security\":true,\"v8\":\"4.5.103.53\"},{\"name\":\"nodejs\",\"version\":\"5.0.0\",\"date\":\"2015-10-29\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.28\"},{\"name\":\"nodejs\",\"version\":\"5.1.0\",\"date\":\"2015-11-17\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.2.0\",\"date\":\"2015-12-09\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.3.0\",\"date\":\"2015-12-15\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.4.0\",\"date\":\"2016-01-06\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.5.0\",\"date\":\"2016-01-21\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.6.0\",\"date\":\"2016-02-09\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.7.0\",\"date\":\"2016-02-23\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.8.0\",\"date\":\"2016-03-09\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.9.0\",\"date\":\"2016-03-16\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.10.0\",\"date\":\"2016-04-01\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.11.0\",\"date\":\"2016-04-21\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.31\"},{\"name\":\"nodejs\",\"version\":\"5.12.0\",\"date\":\"2016-06-23\",\"lts\":false,\"security\":false,\"v8\":\"4.6.85.32\"},{\"name\":\"nodejs\",\"version\":\"6.0.0\",\"date\":\"2016-04-26\",\"lts\":false,\"security\":false,\"v8\":\"5.0.71.35\"},{\"name\":\"nodejs\",\"version\":\"6.1.0\",\"date\":\"2016-05-05\",\"lts\":false,\"security\":false,\"v8\":\"5.0.71.35\"},{\"name\":\"nodejs\",\"version\":\"6.2.0\",\"date\":\"2016-05-17\",\"lts\":false,\"security\":false,\"v8\":\"5.0.71.47\"},{\"name\":\"nodejs\",\"version\":\"6.3.0\",\"date\":\"2016-07-06\",\"lts\":false,\"security\":false,\"v8\":\"5.0.71.52\"},{\"name\":\"nodejs\",\"version\":\"6.4.0\",\"date\":\"2016-08-12\",\"lts\":false,\"security\":false,\"v8\":\"5.0.71.60\"},{\"name\":\"nodejs\",\"version\":\"6.5.0\",\"date\":\"2016-08-26\",\"lts\":false,\"security\":false,\"v8\":\"5.1.281.81\"},{\"name\":\"nodejs\",\"version\":\"6.6.0\",\"date\":\"2016-09-14\",\"lts\":false,\"security\":false,\"v8\":\"5.1.281.83\"},{\"name\":\"nodejs\",\"version\":\"6.7.0\",\"date\":\"2016-09-27\",\"lts\":false,\"security\":true,\"v8\":\"5.1.281.83\"},{\"name\":\"nodejs\",\"version\":\"6.8.0\",\"date\":\"2016-10-12\",\"lts\":false,\"security\":false,\"v8\":\"5.1.281.84\"},{\"name\":\"nodejs\",\"version\":\"6.9.0\",\"date\":\"2016-10-18\",\"lts\":\"Boron\",\"security\":false,\"v8\":\"5.1.281.84\"},{\"name\":\"nodejs\",\"version\":\"6.10.0\",\"date\":\"2017-02-21\",\"lts\":\"Boron\",\"security\":false,\"v8\":\"5.1.281.93\"},{\"name\":\"nodejs\",\"version\":\"6.11.0\",\"date\":\"2017-06-06\",\"lts\":\"Boron\",\"security\":false,\"v8\":\"5.1.281.102\"},{\"name\":\"nodejs\",\"version\":\"6.12.0\",\"date\":\"2017-11-06\",\"lts\":\"Boron\",\"security\":false,\"v8\":\"5.1.281.108\"},{\"name\":\"nodejs\",\"version\":\"6.13.0\",\"date\":\"2018-02-10\",\"lts\":\"Boron\",\"security\":false,\"v8\":\"5.1.281.111\"},{\"name\":\"nodejs\",\"version\":\"6.14.0\",\"date\":\"2018-03-28\",\"lts\":\"Boron\",\"security\":true,\"v8\":\"5.1.281.111\"},{\"name\":\"nodejs\",\"version\":\"6.15.0\",\"date\":\"2018-11-27\",\"lts\":\"Boron\",\"security\":true,\"v8\":\"5.1.281.111\"},{\"name\":\"nodejs\",\"version\":\"6.16.0\",\"date\":\"2018-12-26\",\"lts\":\"Boron\",\"security\":false,\"v8\":\"5.1.281.111\"},{\"name\":\"nodejs\",\"version\":\"6.17.0\",\"date\":\"2019-02-28\",\"lts\":\"Boron\",\"security\":true,\"v8\":\"5.1.281.111\"},{\"name\":\"nodejs\",\"version\":\"7.0.0\",\"date\":\"2016-10-25\",\"lts\":false,\"security\":false,\"v8\":\"5.4.500.36\"},{\"name\":\"nodejs\",\"version\":\"7.1.0\",\"date\":\"2016-11-08\",\"lts\":false,\"security\":false,\"v8\":\"5.4.500.36\"},{\"name\":\"nodejs\",\"version\":\"7.2.0\",\"date\":\"2016-11-22\",\"lts\":false,\"security\":false,\"v8\":\"5.4.500.43\"},{\"name\":\"nodejs\",\"version\":\"7.3.0\",\"date\":\"2016-12-20\",\"lts\":false,\"security\":false,\"v8\":\"5.4.500.45\"},{\"name\":\"nodejs\",\"version\":\"7.4.0\",\"date\":\"2017-01-04\",\"lts\":false,\"security\":false,\"v8\":\"5.4.500.45\"},{\"name\":\"nodejs\",\"version\":\"7.5.0\",\"date\":\"2017-01-31\",\"lts\":false,\"security\":false,\"v8\":\"5.4.500.48\"},{\"name\":\"nodejs\",\"version\":\"7.6.0\",\"date\":\"2017-02-21\",\"lts\":false,\"security\":false,\"v8\":\"5.5.372.40\"},{\"name\":\"nodejs\",\"version\":\"7.7.0\",\"date\":\"2017-02-28\",\"lts\":false,\"security\":false,\"v8\":\"5.5.372.41\"},{\"name\":\"nodejs\",\"version\":\"7.8.0\",\"date\":\"2017-03-29\",\"lts\":false,\"security\":false,\"v8\":\"5.5.372.43\"},{\"name\":\"nodejs\",\"version\":\"7.9.0\",\"date\":\"2017-04-11\",\"lts\":false,\"security\":false,\"v8\":\"5.5.372.43\"},{\"name\":\"nodejs\",\"version\":\"7.10.0\",\"date\":\"2017-05-02\",\"lts\":false,\"security\":false,\"v8\":\"5.5.372.43\"},{\"name\":\"nodejs\",\"version\":\"8.0.0\",\"date\":\"2017-05-30\",\"lts\":false,\"security\":false,\"v8\":\"5.8.283.41\"},{\"name\":\"nodejs\",\"version\":\"8.1.0\",\"date\":\"2017-06-08\",\"lts\":false,\"security\":false,\"v8\":\"5.8.283.41\"},{\"name\":\"nodejs\",\"version\":\"8.2.0\",\"date\":\"2017-07-19\",\"lts\":false,\"security\":false,\"v8\":\"5.8.283.41\"},{\"name\":\"nodejs\",\"version\":\"8.3.0\",\"date\":\"2017-08-08\",\"lts\":false,\"security\":false,\"v8\":\"6.0.286.52\"},{\"name\":\"nodejs\",\"version\":\"8.4.0\",\"date\":\"2017-08-15\",\"lts\":false,\"security\":false,\"v8\":\"6.0.286.52\"},{\"name\":\"nodejs\",\"version\":\"8.5.0\",\"date\":\"2017-09-12\",\"lts\":false,\"security\":false,\"v8\":\"6.0.287.53\"},{\"name\":\"nodejs\",\"version\":\"8.6.0\",\"date\":\"2017-09-26\",\"lts\":false,\"security\":false,\"v8\":\"6.0.287.53\"},{\"name\":\"nodejs\",\"version\":\"8.7.0\",\"date\":\"2017-10-11\",\"lts\":false,\"security\":false,\"v8\":\"6.1.534.42\"},{\"name\":\"nodejs\",\"version\":\"8.8.0\",\"date\":\"2017-10-24\",\"lts\":false,\"security\":false,\"v8\":\"6.1.534.42\"},{\"name\":\"nodejs\",\"version\":\"8.9.0\",\"date\":\"2017-10-31\",\"lts\":\"Carbon\",\"security\":false,\"v8\":\"6.1.534.46\"},{\"name\":\"nodejs\",\"version\":\"8.10.0\",\"date\":\"2018-03-06\",\"lts\":\"Carbon\",\"security\":false,\"v8\":\"6.2.414.50\"},{\"name\":\"nodejs\",\"version\":\"8.11.0\",\"date\":\"2018-03-28\",\"lts\":\"Carbon\",\"security\":true,\"v8\":\"6.2.414.50\"},{\"name\":\"nodejs\",\"version\":\"8.12.0\",\"date\":\"2018-09-10\",\"lts\":\"Carbon\",\"security\":false,\"v8\":\"6.2.414.66\"},{\"name\":\"nodejs\",\"version\":\"8.13.0\",\"date\":\"2018-11-20\",\"lts\":\"Carbon\",\"security\":false,\"v8\":\"6.2.414.72\"},{\"name\":\"nodejs\",\"version\":\"8.14.0\",\"date\":\"2018-11-27\",\"lts\":\"Carbon\",\"security\":true,\"v8\":\"6.2.414.72\"},{\"name\":\"nodejs\",\"version\":\"8.15.0\",\"date\":\"2018-12-26\",\"lts\":\"Carbon\",\"security\":false,\"v8\":\"6.2.414.75\"},{\"name\":\"nodejs\",\"version\":\"8.16.0\",\"date\":\"2019-04-16\",\"lts\":\"Carbon\",\"security\":false,\"v8\":\"6.2.414.77\"},{\"name\":\"nodejs\",\"version\":\"8.17.0\",\"date\":\"2019-12-17\",\"lts\":\"Carbon\",\"security\":true,\"v8\":\"6.2.414.78\"},{\"name\":\"nodejs\",\"version\":\"9.0.0\",\"date\":\"2017-10-31\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.32\"},{\"name\":\"nodejs\",\"version\":\"9.1.0\",\"date\":\"2017-11-07\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.32\"},{\"name\":\"nodejs\",\"version\":\"9.2.0\",\"date\":\"2017-11-14\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.44\"},{\"name\":\"nodejs\",\"version\":\"9.3.0\",\"date\":\"2017-12-12\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.4.0\",\"date\":\"2018-01-10\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.5.0\",\"date\":\"2018-01-31\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.6.0\",\"date\":\"2018-02-21\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.7.0\",\"date\":\"2018-03-01\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.8.0\",\"date\":\"2018-03-07\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.9.0\",\"date\":\"2018-03-21\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.10.0\",\"date\":\"2018-03-28\",\"lts\":false,\"security\":true,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"9.11.0\",\"date\":\"2018-04-04\",\"lts\":false,\"security\":false,\"v8\":\"6.2.414.46\"},{\"name\":\"nodejs\",\"version\":\"10.0.0\",\"date\":\"2018-04-24\",\"lts\":false,\"security\":false,\"v8\":\"6.6.346.24\"},{\"name\":\"nodejs\",\"version\":\"10.1.0\",\"date\":\"2018-05-08\",\"lts\":false,\"security\":false,\"v8\":\"6.6.346.27\"},{\"name\":\"nodejs\",\"version\":\"10.2.0\",\"date\":\"2018-05-23\",\"lts\":false,\"security\":false,\"v8\":\"6.6.346.32\"},{\"name\":\"nodejs\",\"version\":\"10.3.0\",\"date\":\"2018-05-29\",\"lts\":false,\"security\":false,\"v8\":\"6.6.346.32\"},{\"name\":\"nodejs\",\"version\":\"10.4.0\",\"date\":\"2018-06-06\",\"lts\":false,\"security\":false,\"v8\":\"6.7.288.43\"},{\"name\":\"nodejs\",\"version\":\"10.5.0\",\"date\":\"2018-06-20\",\"lts\":false,\"security\":false,\"v8\":\"6.7.288.46\"},{\"name\":\"nodejs\",\"version\":\"10.6.0\",\"date\":\"2018-07-04\",\"lts\":false,\"security\":false,\"v8\":\"6.7.288.46\"},{\"name\":\"nodejs\",\"version\":\"10.7.0\",\"date\":\"2018-07-18\",\"lts\":false,\"security\":false,\"v8\":\"6.7.288.49\"},{\"name\":\"nodejs\",\"version\":\"10.8.0\",\"date\":\"2018-08-01\",\"lts\":false,\"security\":false,\"v8\":\"6.7.288.49\"},{\"name\":\"nodejs\",\"version\":\"10.9.0\",\"date\":\"2018-08-15\",\"lts\":false,\"security\":false,\"v8\":\"6.8.275.24\"},{\"name\":\"nodejs\",\"version\":\"10.10.0\",\"date\":\"2018-09-06\",\"lts\":false,\"security\":false,\"v8\":\"6.8.275.30\"},{\"name\":\"nodejs\",\"version\":\"10.11.0\",\"date\":\"2018-09-19\",\"lts\":false,\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.12.0\",\"date\":\"2018-10-10\",\"lts\":false,\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.13.0\",\"date\":\"2018-10-30\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.14.0\",\"date\":\"2018-11-27\",\"lts\":\"Dubnium\",\"security\":true,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.15.0\",\"date\":\"2018-12-26\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.16.0\",\"date\":\"2019-05-28\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.17.0\",\"date\":\"2019-10-22\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.18.0\",\"date\":\"2019-12-17\",\"lts\":\"Dubnium\",\"security\":true,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.19.0\",\"date\":\"2020-02-05\",\"lts\":\"Dubnium\",\"security\":true,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.20.0\",\"date\":\"2020-03-26\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.21.0\",\"date\":\"2020-06-02\",\"lts\":\"Dubnium\",\"security\":true,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.22.0\",\"date\":\"2020-07-21\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.23.0\",\"date\":\"2020-10-27\",\"lts\":\"Dubnium\",\"security\":false,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"10.24.0\",\"date\":\"2021-02-23\",\"lts\":\"Dubnium\",\"security\":true,\"v8\":\"6.8.275.32\"},{\"name\":\"nodejs\",\"version\":\"11.0.0\",\"date\":\"2018-10-23\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.28\"},{\"name\":\"nodejs\",\"version\":\"11.1.0\",\"date\":\"2018-10-30\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.32\"},{\"name\":\"nodejs\",\"version\":\"11.2.0\",\"date\":\"2018-11-15\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.3.0\",\"date\":\"2018-11-27\",\"lts\":false,\"security\":true,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.4.0\",\"date\":\"2018-12-07\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.5.0\",\"date\":\"2018-12-18\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.6.0\",\"date\":\"2018-12-26\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.7.0\",\"date\":\"2019-01-17\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.8.0\",\"date\":\"2019-01-24\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.9.0\",\"date\":\"2019-01-30\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.10.0\",\"date\":\"2019-02-14\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.11.0\",\"date\":\"2019-03-05\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.12.0\",\"date\":\"2019-03-14\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.13.0\",\"date\":\"2019-03-28\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.14.0\",\"date\":\"2019-04-10\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"11.15.0\",\"date\":\"2019-04-30\",\"lts\":false,\"security\":false,\"v8\":\"7.0.276.38\"},{\"name\":\"nodejs\",\"version\":\"12.0.0\",\"date\":\"2019-04-23\",\"lts\":false,\"security\":false,\"v8\":\"7.4.288.21\"},{\"name\":\"nodejs\",\"version\":\"12.1.0\",\"date\":\"2019-04-29\",\"lts\":false,\"security\":false,\"v8\":\"7.4.288.21\"},{\"name\":\"nodejs\",\"version\":\"12.2.0\",\"date\":\"2019-05-07\",\"lts\":false,\"security\":false,\"v8\":\"7.4.288.21\"},{\"name\":\"nodejs\",\"version\":\"12.3.0\",\"date\":\"2019-05-21\",\"lts\":false,\"security\":false,\"v8\":\"7.4.288.27\"},{\"name\":\"nodejs\",\"version\":\"12.4.0\",\"date\":\"2019-06-04\",\"lts\":false,\"security\":false,\"v8\":\"7.4.288.27\"},{\"name\":\"nodejs\",\"version\":\"12.5.0\",\"date\":\"2019-06-26\",\"lts\":false,\"security\":false,\"v8\":\"7.5.288.22\"},{\"name\":\"nodejs\",\"version\":\"12.6.0\",\"date\":\"2019-07-03\",\"lts\":false,\"security\":false,\"v8\":\"7.5.288.22\"},{\"name\":\"nodejs\",\"version\":\"12.7.0\",\"date\":\"2019-07-23\",\"lts\":false,\"security\":false,\"v8\":\"7.5.288.22\"},{\"name\":\"nodejs\",\"version\":\"12.8.0\",\"date\":\"2019-08-06\",\"lts\":false,\"security\":false,\"v8\":\"7.5.288.22\"},{\"name\":\"nodejs\",\"version\":\"12.9.0\",\"date\":\"2019-08-20\",\"lts\":false,\"security\":false,\"v8\":\"7.6.303.29\"},{\"name\":\"nodejs\",\"version\":\"12.10.0\",\"date\":\"2019-09-04\",\"lts\":false,\"security\":false,\"v8\":\"7.6.303.29\"},{\"name\":\"nodejs\",\"version\":\"12.11.0\",\"date\":\"2019-09-25\",\"lts\":false,\"security\":false,\"v8\":\"7.7.299.11\"},{\"name\":\"nodejs\",\"version\":\"12.12.0\",\"date\":\"2019-10-11\",\"lts\":false,\"security\":false,\"v8\":\"7.7.299.13\"},{\"name\":\"nodejs\",\"version\":\"12.13.0\",\"date\":\"2019-10-21\",\"lts\":\"Erbium\",\"security\":false,\"v8\":\"7.7.299.13\"},{\"name\":\"nodejs\",\"version\":\"12.14.0\",\"date\":\"2019-12-17\",\"lts\":\"Erbium\",\"security\":true,\"v8\":\"7.7.299.13\"},{\"name\":\"nodejs\",\"version\":\"12.15.0\",\"date\":\"2020-02-05\",\"lts\":\"Erbium\",\"security\":true,\"v8\":\"7.7.299.13\"},{\"name\":\"nodejs\",\"version\":\"12.16.0\",\"date\":\"2020-02-11\",\"lts\":\"Erbium\",\"security\":false,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"12.17.0\",\"date\":\"2020-05-26\",\"lts\":\"Erbium\",\"security\":false,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"12.18.0\",\"date\":\"2020-06-02\",\"lts\":\"Erbium\",\"security\":true,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"12.19.0\",\"date\":\"2020-10-06\",\"lts\":\"Erbium\",\"security\":false,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"12.20.0\",\"date\":\"2020-11-24\",\"lts\":\"Erbium\",\"security\":false,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"12.21.0\",\"date\":\"2021-02-23\",\"lts\":\"Erbium\",\"security\":true,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"12.22.0\",\"date\":\"2021-03-30\",\"lts\":\"Erbium\",\"security\":false,\"v8\":\"7.8.279.23\"},{\"name\":\"nodejs\",\"version\":\"13.0.0\",\"date\":\"2019-10-22\",\"lts\":false,\"security\":false,\"v8\":\"7.8.279.17\"},{\"name\":\"nodejs\",\"version\":\"13.1.0\",\"date\":\"2019-11-05\",\"lts\":false,\"security\":false,\"v8\":\"7.8.279.17\"},{\"name\":\"nodejs\",\"version\":\"13.2.0\",\"date\":\"2019-11-21\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.23\"},{\"name\":\"nodejs\",\"version\":\"13.3.0\",\"date\":\"2019-12-03\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.4.0\",\"date\":\"2019-12-17\",\"lts\":false,\"security\":true,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.5.0\",\"date\":\"2019-12-18\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.6.0\",\"date\":\"2020-01-07\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.7.0\",\"date\":\"2020-01-21\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.8.0\",\"date\":\"2020-02-05\",\"lts\":false,\"security\":true,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.9.0\",\"date\":\"2020-02-18\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.10.0\",\"date\":\"2020-03-04\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.11.0\",\"date\":\"2020-03-12\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.12.0\",\"date\":\"2020-03-26\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.13.0\",\"date\":\"2020-04-14\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"13.14.0\",\"date\":\"2020-04-29\",\"lts\":false,\"security\":false,\"v8\":\"7.9.317.25\"},{\"name\":\"nodejs\",\"version\":\"14.0.0\",\"date\":\"2020-04-21\",\"lts\":false,\"security\":false,\"v8\":\"8.1.307.30\"},{\"name\":\"nodejs\",\"version\":\"14.1.0\",\"date\":\"2020-04-29\",\"lts\":false,\"security\":false,\"v8\":\"8.1.307.31\"},{\"name\":\"nodejs\",\"version\":\"14.2.0\",\"date\":\"2020-05-05\",\"lts\":false,\"security\":false,\"v8\":\"8.1.307.31\"},{\"name\":\"nodejs\",\"version\":\"14.3.0\",\"date\":\"2020-05-19\",\"lts\":false,\"security\":false,\"v8\":\"8.1.307.31\"},{\"name\":\"nodejs\",\"version\":\"14.4.0\",\"date\":\"2020-06-02\",\"lts\":false,\"security\":true,\"v8\":\"8.1.307.31\"},{\"name\":\"nodejs\",\"version\":\"14.5.0\",\"date\":\"2020-06-30\",\"lts\":false,\"security\":false,\"v8\":\"8.3.110.9\"},{\"name\":\"nodejs\",\"version\":\"14.6.0\",\"date\":\"2020-07-20\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.7.0\",\"date\":\"2020-07-29\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.8.0\",\"date\":\"2020-08-11\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.9.0\",\"date\":\"2020-08-27\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.10.0\",\"date\":\"2020-09-08\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.11.0\",\"date\":\"2020-09-15\",\"lts\":false,\"security\":true,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.12.0\",\"date\":\"2020-09-22\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.13.0\",\"date\":\"2020-09-29\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.14.0\",\"date\":\"2020-10-15\",\"lts\":false,\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.15.0\",\"date\":\"2020-10-27\",\"lts\":\"Fermium\",\"security\":false,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.16.0\",\"date\":\"2021-02-23\",\"lts\":\"Fermium\",\"security\":true,\"v8\":\"8.4.371.19\"},{\"name\":\"nodejs\",\"version\":\"14.17.0\",\"date\":\"2021-05-11\",\"lts\":\"Fermium\",\"security\":false,\"v8\":\"8.4.371.23\"},{\"name\":\"nodejs\",\"version\":\"14.18.0\",\"date\":\"2021-09-28\",\"lts\":\"Fermium\",\"security\":false,\"v8\":\"8.4.371.23\"},{\"name\":\"nodejs\",\"version\":\"14.19.0\",\"date\":\"2022-02-01\",\"lts\":\"Fermium\",\"security\":false,\"v8\":\"8.4.371.23\"},{\"name\":\"nodejs\",\"version\":\"14.20.0\",\"date\":\"2022-07-07\",\"lts\":\"Fermium\",\"security\":true,\"v8\":\"8.4.371.23\"},{\"name\":\"nodejs\",\"version\":\"14.21.0\",\"date\":\"2022-11-01\",\"lts\":\"Fermium\",\"security\":false,\"v8\":\"8.4.371.23\"},{\"name\":\"nodejs\",\"version\":\"15.0.0\",\"date\":\"2020-10-20\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.16\"},{\"name\":\"nodejs\",\"version\":\"15.1.0\",\"date\":\"2020-11-04\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.2.0\",\"date\":\"2020-11-10\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.3.0\",\"date\":\"2020-11-24\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.4.0\",\"date\":\"2020-12-09\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.5.0\",\"date\":\"2020-12-22\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.6.0\",\"date\":\"2021-01-14\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.7.0\",\"date\":\"2021-01-25\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.8.0\",\"date\":\"2021-02-02\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.9.0\",\"date\":\"2021-02-18\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.10.0\",\"date\":\"2021-02-23\",\"lts\":false,\"security\":true,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.11.0\",\"date\":\"2021-03-03\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.12.0\",\"date\":\"2021-03-17\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.13.0\",\"date\":\"2021-03-31\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"15.14.0\",\"date\":\"2021-04-06\",\"lts\":false,\"security\":false,\"v8\":\"8.6.395.17\"},{\"name\":\"nodejs\",\"version\":\"16.0.0\",\"date\":\"2021-04-20\",\"lts\":false,\"security\":false,\"v8\":\"9.0.257.17\"},{\"name\":\"nodejs\",\"version\":\"16.1.0\",\"date\":\"2021-05-04\",\"lts\":false,\"security\":false,\"v8\":\"9.0.257.24\"},{\"name\":\"nodejs\",\"version\":\"16.2.0\",\"date\":\"2021-05-19\",\"lts\":false,\"security\":false,\"v8\":\"9.0.257.25\"},{\"name\":\"nodejs\",\"version\":\"16.3.0\",\"date\":\"2021-06-03\",\"lts\":false,\"security\":false,\"v8\":\"9.0.257.25\"},{\"name\":\"nodejs\",\"version\":\"16.4.0\",\"date\":\"2021-06-23\",\"lts\":false,\"security\":false,\"v8\":\"9.1.269.36\"},{\"name\":\"nodejs\",\"version\":\"16.5.0\",\"date\":\"2021-07-14\",\"lts\":false,\"security\":false,\"v8\":\"9.1.269.38\"},{\"name\":\"nodejs\",\"version\":\"16.6.0\",\"date\":\"2021-07-29\",\"lts\":false,\"security\":true,\"v8\":\"9.2.230.21\"},{\"name\":\"nodejs\",\"version\":\"16.7.0\",\"date\":\"2021-08-18\",\"lts\":false,\"security\":false,\"v8\":\"9.2.230.21\"},{\"name\":\"nodejs\",\"version\":\"16.8.0\",\"date\":\"2021-08-25\",\"lts\":false,\"security\":false,\"v8\":\"9.2.230.21\"},{\"name\":\"nodejs\",\"version\":\"16.9.0\",\"date\":\"2021-09-07\",\"lts\":false,\"security\":false,\"v8\":\"9.3.345.16\"},{\"name\":\"nodejs\",\"version\":\"16.10.0\",\"date\":\"2021-09-22\",\"lts\":false,\"security\":false,\"v8\":\"9.3.345.19\"},{\"name\":\"nodejs\",\"version\":\"16.11.0\",\"date\":\"2021-10-08\",\"lts\":false,\"security\":false,\"v8\":\"9.4.146.19\"},{\"name\":\"nodejs\",\"version\":\"16.12.0\",\"date\":\"2021-10-20\",\"lts\":false,\"security\":false,\"v8\":\"9.4.146.19\"},{\"name\":\"nodejs\",\"version\":\"16.13.0\",\"date\":\"2021-10-26\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.19\"},{\"name\":\"nodejs\",\"version\":\"16.14.0\",\"date\":\"2022-02-08\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.24\"},{\"name\":\"nodejs\",\"version\":\"16.15.0\",\"date\":\"2022-04-26\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.24\"},{\"name\":\"nodejs\",\"version\":\"16.16.0\",\"date\":\"2022-07-07\",\"lts\":\"Gallium\",\"security\":true,\"v8\":\"9.4.146.24\"},{\"name\":\"nodejs\",\"version\":\"16.17.0\",\"date\":\"2022-08-16\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.26\"},{\"name\":\"nodejs\",\"version\":\"16.18.0\",\"date\":\"2022-10-12\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.26\"},{\"name\":\"nodejs\",\"version\":\"16.19.0\",\"date\":\"2022-12-13\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.26\"},{\"name\":\"nodejs\",\"version\":\"16.20.0\",\"date\":\"2023-03-28\",\"lts\":\"Gallium\",\"security\":false,\"v8\":\"9.4.146.26\"},{\"name\":\"nodejs\",\"version\":\"17.0.0\",\"date\":\"2021-10-19\",\"lts\":false,\"security\":false,\"v8\":\"9.5.172.21\"},{\"name\":\"nodejs\",\"version\":\"17.1.0\",\"date\":\"2021-11-09\",\"lts\":false,\"security\":false,\"v8\":\"9.5.172.25\"},{\"name\":\"nodejs\",\"version\":\"17.2.0\",\"date\":\"2021-11-30\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.14\"},{\"name\":\"nodejs\",\"version\":\"17.3.0\",\"date\":\"2021-12-17\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"17.4.0\",\"date\":\"2022-01-18\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"17.5.0\",\"date\":\"2022-02-10\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"17.6.0\",\"date\":\"2022-02-22\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"17.7.0\",\"date\":\"2022-03-09\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"17.8.0\",\"date\":\"2022-03-22\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"17.9.0\",\"date\":\"2022-04-07\",\"lts\":false,\"security\":false,\"v8\":\"9.6.180.15\"},{\"name\":\"nodejs\",\"version\":\"18.0.0\",\"date\":\"2022-04-18\",\"lts\":false,\"security\":false,\"v8\":\"10.1.124.8\"},{\"name\":\"nodejs\",\"version\":\"18.1.0\",\"date\":\"2022-05-03\",\"lts\":false,\"security\":false,\"v8\":\"10.1.124.8\"},{\"name\":\"nodejs\",\"version\":\"18.2.0\",\"date\":\"2022-05-17\",\"lts\":false,\"security\":false,\"v8\":\"10.1.124.8\"},{\"name\":\"nodejs\",\"version\":\"18.3.0\",\"date\":\"2022-06-02\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.4\"},{\"name\":\"nodejs\",\"version\":\"18.4.0\",\"date\":\"2022-06-16\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.4\"},{\"name\":\"nodejs\",\"version\":\"18.5.0\",\"date\":\"2022-07-06\",\"lts\":false,\"security\":true,\"v8\":\"10.2.154.4\"},{\"name\":\"nodejs\",\"version\":\"18.6.0\",\"date\":\"2022-07-13\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.13\"},{\"name\":\"nodejs\",\"version\":\"18.7.0\",\"date\":\"2022-07-26\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.13\"},{\"name\":\"nodejs\",\"version\":\"18.8.0\",\"date\":\"2022-08-24\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.13\"},{\"name\":\"nodejs\",\"version\":\"18.9.0\",\"date\":\"2022-09-07\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.15\"},{\"name\":\"nodejs\",\"version\":\"18.10.0\",\"date\":\"2022-09-28\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.15\"},{\"name\":\"nodejs\",\"version\":\"18.11.0\",\"date\":\"2022-10-13\",\"lts\":false,\"security\":false,\"v8\":\"10.2.154.15\"},{\"name\":\"nodejs\",\"version\":\"18.12.0\",\"date\":\"2022-10-25\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.15\"},{\"name\":\"nodejs\",\"version\":\"18.13.0\",\"date\":\"2023-01-05\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.23\"},{\"name\":\"nodejs\",\"version\":\"18.14.0\",\"date\":\"2023-02-01\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.23\"},{\"name\":\"nodejs\",\"version\":\"18.15.0\",\"date\":\"2023-03-05\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.26\"},{\"name\":\"nodejs\",\"version\":\"18.16.0\",\"date\":\"2023-04-12\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.26\"},{\"name\":\"nodejs\",\"version\":\"18.17.0\",\"date\":\"2023-07-18\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.26\"},{\"name\":\"nodejs\",\"version\":\"18.18.0\",\"date\":\"2023-09-18\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.26\"},{\"name\":\"nodejs\",\"version\":\"18.19.0\",\"date\":\"2023-11-29\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.26\"},{\"name\":\"nodejs\",\"version\":\"18.20.0\",\"date\":\"2024-03-26\",\"lts\":\"Hydrogen\",\"security\":false,\"v8\":\"10.2.154.26\"},{\"name\":\"nodejs\",\"version\":\"19.0.0\",\"date\":\"2022-10-17\",\"lts\":false,\"security\":false,\"v8\":\"10.7.193.13\"},{\"name\":\"nodejs\",\"version\":\"19.1.0\",\"date\":\"2022-11-14\",\"lts\":false,\"security\":false,\"v8\":\"10.7.193.20\"},{\"name\":\"nodejs\",\"version\":\"19.2.0\",\"date\":\"2022-11-29\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.20\"},{\"name\":\"nodejs\",\"version\":\"19.3.0\",\"date\":\"2022-12-14\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.21\"},{\"name\":\"nodejs\",\"version\":\"19.4.0\",\"date\":\"2023-01-05\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.25\"},{\"name\":\"nodejs\",\"version\":\"19.5.0\",\"date\":\"2023-01-24\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.25\"},{\"name\":\"nodejs\",\"version\":\"19.6.0\",\"date\":\"2023-02-01\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.25\"},{\"name\":\"nodejs\",\"version\":\"19.7.0\",\"date\":\"2023-02-21\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.25\"},{\"name\":\"nodejs\",\"version\":\"19.8.0\",\"date\":\"2023-03-14\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.25\"},{\"name\":\"nodejs\",\"version\":\"19.9.0\",\"date\":\"2023-04-10\",\"lts\":false,\"security\":false,\"v8\":\"10.8.168.25\"},{\"name\":\"nodejs\",\"version\":\"20.0.0\",\"date\":\"2023-04-17\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.4\"},{\"name\":\"nodejs\",\"version\":\"20.1.0\",\"date\":\"2023-05-03\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.2.0\",\"date\":\"2023-05-16\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.3.0\",\"date\":\"2023-06-08\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.4.0\",\"date\":\"2023-07-04\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.5.0\",\"date\":\"2023-07-19\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.6.0\",\"date\":\"2023-08-23\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.7.0\",\"date\":\"2023-09-18\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.8.0\",\"date\":\"2023-09-28\",\"lts\":false,\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.9.0\",\"date\":\"2023-10-24\",\"lts\":\"Iron\",\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.10.0\",\"date\":\"2023-11-22\",\"lts\":\"Iron\",\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.11.0\",\"date\":\"2024-01-09\",\"lts\":\"Iron\",\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.12.0\",\"date\":\"2024-03-26\",\"lts\":\"Iron\",\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.13.0\",\"date\":\"2024-05-07\",\"lts\":\"Iron\",\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.14.0\",\"date\":\"2024-05-28\",\"lts\":\"Iron\",\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.15.0\",\"date\":\"2024-06-20\",\"lts\":\"Iron\",\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.16.0\",\"date\":\"2024-07-24\",\"lts\":\"Iron\",\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.17.0\",\"date\":\"2024-08-21\",\"lts\":\"Iron\",\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"20.18.0\",\"date\":\"2024-10-03\",\"lts\":\"Iron\",\"security\":false,\"v8\":\"11.3.244.8\"},{\"name\":\"nodejs\",\"version\":\"21.0.0\",\"date\":\"2023-10-17\",\"lts\":false,\"security\":false,\"v8\":\"11.8.172.13\"},{\"name\":\"nodejs\",\"version\":\"21.1.0\",\"date\":\"2023-10-24\",\"lts\":false,\"security\":false,\"v8\":\"11.8.172.15\"},{\"name\":\"nodejs\",\"version\":\"21.2.0\",\"date\":\"2023-11-14\",\"lts\":false,\"security\":false,\"v8\":\"11.8.172.17\"},{\"name\":\"nodejs\",\"version\":\"21.3.0\",\"date\":\"2023-11-30\",\"lts\":false,\"security\":false,\"v8\":\"11.8.172.17\"},{\"name\":\"nodejs\",\"version\":\"21.4.0\",\"date\":\"2023-12-05\",\"lts\":false,\"security\":false,\"v8\":\"11.8.172.17\"},{\"name\":\"nodejs\",\"version\":\"21.5.0\",\"date\":\"2023-12-19\",\"lts\":false,\"security\":false,\"v8\":\"11.8.172.17\"},{\"name\":\"nodejs\",\"version\":\"21.6.0\",\"date\":\"2024-01-14\",\"lts\":false,\"security\":false,\"v8\":\"11.8.172.17\"},{\"name\":\"nodejs\",\"version\":\"21.7.0\",\"date\":\"2024-03-06\",\"lts\":false,\"security\":false,\"v8\":\"11.8.172.17\"},{\"name\":\"nodejs\",\"version\":\"22.0.0\",\"date\":\"2024-04-24\",\"lts\":false,\"security\":false,\"v8\":\"12.4.254.14\"},{\"name\":\"nodejs\",\"version\":\"22.1.0\",\"date\":\"2024-05-02\",\"lts\":false,\"security\":false,\"v8\":\"12.4.254.14\"},{\"name\":\"nodejs\",\"version\":\"22.2.0\",\"date\":\"2024-05-15\",\"lts\":false,\"security\":false,\"v8\":\"12.4.254.14\"},{\"name\":\"nodejs\",\"version\":\"22.3.0\",\"date\":\"2024-06-11\",\"lts\":false,\"security\":false,\"v8\":\"12.4.254.20\"},{\"name\":\"nodejs\",\"version\":\"22.4.0\",\"date\":\"2024-07-02\",\"lts\":false,\"security\":false,\"v8\":\"12.4.254.21\"},{\"name\":\"nodejs\",\"version\":\"22.5.0\",\"date\":\"2024-07-17\",\"lts\":false,\"security\":false,\"v8\":\"12.4.254.21\"},{\"name\":\"nodejs\",\"version\":\"22.6.0\",\"date\":\"2024-08-06\",\"lts\":false,\"security\":false,\"v8\":\"12.4.254.21\"},{\"name\":\"nodejs\",\"version\":\"22.7.0\",\"date\":\"2024-08-21\",\"lts\":false,\"security\":false,\"v8\":\"12.4.254.21\"},{\"name\":\"nodejs\",\"version\":\"22.8.0\",\"date\":\"2024-09-03\",\"lts\":false,\"security\":false,\"v8\":\"12.4.254.21\"},{\"name\":\"nodejs\",\"version\":\"22.9.0\",\"date\":\"2024-09-17\",\"lts\":false,\"security\":false,\"v8\":\"12.4.254.21\"},{\"name\":\"nodejs\",\"version\":\"22.10.0\",\"date\":\"2024-10-16\",\"lts\":false,\"security\":false,\"v8\":\"12.4.254.21\"},{\"name\":\"nodejs\",\"version\":\"22.11.0\",\"date\":\"2024-10-29\",\"lts\":\"Jod\",\"security\":false,\"v8\":\"12.4.254.21\"},{\"name\":\"nodejs\",\"version\":\"22.12.0\",\"date\":\"2024-12-02\",\"lts\":\"Jod\",\"security\":false,\"v8\":\"12.4.254.21\"},{\"name\":\"nodejs\",\"version\":\"23.0.0\",\"date\":\"2024-10-16\",\"lts\":false,\"security\":false,\"v8\":\"12.9.202.26\"},{\"name\":\"nodejs\",\"version\":\"23.1.0\",\"date\":\"2024-10-24\",\"lts\":false,\"security\":false,\"v8\":\"12.9.202.28\"},{\"name\":\"nodejs\",\"version\":\"23.2.0\",\"date\":\"2024-11-11\",\"lts\":false,\"security\":false,\"v8\":\"12.9.202.28\"},{\"name\":\"nodejs\",\"version\":\"23.3.0\",\"date\":\"2024-11-20\",\"lts\":false,\"security\":false,\"v8\":\"12.9.202.28\"}]"));}}),
"[project]/node_modules/node-releases/data/release-schedule/release-schedule.json (json)": ((__turbopack_context__) => {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_export_value__(JSON.parse("{\"v0.8\":{\"start\":\"2012-06-25\",\"end\":\"2014-07-31\"},\"v0.10\":{\"start\":\"2013-03-11\",\"end\":\"2016-10-31\"},\"v0.12\":{\"start\":\"2015-02-06\",\"end\":\"2016-12-31\"},\"v4\":{\"start\":\"2015-09-08\",\"lts\":\"2015-10-12\",\"maintenance\":\"2017-04-01\",\"end\":\"2018-04-30\",\"codename\":\"Argon\"},\"v5\":{\"start\":\"2015-10-29\",\"maintenance\":\"2016-04-30\",\"end\":\"2016-06-30\"},\"v6\":{\"start\":\"2016-04-26\",\"lts\":\"2016-10-18\",\"maintenance\":\"2018-04-30\",\"end\":\"2019-04-30\",\"codename\":\"Boron\"},\"v7\":{\"start\":\"2016-10-25\",\"maintenance\":\"2017-04-30\",\"end\":\"2017-06-30\"},\"v8\":{\"start\":\"2017-05-30\",\"lts\":\"2017-10-31\",\"maintenance\":\"2019-01-01\",\"end\":\"2019-12-31\",\"codename\":\"Carbon\"},\"v9\":{\"start\":\"2017-10-01\",\"maintenance\":\"2018-04-01\",\"end\":\"2018-06-30\"},\"v10\":{\"start\":\"2018-04-24\",\"lts\":\"2018-10-30\",\"maintenance\":\"2020-05-19\",\"end\":\"2021-04-30\",\"codename\":\"Dubnium\"},\"v11\":{\"start\":\"2018-10-23\",\"maintenance\":\"2019-04-22\",\"end\":\"2019-06-01\"},\"v12\":{\"start\":\"2019-04-23\",\"lts\":\"2019-10-21\",\"maintenance\":\"2020-11-30\",\"end\":\"2022-04-30\",\"codename\":\"Erbium\"},\"v13\":{\"start\":\"2019-10-22\",\"maintenance\":\"2020-04-01\",\"end\":\"2020-06-01\"},\"v14\":{\"start\":\"2020-04-21\",\"lts\":\"2020-10-27\",\"maintenance\":\"2021-10-19\",\"end\":\"2023-04-30\",\"codename\":\"Fermium\"},\"v15\":{\"start\":\"2020-10-20\",\"maintenance\":\"2021-04-01\",\"end\":\"2021-06-01\"},\"v16\":{\"start\":\"2021-04-20\",\"lts\":\"2021-10-26\",\"maintenance\":\"2022-10-18\",\"end\":\"2023-09-11\",\"codename\":\"Gallium\"},\"v17\":{\"start\":\"2021-10-19\",\"maintenance\":\"2022-04-01\",\"end\":\"2022-06-01\"},\"v18\":{\"start\":\"2022-04-19\",\"lts\":\"2022-10-25\",\"maintenance\":\"2023-10-18\",\"end\":\"2025-04-30\",\"codename\":\"Hydrogen\"},\"v19\":{\"start\":\"2022-10-18\",\"maintenance\":\"2023-04-01\",\"end\":\"2023-06-01\"},\"v20\":{\"start\":\"2023-04-18\",\"lts\":\"2023-10-24\",\"maintenance\":\"2024-10-22\",\"end\":\"2026-04-30\",\"codename\":\"Iron\"},\"v21\":{\"start\":\"2023-10-17\",\"maintenance\":\"2024-04-01\",\"end\":\"2024-06-01\"},\"v22\":{\"start\":\"2024-04-24\",\"lts\":\"2024-10-29\",\"maintenance\":\"2025-10-21\",\"end\":\"2027-04-30\",\"codename\":\"Jod\"},\"v23\":{\"start\":\"2024-10-16\",\"maintenance\":\"2025-04-01\",\"end\":\"2025-06-01\"},\"v24\":{\"start\":\"2025-04-22\",\"lts\":\"2025-10-28\",\"maintenance\":\"2026-10-20\",\"end\":\"2028-04-30\",\"codename\":\"\"}}"));}}),
"[project]/node_modules/caniuse-lite/data/browsers.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = {
    A: "ie",
    B: "edge",
    C: "firefox",
    D: "chrome",
    E: "safari",
    F: "opera",
    G: "ios_saf",
    H: "op_mini",
    I: "android",
    J: "bb",
    K: "op_mob",
    L: "and_chr",
    M: "and_ff",
    N: "ie_mob",
    O: "and_uc",
    P: "samsung",
    Q: "and_qq",
    R: "baidu",
    S: "kaios"
};
}}),
"[project]/node_modules/caniuse-lite/dist/unpacker/browsers.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports.browsers = __turbopack_require__("[project]/node_modules/caniuse-lite/data/browsers.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/caniuse-lite/data/browserVersions.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = {
    "0": "22",
    "1": "23",
    "2": "24",
    "3": "25",
    "4": "26",
    "5": "27",
    "6": "115",
    "7": "116",
    "8": "117",
    "9": "118",
    A: "10",
    B: "11",
    C: "12",
    D: "7",
    E: "8",
    F: "9",
    G: "15",
    H: "80",
    I: "131",
    J: "4",
    K: "6",
    L: "13",
    M: "14",
    N: "16",
    O: "17",
    P: "18",
    Q: "79",
    R: "81",
    S: "83",
    T: "84",
    U: "85",
    V: "86",
    W: "87",
    X: "88",
    Y: "89",
    Z: "90",
    a: "91",
    b: "92",
    c: "93",
    d: "94",
    e: "95",
    f: "96",
    g: "97",
    h: "98",
    i: "99",
    j: "100",
    k: "101",
    l: "102",
    m: "103",
    n: "104",
    o: "105",
    p: "106",
    q: "107",
    r: "108",
    s: "109",
    t: "110",
    u: "111",
    v: "112",
    w: "113",
    x: "114",
    y: "20",
    z: "21",
    AB: "119",
    BB: "120",
    CB: "121",
    DB: "122",
    EB: "123",
    FB: "124",
    GB: "125",
    HB: "126",
    IB: "127",
    JB: "128",
    KB: "129",
    LB: "130",
    MB: "5",
    NB: "19",
    OB: "28",
    PB: "29",
    QB: "30",
    RB: "31",
    SB: "32",
    TB: "33",
    UB: "34",
    VB: "35",
    WB: "36",
    XB: "37",
    YB: "38",
    ZB: "39",
    aB: "40",
    bB: "41",
    cB: "42",
    dB: "43",
    eB: "44",
    fB: "45",
    gB: "46",
    hB: "47",
    iB: "48",
    jB: "49",
    kB: "50",
    lB: "51",
    mB: "52",
    nB: "53",
    oB: "54",
    pB: "55",
    qB: "56",
    rB: "57",
    sB: "58",
    tB: "60",
    uB: "62",
    vB: "63",
    wB: "64",
    xB: "65",
    yB: "66",
    zB: "67",
    "0B": "68",
    "1B": "69",
    "2B": "70",
    "3B": "71",
    "4B": "72",
    "5B": "73",
    "6B": "74",
    "7B": "75",
    "8B": "76",
    "9B": "77",
    AC: "78",
    BC: "132",
    CC: "11.1",
    DC: "12.1",
    EC: "15.5",
    FC: "16.0",
    GC: "17.0",
    HC: "18.0",
    IC: "3",
    JC: "59",
    KC: "61",
    LC: "82",
    MC: "133",
    NC: "134",
    OC: "3.2",
    PC: "10.1",
    QC: "15.2-15.3",
    RC: "15.4",
    SC: "16.1",
    TC: "16.2",
    UC: "16.3",
    VC: "16.4",
    WC: "16.5",
    XC: "17.1",
    YC: "17.2",
    ZC: "17.3",
    aC: "17.4",
    bC: "17.5",
    cC: "18.1",
    dC: "18.2",
    eC: "18.3",
    fC: "11.5",
    gC: "4.2-4.3",
    hC: "5.5",
    iC: "2",
    jC: "135",
    kC: "136",
    lC: "3.5",
    mC: "3.6",
    nC: "3.1",
    oC: "5.1",
    pC: "6.1",
    qC: "7.1",
    rC: "9.1",
    sC: "13.1",
    tC: "14.1",
    uC: "15.1",
    vC: "15.6",
    wC: "16.6",
    xC: "17.6",
    yC: "TP",
    zC: "9.5-9.6",
    "0C": "10.0-10.1",
    "1C": "10.5",
    "2C": "10.6",
    "3C": "11.6",
    "4C": "4.0-4.1",
    "5C": "5.0-5.1",
    "6C": "6.0-6.1",
    "7C": "7.0-7.1",
    "8C": "8.1-8.4",
    "9C": "9.0-9.2",
    AD: "9.3",
    BD: "10.0-10.2",
    CD: "10.3",
    DD: "11.0-11.2",
    ED: "11.3-11.4",
    FD: "12.0-12.1",
    GD: "12.2-12.5",
    HD: "13.0-13.1",
    ID: "13.2",
    JD: "13.3",
    KD: "13.4-13.7",
    LD: "14.0-14.4",
    MD: "14.5-14.8",
    ND: "15.0-15.1",
    OD: "15.6-15.8",
    PD: "16.6-16.7",
    QD: "17.6-17.7",
    RD: "all",
    SD: "2.1",
    TD: "2.2",
    UD: "2.3",
    VD: "4.1",
    WD: "4.4",
    XD: "4.4.3-4.4.4",
    YD: "5.0-5.4",
    ZD: "6.2-6.4",
    aD: "7.2-7.4",
    bD: "8.2",
    cD: "9.2",
    dD: "11.1-11.2",
    eD: "12.0",
    fD: "13.0",
    gD: "14.0",
    hD: "15.0",
    iD: "19.0",
    jD: "14.9",
    kD: "13.52",
    lD: "2.5",
    mD: "3.0-3.1"
};
}}),
"[project]/node_modules/caniuse-lite/dist/unpacker/browserVersions.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports.browserVersions = __turbopack_require__("[project]/node_modules/caniuse-lite/data/browserVersions.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/caniuse-lite/data/agents.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = {
    A: {
        A: {
            K: 0,
            D: 0,
            E: 0.0155714,
            F: 0.0311427,
            A: 0,
            B: 0.373713,
            hC: 0
        },
        B: "ms",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "hC",
            "K",
            "D",
            "E",
            "F",
            "A",
            "B",
            "",
            "",
            ""
        ],
        E: "IE",
        F: {
            hC: 962323200,
            K: 998870400,
            D: 1161129600,
            E: 1237420800,
            F: 1300060800,
            A: 1346716800,
            B: 1381968000
        }
    },
    B: {
        A: {
            "6": 0.003533,
            "7": 0.003533,
            "8": 0.007066,
            "9": 0.003533,
            C: 0,
            L: 0,
            M: 0,
            G: 0,
            N: 0,
            O: 0.003533,
            P: 0.056528,
            Q: 0,
            H: 0,
            R: 0,
            S: 0,
            T: 0,
            U: 0,
            V: 0,
            W: 0,
            X: 0,
            Y: 0,
            Z: 0,
            a: 0,
            b: 0.014132,
            c: 0,
            d: 0,
            e: 0,
            f: 0,
            g: 0,
            h: 0,
            i: 0,
            j: 0,
            k: 0,
            l: 0,
            m: 0,
            n: 0,
            o: 0,
            p: 0,
            q: 0,
            r: 0.003533,
            s: 0.052995,
            t: 0.003533,
            u: 0.003533,
            v: 0.003533,
            w: 0.007066,
            x: 0.010599,
            AB: 0.007066,
            BB: 0.028264,
            CB: 0.010599,
            DB: 0.014132,
            EB: 0.007066,
            FB: 0.010599,
            GB: 0.014132,
            HB: 0.028264,
            IB: 0.028264,
            JB: 0.038863,
            KB: 0.144853,
            LB: 2.5049,
            I: 1.55805
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "C",
            "L",
            "M",
            "G",
            "N",
            "O",
            "P",
            "Q",
            "H",
            "R",
            "S",
            "T",
            "U",
            "V",
            "W",
            "X",
            "Y",
            "Z",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j",
            "k",
            "l",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "s",
            "t",
            "u",
            "v",
            "w",
            "x",
            "6",
            "7",
            "8",
            "9",
            "AB",
            "BB",
            "CB",
            "DB",
            "EB",
            "FB",
            "GB",
            "HB",
            "IB",
            "JB",
            "KB",
            "LB",
            "I",
            "",
            "",
            ""
        ],
        E: "Edge",
        F: {
            "6": 1689897600,
            "7": 1692576000,
            "8": 1694649600,
            "9": 1697155200,
            C: 1438128000,
            L: 1447286400,
            M: 1470096000,
            G: 1491868800,
            N: 1508198400,
            O: 1525046400,
            P: 1542067200,
            Q: 1579046400,
            H: 1581033600,
            R: 1586736000,
            S: 1590019200,
            T: 1594857600,
            U: 1598486400,
            V: 1602201600,
            W: 1605830400,
            X: 1611360000,
            Y: 1614816000,
            Z: 1618358400,
            a: 1622073600,
            b: 1626912000,
            c: 1630627200,
            d: 1632441600,
            e: 1634774400,
            f: 1637539200,
            g: 1641427200,
            h: 1643932800,
            i: 1646265600,
            j: 1649635200,
            k: 1651190400,
            l: 1653955200,
            m: 1655942400,
            n: 1659657600,
            o: 1661990400,
            p: 1664755200,
            q: 1666915200,
            r: 1670198400,
            s: 1673481600,
            t: 1675900800,
            u: 1678665600,
            v: 1680825600,
            w: 1683158400,
            x: 1685664000,
            AB: 1698969600,
            BB: 1701993600,
            CB: 1706227200,
            DB: 1708732800,
            EB: 1711152000,
            FB: 1713398400,
            GB: 1715990400,
            HB: 1718841600,
            IB: 1721865600,
            JB: 1724371200,
            KB: 1726704000,
            LB: 1729123200,
            I: 1731542400
        },
        D: {
            C: "ms",
            L: "ms",
            M: "ms",
            G: "ms",
            N: "ms",
            O: "ms",
            P: "ms"
        }
    },
    C: {
        A: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0.250843,
            "7": 0,
            "8": 0,
            "9": 0.07066,
            iC: 0,
            IC: 0,
            J: 0,
            MB: 0,
            K: 0,
            D: 0,
            E: 0,
            F: 0,
            A: 0,
            B: 0.014132,
            C: 0,
            L: 0,
            M: 0,
            G: 0,
            N: 0,
            O: 0,
            P: 0,
            NB: 0,
            y: 0,
            z: 0,
            OB: 0,
            PB: 0,
            QB: 0,
            RB: 0,
            SB: 0,
            TB: 0,
            UB: 0,
            VB: 0,
            WB: 0,
            XB: 0,
            YB: 0,
            ZB: 0,
            aB: 0,
            bB: 0,
            cB: 0,
            dB: 0.003533,
            eB: 0.007066,
            fB: 0,
            gB: 0,
            hB: 0,
            iB: 0,
            jB: 0,
            kB: 0,
            lB: 0,
            mB: 0.024731,
            nB: 0,
            oB: 0,
            pB: 0.003533,
            qB: 0.014132,
            rB: 0,
            sB: 0,
            JC: 0.003533,
            tB: 0,
            KC: 0,
            uB: 0,
            vB: 0,
            wB: 0,
            xB: 0,
            yB: 0,
            zB: 0,
            "0B": 0,
            "1B": 0,
            "2B": 0,
            "3B": 0,
            "4B": 0.003533,
            "5B": 0,
            "6B": 0,
            "7B": 0,
            "8B": 0,
            "9B": 0,
            AC: 0.010599,
            Q: 0,
            H: 0,
            R: 0,
            LC: 0,
            S: 0,
            T: 0,
            U: 0,
            V: 0,
            W: 0,
            X: 0.003533,
            Y: 0,
            Z: 0,
            a: 0,
            b: 0,
            c: 0,
            d: 0,
            e: 0,
            f: 0,
            g: 0,
            h: 0,
            i: 0,
            j: 0,
            k: 0,
            l: 0.003533,
            m: 0.007066,
            n: 0,
            o: 0,
            p: 0,
            q: 0,
            r: 0,
            s: 0.003533,
            t: 0,
            u: 0,
            v: 0,
            w: 0.007066,
            x: 0,
            AB: 0,
            BB: 0.007066,
            CB: 0,
            DB: 0,
            EB: 0.003533,
            FB: 0,
            GB: 0.017665,
            HB: 0.010599,
            IB: 0.014132,
            JB: 0.07066,
            KB: 0.010599,
            LB: 0.017665,
            I: 0.113056,
            BC: 1.36727,
            MC: 0.113056,
            NC: 0,
            jC: 0,
            kC: 0,
            lC: 0,
            mC: 0
        },
        B: "moz",
        C: [
            "iC",
            "IC",
            "lC",
            "mC",
            "J",
            "MB",
            "K",
            "D",
            "E",
            "F",
            "A",
            "B",
            "C",
            "L",
            "M",
            "G",
            "N",
            "O",
            "P",
            "NB",
            "y",
            "z",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "OB",
            "PB",
            "QB",
            "RB",
            "SB",
            "TB",
            "UB",
            "VB",
            "WB",
            "XB",
            "YB",
            "ZB",
            "aB",
            "bB",
            "cB",
            "dB",
            "eB",
            "fB",
            "gB",
            "hB",
            "iB",
            "jB",
            "kB",
            "lB",
            "mB",
            "nB",
            "oB",
            "pB",
            "qB",
            "rB",
            "sB",
            "JC",
            "tB",
            "KC",
            "uB",
            "vB",
            "wB",
            "xB",
            "yB",
            "zB",
            "0B",
            "1B",
            "2B",
            "3B",
            "4B",
            "5B",
            "6B",
            "7B",
            "8B",
            "9B",
            "AC",
            "Q",
            "H",
            "R",
            "LC",
            "S",
            "T",
            "U",
            "V",
            "W",
            "X",
            "Y",
            "Z",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j",
            "k",
            "l",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "s",
            "t",
            "u",
            "v",
            "w",
            "x",
            "6",
            "7",
            "8",
            "9",
            "AB",
            "BB",
            "CB",
            "DB",
            "EB",
            "FB",
            "GB",
            "HB",
            "IB",
            "JB",
            "KB",
            "LB",
            "I",
            "BC",
            "MC",
            "NC",
            "jC",
            "kC"
        ],
        E: "Firefox",
        F: {
            "0": 1368489600,
            "1": 1372118400,
            "2": 1375747200,
            "3": 1379376000,
            "4": 1386633600,
            "5": 1391472000,
            "6": 1688428800,
            "7": 1690848000,
            "8": 1693267200,
            "9": 1695686400,
            iC: 1161648000,
            IC: 1213660800,
            lC: 1246320000,
            mC: 1264032000,
            J: 1300752000,
            MB: 1308614400,
            K: 1313452800,
            D: 1317081600,
            E: 1317081600,
            F: 1320710400,
            A: 1324339200,
            B: 1327968000,
            C: 1331596800,
            L: 1335225600,
            M: 1338854400,
            G: 1342483200,
            N: 1346112000,
            O: 1349740800,
            P: 1353628800,
            NB: 1357603200,
            y: 1361232000,
            z: 1364860800,
            OB: 1395100800,
            PB: 1398729600,
            QB: 1402358400,
            RB: 1405987200,
            SB: 1409616000,
            TB: 1413244800,
            UB: 1417392000,
            VB: 1421107200,
            WB: 1424736000,
            XB: 1428278400,
            YB: 1431475200,
            ZB: 1435881600,
            aB: 1439251200,
            bB: 1442880000,
            cB: 1446508800,
            dB: 1450137600,
            eB: 1453852800,
            fB: 1457395200,
            gB: 1461628800,
            hB: 1465257600,
            iB: 1470096000,
            jB: 1474329600,
            kB: 1479168000,
            lB: 1485216000,
            mB: 1488844800,
            nB: 1492560000,
            oB: 1497312000,
            pB: 1502150400,
            qB: 1506556800,
            rB: 1510617600,
            sB: 1516665600,
            JC: 1520985600,
            tB: 1525824000,
            KC: 1529971200,
            uB: 1536105600,
            vB: 1540252800,
            wB: 1544486400,
            xB: 1548720000,
            yB: 1552953600,
            zB: 1558396800,
            "0B": 1562630400,
            "1B": 1567468800,
            "2B": 1571788800,
            "3B": 1575331200,
            "4B": 1578355200,
            "5B": 1581379200,
            "6B": 1583798400,
            "7B": 1586304000,
            "8B": 1588636800,
            "9B": 1591056000,
            AC: 1593475200,
            Q: 1595894400,
            H: 1598313600,
            R: 1600732800,
            LC: 1603152000,
            S: 1605571200,
            T: 1607990400,
            U: 1611619200,
            V: 1614038400,
            W: 1616457600,
            X: 1618790400,
            Y: 1622505600,
            Z: 1626134400,
            a: 1628553600,
            b: 1630972800,
            c: 1633392000,
            d: 1635811200,
            e: 1638835200,
            f: 1641859200,
            g: 1644364800,
            h: 1646697600,
            i: 1649116800,
            j: 1651536000,
            k: 1653955200,
            l: 1656374400,
            m: 1658793600,
            n: 1661212800,
            o: 1663632000,
            p: 1666051200,
            q: 1668470400,
            r: 1670889600,
            s: 1673913600,
            t: 1676332800,
            u: 1678752000,
            v: 1681171200,
            w: 1683590400,
            x: 1686009600,
            AB: 1698105600,
            BB: 1700524800,
            CB: 1702944000,
            DB: 1705968000,
            EB: 1708387200,
            FB: 1710806400,
            GB: 1713225600,
            HB: 1715644800,
            IB: 1718064000,
            JB: 1720483200,
            KB: 1722902400,
            LB: 1725321600,
            I: 1727740800,
            BC: 1730160000,
            MC: 1732579200,
            NC: null,
            jC: null,
            kC: null
        }
    },
    D: {
        A: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0.021198,
            "7": 0.14132,
            "8": 0.063594,
            "9": 0.063594,
            J: 0,
            MB: 0,
            K: 0,
            D: 0,
            E: 0,
            F: 0,
            A: 0,
            B: 0,
            C: 0,
            L: 0,
            M: 0,
            G: 0,
            N: 0,
            O: 0,
            P: 0,
            NB: 0,
            y: 0,
            z: 0,
            OB: 0,
            PB: 0,
            QB: 0,
            RB: 0,
            SB: 0,
            TB: 0,
            UB: 0,
            VB: 0,
            WB: 0,
            XB: 0,
            YB: 0.007066,
            ZB: 0,
            aB: 0,
            bB: 0,
            cB: 0,
            dB: 0,
            eB: 0,
            fB: 0.003533,
            gB: 0,
            hB: 0.003533,
            iB: 0.017665,
            jB: 0.014132,
            kB: 0.007066,
            lB: 0,
            mB: 0.003533,
            nB: 0.003533,
            oB: 0,
            pB: 0,
            qB: 0.010599,
            rB: 0,
            sB: 0.014132,
            JC: 0,
            tB: 0.003533,
            KC: 0.010599,
            uB: 0,
            vB: 0,
            wB: 0,
            xB: 0,
            yB: 0.017665,
            zB: 0,
            "0B": 0,
            "1B": 0.056528,
            "2B": 0.010599,
            "3B": 0,
            "4B": 0,
            "5B": 0.007066,
            "6B": 0.017665,
            "7B": 0.007066,
            "8B": 0.007066,
            "9B": 0.014132,
            AC: 0.014132,
            Q: 0.084792,
            H: 0.010599,
            R: 0.031797,
            S: 0.028264,
            T: 0.003533,
            U: 0.010599,
            V: 0.024731,
            W: 0.060061,
            X: 0.010599,
            Y: 0.010599,
            Z: 0.007066,
            a: 0.045929,
            b: 0.031797,
            c: 0.010599,
            d: 0.038863,
            e: 0.038863,
            f: 0.007066,
            g: 0.010599,
            h: 0.03533,
            i: 0.010599,
            j: 0.017665,
            k: 0.014132,
            l: 0.010599,
            m: 0.102457,
            n: 0.03533,
            o: 0.010599,
            p: 0.021198,
            q: 0.021198,
            r: 0.03533,
            s: 1.18002,
            t: 0.017665,
            u: 0.031797,
            v: 0.031797,
            w: 0.084792,
            x: 0.074193,
            AB: 0.042396,
            BB: 0.07066,
            CB: 0.095391,
            DB: 0.084792,
            EB: 0.095391,
            FB: 0.144853,
            GB: 0.731331,
            HB: 0.349767,
            IB: 0.261442,
            JB: 0.293239,
            KB: 0.907981,
            LB: 10.274,
            I: 5.69166,
            BC: 0.014132,
            MC: 0.007066,
            NC: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "J",
            "MB",
            "K",
            "D",
            "E",
            "F",
            "A",
            "B",
            "C",
            "L",
            "M",
            "G",
            "N",
            "O",
            "P",
            "NB",
            "y",
            "z",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "OB",
            "PB",
            "QB",
            "RB",
            "SB",
            "TB",
            "UB",
            "VB",
            "WB",
            "XB",
            "YB",
            "ZB",
            "aB",
            "bB",
            "cB",
            "dB",
            "eB",
            "fB",
            "gB",
            "hB",
            "iB",
            "jB",
            "kB",
            "lB",
            "mB",
            "nB",
            "oB",
            "pB",
            "qB",
            "rB",
            "sB",
            "JC",
            "tB",
            "KC",
            "uB",
            "vB",
            "wB",
            "xB",
            "yB",
            "zB",
            "0B",
            "1B",
            "2B",
            "3B",
            "4B",
            "5B",
            "6B",
            "7B",
            "8B",
            "9B",
            "AC",
            "Q",
            "H",
            "R",
            "S",
            "T",
            "U",
            "V",
            "W",
            "X",
            "Y",
            "Z",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j",
            "k",
            "l",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "s",
            "t",
            "u",
            "v",
            "w",
            "x",
            "6",
            "7",
            "8",
            "9",
            "AB",
            "BB",
            "CB",
            "DB",
            "EB",
            "FB",
            "GB",
            "HB",
            "IB",
            "JB",
            "KB",
            "LB",
            "I",
            "BC",
            "MC",
            "NC"
        ],
        E: "Chrome",
        F: {
            "0": 1343692800,
            "1": 1348531200,
            "2": 1352246400,
            "3": 1357862400,
            "4": 1361404800,
            "5": 1364428800,
            "6": 1689724800,
            "7": 1692057600,
            "8": 1694476800,
            "9": 1696896000,
            J: 1264377600,
            MB: 1274745600,
            K: 1283385600,
            D: 1287619200,
            E: 1291248000,
            F: 1296777600,
            A: 1299542400,
            B: 1303862400,
            C: 1307404800,
            L: 1312243200,
            M: 1316131200,
            G: 1316131200,
            N: 1319500800,
            O: 1323734400,
            P: 1328659200,
            NB: 1332892800,
            y: 1337040000,
            z: 1340668800,
            OB: 1369094400,
            PB: 1374105600,
            QB: 1376956800,
            RB: 1384214400,
            SB: 1389657600,
            TB: 1392940800,
            UB: 1397001600,
            VB: 1400544000,
            WB: 1405468800,
            XB: 1409011200,
            YB: 1412640000,
            ZB: 1416268800,
            aB: 1421798400,
            bB: 1425513600,
            cB: 1429401600,
            dB: 1432080000,
            eB: 1437523200,
            fB: 1441152000,
            gB: 1444780800,
            hB: 1449014400,
            iB: 1453248000,
            jB: 1456963200,
            kB: 1460592000,
            lB: 1464134400,
            mB: 1469059200,
            nB: 1472601600,
            oB: 1476230400,
            pB: 1480550400,
            qB: 1485302400,
            rB: 1489017600,
            sB: 1492560000,
            JC: 1496707200,
            tB: 1500940800,
            KC: 1504569600,
            uB: 1508198400,
            vB: 1512518400,
            wB: 1516752000,
            xB: 1520294400,
            yB: 1523923200,
            zB: 1527552000,
            "0B": 1532390400,
            "1B": 1536019200,
            "2B": 1539648000,
            "3B": 1543968000,
            "4B": 1548720000,
            "5B": 1552348800,
            "6B": 1555977600,
            "7B": 1559606400,
            "8B": 1564444800,
            "9B": 1568073600,
            AC: 1571702400,
            Q: 1575936000,
            H: 1580860800,
            R: 1586304000,
            S: 1589846400,
            T: 1594684800,
            U: 1598313600,
            V: 1601942400,
            W: 1605571200,
            X: 1611014400,
            Y: 1614556800,
            Z: 1618272000,
            a: 1621987200,
            b: 1626739200,
            c: 1630368000,
            d: 1632268800,
            e: 1634601600,
            f: 1637020800,
            g: 1641340800,
            h: 1643673600,
            i: 1646092800,
            j: 1648512000,
            k: 1650931200,
            l: 1653350400,
            m: 1655769600,
            n: 1659398400,
            o: 1661817600,
            p: 1664236800,
            q: 1666656000,
            r: 1669680000,
            s: 1673308800,
            t: 1675728000,
            u: 1678147200,
            v: 1680566400,
            w: 1682985600,
            x: 1685404800,
            AB: 1698710400,
            BB: 1701993600,
            CB: 1705968000,
            DB: 1708387200,
            EB: 1710806400,
            FB: 1713225600,
            GB: 1715644800,
            HB: 1718064000,
            IB: 1721174400,
            JB: 1724112000,
            KB: 1726531200,
            LB: 1728950400,
            I: 1731369600,
            BC: null,
            MC: null,
            NC: null
        }
    },
    E: {
        A: {
            J: 0,
            MB: 0,
            K: 0,
            D: 0,
            E: 0,
            F: 0,
            A: 0,
            B: 0,
            C: 0,
            L: 0.003533,
            M: 0.021198,
            G: 0.007066,
            nC: 0,
            OC: 0,
            oC: 0,
            pC: 0,
            qC: 0,
            rC: 0,
            PC: 0,
            CC: 0.003533,
            DC: 0.007066,
            sC: 0.049462,
            tC: 0.060061,
            uC: 0.017665,
            QC: 0.007066,
            RC: 0.017665,
            EC: 0.021198,
            vC: 0.180183,
            FC: 0.024731,
            SC: 0.031797,
            TC: 0.024731,
            UC: 0.056528,
            VC: 0.021198,
            WC: 0.03533,
            wC: 0.24731,
            GC: 0.014132,
            XC: 0.031797,
            YC: 0.031797,
            ZC: 0.03533,
            aC: 0.084792,
            bC: 0.194315,
            xC: 1.05283,
            HC: 0.28264,
            cC: 0.378031,
            dC: 0.010599,
            eC: 0,
            yC: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "nC",
            "OC",
            "J",
            "MB",
            "oC",
            "K",
            "pC",
            "D",
            "qC",
            "E",
            "F",
            "rC",
            "A",
            "PC",
            "B",
            "CC",
            "C",
            "DC",
            "L",
            "sC",
            "M",
            "tC",
            "G",
            "uC",
            "QC",
            "RC",
            "EC",
            "vC",
            "FC",
            "SC",
            "TC",
            "UC",
            "VC",
            "WC",
            "wC",
            "GC",
            "XC",
            "YC",
            "ZC",
            "aC",
            "bC",
            "xC",
            "HC",
            "cC",
            "dC",
            "eC",
            "yC",
            ""
        ],
        E: "Safari",
        F: {
            nC: 1205798400,
            OC: 1226534400,
            J: 1244419200,
            MB: 1275868800,
            oC: 1311120000,
            K: 1343174400,
            pC: 1382400000,
            D: 1382400000,
            qC: 1410998400,
            E: 1413417600,
            F: 1443657600,
            rC: 1458518400,
            A: 1474329600,
            PC: 1490572800,
            B: 1505779200,
            CC: 1522281600,
            C: 1537142400,
            DC: 1553472000,
            L: 1568851200,
            sC: 1585008000,
            M: 1600214400,
            tC: 1619395200,
            G: 1632096000,
            uC: 1635292800,
            QC: 1639353600,
            RC: 1647216000,
            EC: 1652745600,
            vC: 1658275200,
            FC: 1662940800,
            SC: 1666569600,
            TC: 1670889600,
            UC: 1674432000,
            VC: 1679875200,
            WC: 1684368000,
            wC: 1690156800,
            GC: 1695686400,
            XC: 1698192000,
            YC: 1702252800,
            ZC: 1705881600,
            aC: 1709596800,
            bC: 1715558400,
            xC: 1722211200,
            HC: 1726444800,
            cC: 1730073600,
            dC: 1733875200,
            eC: null,
            yC: null
        }
    },
    F: {
        A: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            F: 0,
            B: 0,
            C: 0,
            G: 0,
            N: 0,
            O: 0,
            P: 0,
            NB: 0,
            y: 0,
            z: 0,
            OB: 0,
            PB: 0,
            QB: 0,
            RB: 0,
            SB: 0,
            TB: 0,
            UB: 0,
            VB: 0,
            WB: 0,
            XB: 0,
            YB: 0,
            ZB: 0,
            aB: 0.003533,
            bB: 0,
            cB: 0,
            dB: 0,
            eB: 0,
            fB: 0,
            gB: 0.014132,
            hB: 0,
            iB: 0,
            jB: 0,
            kB: 0,
            lB: 0,
            mB: 0,
            nB: 0,
            oB: 0,
            pB: 0,
            qB: 0,
            rB: 0,
            sB: 0,
            tB: 0,
            uB: 0,
            vB: 0,
            wB: 0,
            xB: 0,
            yB: 0,
            zB: 0,
            "0B": 0,
            "1B": 0,
            "2B": 0,
            "3B": 0,
            "4B": 0,
            "5B": 0,
            "6B": 0,
            "7B": 0,
            "8B": 0,
            "9B": 0,
            AC: 0,
            Q: 0,
            H: 0,
            R: 0,
            LC: 0,
            S: 0,
            T: 0,
            U: 0.024731,
            V: 0,
            W: 0,
            X: 0,
            Y: 0,
            Z: 0,
            a: 0,
            b: 0,
            c: 0,
            d: 0,
            e: 0.031797,
            f: 0,
            g: 0,
            h: 0,
            i: 0,
            j: 0,
            k: 0,
            l: 0.028264,
            m: 0,
            n: 0,
            o: 0,
            p: 0,
            q: 0,
            r: 0,
            s: 0,
            t: 0,
            u: 0,
            v: 0,
            w: 0.060061,
            x: 0.770194,
            zC: 0,
            "0C": 0,
            "1C": 0,
            "2C": 0,
            CC: 0,
            fC: 0,
            "3C": 0,
            DC: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "F",
            "zC",
            "0C",
            "1C",
            "2C",
            "B",
            "CC",
            "fC",
            "3C",
            "C",
            "DC",
            "G",
            "N",
            "O",
            "P",
            "NB",
            "y",
            "z",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "OB",
            "PB",
            "QB",
            "RB",
            "SB",
            "TB",
            "UB",
            "VB",
            "WB",
            "XB",
            "YB",
            "ZB",
            "aB",
            "bB",
            "cB",
            "dB",
            "eB",
            "fB",
            "gB",
            "hB",
            "iB",
            "jB",
            "kB",
            "lB",
            "mB",
            "nB",
            "oB",
            "pB",
            "qB",
            "rB",
            "sB",
            "tB",
            "uB",
            "vB",
            "wB",
            "xB",
            "yB",
            "zB",
            "0B",
            "1B",
            "2B",
            "3B",
            "4B",
            "5B",
            "6B",
            "7B",
            "8B",
            "9B",
            "AC",
            "Q",
            "H",
            "R",
            "LC",
            "S",
            "T",
            "U",
            "V",
            "W",
            "X",
            "Y",
            "Z",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j",
            "k",
            "l",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "s",
            "t",
            "u",
            "v",
            "w",
            "x",
            "",
            "",
            ""
        ],
        E: "Opera",
        F: {
            "0": 1401753600,
            "1": 1405987200,
            "2": 1409616000,
            "3": 1413331200,
            "4": 1417132800,
            "5": 1422316800,
            F: 1150761600,
            zC: 1223424000,
            "0C": 1251763200,
            "1C": 1267488000,
            "2C": 1277942400,
            B: 1292457600,
            CC: 1302566400,
            fC: 1309219200,
            "3C": 1323129600,
            C: 1323129600,
            DC: 1352073600,
            G: 1372723200,
            N: 1377561600,
            O: 1381104000,
            P: 1386288000,
            NB: 1390867200,
            y: 1393891200,
            z: 1399334400,
            OB: 1425945600,
            PB: 1430179200,
            QB: 1433808000,
            RB: 1438646400,
            SB: 1442448000,
            TB: 1445904000,
            UB: 1449100800,
            VB: 1454371200,
            WB: 1457308800,
            XB: 1462320000,
            YB: 1465344000,
            ZB: 1470096000,
            aB: 1474329600,
            bB: 1477267200,
            cB: 1481587200,
            dB: 1486425600,
            eB: 1490054400,
            fB: 1494374400,
            gB: 1498003200,
            hB: 1502236800,
            iB: 1506470400,
            jB: 1510099200,
            kB: 1515024000,
            lB: 1517961600,
            mB: 1521676800,
            nB: 1525910400,
            oB: 1530144000,
            pB: 1534982400,
            qB: 1537833600,
            rB: 1543363200,
            sB: 1548201600,
            tB: 1554768000,
            uB: 1561593600,
            vB: 1566259200,
            wB: 1570406400,
            xB: 1573689600,
            yB: 1578441600,
            zB: 1583971200,
            "0B": 1587513600,
            "1B": 1592956800,
            "2B": 1595894400,
            "3B": 1600128000,
            "4B": 1603238400,
            "5B": 1613520000,
            "6B": 1612224000,
            "7B": 1616544000,
            "8B": 1619568000,
            "9B": 1623715200,
            AC: 1627948800,
            Q: 1631577600,
            H: 1633392000,
            R: 1635984000,
            LC: 1638403200,
            S: 1642550400,
            T: 1644969600,
            U: 1647993600,
            V: 1650412800,
            W: 1652745600,
            X: 1654646400,
            Y: 1657152000,
            Z: 1660780800,
            a: 1663113600,
            b: 1668816000,
            c: 1668643200,
            d: 1671062400,
            e: 1675209600,
            f: 1677024000,
            g: 1679529600,
            h: 1681948800,
            i: 1684195200,
            j: 1687219200,
            k: 1690329600,
            l: 1692748800,
            m: 1696204800,
            n: 1699920000,
            o: 1699920000,
            p: 1702944000,
            q: 1707264000,
            r: 1710115200,
            s: 1711497600,
            t: 1716336000,
            u: 1719273600,
            v: 1721088000,
            w: 1724284800,
            x: 1727222400
        },
        D: {
            F: "o",
            B: "o",
            C: "o",
            zC: "o",
            "0C": "o",
            "1C": "o",
            "2C": "o",
            CC: "o",
            fC: "o",
            "3C": "o",
            DC: "o"
        }
    },
    G: {
        A: {
            E: 0,
            OC: 0,
            "4C": 0,
            gC: 0.001479,
            "5C": 0,
            "6C": 0.00591601,
            "7C": 0.00739501,
            "8C": 0,
            "9C": 0.00591601,
            AD: 0.020706,
            BD: 0.00443701,
            CD: 0.0340171,
            DD: 0.399331,
            ED: 0.010353,
            FD: 0.00591601,
            GD: 0.155295,
            HD: 0.00295801,
            ID: 0.0414121,
            JD: 0.00591601,
            KD: 0.022185,
            LD: 0.0902192,
            MD: 0.0695131,
            ND: 0.0399331,
            QC: 0.0369751,
            RC: 0.0443701,
            EC: 0.0517651,
            OD: 0.553147,
            FC: 0.105009,
            SC: 0.220371,
            TC: 0.110925,
            UC: 0.189312,
            VC: 0.0384541,
            WC: 0.0754291,
            PD: 0.72619,
            GC: 0.0532441,
            XC: 0.0887402,
            YC: 0.0739501,
            ZC: 0.112404,
            aC: 0.241077,
            bC: 0.718795,
            QD: 6.20146,
            HC: 2.19928,
            cC: 1.93454,
            dC: 0.0783872,
            eC: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "OC",
            "4C",
            "gC",
            "5C",
            "6C",
            "7C",
            "E",
            "8C",
            "9C",
            "AD",
            "BD",
            "CD",
            "DD",
            "ED",
            "FD",
            "GD",
            "HD",
            "ID",
            "JD",
            "KD",
            "LD",
            "MD",
            "ND",
            "QC",
            "RC",
            "EC",
            "OD",
            "FC",
            "SC",
            "TC",
            "UC",
            "VC",
            "WC",
            "PD",
            "GC",
            "XC",
            "YC",
            "ZC",
            "aC",
            "bC",
            "QD",
            "HC",
            "cC",
            "dC",
            "eC",
            "",
            ""
        ],
        E: "Safari on iOS",
        F: {
            OC: 1270252800,
            "4C": 1283904000,
            gC: 1299628800,
            "5C": 1331078400,
            "6C": 1359331200,
            "7C": 1394409600,
            E: 1410912000,
            "8C": 1413763200,
            "9C": 1442361600,
            AD: 1458518400,
            BD: 1473724800,
            CD: 1490572800,
            DD: 1505779200,
            ED: 1522281600,
            FD: 1537142400,
            GD: 1553472000,
            HD: 1568851200,
            ID: 1572220800,
            JD: 1580169600,
            KD: 1585008000,
            LD: 1600214400,
            MD: 1619395200,
            ND: 1632096000,
            QC: 1639353600,
            RC: 1647216000,
            EC: 1652659200,
            OD: 1658275200,
            FC: 1662940800,
            SC: 1666569600,
            TC: 1670889600,
            UC: 1674432000,
            VC: 1679875200,
            WC: 1684368000,
            PD: 1690156800,
            GC: 1694995200,
            XC: 1698192000,
            YC: 1702252800,
            ZC: 1705881600,
            aC: 1709596800,
            bC: 1715558400,
            QD: 1722211200,
            HC: 1726444800,
            cC: 1730073600,
            dC: 1733875200,
            eC: null
        }
    },
    H: {
        A: {
            RD: 0.04
        },
        B: "o",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "RD",
            "",
            "",
            ""
        ],
        E: "Opera Mini",
        F: {
            RD: 1426464000
        }
    },
    I: {
        A: {
            IC: 0,
            J: 0,
            I: 0.212941,
            SD: 0,
            TD: 0,
            UD: 0,
            VD: 0,
            gC: 0.0000640233,
            WD: 0,
            XD: 0.000277434
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "SD",
            "TD",
            "UD",
            "IC",
            "J",
            "VD",
            "gC",
            "WD",
            "XD",
            "I",
            "",
            "",
            ""
        ],
        E: "Android Browser",
        F: {
            SD: 1256515200,
            TD: 1274313600,
            UD: 1291593600,
            IC: 1298332800,
            J: 1318896000,
            VD: 1341792000,
            gC: 1374624000,
            WD: 1386547200,
            XD: 1401667200,
            I: 1731369600
        }
    },
    J: {
        A: {
            D: 0,
            A: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "D",
            "A",
            "",
            "",
            ""
        ],
        E: "Blackberry Browser",
        F: {
            D: 1325376000,
            A: 1359504000
        }
    },
    K: {
        A: {
            A: 0,
            B: 0,
            C: 0,
            H: 0.975319,
            CC: 0,
            fC: 0,
            DC: 0
        },
        B: "o",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "A",
            "B",
            "CC",
            "fC",
            "C",
            "DC",
            "H",
            "",
            "",
            ""
        ],
        E: "Opera Mobile",
        F: {
            A: 1287100800,
            B: 1300752000,
            CC: 1314835200,
            fC: 1318291200,
            C: 1330300800,
            DC: 1349740800,
            H: 1709769600
        },
        D: {
            H: "webkit"
        }
    },
    L: {
        A: {
            I: 46.0128
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "I",
            "",
            "",
            ""
        ],
        E: "Chrome for Android",
        F: {
            I: 1731369600
        }
    },
    M: {
        A: {
            BC: 0.329817
        },
        B: "moz",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "BC",
            "",
            "",
            ""
        ],
        E: "Firefox for Android",
        F: {
            BC: 1730160000
        }
    },
    N: {
        A: {
            A: 0,
            B: 0
        },
        B: "ms",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "A",
            "B",
            "",
            "",
            ""
        ],
        E: "IE Mobile",
        F: {
            A: 1340150400,
            B: 1353456000
        }
    },
    O: {
        A: {
            EC: 0.801908
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "EC",
            "",
            "",
            ""
        ],
        E: "UC Browser for Android",
        F: {
            EC: 1710115200
        },
        D: {
            EC: "webkit"
        }
    },
    P: {
        A: {
            "0": 0.0324287,
            "1": 0.0432383,
            "2": 0.0540479,
            "3": 0.0540479,
            "4": 1.05934,
            "5": 0.832337,
            J: 0.075667,
            y: 0.0108096,
            z: 0.0324287,
            YD: 0.0108096,
            ZD: 0,
            aD: 0.0108096,
            bD: 0,
            cD: 0,
            PC: 0,
            dD: 0,
            eD: 0,
            fD: 0,
            gD: 0,
            hD: 0,
            FC: 0,
            GC: 0.0108096,
            HC: 0,
            iD: 0.0108096
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "J",
            "YD",
            "ZD",
            "aD",
            "bD",
            "cD",
            "PC",
            "dD",
            "eD",
            "fD",
            "gD",
            "hD",
            "FC",
            "GC",
            "HC",
            "iD",
            "y",
            "z",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "",
            "",
            ""
        ],
        E: "Samsung Internet",
        F: {
            "0": 1689292800,
            "1": 1697587200,
            "2": 1711497600,
            "3": 1715126400,
            "4": 1717718400,
            "5": 1725667200,
            J: 1461024000,
            YD: 1481846400,
            ZD: 1509408000,
            aD: 1528329600,
            bD: 1546128000,
            cD: 1554163200,
            PC: 1567900800,
            dD: 1582588800,
            eD: 1593475200,
            fD: 1605657600,
            gD: 1618531200,
            hD: 1629072000,
            FC: 1640736000,
            GC: 1651708800,
            HC: 1659657600,
            iD: 1667260800,
            y: 1677369600,
            z: 1684454400
        }
    },
    Q: {
        A: {
            jD: 0.200477
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "jD",
            "",
            "",
            ""
        ],
        E: "QQ Browser",
        F: {
            jD: 1710288000
        }
    },
    R: {
        A: {
            kD: 0
        },
        B: "webkit",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "kD",
            "",
            "",
            ""
        ],
        E: "Baidu Browser",
        F: {
            kD: 1710201600
        }
    },
    S: {
        A: {
            lD: 0.019401,
            mD: 0
        },
        B: "moz",
        C: [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "lD",
            "mD",
            "",
            "",
            ""
        ],
        E: "KaiOS Browser",
        F: {
            lD: 1527811200,
            mD: 1631664000
        }
    }
};
}}),
"[project]/node_modules/caniuse-lite/dist/unpacker/agents.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const browsers = __turbopack_require__("[project]/node_modules/caniuse-lite/dist/unpacker/browsers.js [app-client] (ecmascript)").browsers;
const versions = __turbopack_require__("[project]/node_modules/caniuse-lite/dist/unpacker/browserVersions.js [app-client] (ecmascript)").browserVersions;
const agentsData = __turbopack_require__("[project]/node_modules/caniuse-lite/data/agents.js [app-client] (ecmascript)");
function unpackBrowserVersions(versionsData) {
    return Object.keys(versionsData).reduce((usage, version)=>{
        usage[versions[version]] = versionsData[version];
        return usage;
    }, {});
}
module.exports.agents = Object.keys(agentsData).reduce((map, key)=>{
    let versionsData = agentsData[key];
    map[browsers[key]] = Object.keys(versionsData).reduce((data, entry)=>{
        if (entry === 'A') {
            data.usage_global = unpackBrowserVersions(versionsData[entry]);
        } else if (entry === 'C') {
            data.versions = versionsData[entry].reduce((list, version)=>{
                if (version === '') {
                    list.push(null);
                } else {
                    list.push(versions[version]);
                }
                return list;
            }, []);
        } else if (entry === 'D') {
            data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]);
        } else if (entry === 'E') {
            data.browser = versionsData[entry];
        } else if (entry === 'F') {
            data.release_date = Object.keys(versionsData[entry]).reduce((map2, key2)=>{
                map2[versions[key2]] = versionsData[entry][key2];
                return map2;
            }, {});
        } else {
            // entry is B
            data.prefix = versionsData[entry];
        }
        return data;
    }, {});
    return map;
}, {});
}}),
"[project]/node_modules/electron-to-chromium/versions.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = {
    "0.20": "39",
    "0.21": "41",
    "0.22": "41",
    "0.23": "41",
    "0.24": "41",
    "0.25": "42",
    "0.26": "42",
    "0.27": "43",
    "0.28": "43",
    "0.29": "43",
    "0.30": "44",
    "0.31": "45",
    "0.32": "45",
    "0.33": "45",
    "0.34": "45",
    "0.35": "45",
    "0.36": "47",
    "0.37": "49",
    "1.0": "49",
    "1.1": "50",
    "1.2": "51",
    "1.3": "52",
    "1.4": "53",
    "1.5": "54",
    "1.6": "56",
    "1.7": "58",
    "1.8": "59",
    "2.0": "61",
    "2.1": "61",
    "3.0": "66",
    "3.1": "66",
    "4.0": "69",
    "4.1": "69",
    "4.2": "69",
    "5.0": "73",
    "6.0": "76",
    "6.1": "76",
    "7.0": "78",
    "7.1": "78",
    "7.2": "78",
    "7.3": "78",
    "8.0": "80",
    "8.1": "80",
    "8.2": "80",
    "8.3": "80",
    "8.4": "80",
    "8.5": "80",
    "9.0": "83",
    "9.1": "83",
    "9.2": "83",
    "9.3": "83",
    "9.4": "83",
    "10.0": "85",
    "10.1": "85",
    "10.2": "85",
    "10.3": "85",
    "10.4": "85",
    "11.0": "87",
    "11.1": "87",
    "11.2": "87",
    "11.3": "87",
    "11.4": "87",
    "11.5": "87",
    "12.0": "89",
    "12.1": "89",
    "12.2": "89",
    "13.0": "91",
    "13.1": "91",
    "13.2": "91",
    "13.3": "91",
    "13.4": "91",
    "13.5": "91",
    "13.6": "91",
    "14.0": "93",
    "14.1": "93",
    "14.2": "93",
    "15.0": "94",
    "15.1": "94",
    "15.2": "94",
    "15.3": "94",
    "15.4": "94",
    "15.5": "94",
    "16.0": "96",
    "16.1": "96",
    "16.2": "96",
    "17.0": "98",
    "17.1": "98",
    "17.2": "98",
    "17.3": "98",
    "17.4": "98",
    "18.0": "100",
    "18.1": "100",
    "18.2": "100",
    "18.3": "100",
    "19.0": "102",
    "19.1": "102",
    "20.0": "104",
    "20.1": "104",
    "20.2": "104",
    "20.3": "104",
    "21.0": "106",
    "21.1": "106",
    "21.2": "106",
    "21.3": "106",
    "21.4": "106",
    "22.0": "108",
    "22.1": "108",
    "22.2": "108",
    "22.3": "108",
    "23.0": "110",
    "23.1": "110",
    "23.2": "110",
    "23.3": "110",
    "24.0": "112",
    "24.1": "112",
    "24.2": "112",
    "24.3": "112",
    "24.4": "112",
    "24.5": "112",
    "24.6": "112",
    "24.7": "112",
    "24.8": "112",
    "25.0": "114",
    "25.1": "114",
    "25.2": "114",
    "25.3": "114",
    "25.4": "114",
    "25.5": "114",
    "25.6": "114",
    "25.7": "114",
    "25.8": "114",
    "25.9": "114",
    "26.0": "116",
    "26.1": "116",
    "26.2": "116",
    "26.3": "116",
    "26.4": "116",
    "26.5": "116",
    "26.6": "116",
    "27.0": "118",
    "27.1": "118",
    "27.2": "118",
    "27.3": "118",
    "28.0": "120",
    "28.1": "120",
    "28.2": "120",
    "28.3": "120",
    "29.0": "122",
    "29.1": "122",
    "29.2": "122",
    "29.3": "122",
    "29.4": "122",
    "30.0": "124",
    "30.1": "124",
    "30.2": "124",
    "30.3": "124",
    "30.4": "124",
    "30.5": "124",
    "31.0": "126",
    "31.1": "126",
    "31.2": "126",
    "31.3": "126",
    "31.4": "126",
    "31.5": "126",
    "31.6": "126",
    "31.7": "126",
    "32.0": "128",
    "32.1": "128",
    "32.2": "128",
    "33.0": "130",
    "33.1": "130",
    "33.2": "130",
    "33.3": "130",
    "34.0": "132"
};
}}),
"[project]/node_modules/browserslist/error.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
function BrowserslistError(message) {
    this.name = 'BrowserslistError';
    this.message = message;
    this.browserslist = true;
    if (Error.captureStackTrace) {
        Error.captureStackTrace(this, BrowserslistError);
    }
}
BrowserslistError.prototype = Error.prototype;
module.exports = BrowserslistError;
}}),
"[project]/node_modules/browserslist/browser.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var BrowserslistError = __turbopack_require__("[project]/node_modules/browserslist/error.js [app-client] (ecmascript)");
function noop() {}
module.exports = {
    loadQueries: function loadQueries() {
        throw new BrowserslistError('Sharable configs are not supported in client-side build of Browserslist');
    },
    getStat: function getStat(opts) {
        return opts.stats;
    },
    loadConfig: function loadConfig(opts) {
        if (opts.config) {
            throw new BrowserslistError('Browserslist config are not supported in client-side build');
        }
    },
    loadCountry: function loadCountry() {
        throw new BrowserslistError('Country statistics are not supported ' + 'in client-side build of Browserslist');
    },
    loadFeature: function loadFeature() {
        throw new BrowserslistError('Supports queries are not available in client-side build of Browserslist');
    },
    currentNode: function currentNode(resolve, context) {
        return resolve([
            'maintained node versions'
        ], context)[0];
    },
    parseConfig: noop,
    readConfig: noop,
    findConfig: noop,
    findConfigFile: noop,
    clearCaches: noop,
    oldDataWarning: noop,
    env: {}
};
}}),
"[project]/node_modules/browserslist/parse.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var AND_REGEXP = /^\s+and\s+(.*)/i;
var OR_REGEXP = /^(?:,\s*|\s+or\s+)(.*)/i;
function flatten(array) {
    if (!Array.isArray(array)) return [
        array
    ];
    return array.reduce(function(a, b) {
        return a.concat(flatten(b));
    }, []);
}
function find(string, predicate) {
    for(var max = string.length, n = 1; n <= max; n++){
        var parsed = string.substr(-n, n);
        if (predicate(parsed, n, max)) {
            return string.slice(0, -n);
        }
    }
    return '';
}
function matchQuery(all, query) {
    var node = {
        query: query
    };
    if (query.indexOf('not ') === 0) {
        node.not = true;
        query = query.slice(4);
    }
    for(var name in all){
        var type = all[name];
        var match = query.match(type.regexp);
        if (match) {
            node.type = name;
            for(var i = 0; i < type.matches.length; i++){
                node[type.matches[i]] = match[i + 1];
            }
            return node;
        }
    }
    node.type = 'unknown';
    return node;
}
function matchBlock(all, string, qs) {
    var node;
    return find(string, function(parsed, n, max) {
        if (AND_REGEXP.test(parsed)) {
            node = matchQuery(all, parsed.match(AND_REGEXP)[1]);
            node.compose = 'and';
            qs.unshift(node);
            return true;
        } else if (OR_REGEXP.test(parsed)) {
            node = matchQuery(all, parsed.match(OR_REGEXP)[1]);
            node.compose = 'or';
            qs.unshift(node);
            return true;
        } else if (n === max) {
            node = matchQuery(all, parsed.trim());
            node.compose = 'or';
            qs.unshift(node);
            return true;
        }
        return false;
    });
}
module.exports = function parse(all, queries) {
    if (!Array.isArray(queries)) queries = [
        queries
    ];
    return flatten(queries.map(function(block) {
        var qs = [];
        do {
            block = matchBlock(all, block, qs);
        }while (block)
        return qs;
    }));
};
}}),
"[project]/node_modules/browserslist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var jsReleases = __turbopack_require__("[project]/node_modules/node-releases/data/processed/envs.json (json)");
var agents = __turbopack_require__("[project]/node_modules/caniuse-lite/dist/unpacker/agents.js [app-client] (ecmascript)").agents;
var e2c = __turbopack_require__("[project]/node_modules/electron-to-chromium/versions.js [app-client] (ecmascript)");
var jsEOL = __turbopack_require__("[project]/node_modules/node-releases/data/release-schedule/release-schedule.json (json)");
var path = {};
var BrowserslistError = __turbopack_require__("[project]/node_modules/browserslist/error.js [app-client] (ecmascript)");
var env = __turbopack_require__("[project]/node_modules/browserslist/browser.js [app-client] (ecmascript)");
var parse = __turbopack_require__("[project]/node_modules/browserslist/parse.js [app-client] (ecmascript)")// Will load browser.js in webpack
;
var YEAR = 365.259641 * 24 * 60 * 60 * 1000;
var ANDROID_EVERGREEN_FIRST = '37';
var OP_MOB_BLINK_FIRST = 14;
// Helpers
function isVersionsMatch(versionA, versionB) {
    return (versionA + '.').indexOf(versionB + '.') === 0;
}
function isEolReleased(name) {
    var version = name.slice(1);
    return browserslist.nodeVersions.some(function(i) {
        return isVersionsMatch(i, version);
    });
}
function normalize(versions) {
    return versions.filter(function(version) {
        return typeof version === 'string';
    });
}
function normalizeElectron(version) {
    var versionToUse = version;
    if (version.split('.').length === 3) {
        versionToUse = version.split('.').slice(0, -1).join('.');
    }
    return versionToUse;
}
function nameMapper(name) {
    return function mapName(version) {
        return name + ' ' + version;
    };
}
function getMajor(version) {
    return parseInt(version.split('.')[0]);
}
function getMajorVersions(released, number) {
    if (released.length === 0) return [];
    var majorVersions = uniq(released.map(getMajor));
    var minimum = majorVersions[majorVersions.length - number];
    if (!minimum) {
        return released;
    }
    var selected = [];
    for(var i = released.length - 1; i >= 0; i--){
        if (minimum > getMajor(released[i])) break;
        selected.unshift(released[i]);
    }
    return selected;
}
function uniq(array) {
    var filtered = [];
    for(var i = 0; i < array.length; i++){
        if (filtered.indexOf(array[i]) === -1) filtered.push(array[i]);
    }
    return filtered;
}
function fillUsage(result, name, data) {
    for(var i in data){
        result[name + ' ' + i] = data[i];
    }
}
function generateFilter(sign, version) {
    version = parseFloat(version);
    if (sign === '>') {
        return function(v) {
            return parseLatestFloat(v) > version;
        };
    } else if (sign === '>=') {
        return function(v) {
            return parseLatestFloat(v) >= version;
        };
    } else if (sign === '<') {
        return function(v) {
            return parseFloat(v) < version;
        };
    } else {
        return function(v) {
            return parseFloat(v) <= version;
        };
    }
    "TURBOPACK unreachable";
    function parseLatestFloat(v) {
        return parseFloat(v.split('-')[1] || v);
    }
}
function generateSemverFilter(sign, version) {
    version = version.split('.').map(parseSimpleInt);
    version[1] = version[1] || 0;
    version[2] = version[2] || 0;
    if (sign === '>') {
        return function(v) {
            v = v.split('.').map(parseSimpleInt);
            return compareSemver(v, version) > 0;
        };
    } else if (sign === '>=') {
        return function(v) {
            v = v.split('.').map(parseSimpleInt);
            return compareSemver(v, version) >= 0;
        };
    } else if (sign === '<') {
        return function(v) {
            v = v.split('.').map(parseSimpleInt);
            return compareSemver(version, v) > 0;
        };
    } else {
        return function(v) {
            v = v.split('.').map(parseSimpleInt);
            return compareSemver(version, v) >= 0;
        };
    }
}
function parseSimpleInt(x) {
    return parseInt(x);
}
function compare(a, b) {
    if (a < b) return -1;
    if (a > b) return +1;
    return 0;
}
function compareSemver(a, b) {
    return compare(parseInt(a[0]), parseInt(b[0])) || compare(parseInt(a[1] || '0'), parseInt(b[1] || '0')) || compare(parseInt(a[2] || '0'), parseInt(b[2] || '0'));
}
// this follows the npm-like semver behavior
function semverFilterLoose(operator, range) {
    range = range.split('.').map(parseSimpleInt);
    if (typeof range[1] === 'undefined') {
        range[1] = 'x';
    }
    // ignore any patch version because we only return minor versions
    // range[2] = 'x'
    switch(operator){
        case '<=':
            return function(version) {
                version = version.split('.').map(parseSimpleInt);
                return compareSemverLoose(version, range) <= 0;
            };
        case '>=':
        default:
            return function(version) {
                version = version.split('.').map(parseSimpleInt);
                return compareSemverLoose(version, range) >= 0;
            };
    }
}
// this follows the npm-like semver behavior
function compareSemverLoose(version, range) {
    if (version[0] !== range[0]) {
        return version[0] < range[0] ? -1 : +1;
    }
    if (range[1] === 'x') {
        return 0;
    }
    if (version[1] !== range[1]) {
        return version[1] < range[1] ? -1 : +1;
    }
    return 0;
}
function resolveVersion(data, version) {
    if (data.versions.indexOf(version) !== -1) {
        return version;
    } else if (browserslist.versionAliases[data.name][version]) {
        return browserslist.versionAliases[data.name][version];
    } else {
        return false;
    }
}
function normalizeVersion(data, version) {
    var resolved = resolveVersion(data, version);
    if (resolved) {
        return resolved;
    } else if (data.versions.length === 1) {
        return data.versions[0];
    } else {
        return false;
    }
}
function filterByYear(since, context) {
    since = since / 1000;
    return Object.keys(agents).reduce(function(selected, name) {
        var data = byName(name, context);
        if (!data) return selected;
        var versions = Object.keys(data.releaseDate).filter(function(v) {
            var date = data.releaseDate[v];
            return date !== null && date >= since;
        });
        return selected.concat(versions.map(nameMapper(data.name)));
    }, []);
}
function cloneData(data) {
    return {
        name: data.name,
        versions: data.versions,
        released: data.released,
        releaseDate: data.releaseDate
    };
}
function byName(name, context) {
    name = name.toLowerCase();
    name = browserslist.aliases[name] || name;
    if (context.mobileToDesktop && browserslist.desktopNames[name]) {
        var desktop = browserslist.data[browserslist.desktopNames[name]];
        if (name === 'android') {
            return normalizeAndroidData(cloneData(browserslist.data[name]), desktop);
        } else {
            var cloned = cloneData(desktop);
            cloned.name = name;
            return cloned;
        }
    }
    return browserslist.data[name];
}
function normalizeAndroidVersions(androidVersions, chromeVersions) {
    var iFirstEvergreen = chromeVersions.indexOf(ANDROID_EVERGREEN_FIRST);
    return androidVersions.filter(function(version) {
        return /^(?:[2-4]\.|[34]$)/.test(version);
    }).concat(chromeVersions.slice(iFirstEvergreen));
}
function copyObject(obj) {
    var copy = {};
    for(var key in obj){
        copy[key] = obj[key];
    }
    return copy;
}
function normalizeAndroidData(android, chrome) {
    android.released = normalizeAndroidVersions(android.released, chrome.released);
    android.versions = normalizeAndroidVersions(android.versions, chrome.versions);
    android.releaseDate = copyObject(android.releaseDate);
    android.released.forEach(function(v) {
        if (android.releaseDate[v] === undefined) {
            android.releaseDate[v] = chrome.releaseDate[v];
        }
    });
    return android;
}
function checkName(name, context) {
    var data = byName(name, context);
    if (!data) throw new BrowserslistError('Unknown browser ' + name);
    return data;
}
function unknownQuery(query) {
    return new BrowserslistError('Unknown browser query `' + query + '`. ' + 'Maybe you are using old Browserslist or made typo in query.');
}
// Adjusts last X versions queries for some mobile browsers,
// where caniuse data jumps from a legacy version to the latest
function filterJumps(list, name, nVersions, context) {
    var jump = 1;
    switch(name){
        case 'android':
            if (context.mobileToDesktop) return list;
            var released = browserslist.data.chrome.released;
            jump = released.length - released.indexOf(ANDROID_EVERGREEN_FIRST);
            break;
        case 'op_mob':
            var latest = browserslist.data.op_mob.released.slice(-1)[0];
            jump = getMajor(latest) - OP_MOB_BLINK_FIRST + 1;
            break;
        default:
            return list;
    }
    if (nVersions <= jump) {
        return list.slice(-1);
    }
    return list.slice(jump - 1 - nVersions);
}
function isSupported(flags, withPartial) {
    return typeof flags === 'string' && (flags.indexOf('y') >= 0 || withPartial && flags.indexOf('a') >= 0);
}
function resolve(queries, context) {
    return parse(QUERIES, queries).reduce(function(result, node, index) {
        if (node.not && index === 0) {
            throw new BrowserslistError('Write any browsers query (for instance, `defaults`) ' + 'before `' + node.query + '`');
        }
        var type = QUERIES[node.type];
        var array = type.select.call(browserslist, context, node).map(function(j) {
            var parts = j.split(' ');
            if (parts[1] === '0') {
                return parts[0] + ' ' + byName(parts[0], context).versions[0];
            } else {
                return j;
            }
        });
        if (node.compose === 'and') {
            if (node.not) {
                return result.filter(function(j) {
                    return array.indexOf(j) === -1;
                });
            } else {
                return result.filter(function(j) {
                    return array.indexOf(j) !== -1;
                });
            }
        } else {
            if (node.not) {
                var filter = {};
                array.forEach(function(j) {
                    filter[j] = true;
                });
                return result.filter(function(j) {
                    return !filter[j];
                });
            }
            return result.concat(array);
        }
    }, []);
}
function prepareOpts(opts) {
    if (typeof opts === 'undefined') opts = {};
    if (typeof opts.path === 'undefined') {
        opts.path = path.resolve ? path.resolve('.') : '.';
    }
    return opts;
}
function prepareQueries(queries, opts) {
    if (typeof queries === 'undefined' || queries === null) {
        var config = browserslist.loadConfig(opts);
        if (config) {
            queries = config;
        } else {
            queries = browserslist.defaults;
        }
    }
    return queries;
}
function checkQueries(queries) {
    if (!(typeof queries === 'string' || Array.isArray(queries))) {
        throw new BrowserslistError('Browser queries must be an array or string. Got ' + typeof queries + '.');
    }
}
var cache = {};
function browserslist(queries, opts) {
    opts = prepareOpts(opts);
    queries = prepareQueries(queries, opts);
    checkQueries(queries);
    var context = {
        ignoreUnknownVersions: opts.ignoreUnknownVersions,
        dangerousExtend: opts.dangerousExtend,
        mobileToDesktop: opts.mobileToDesktop,
        path: opts.path,
        env: opts.env
    };
    env.oldDataWarning(browserslist.data);
    var stats = env.getStat(opts, browserslist.data);
    if (stats) {
        context.customUsage = {};
        for(var browser in stats){
            fillUsage(context.customUsage, browser, stats[browser]);
        }
    }
    var cacheKey = JSON.stringify([
        queries,
        context
    ]);
    if (cache[cacheKey]) return cache[cacheKey];
    var result = uniq(resolve(queries, context)).sort(function(name1, name2) {
        name1 = name1.split(' ');
        name2 = name2.split(' ');
        if (name1[0] === name2[0]) {
            // assumptions on caniuse data
            // 1) version ranges never overlaps
            // 2) if version is not a range, it never contains `-`
            var version1 = name1[1].split('-')[0];
            var version2 = name2[1].split('-')[0];
            return compareSemver(version2.split('.'), version1.split('.'));
        } else {
            return compare(name1[0], name2[0]);
        }
    });
    if (!env.env.BROWSERSLIST_DISABLE_CACHE) {
        cache[cacheKey] = result;
    }
    return result;
}
browserslist.parse = function(queries, opts) {
    opts = prepareOpts(opts);
    queries = prepareQueries(queries, opts);
    checkQueries(queries);
    return parse(QUERIES, queries);
};
// Will be filled by Can I Use data below
browserslist.cache = {};
browserslist.data = {};
browserslist.usage = {
    global: {},
    custom: null
};
// Default browsers query
browserslist.defaults = [
    '> 0.5%',
    'last 2 versions',
    'Firefox ESR',
    'not dead'
];
// Browser names aliases
browserslist.aliases = {
    fx: 'firefox',
    ff: 'firefox',
    ios: 'ios_saf',
    explorer: 'ie',
    blackberry: 'bb',
    explorermobile: 'ie_mob',
    operamini: 'op_mini',
    operamobile: 'op_mob',
    chromeandroid: 'and_chr',
    firefoxandroid: 'and_ff',
    ucandroid: 'and_uc',
    qqandroid: 'and_qq'
};
// Can I Use only provides a few versions for some browsers (e.g. and_chr).
// Fallback to a similar browser for unknown versions
// Note op_mob is not included as its chromium versions are not in sync with Opera desktop
browserslist.desktopNames = {
    and_chr: 'chrome',
    and_ff: 'firefox',
    ie_mob: 'ie',
    android: 'chrome' // has extra processing logic
};
// Aliases to work with joined versions like `ios_saf 7.0-7.1`
browserslist.versionAliases = {};
browserslist.clearCaches = env.clearCaches;
browserslist.parseConfig = env.parseConfig;
browserslist.readConfig = env.readConfig;
browserslist.findConfigFile = env.findConfigFile;
browserslist.findConfig = env.findConfig;
browserslist.loadConfig = env.loadConfig;
browserslist.coverage = function(browsers, stats) {
    var data;
    if (typeof stats === 'undefined') {
        data = browserslist.usage.global;
    } else if (stats === 'my stats') {
        var opts = {};
        opts.path = path.resolve ? path.resolve('.') : '.';
        var customStats = env.getStat(opts);
        if (!customStats) {
            throw new BrowserslistError('Custom usage statistics was not provided');
        }
        data = {};
        for(var browser in customStats){
            fillUsage(data, browser, customStats[browser]);
        }
    } else if (typeof stats === 'string') {
        if (stats.length > 2) {
            stats = stats.toLowerCase();
        } else {
            stats = stats.toUpperCase();
        }
        env.loadCountry(browserslist.usage, stats, browserslist.data);
        data = browserslist.usage[stats];
    } else {
        if ('dataByBrowser' in stats) {
            stats = stats.dataByBrowser;
        }
        data = {};
        for(var name in stats){
            for(var version in stats[name]){
                data[name + ' ' + version] = stats[name][version];
            }
        }
    }
    return browsers.reduce(function(all, i) {
        var usage = data[i];
        if (usage === undefined) {
            usage = data[i.replace(/ \S+$/, ' 0')];
        }
        return all + (usage || 0);
    }, 0);
};
function nodeQuery(context, node) {
    var matched = browserslist.nodeVersions.filter(function(i) {
        return isVersionsMatch(i, node.version);
    });
    if (matched.length === 0) {
        if (context.ignoreUnknownVersions) {
            return [];
        } else {
            throw new BrowserslistError('Unknown version ' + node.version + ' of Node.js');
        }
    }
    return [
        'node ' + matched[matched.length - 1]
    ];
}
function sinceQuery(context, node) {
    var year = parseInt(node.year);
    var month = parseInt(node.month || '01') - 1;
    var day = parseInt(node.day || '01');
    return filterByYear(Date.UTC(year, month, day, 0, 0, 0), context);
}
function coverQuery(context, node) {
    var coverage = parseFloat(node.coverage);
    var usage = browserslist.usage.global;
    if (node.place) {
        if (node.place.match(/^my\s+stats$/i)) {
            if (!context.customUsage) {
                throw new BrowserslistError('Custom usage statistics was not provided');
            }
            usage = context.customUsage;
        } else {
            var place;
            if (node.place.length === 2) {
                place = node.place.toUpperCase();
            } else {
                place = node.place.toLowerCase();
            }
            env.loadCountry(browserslist.usage, place, browserslist.data);
            usage = browserslist.usage[place];
        }
    }
    var versions = Object.keys(usage).sort(function(a, b) {
        return usage[b] - usage[a];
    });
    var coveraged = 0;
    var result = [];
    var version;
    for(var i = 0; i < versions.length; i++){
        version = versions[i];
        if (usage[version] === 0) break;
        coveraged += usage[version];
        result.push(version);
        if (coveraged >= coverage) break;
    }
    return result;
}
var QUERIES = {
    last_major_versions: {
        matches: [
            'versions'
        ],
        regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
        select: function(context, node) {
            return Object.keys(agents).reduce(function(selected, name) {
                var data = byName(name, context);
                if (!data) return selected;
                var list = getMajorVersions(data.released, node.versions);
                list = list.map(nameMapper(data.name));
                list = filterJumps(list, data.name, node.versions, context);
                return selected.concat(list);
            }, []);
        }
    },
    last_versions: {
        matches: [
            'versions'
        ],
        regexp: /^last\s+(\d+)\s+versions?$/i,
        select: function(context, node) {
            return Object.keys(agents).reduce(function(selected, name) {
                var data = byName(name, context);
                if (!data) return selected;
                var list = data.released.slice(-node.versions);
                list = list.map(nameMapper(data.name));
                list = filterJumps(list, data.name, node.versions, context);
                return selected.concat(list);
            }, []);
        }
    },
    last_electron_major_versions: {
        matches: [
            'versions'
        ],
        regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
        select: function(context, node) {
            var validVersions = getMajorVersions(Object.keys(e2c), node.versions);
            return validVersions.map(function(i) {
                return 'chrome ' + e2c[i];
            });
        }
    },
    last_node_major_versions: {
        matches: [
            'versions'
        ],
        regexp: /^last\s+(\d+)\s+node\s+major\s+versions?$/i,
        select: function(context, node) {
            return getMajorVersions(browserslist.nodeVersions, node.versions).map(function(version) {
                return 'node ' + version;
            });
        }
    },
    last_browser_major_versions: {
        matches: [
            'versions',
            'browser'
        ],
        regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
        select: function(context, node) {
            var data = checkName(node.browser, context);
            var validVersions = getMajorVersions(data.released, node.versions);
            var list = validVersions.map(nameMapper(data.name));
            list = filterJumps(list, data.name, node.versions, context);
            return list;
        }
    },
    last_electron_versions: {
        matches: [
            'versions'
        ],
        regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
        select: function(context, node) {
            return Object.keys(e2c).slice(-node.versions).map(function(i) {
                return 'chrome ' + e2c[i];
            });
        }
    },
    last_node_versions: {
        matches: [
            'versions'
        ],
        regexp: /^last\s+(\d+)\s+node\s+versions?$/i,
        select: function(context, node) {
            return browserslist.nodeVersions.slice(-node.versions).map(function(version) {
                return 'node ' + version;
            });
        }
    },
    last_browser_versions: {
        matches: [
            'versions',
            'browser'
        ],
        regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
        select: function(context, node) {
            var data = checkName(node.browser, context);
            var list = data.released.slice(-node.versions).map(nameMapper(data.name));
            list = filterJumps(list, data.name, node.versions, context);
            return list;
        }
    },
    unreleased_versions: {
        matches: [],
        regexp: /^unreleased\s+versions$/i,
        select: function(context) {
            return Object.keys(agents).reduce(function(selected, name) {
                var data = byName(name, context);
                if (!data) return selected;
                var list = data.versions.filter(function(v) {
                    return data.released.indexOf(v) === -1;
                });
                list = list.map(nameMapper(data.name));
                return selected.concat(list);
            }, []);
        }
    },
    unreleased_electron_versions: {
        matches: [],
        regexp: /^unreleased\s+electron\s+versions?$/i,
        select: function() {
            return [];
        }
    },
    unreleased_browser_versions: {
        matches: [
            'browser'
        ],
        regexp: /^unreleased\s+(\w+)\s+versions?$/i,
        select: function(context, node) {
            var data = checkName(node.browser, context);
            return data.versions.filter(function(v) {
                return data.released.indexOf(v) === -1;
            }).map(nameMapper(data.name));
        }
    },
    last_years: {
        matches: [
            'years'
        ],
        regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
        select: function(context, node) {
            return filterByYear(Date.now() - YEAR * node.years, context);
        }
    },
    since_y: {
        matches: [
            'year'
        ],
        regexp: /^since (\d+)$/i,
        select: sinceQuery
    },
    since_y_m: {
        matches: [
            'year',
            'month'
        ],
        regexp: /^since (\d+)-(\d+)$/i,
        select: sinceQuery
    },
    since_y_m_d: {
        matches: [
            'year',
            'month',
            'day'
        ],
        regexp: /^since (\d+)-(\d+)-(\d+)$/i,
        select: sinceQuery
    },
    popularity: {
        matches: [
            'sign',
            'popularity'
        ],
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/,
        select: function(context, node) {
            var popularity = parseFloat(node.popularity);
            var usage = browserslist.usage.global;
            return Object.keys(usage).reduce(function(result, version) {
                if (node.sign === '>') {
                    if (usage[version] > popularity) {
                        result.push(version);
                    }
                } else if (node.sign === '<') {
                    if (usage[version] < popularity) {
                        result.push(version);
                    }
                } else if (node.sign === '<=') {
                    if (usage[version] <= popularity) {
                        result.push(version);
                    }
                } else if (usage[version] >= popularity) {
                    result.push(version);
                }
                return result;
            }, []);
        }
    },
    popularity_in_my_stats: {
        matches: [
            'sign',
            'popularity'
        ],
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/,
        select: function(context, node) {
            var popularity = parseFloat(node.popularity);
            if (!context.customUsage) {
                throw new BrowserslistError('Custom usage statistics was not provided');
            }
            var usage = context.customUsage;
            return Object.keys(usage).reduce(function(result, version) {
                var percentage = usage[version];
                if (percentage == null) {
                    return result;
                }
                if (node.sign === '>') {
                    if (percentage > popularity) {
                        result.push(version);
                    }
                } else if (node.sign === '<') {
                    if (percentage < popularity) {
                        result.push(version);
                    }
                } else if (node.sign === '<=') {
                    if (percentage <= popularity) {
                        result.push(version);
                    }
                } else if (percentage >= popularity) {
                    result.push(version);
                }
                return result;
            }, []);
        }
    },
    popularity_in_config_stats: {
        matches: [
            'sign',
            'popularity',
            'config'
        ],
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/,
        select: function(context, node) {
            var popularity = parseFloat(node.popularity);
            var stats = env.loadStat(context, node.config, browserslist.data);
            if (stats) {
                context.customUsage = {};
                for(var browser in stats){
                    fillUsage(context.customUsage, browser, stats[browser]);
                }
            }
            if (!context.customUsage) {
                throw new BrowserslistError('Custom usage statistics was not provided');
            }
            var usage = context.customUsage;
            return Object.keys(usage).reduce(function(result, version) {
                var percentage = usage[version];
                if (percentage == null) {
                    return result;
                }
                if (node.sign === '>') {
                    if (percentage > popularity) {
                        result.push(version);
                    }
                } else if (node.sign === '<') {
                    if (percentage < popularity) {
                        result.push(version);
                    }
                } else if (node.sign === '<=') {
                    if (percentage <= popularity) {
                        result.push(version);
                    }
                } else if (percentage >= popularity) {
                    result.push(version);
                }
                return result;
            }, []);
        }
    },
    popularity_in_place: {
        matches: [
            'sign',
            'popularity',
            'place'
        ],
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/,
        select: function(context, node) {
            var popularity = parseFloat(node.popularity);
            var place = node.place;
            if (place.length === 2) {
                place = place.toUpperCase();
            } else {
                place = place.toLowerCase();
            }
            env.loadCountry(browserslist.usage, place, browserslist.data);
            var usage = browserslist.usage[place];
            return Object.keys(usage).reduce(function(result, version) {
                var percentage = usage[version];
                if (percentage == null) {
                    return result;
                }
                if (node.sign === '>') {
                    if (percentage > popularity) {
                        result.push(version);
                    }
                } else if (node.sign === '<') {
                    if (percentage < popularity) {
                        result.push(version);
                    }
                } else if (node.sign === '<=') {
                    if (percentage <= popularity) {
                        result.push(version);
                    }
                } else if (percentage >= popularity) {
                    result.push(version);
                }
                return result;
            }, []);
        }
    },
    cover: {
        matches: [
            'coverage'
        ],
        regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/i,
        select: coverQuery
    },
    cover_in: {
        matches: [
            'coverage',
            'place'
        ],
        regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/i,
        select: coverQuery
    },
    supports: {
        matches: [
            'supportType',
            'feature'
        ],
        regexp: /^(?:(fully|partially)\s+)?supports\s+([\w-]+)$/,
        select: function(context, node) {
            env.loadFeature(browserslist.cache, node.feature);
            var withPartial = node.supportType !== 'fully';
            var features = browserslist.cache[node.feature];
            var result = [];
            for(var name in features){
                var data = byName(name, context);
                // Only check desktop when latest released mobile has support
                var iMax = data.released.length - 1;
                while(iMax >= 0){
                    if (data.released[iMax] in features[name]) break;
                    iMax--;
                }
                var checkDesktop = context.mobileToDesktop && name in browserslist.desktopNames && isSupported(features[name][data.released[iMax]], withPartial);
                data.versions.forEach(function(version) {
                    var flags = features[name][version];
                    if (flags === undefined && checkDesktop) {
                        flags = features[browserslist.desktopNames[name]][version];
                    }
                    if (isSupported(flags, withPartial)) {
                        result.push(name + ' ' + version);
                    }
                });
            }
            return result;
        }
    },
    electron_range: {
        matches: [
            'from',
            'to'
        ],
        regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
        select: function(context, node) {
            var fromToUse = normalizeElectron(node.from);
            var toToUse = normalizeElectron(node.to);
            var from = parseFloat(node.from);
            var to = parseFloat(node.to);
            if (!e2c[fromToUse]) {
                throw new BrowserslistError('Unknown version ' + from + ' of electron');
            }
            if (!e2c[toToUse]) {
                throw new BrowserslistError('Unknown version ' + to + ' of electron');
            }
            return Object.keys(e2c).filter(function(i) {
                var parsed = parseFloat(i);
                return parsed >= from && parsed <= to;
            }).map(function(i) {
                return 'chrome ' + e2c[i];
            });
        }
    },
    node_range: {
        matches: [
            'from',
            'to'
        ],
        regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
        select: function(context, node) {
            return browserslist.nodeVersions.filter(semverFilterLoose('>=', node.from)).filter(semverFilterLoose('<=', node.to)).map(function(v) {
                return 'node ' + v;
            });
        }
    },
    browser_range: {
        matches: [
            'browser',
            'from',
            'to'
        ],
        regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
        select: function(context, node) {
            var data = checkName(node.browser, context);
            var from = parseFloat(normalizeVersion(data, node.from) || node.from);
            var to = parseFloat(normalizeVersion(data, node.to) || node.to);
            function filter(v) {
                var parsed = parseFloat(v);
                return parsed >= from && parsed <= to;
            }
            return data.released.filter(filter).map(nameMapper(data.name));
        }
    },
    electron_ray: {
        matches: [
            'sign',
            'version'
        ],
        regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
        select: function(context, node) {
            var versionToUse = normalizeElectron(node.version);
            return Object.keys(e2c).filter(generateFilter(node.sign, versionToUse)).map(function(i) {
                return 'chrome ' + e2c[i];
            });
        }
    },
    node_ray: {
        matches: [
            'sign',
            'version'
        ],
        regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
        select: function(context, node) {
            return browserslist.nodeVersions.filter(generateSemverFilter(node.sign, node.version)).map(function(v) {
                return 'node ' + v;
            });
        }
    },
    browser_ray: {
        matches: [
            'browser',
            'sign',
            'version'
        ],
        regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
        select: function(context, node) {
            var version = node.version;
            var data = checkName(node.browser, context);
            var alias = browserslist.versionAliases[data.name][version];
            if (alias) version = alias;
            return data.released.filter(generateFilter(node.sign, version)).map(function(v) {
                return data.name + ' ' + v;
            });
        }
    },
    firefox_esr: {
        matches: [],
        regexp: /^(firefox|ff|fx)\s+esr$/i,
        select: function() {
            return [
                'firefox 128'
            ];
        }
    },
    opera_mini_all: {
        matches: [],
        regexp: /(operamini|op_mini)\s+all/i,
        select: function() {
            return [
                'op_mini all'
            ];
        }
    },
    electron_version: {
        matches: [
            'version'
        ],
        regexp: /^electron\s+([\d.]+)$/i,
        select: function(context, node) {
            var versionToUse = normalizeElectron(node.version);
            var chrome = e2c[versionToUse];
            if (!chrome) {
                throw new BrowserslistError('Unknown version ' + node.version + ' of electron');
            }
            return [
                'chrome ' + chrome
            ];
        }
    },
    node_major_version: {
        matches: [
            'version'
        ],
        regexp: /^node\s+(\d+)$/i,
        select: nodeQuery
    },
    node_minor_version: {
        matches: [
            'version'
        ],
        regexp: /^node\s+(\d+\.\d+)$/i,
        select: nodeQuery
    },
    node_patch_version: {
        matches: [
            'version'
        ],
        regexp: /^node\s+(\d+\.\d+\.\d+)$/i,
        select: nodeQuery
    },
    current_node: {
        matches: [],
        regexp: /^current\s+node$/i,
        select: function(context) {
            return [
                env.currentNode(resolve, context)
            ];
        }
    },
    maintained_node: {
        matches: [],
        regexp: /^maintained\s+node\s+versions$/i,
        select: function(context) {
            var now = Date.now();
            var queries = Object.keys(jsEOL).filter(function(key) {
                return now < Date.parse(jsEOL[key].end) && now > Date.parse(jsEOL[key].start) && isEolReleased(key);
            }).map(function(key) {
                return 'node ' + key.slice(1);
            });
            return resolve(queries, context);
        }
    },
    phantomjs_1_9: {
        matches: [],
        regexp: /^phantomjs\s+1.9$/i,
        select: function() {
            return [
                'safari 5'
            ];
        }
    },
    phantomjs_2_1: {
        matches: [],
        regexp: /^phantomjs\s+2.1$/i,
        select: function() {
            return [
                'safari 6'
            ];
        }
    },
    browser_version: {
        matches: [
            'browser',
            'version'
        ],
        regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
        select: function(context, node) {
            var version = node.version;
            if (/^tp$/i.test(version)) version = 'TP';
            var data = checkName(node.browser, context);
            var alias = normalizeVersion(data, version);
            if (alias) {
                version = alias;
            } else {
                if (version.indexOf('.') === -1) {
                    alias = version + '.0';
                } else {
                    alias = version.replace(/\.0$/, '');
                }
                alias = normalizeVersion(data, alias);
                if (alias) {
                    version = alias;
                } else if (context.ignoreUnknownVersions) {
                    return [];
                } else {
                    throw new BrowserslistError('Unknown version ' + version + ' of ' + node.browser);
                }
            }
            return [
                data.name + ' ' + version
            ];
        }
    },
    browserslist_config: {
        matches: [],
        regexp: /^browserslist config$/i,
        select: function(context) {
            return browserslist(undefined, context);
        }
    },
    extends: {
        matches: [
            'config'
        ],
        regexp: /^extends (.+)$/i,
        select: function(context, node) {
            return resolve(env.loadQueries(context, node.config), context);
        }
    },
    defaults: {
        matches: [],
        regexp: /^defaults$/i,
        select: function(context) {
            return resolve(browserslist.defaults, context);
        }
    },
    dead: {
        matches: [],
        regexp: /^dead$/i,
        select: function(context) {
            var dead = [
                'Baidu >= 0',
                'ie <= 11',
                'ie_mob <= 11',
                'bb <= 10',
                'op_mob <= 12.1',
                'samsung 4'
            ];
            return resolve(dead, context);
        }
    },
    unknown: {
        matches: [],
        regexp: /^(\w+)$/i,
        select: function(context, node) {
            if (byName(node.query, context)) {
                throw new BrowserslistError('Specify versions in Browserslist query for browser ' + node.query);
            } else {
                throw unknownQuery(node.query);
            }
        }
    }
};
(function() {
    for(var name in agents){
        var browser = agents[name];
        browserslist.data[name] = {
            name: name,
            versions: normalize(agents[name].versions),
            released: normalize(agents[name].versions.slice(0, -3)),
            releaseDate: agents[name].release_date
        };
        fillUsage(browserslist.usage.global, name, browser.usage_global);
        browserslist.versionAliases[name] = {};
        for(var i = 0; i < browser.versions.length; i++){
            var full = browser.versions[i];
            if (!full) continue;
            if (full.indexOf('-') !== -1) {
                var interval = full.split('-');
                for(var j = 0; j < interval.length; j++){
                    browserslist.versionAliases[name][interval[j]] = full;
                }
            }
        }
    }
    browserslist.nodeVersions = jsReleases.map(function(release) {
        return release.version;
    });
})();
module.exports = browserslist;
}}),
"[project]/node_modules/yallist/iterator.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
module.exports = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function*() {
        for(let walker = this.head; walker; walker = walker.next){
            yield walker.value;
        }
    };
};
}}),
"[project]/node_modules/yallist/yallist.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
module.exports = Yallist;
Yallist.Node = Node;
Yallist.create = Yallist;
function Yallist(list) {
    var self = this;
    if (!(self instanceof Yallist)) {
        self = new Yallist();
    }
    self.tail = null;
    self.head = null;
    self.length = 0;
    if (list && typeof list.forEach === 'function') {
        list.forEach(function(item) {
            self.push(item);
        });
    } else if (arguments.length > 0) {
        for(var i = 0, l = arguments.length; i < l; i++){
            self.push(arguments[i]);
        }
    }
    return self;
}
Yallist.prototype.removeNode = function(node) {
    if (node.list !== this) {
        throw new Error('removing node which does not belong to this list');
    }
    var next = node.next;
    var prev = node.prev;
    if (next) {
        next.prev = prev;
    }
    if (prev) {
        prev.next = next;
    }
    if (node === this.head) {
        this.head = next;
    }
    if (node === this.tail) {
        this.tail = prev;
    }
    node.list.length--;
    node.next = null;
    node.prev = null;
    node.list = null;
    return next;
};
Yallist.prototype.unshiftNode = function(node) {
    if (node === this.head) {
        return;
    }
    if (node.list) {
        node.list.removeNode(node);
    }
    var head = this.head;
    node.list = this;
    node.next = head;
    if (head) {
        head.prev = node;
    }
    this.head = node;
    if (!this.tail) {
        this.tail = node;
    }
    this.length++;
};
Yallist.prototype.pushNode = function(node) {
    if (node === this.tail) {
        return;
    }
    if (node.list) {
        node.list.removeNode(node);
    }
    var tail = this.tail;
    node.list = this;
    node.prev = tail;
    if (tail) {
        tail.next = node;
    }
    this.tail = node;
    if (!this.head) {
        this.head = node;
    }
    this.length++;
};
Yallist.prototype.push = function() {
    for(var i = 0, l = arguments.length; i < l; i++){
        push(this, arguments[i]);
    }
    return this.length;
};
Yallist.prototype.unshift = function() {
    for(var i = 0, l = arguments.length; i < l; i++){
        unshift(this, arguments[i]);
    }
    return this.length;
};
Yallist.prototype.pop = function() {
    if (!this.tail) {
        return undefined;
    }
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) {
        this.tail.next = null;
    } else {
        this.head = null;
    }
    this.length--;
    return res;
};
Yallist.prototype.shift = function() {
    if (!this.head) {
        return undefined;
    }
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) {
        this.head.prev = null;
    } else {
        this.tail = null;
    }
    this.length--;
    return res;
};
Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.head, i = 0; walker !== null; i++){
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
    }
};
Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.tail, i = this.length - 1; walker !== null; i--){
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
    }
};
Yallist.prototype.get = function(n) {
    for(var i = 0, walker = this.head; walker !== null && i < n; i++){
        // abort out of the list early if we hit a cycle
        walker = walker.next;
    }
    if (i === n && walker !== null) {
        return walker.value;
    }
};
Yallist.prototype.getReverse = function(n) {
    for(var i = 0, walker = this.tail; walker !== null && i < n; i++){
        // abort out of the list early if we hit a cycle
        walker = walker.prev;
    }
    if (i === n && walker !== null) {
        return walker.value;
    }
};
Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for(var walker = this.head; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
    }
    return res;
};
Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for(var walker = this.tail; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
    }
    return res;
};
Yallist.prototype.reduce = function(fn, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) {
        acc = initial;
    } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
    } else {
        throw new TypeError('Reduce of empty list with no initial value');
    }
    for(var i = 0; walker !== null; i++){
        acc = fn(acc, walker.value, i);
        walker = walker.next;
    }
    return acc;
};
Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) {
        acc = initial;
    } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
    } else {
        throw new TypeError('Reduce of empty list with no initial value');
    }
    for(var i = this.length - 1; walker !== null; i--){
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
    }
    return acc;
};
Yallist.prototype.toArray = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.head; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.next;
    }
    return arr;
};
Yallist.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.tail; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.prev;
    }
    return arr;
};
Yallist.prototype.slice = function(from, to) {
    to = to || this.length;
    if (to < 0) {
        to += this.length;
    }
    from = from || 0;
    if (from < 0) {
        from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
        return ret;
    }
    if (from < 0) {
        from = 0;
    }
    if (to > this.length) {
        to = this.length;
    }
    for(var i = 0, walker = this.head; walker !== null && i < from; i++){
        walker = walker.next;
    }
    for(; walker !== null && i < to; i++, walker = walker.next){
        ret.push(walker.value);
    }
    return ret;
};
Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length;
    if (to < 0) {
        to += this.length;
    }
    from = from || 0;
    if (from < 0) {
        from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
        return ret;
    }
    if (from < 0) {
        from = 0;
    }
    if (to > this.length) {
        to = this.length;
    }
    for(var i = this.length, walker = this.tail; walker !== null && i > to; i--){
        walker = walker.prev;
    }
    for(; walker !== null && i > from; i--, walker = walker.prev){
        ret.push(walker.value);
    }
    return ret;
};
Yallist.prototype.splice = function(start, deleteCount /*, ...nodes */ ) {
    if (start > this.length) {
        start = this.length - 1;
    }
    if (start < 0) {
        start = this.length + start;
    }
    for(var i = 0, walker = this.head; walker !== null && i < start; i++){
        walker = walker.next;
    }
    var ret = [];
    for(var i = 0; walker && i < deleteCount; i++){
        ret.push(walker.value);
        walker = this.removeNode(walker);
    }
    if (walker === null) {
        walker = this.tail;
    }
    if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
    }
    for(var i = 2; i < arguments.length; i++){
        walker = insert(this, walker, arguments[i]);
    }
    return ret;
};
Yallist.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for(var walker = head; walker !== null; walker = walker.prev){
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
};
function insert(self, node, value) {
    var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);
    if (inserted.next === null) {
        self.tail = inserted;
    }
    if (inserted.prev === null) {
        self.head = inserted;
    }
    self.length++;
    return inserted;
}
function push(self, item) {
    self.tail = new Node(item, self.tail, null, self);
    if (!self.head) {
        self.head = self.tail;
    }
    self.length++;
}
function unshift(self, item) {
    self.head = new Node(item, null, self.head, self);
    if (!self.tail) {
        self.tail = self.head;
    }
    self.length++;
}
function Node(value, prev, next, list) {
    if (!(this instanceof Node)) {
        return new Node(value, prev, next, list);
    }
    this.list = list;
    this.value = value;
    if (prev) {
        prev.next = this;
        this.prev = prev;
    } else {
        this.prev = null;
    }
    if (next) {
        next.prev = this;
        this.next = next;
    } else {
        this.next = null;
    }
}
try {
    // add if support for Symbol.iterator is present
    __turbopack_require__("[project]/node_modules/yallist/iterator.js [app-client] (ecmascript)")(Yallist);
} catch (er) {}
}}),
"[project]/node_modules/lru-cache/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
// A linked list to keep track of recently-used-ness
const Yallist = __turbopack_require__("[project]/node_modules/yallist/yallist.js [app-client] (ecmascript)");
const MAX = Symbol('max');
const LENGTH = Symbol('length');
const LENGTH_CALCULATOR = Symbol('lengthCalculator');
const ALLOW_STALE = Symbol('allowStale');
const MAX_AGE = Symbol('maxAge');
const DISPOSE = Symbol('dispose');
const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
const LRU_LIST = Symbol('lruList');
const CACHE = Symbol('cache');
const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');
const naiveLength = ()=>1;
// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
class LRUCache {
    constructor(options){
        if (typeof options === 'number') options = {
            max: options
        };
        if (!options) options = {};
        if (options.max && (typeof options.max !== 'number' || options.max < 0)) throw new TypeError('max must be a non-negative number');
        // Kind of weird to have a default max of Infinity, but oh well.
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== 'function' ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== 'number') throw new TypeError('maxAge must be a number');
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
    }
    // resize the cache when the max changes.
    set max(mL) {
        if (typeof mL !== 'number' || mL < 0) throw new TypeError('max must be a non-negative number');
        this[MAX] = mL || Infinity;
        trim(this);
    }
    get max() {
        return this[MAX];
    }
    set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
        return this[ALLOW_STALE];
    }
    set maxAge(mA) {
        if (typeof mA !== 'number') throw new TypeError('maxAge must be a non-negative number');
        this[MAX_AGE] = mA;
        trim(this);
    }
    get maxAge() {
        return this[MAX_AGE];
    }
    // resize the cache when the lengthCalculator changes.
    set lengthCalculator(lC) {
        if (typeof lC !== 'function') lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
            this[LENGTH_CALCULATOR] = lC;
            this[LENGTH] = 0;
            this[LRU_LIST].forEach((hit)=>{
                hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
                this[LENGTH] += hit.length;
            });
        }
        trim(this);
    }
    get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
    }
    get length() {
        return this[LENGTH];
    }
    get itemCount() {
        return this[LRU_LIST].length;
    }
    rforEach(fn, thisp) {
        thisp = thisp || this;
        for(let walker = this[LRU_LIST].tail; walker !== null;){
            const prev = walker.prev;
            forEachStep(this, fn, walker, thisp);
            walker = prev;
        }
    }
    forEach(fn, thisp) {
        thisp = thisp || this;
        for(let walker = this[LRU_LIST].head; walker !== null;){
            const next = walker.next;
            forEachStep(this, fn, walker, thisp);
            walker = next;
        }
    }
    keys() {
        return this[LRU_LIST].toArray().map((k)=>k.key);
    }
    values() {
        return this[LRU_LIST].toArray().map((k)=>k.value);
    }
    reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
            this[LRU_LIST].forEach((hit)=>this[DISPOSE](hit.key, hit.value));
        }
        this[CACHE] = new Map() // hash of items by key
        ;
        this[LRU_LIST] = new Yallist() // list of items in order of use recency
        ;
        this[LENGTH] = 0 // length of items in the list
        ;
    }
    dump() {
        return this[LRU_LIST].map((hit)=>isStale(this, hit) ? false : {
                k: hit.key,
                v: hit.value,
                e: hit.now + (hit.maxAge || 0)
            }).toArray().filter((h)=>h);
    }
    dumpLru() {
        return this[LRU_LIST];
    }
    set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== 'number') throw new TypeError('maxAge must be a number');
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
            if (len > this[MAX]) {
                del(this, this[CACHE].get(key));
                return false;
            }
            const node = this[CACHE].get(key);
            const item = node.value;
            // dispose of the old one before overwriting
            // split out into 2 ifs for better coverage tracking
            if (this[DISPOSE]) {
                if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
            }
            item.now = now;
            item.maxAge = maxAge;
            item.value = value;
            this[LENGTH] += len - item.length;
            item.length = len;
            this.get(key);
            trim(this);
            return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        // oversized objects fall out of cache automatically.
        if (hit.length > this[MAX]) {
            if (this[DISPOSE]) this[DISPOSE](key, value);
            return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
    }
    has(key) {
        if (!this[CACHE].has(key)) return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
    }
    get(key) {
        return get(this, key, true);
    }
    peek(key) {
        return get(this, key, false);
    }
    pop() {
        const node = this[LRU_LIST].tail;
        if (!node) return null;
        del(this, node);
        return node.value;
    }
    del(key) {
        del(this, this[CACHE].get(key));
    }
    load(arr) {
        // reset the cache
        this.reset();
        const now = Date.now();
        // A previous serialized cache has the most recent items first
        for(let l = arr.length - 1; l >= 0; l--){
            const hit = arr[l];
            const expiresAt = hit.e || 0;
            if (expiresAt === 0) // the item was created without expiration in a non aged cache
            this.set(hit.k, hit.v);
            else {
                const maxAge = expiresAt - now;
                // dont add already expired items
                if (maxAge > 0) {
                    this.set(hit.k, hit.v, maxAge);
                }
            }
        }
    }
    prune() {
        this[CACHE].forEach((value, key)=>get(this, key, false));
    }
}
const get = (self, key, doUse)=>{
    const node = self[CACHE].get(key);
    if (node) {
        const hit = node.value;
        if (isStale(self, hit)) {
            del(self, node);
            if (!self[ALLOW_STALE]) return undefined;
        } else {
            if (doUse) {
                if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
                self[LRU_LIST].unshiftNode(node);
            }
        }
        return hit.value;
    }
};
const isStale = (self, hit)=>{
    if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;
    const diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
};
const trim = (self)=>{
    if (self[LENGTH] > self[MAX]) {
        for(let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;){
            // We know that we're about to delete this one, and also
            // what the next least recently used key will be, so just
            // go ahead and set it now.
            const prev = walker.prev;
            del(self, walker);
            walker = prev;
        }
    }
};
const del = (self, node)=>{
    if (node) {
        const hit = node.value;
        if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);
        self[LENGTH] -= hit.length;
        self[CACHE].delete(hit.key);
        self[LRU_LIST].removeNode(node);
    }
};
class Entry {
    constructor(key, value, length, now, maxAge){
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
    }
}
const forEachStep = (self, fn, node, thisp)=>{
    let hit = node.value;
    if (isStale(self, hit)) {
        del(self, node);
        if (!self[ALLOW_STALE]) hit = undefined;
    }
    if (hit) fn.call(thisp, hit.value, hit.key, self);
};
module.exports = LRUCache;
}}),
"[project]/node_modules/ms/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Helpers.
 */ var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
        return parse(val);
    } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function parse(str) {
    str = String(str);
    if (str.length > 100) {
        return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
        return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch(type){
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
            return n * y;
        case 'weeks':
        case 'week':
        case 'w':
            return n * w;
        case 'days':
        case 'day':
        case 'd':
            return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
            return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
            return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
            return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
    }
    if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
    }
    if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
    }
    if (msAbs >= s) {
        return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
    }
    if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
    }
    if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
    }
    if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
    }
    return ms + ' ms';
}
/**
 * Pluralization helper.
 */ function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}
}}),
"[project]/node_modules/debug/src/common.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */ function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = __turbopack_require__("[project]/node_modules/ms/index.js [app-client] (ecmascript)");
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key)=>{
        createDebug[key] = env[key];
    });
    /**
	* The currently active debug mode names, and names to skip.
	*/ createDebug.names = [];
    createDebug.skips = [];
    /**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/ createDebug.formatters = {};
    /**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/ function selectColor(namespace) {
        let hash = 0;
        for(let i = 0; i < namespace.length; i++){
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    /**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/ function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
            // Disabled?
            if (!debug.enabled) {
                return;
            }
            const self = debug;
            // Set `diff` timestamp
            const curr = Number(new Date());
            const ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== 'string') {
                // Anything else let's inspect with %O
                args.unshift('%O');
            }
            // Apply any `formatters` transformations
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format)=>{
                // If we encounter an escaped % then don't increase the array index
                if (match === '%%') {
                    return '%';
                }
                index++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === 'function') {
                    const val = args[index];
                    match = formatter.call(self, val);
                    // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index, 1);
                    index--;
                }
                return match;
            });
            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
        Object.defineProperty(debug, 'enabled', {
            enumerable: true,
            configurable: false,
            get: ()=>{
                if (enableOverride !== null) {
                    return enableOverride;
                }
                if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
            },
            set: (v)=>{
                enableOverride = v;
            }
        });
        // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === 'function') {
            createDebug.init(debug);
        }
        return debug;
    }
    function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
    }
    /**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/ function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        const split = (typeof namespaces === 'string' ? namespaces : '').trim().replace(' ', ',').split(',').filter(Boolean);
        for (const ns of split){
            if (ns[0] === '-') {
                createDebug.skips.push(ns.slice(1));
            } else {
                createDebug.names.push(ns);
            }
        }
    }
    /**
	 * Checks if the given string matches a namespace template, honoring
	 * asterisks as wildcards.
	 *
	 * @param {String} search
	 * @param {String} template
	 * @return {Boolean}
	 */ function matchesTemplate(search, template) {
        let searchIndex = 0;
        let templateIndex = 0;
        let starIndex = -1;
        let matchIndex = 0;
        while(searchIndex < search.length){
            if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {
                // Match character or proceed with wildcard
                if (template[templateIndex] === '*') {
                    starIndex = templateIndex;
                    matchIndex = searchIndex;
                    templateIndex++; // Skip the '*'
                } else {
                    searchIndex++;
                    templateIndex++;
                }
            } else if (starIndex !== -1) {
                // Backtrack to the last '*' and try to match more characters
                templateIndex = starIndex + 1;
                matchIndex++;
                searchIndex = matchIndex;
            } else {
                return false; // No match
            }
        }
        // Handle trailing '*' in template
        while(templateIndex < template.length && template[templateIndex] === '*'){
            templateIndex++;
        }
        return templateIndex === template.length;
    }
    /**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/ function disable() {
        const namespaces = [
            ...createDebug.names,
            ...createDebug.skips.map((namespace)=>'-' + namespace)
        ].join(',');
        createDebug.enable('');
        return namespaces;
    }
    /**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/ function enabled(name) {
        for (const skip of createDebug.skips){
            if (matchesTemplate(name, skip)) {
                return false;
            }
        }
        for (const ns of createDebug.names){
            if (matchesTemplate(name, ns)) {
                return true;
            }
        }
        return false;
    }
    /**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/ function coerce(val) {
        if (val instanceof Error) {
            return val.stack || val.message;
        }
        return val;
    }
    /**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/ function destroy() {
        console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
module.exports = setup;
}}),
"[project]/node_modules/debug/src/browser.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/* eslint-env browser */ /**
 * This is the web browser implementation of `debug()`.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (()=>{
    let warned = false;
    return ()=>{
        if (!warned) {
            warned = true;
            console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
        }
    };
})();
/**
 * Colors.
 */ exports.colors = [
    '#0000CC',
    '#0000FF',
    '#0033CC',
    '#0033FF',
    '#0066CC',
    '#0066FF',
    '#0099CC',
    '#0099FF',
    '#00CC00',
    '#00CC33',
    '#00CC66',
    '#00CC99',
    '#00CCCC',
    '#00CCFF',
    '#3300CC',
    '#3300FF',
    '#3333CC',
    '#3333FF',
    '#3366CC',
    '#3366FF',
    '#3399CC',
    '#3399FF',
    '#33CC00',
    '#33CC33',
    '#33CC66',
    '#33CC99',
    '#33CCCC',
    '#33CCFF',
    '#6600CC',
    '#6600FF',
    '#6633CC',
    '#6633FF',
    '#66CC00',
    '#66CC33',
    '#9900CC',
    '#9900FF',
    '#9933CC',
    '#9933FF',
    '#99CC00',
    '#99CC33',
    '#CC0000',
    '#CC0033',
    '#CC0066',
    '#CC0099',
    '#CC00CC',
    '#CC00FF',
    '#CC3300',
    '#CC3333',
    '#CC3366',
    '#CC3399',
    '#CC33CC',
    '#CC33FF',
    '#CC6600',
    '#CC6633',
    '#CC9900',
    '#CC9933',
    '#CCCC00',
    '#CCCC33',
    '#FF0000',
    '#FF0033',
    '#FF0066',
    '#FF0099',
    '#FF00CC',
    '#FF00FF',
    '#FF3300',
    '#FF3333',
    '#FF3366',
    '#FF3399',
    '#FF33CC',
    '#FF33FF',
    '#FF6600',
    '#FF6633',
    '#FF9900',
    '#FF9933',
    '#FFCC00',
    '#FFCC33'
];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */ // eslint-disable-next-line complexity
function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
        return true;
    }
    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
    }
    let m;
    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    // eslint-disable-next-line no-return-assign
    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
    if (!this.useColors) {
        return;
    }
    const c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');
    // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match)=>{
        if (match === '%%') {
            return;
        }
        index++;
        if (match === '%c') {
            // We only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index;
        }
    });
    args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */ exports.log = console.debug || console.log || (()=>{});
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    try {
        if (namespaces) {
            exports.storage.setItem('debug', namespaces);
        } else {
            exports.storage.removeItem('debug');
        }
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    let r;
    try {
        r = exports.storage.getItem('debug');
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] !== 'undefined' && 'env' in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]) {
        r = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.DEBUG;
    }
    return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */ function localstorage() {
    try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
module.exports = __turbopack_require__("[project]/node_modules/debug/src/common.js [app-client] (ecmascript)")(exports);
const { formatters } = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */ formatters.j = function(v) {
    try {
        return JSON.stringify(v);
    } catch (error) {
        return '[UnexpectedJSONParseError]: ' + error.message;
    }
};
}}),
"[project]/node_modules/@jridgewell/set-array/dist/set-array.umd.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
(function(global, factory) {
    ("TURBOPACK compile-time truthy", 1) ? factory(exports) : ("TURBOPACK unreachable", undefined);
})(this, function(exports1) {
    'use strict';
    /**
     * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the
     * index of the `key` in the backing array.
     *
     * This is designed to allow synchronizing a second array with the contents of the backing array,
     * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,
     * and there are never duplicates.
     */ class SetArray {
        constructor(){
            this._indexes = {
                __proto__: null
            };
            this.array = [];
        }
    }
    /**
     * Typescript doesn't allow friend access to private fields, so this just casts the set into a type
     * with public access modifiers.
     */ function cast(set) {
        return set;
    }
    /**
     * Gets the index associated with `key` in the backing array, if it is already present.
     */ function get(setarr, key) {
        return cast(setarr)._indexes[key];
    }
    /**
     * Puts `key` into the backing array, if it is not already present. Returns
     * the index of the `key` in the backing array.
     */ function put(setarr, key) {
        // The key may or may not be present. If it is present, it's a number.
        const index = get(setarr, key);
        if (index !== undefined) return index;
        const { array, _indexes: indexes } = cast(setarr);
        const length = array.push(key);
        return indexes[key] = length - 1;
    }
    /**
     * Pops the last added item out of the SetArray.
     */ function pop(setarr) {
        const { array, _indexes: indexes } = cast(setarr);
        if (array.length === 0) return;
        const last = array.pop();
        indexes[last] = undefined;
    }
    /**
     * Removes the key, if it exists in the set.
     */ function remove(setarr, key) {
        const index = get(setarr, key);
        if (index === undefined) return;
        const { array, _indexes: indexes } = cast(setarr);
        for(let i = index + 1; i < array.length; i++){
            const k = array[i];
            array[i - 1] = k;
            indexes[k]--;
        }
        indexes[key] = undefined;
        array.pop();
    }
    exports1.SetArray = SetArray;
    exports1.get = get;
    exports1.pop = pop;
    exports1.put = put;
    exports1.remove = remove;
    Object.defineProperty(exports1, '__esModule', {
        value: true
    });
}); //# sourceMappingURL=set-array.umd.js.map
}}),
"[project]/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/buffer/index.js [app-client] (ecmascript)");
(function(global, factory) {
    ("TURBOPACK compile-time truthy", 1) ? factory(exports) : ("TURBOPACK unreachable", undefined);
})(this, function(exports1) {
    'use strict';
    const comma = ','.charCodeAt(0);
    const semicolon = ';'.charCodeAt(0);
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    const intToChar = new Uint8Array(64); // 64 possible chars.
    const charToInt = new Uint8Array(128); // z is 122 in ASCII
    for(let i = 0; i < chars.length; i++){
        const c = chars.charCodeAt(i);
        intToChar[i] = c;
        charToInt[c] = i;
    }
    function decodeInteger(reader, relative) {
        let value = 0;
        let shift = 0;
        let integer = 0;
        do {
            const c = reader.next();
            integer = charToInt[c];
            value |= (integer & 31) << shift;
            shift += 5;
        }while (integer & 32)
        const shouldNegate = value & 1;
        value >>>= 1;
        if (shouldNegate) {
            value = -0x80000000 | -value;
        }
        return relative + value;
    }
    function encodeInteger(builder, num, relative) {
        let delta = num - relative;
        delta = delta < 0 ? -delta << 1 | 1 : delta << 1;
        do {
            let clamped = delta & 0b011111;
            delta >>>= 5;
            if (delta > 0) clamped |= 0b100000;
            builder.write(intToChar[clamped]);
        }while (delta > 0)
        return num;
    }
    function hasMoreVlq(reader, max) {
        if (reader.pos >= max) return false;
        return reader.peek() !== comma;
    }
    const bufLength = 1024 * 16;
    // Provide a fallback for older environments.
    const td = typeof TextDecoder !== 'undefined' ? /* #__PURE__ */ new TextDecoder() : typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"] !== 'undefined' ? {
        decode (buf) {
            const out = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(buf.buffer, buf.byteOffset, buf.byteLength);
            return out.toString();
        }
    } : {
        decode (buf) {
            let out = '';
            for(let i = 0; i < buf.length; i++){
                out += String.fromCharCode(buf[i]);
            }
            return out;
        }
    };
    class StringWriter {
        constructor(){
            this.pos = 0;
            this.out = '';
            this.buffer = new Uint8Array(bufLength);
        }
        write(v) {
            const { buffer } = this;
            buffer[this.pos++] = v;
            if (this.pos === bufLength) {
                this.out += td.decode(buffer);
                this.pos = 0;
            }
        }
        flush() {
            const { buffer, out, pos } = this;
            return pos > 0 ? out + td.decode(buffer.subarray(0, pos)) : out;
        }
    }
    class StringReader {
        constructor(buffer){
            this.pos = 0;
            this.buffer = buffer;
        }
        next() {
            return this.buffer.charCodeAt(this.pos++);
        }
        peek() {
            return this.buffer.charCodeAt(this.pos);
        }
        indexOf(char) {
            const { buffer, pos } = this;
            const idx = buffer.indexOf(char, pos);
            return idx === -1 ? buffer.length : idx;
        }
    }
    const EMPTY = [];
    function decodeOriginalScopes(input) {
        const { length } = input;
        const reader = new StringReader(input);
        const scopes = [];
        const stack = [];
        let line = 0;
        for(; reader.pos < length; reader.pos++){
            line = decodeInteger(reader, line);
            const column = decodeInteger(reader, 0);
            if (!hasMoreVlq(reader, length)) {
                const last = stack.pop();
                last[2] = line;
                last[3] = column;
                continue;
            }
            const kind = decodeInteger(reader, 0);
            const fields = decodeInteger(reader, 0);
            const hasName = fields & 0b0001;
            const scope = hasName ? [
                line,
                column,
                0,
                0,
                kind,
                decodeInteger(reader, 0)
            ] : [
                line,
                column,
                0,
                0,
                kind
            ];
            let vars = EMPTY;
            if (hasMoreVlq(reader, length)) {
                vars = [];
                do {
                    const varsIndex = decodeInteger(reader, 0);
                    vars.push(varsIndex);
                }while (hasMoreVlq(reader, length))
            }
            scope.vars = vars;
            scopes.push(scope);
            stack.push(scope);
        }
        return scopes;
    }
    function encodeOriginalScopes(scopes) {
        const writer = new StringWriter();
        for(let i = 0; i < scopes.length;){
            i = _encodeOriginalScopes(scopes, i, writer, [
                0
            ]);
        }
        return writer.flush();
    }
    function _encodeOriginalScopes(scopes, index, writer, state) {
        const scope = scopes[index];
        const { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, 4: kind, vars } = scope;
        if (index > 0) writer.write(comma);
        state[0] = encodeInteger(writer, startLine, state[0]);
        encodeInteger(writer, startColumn, 0);
        encodeInteger(writer, kind, 0);
        const fields = scope.length === 6 ? 0b0001 : 0;
        encodeInteger(writer, fields, 0);
        if (scope.length === 6) encodeInteger(writer, scope[5], 0);
        for (const v of vars){
            encodeInteger(writer, v, 0);
        }
        for(index++; index < scopes.length;){
            const next = scopes[index];
            const { 0: l, 1: c } = next;
            if (l > endLine || l === endLine && c >= endColumn) {
                break;
            }
            index = _encodeOriginalScopes(scopes, index, writer, state);
        }
        writer.write(comma);
        state[0] = encodeInteger(writer, endLine, state[0]);
        encodeInteger(writer, endColumn, 0);
        return index;
    }
    function decodeGeneratedRanges(input) {
        const { length } = input;
        const reader = new StringReader(input);
        const ranges = [];
        const stack = [];
        let genLine = 0;
        let definitionSourcesIndex = 0;
        let definitionScopeIndex = 0;
        let callsiteSourcesIndex = 0;
        let callsiteLine = 0;
        let callsiteColumn = 0;
        let bindingLine = 0;
        let bindingColumn = 0;
        do {
            const semi = reader.indexOf(';');
            let genColumn = 0;
            for(; reader.pos < semi; reader.pos++){
                genColumn = decodeInteger(reader, genColumn);
                if (!hasMoreVlq(reader, semi)) {
                    const last = stack.pop();
                    last[2] = genLine;
                    last[3] = genColumn;
                    continue;
                }
                const fields = decodeInteger(reader, 0);
                const hasDefinition = fields & 0b0001;
                const hasCallsite = fields & 0b0010;
                const hasScope = fields & 0b0100;
                let callsite = null;
                let bindings = EMPTY;
                let range;
                if (hasDefinition) {
                    const defSourcesIndex = decodeInteger(reader, definitionSourcesIndex);
                    definitionScopeIndex = decodeInteger(reader, definitionSourcesIndex === defSourcesIndex ? definitionScopeIndex : 0);
                    definitionSourcesIndex = defSourcesIndex;
                    range = [
                        genLine,
                        genColumn,
                        0,
                        0,
                        defSourcesIndex,
                        definitionScopeIndex
                    ];
                } else {
                    range = [
                        genLine,
                        genColumn,
                        0,
                        0
                    ];
                }
                range.isScope = !!hasScope;
                if (hasCallsite) {
                    const prevCsi = callsiteSourcesIndex;
                    const prevLine = callsiteLine;
                    callsiteSourcesIndex = decodeInteger(reader, callsiteSourcesIndex);
                    const sameSource = prevCsi === callsiteSourcesIndex;
                    callsiteLine = decodeInteger(reader, sameSource ? callsiteLine : 0);
                    callsiteColumn = decodeInteger(reader, sameSource && prevLine === callsiteLine ? callsiteColumn : 0);
                    callsite = [
                        callsiteSourcesIndex,
                        callsiteLine,
                        callsiteColumn
                    ];
                }
                range.callsite = callsite;
                if (hasMoreVlq(reader, semi)) {
                    bindings = [];
                    do {
                        bindingLine = genLine;
                        bindingColumn = genColumn;
                        const expressionsCount = decodeInteger(reader, 0);
                        let expressionRanges;
                        if (expressionsCount < -1) {
                            expressionRanges = [
                                [
                                    decodeInteger(reader, 0)
                                ]
                            ];
                            for(let i = -1; i > expressionsCount; i--){
                                const prevBl = bindingLine;
                                bindingLine = decodeInteger(reader, bindingLine);
                                bindingColumn = decodeInteger(reader, bindingLine === prevBl ? bindingColumn : 0);
                                const expression = decodeInteger(reader, 0);
                                expressionRanges.push([
                                    expression,
                                    bindingLine,
                                    bindingColumn
                                ]);
                            }
                        } else {
                            expressionRanges = [
                                [
                                    expressionsCount
                                ]
                            ];
                        }
                        bindings.push(expressionRanges);
                    }while (hasMoreVlq(reader, semi))
                }
                range.bindings = bindings;
                ranges.push(range);
                stack.push(range);
            }
            genLine++;
            reader.pos = semi + 1;
        }while (reader.pos < length)
        return ranges;
    }
    function encodeGeneratedRanges(ranges) {
        if (ranges.length === 0) return '';
        const writer = new StringWriter();
        for(let i = 0; i < ranges.length;){
            i = _encodeGeneratedRanges(ranges, i, writer, [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]);
        }
        return writer.flush();
    }
    function _encodeGeneratedRanges(ranges, index, writer, state) {
        const range = ranges[index];
        const { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, isScope, callsite, bindings } = range;
        if (state[0] < startLine) {
            catchupLine(writer, state[0], startLine);
            state[0] = startLine;
            state[1] = 0;
        } else if (index > 0) {
            writer.write(comma);
        }
        state[1] = encodeInteger(writer, range[1], state[1]);
        const fields = (range.length === 6 ? 0b0001 : 0) | (callsite ? 0b0010 : 0) | (isScope ? 0b0100 : 0);
        encodeInteger(writer, fields, 0);
        if (range.length === 6) {
            const { 4: sourcesIndex, 5: scopesIndex } = range;
            if (sourcesIndex !== state[2]) {
                state[3] = 0;
            }
            state[2] = encodeInteger(writer, sourcesIndex, state[2]);
            state[3] = encodeInteger(writer, scopesIndex, state[3]);
        }
        if (callsite) {
            const { 0: sourcesIndex, 1: callLine, 2: callColumn } = range.callsite;
            if (sourcesIndex !== state[4]) {
                state[5] = 0;
                state[6] = 0;
            } else if (callLine !== state[5]) {
                state[6] = 0;
            }
            state[4] = encodeInteger(writer, sourcesIndex, state[4]);
            state[5] = encodeInteger(writer, callLine, state[5]);
            state[6] = encodeInteger(writer, callColumn, state[6]);
        }
        if (bindings) {
            for (const binding of bindings){
                if (binding.length > 1) encodeInteger(writer, -binding.length, 0);
                const expression = binding[0][0];
                encodeInteger(writer, expression, 0);
                let bindingStartLine = startLine;
                let bindingStartColumn = startColumn;
                for(let i = 1; i < binding.length; i++){
                    const expRange = binding[i];
                    bindingStartLine = encodeInteger(writer, expRange[1], bindingStartLine);
                    bindingStartColumn = encodeInteger(writer, expRange[2], bindingStartColumn);
                    encodeInteger(writer, expRange[0], 0);
                }
            }
        }
        for(index++; index < ranges.length;){
            const next = ranges[index];
            const { 0: l, 1: c } = next;
            if (l > endLine || l === endLine && c >= endColumn) {
                break;
            }
            index = _encodeGeneratedRanges(ranges, index, writer, state);
        }
        if (state[0] < endLine) {
            catchupLine(writer, state[0], endLine);
            state[0] = endLine;
            state[1] = 0;
        } else {
            writer.write(comma);
        }
        state[1] = encodeInteger(writer, endColumn, state[1]);
        return index;
    }
    function catchupLine(writer, lastLine, line) {
        do {
            writer.write(semicolon);
        }while (++lastLine < line)
    }
    function decode(mappings) {
        const { length } = mappings;
        const reader = new StringReader(mappings);
        const decoded = [];
        let genColumn = 0;
        let sourcesIndex = 0;
        let sourceLine = 0;
        let sourceColumn = 0;
        let namesIndex = 0;
        do {
            const semi = reader.indexOf(';');
            const line = [];
            let sorted = true;
            let lastCol = 0;
            genColumn = 0;
            while(reader.pos < semi){
                let seg;
                genColumn = decodeInteger(reader, genColumn);
                if (genColumn < lastCol) sorted = false;
                lastCol = genColumn;
                if (hasMoreVlq(reader, semi)) {
                    sourcesIndex = decodeInteger(reader, sourcesIndex);
                    sourceLine = decodeInteger(reader, sourceLine);
                    sourceColumn = decodeInteger(reader, sourceColumn);
                    if (hasMoreVlq(reader, semi)) {
                        namesIndex = decodeInteger(reader, namesIndex);
                        seg = [
                            genColumn,
                            sourcesIndex,
                            sourceLine,
                            sourceColumn,
                            namesIndex
                        ];
                    } else {
                        seg = [
                            genColumn,
                            sourcesIndex,
                            sourceLine,
                            sourceColumn
                        ];
                    }
                } else {
                    seg = [
                        genColumn
                    ];
                }
                line.push(seg);
                reader.pos++;
            }
            if (!sorted) sort(line);
            decoded.push(line);
            reader.pos = semi + 1;
        }while (reader.pos <= length)
        return decoded;
    }
    function sort(line) {
        line.sort(sortComparator);
    }
    function sortComparator(a, b) {
        return a[0] - b[0];
    }
    function encode(decoded) {
        const writer = new StringWriter();
        let sourcesIndex = 0;
        let sourceLine = 0;
        let sourceColumn = 0;
        let namesIndex = 0;
        for(let i = 0; i < decoded.length; i++){
            const line = decoded[i];
            if (i > 0) writer.write(semicolon);
            if (line.length === 0) continue;
            let genColumn = 0;
            for(let j = 0; j < line.length; j++){
                const segment = line[j];
                if (j > 0) writer.write(comma);
                genColumn = encodeInteger(writer, segment[0], genColumn);
                if (segment.length === 1) continue;
                sourcesIndex = encodeInteger(writer, segment[1], sourcesIndex);
                sourceLine = encodeInteger(writer, segment[2], sourceLine);
                sourceColumn = encodeInteger(writer, segment[3], sourceColumn);
                if (segment.length === 4) continue;
                namesIndex = encodeInteger(writer, segment[4], namesIndex);
            }
        }
        return writer.flush();
    }
    exports1.decode = decode;
    exports1.decodeGeneratedRanges = decodeGeneratedRanges;
    exports1.decodeOriginalScopes = decodeOriginalScopes;
    exports1.encode = encode;
    exports1.encodeGeneratedRanges = encodeGeneratedRanges;
    exports1.encodeOriginalScopes = encodeOriginalScopes;
    Object.defineProperty(exports1, '__esModule', {
        value: true
    });
}); //# sourceMappingURL=sourcemap-codec.umd.js.map
}}),
"[project]/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
(function(global, factory) {
    ("TURBOPACK compile-time truthy", 1) ? module.exports = factory() : ("TURBOPACK unreachable", undefined);
})(this, function() {
    'use strict';
    // Matches the scheme of a URL, eg "http://"
    const schemeRegex = /^[\w+.-]+:\/\//;
    /**
     * Matches the parts of a URL:
     * 1. Scheme, including ":", guaranteed.
     * 2. User/password, including "@", optional.
     * 3. Host, guaranteed.
     * 4. Port, including ":", optional.
     * 5. Path, including "/", optional.
     * 6. Query, including "?", optional.
     * 7. Hash, including "#", optional.
     */ const urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/;
    /**
     * File URLs are weird. They dont' need the regular `//` in the scheme, they may or may not start
     * with a leading `/`, they can have a domain (but only if they don't start with a Windows drive).
     *
     * 1. Host, optional.
     * 2. Path, which may include "/", guaranteed.
     * 3. Query, including "?", optional.
     * 4. Hash, including "#", optional.
     */ const fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
    function isAbsoluteUrl(input) {
        return schemeRegex.test(input);
    }
    function isSchemeRelativeUrl(input) {
        return input.startsWith('//');
    }
    function isAbsolutePath(input) {
        return input.startsWith('/');
    }
    function isFileUrl(input) {
        return input.startsWith('file:');
    }
    function isRelative(input) {
        return /^[.?#]/.test(input);
    }
    function parseAbsoluteUrl(input) {
        const match = urlRegex.exec(input);
        return makeUrl(match[1], match[2] || '', match[3], match[4] || '', match[5] || '/', match[6] || '', match[7] || '');
    }
    function parseFileUrl(input) {
        const match = fileRegex.exec(input);
        const path = match[2];
        return makeUrl('file:', '', match[1] || '', '', isAbsolutePath(path) ? path : '/' + path, match[3] || '', match[4] || '');
    }
    function makeUrl(scheme, user, host, port, path, query, hash) {
        return {
            scheme,
            user,
            host,
            port,
            path,
            query,
            hash,
            type: 7 /* Absolute */ 
        };
    }
    function parseUrl(input) {
        if (isSchemeRelativeUrl(input)) {
            const url = parseAbsoluteUrl('http:' + input);
            url.scheme = '';
            url.type = 6 /* SchemeRelative */ ;
            return url;
        }
        if (isAbsolutePath(input)) {
            const url = parseAbsoluteUrl('http://foo.com' + input);
            url.scheme = '';
            url.host = '';
            url.type = 5 /* AbsolutePath */ ;
            return url;
        }
        if (isFileUrl(input)) return parseFileUrl(input);
        if (isAbsoluteUrl(input)) return parseAbsoluteUrl(input);
        const url = parseAbsoluteUrl('http://foo.com/' + input);
        url.scheme = '';
        url.host = '';
        url.type = input ? input.startsWith('?') ? 3 /* Query */  : input.startsWith('#') ? 2 /* Hash */  : 4 /* RelativePath */  : 1 /* Empty */ ;
        return url;
    }
    function stripPathFilename(path) {
        // If a path ends with a parent directory "..", then it's a relative path with excess parent
        // paths. It's not a file, so we can't strip it.
        if (path.endsWith('/..')) return path;
        const index = path.lastIndexOf('/');
        return path.slice(0, index + 1);
    }
    function mergePaths(url, base) {
        normalizePath(base, base.type);
        // If the path is just a "/", then it was an empty path to begin with (remember, we're a relative
        // path).
        if (url.path === '/') {
            url.path = base.path;
        } else {
            // Resolution happens relative to the base path's directory, not the file.
            url.path = stripPathFilename(base.path) + url.path;
        }
    }
    /**
     * The path can have empty directories "//", unneeded parents "foo/..", or current directory
     * "foo/.". We need to normalize to a standard representation.
     */ function normalizePath(url, type) {
        const rel = type <= 4 /* RelativePath */ ;
        const pieces = url.path.split('/');
        // We need to preserve the first piece always, so that we output a leading slash. The item at
        // pieces[0] is an empty string.
        let pointer = 1;
        // Positive is the number of real directories we've output, used for popping a parent directory.
        // Eg, "foo/bar/.." will have a positive 2, and we can decrement to be left with just "foo".
        let positive = 0;
        // We need to keep a trailing slash if we encounter an empty directory (eg, splitting "foo/" will
        // generate `["foo", ""]` pieces). And, if we pop a parent directory. But once we encounter a
        // real directory, we won't need to append, unless the other conditions happen again.
        let addTrailingSlash = false;
        for(let i = 1; i < pieces.length; i++){
            const piece = pieces[i];
            // An empty directory, could be a trailing slash, or just a double "//" in the path.
            if (!piece) {
                addTrailingSlash = true;
                continue;
            }
            // If we encounter a real directory, then we don't need to append anymore.
            addTrailingSlash = false;
            // A current directory, which we can always drop.
            if (piece === '.') continue;
            // A parent directory, we need to see if there are any real directories we can pop. Else, we
            // have an excess of parents, and we'll need to keep the "..".
            if (piece === '..') {
                if (positive) {
                    addTrailingSlash = true;
                    positive--;
                    pointer--;
                } else if (rel) {
                    // If we're in a relativePath, then we need to keep the excess parents. Else, in an absolute
                    // URL, protocol relative URL, or an absolute path, we don't need to keep excess.
                    pieces[pointer++] = piece;
                }
                continue;
            }
            // We've encountered a real directory. Move it to the next insertion pointer, which accounts for
            // any popped or dropped directories.
            pieces[pointer++] = piece;
            positive++;
        }
        let path = '';
        for(let i = 1; i < pointer; i++){
            path += '/' + pieces[i];
        }
        if (!path || addTrailingSlash && !path.endsWith('/..')) {
            path += '/';
        }
        url.path = path;
    }
    /**
     * Attempts to resolve `input` URL/path relative to `base`.
     */ function resolve(input, base) {
        if (!input && !base) return '';
        const url = parseUrl(input);
        let inputType = url.type;
        if (base && inputType !== 7 /* Absolute */ ) {
            const baseUrl = parseUrl(base);
            const baseType = baseUrl.type;
            switch(inputType){
                case 1 /* Empty */ :
                    url.hash = baseUrl.hash;
                // fall through
                case 2 /* Hash */ :
                    url.query = baseUrl.query;
                // fall through
                case 3 /* Query */ :
                case 4 /* RelativePath */ :
                    mergePaths(url, baseUrl);
                // fall through
                case 5 /* AbsolutePath */ :
                    // The host, user, and port are joined, you can't copy one without the others.
                    url.user = baseUrl.user;
                    url.host = baseUrl.host;
                    url.port = baseUrl.port;
                // fall through
                case 6 /* SchemeRelative */ :
                    // The input doesn't have a schema at least, so we need to copy at least that over.
                    url.scheme = baseUrl.scheme;
            }
            if (baseType > inputType) inputType = baseType;
        }
        normalizePath(url, inputType);
        const queryHash = url.query + url.hash;
        switch(inputType){
            // This is impossible, because of the empty checks at the start of the function.
            // case UrlType.Empty:
            case 2 /* Hash */ :
            case 3 /* Query */ :
                return queryHash;
            case 4 /* RelativePath */ :
                {
                    // The first char is always a "/", and we need it to be relative.
                    const path = url.path.slice(1);
                    if (!path) return queryHash || '.';
                    if (isRelative(base || input) && !isRelative(path)) {
                        // If base started with a leading ".", or there is no base and input started with a ".",
                        // then we need to ensure that the relative path starts with a ".". We don't know if
                        // relative starts with a "..", though, so check before prepending.
                        return './' + path + queryHash;
                    }
                    return path + queryHash;
                }
            case 5 /* AbsolutePath */ :
                return url.path + queryHash;
            default:
                return url.scheme + '//' + url.user + url.host + url.port + url.path + queryHash;
        }
    }
    return resolve;
}); //# sourceMappingURL=resolve-uri.umd.js.map
}}),
"[project]/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
(function(global, factory) {
    ("TURBOPACK compile-time truthy", 1) ? factory(exports, __turbopack_require__("[project]/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js [app-client] (ecmascript)"), __turbopack_require__("[project]/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js [app-client] (ecmascript)")) : ("TURBOPACK unreachable", undefined);
})(this, function(exports1, sourcemapCodec, resolveUri) {
    'use strict';
    function resolve(input, base) {
        // The base is always treated as a directory, if it's not empty.
        // https://github.com/mozilla/source-map/blob/8cb3ee57/lib/util.js#L327
        // https://github.com/chromium/chromium/blob/da4adbb3/third_party/blink/renderer/devtools/front_end/sdk/SourceMap.js#L400-L401
        if (base && !base.endsWith('/')) base += '/';
        return resolveUri(input, base);
    }
    /**
     * Removes everything after the last "/", but leaves the slash.
     */ function stripFilename(path) {
        if (!path) return '';
        const index = path.lastIndexOf('/');
        return path.slice(0, index + 1);
    }
    const COLUMN = 0;
    const SOURCES_INDEX = 1;
    const SOURCE_LINE = 2;
    const SOURCE_COLUMN = 3;
    const NAMES_INDEX = 4;
    const REV_GENERATED_LINE = 1;
    const REV_GENERATED_COLUMN = 2;
    function maybeSort(mappings, owned) {
        const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
        if (unsortedIndex === mappings.length) return mappings;
        // If we own the array (meaning we parsed it from JSON), then we're free to directly mutate it. If
        // not, we do not want to modify the consumer's input array.
        if (!owned) mappings = mappings.slice();
        for(let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)){
            mappings[i] = sortSegments(mappings[i], owned);
        }
        return mappings;
    }
    function nextUnsortedSegmentLine(mappings, start) {
        for(let i = start; i < mappings.length; i++){
            if (!isSorted(mappings[i])) return i;
        }
        return mappings.length;
    }
    function isSorted(line) {
        for(let j = 1; j < line.length; j++){
            if (line[j][COLUMN] < line[j - 1][COLUMN]) {
                return false;
            }
        }
        return true;
    }
    function sortSegments(line, owned) {
        if (!owned) line = line.slice();
        return line.sort(sortComparator);
    }
    function sortComparator(a, b) {
        return a[COLUMN] - b[COLUMN];
    }
    let found = false;
    /**
     * A binary search implementation that returns the index if a match is found.
     * If no match is found, then the left-index (the index associated with the item that comes just
     * before the desired index) is returned. To maintain proper sort order, a splice would happen at
     * the next index:
     *
     * ```js
     * const array = [1, 3];
     * const needle = 2;
     * const index = binarySearch(array, needle, (item, needle) => item - needle);
     *
     * assert.equal(index, 0);
     * array.splice(index + 1, 0, needle);
     * assert.deepEqual(array, [1, 2, 3]);
     * ```
     */ function binarySearch(haystack, needle, low, high) {
        while(low <= high){
            const mid = low + (high - low >> 1);
            const cmp = haystack[mid][COLUMN] - needle;
            if (cmp === 0) {
                found = true;
                return mid;
            }
            if (cmp < 0) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        found = false;
        return low - 1;
    }
    function upperBound(haystack, needle, index) {
        for(let i = index + 1; i < haystack.length; index = i++){
            if (haystack[i][COLUMN] !== needle) break;
        }
        return index;
    }
    function lowerBound(haystack, needle, index) {
        for(let i = index - 1; i >= 0; index = i--){
            if (haystack[i][COLUMN] !== needle) break;
        }
        return index;
    }
    function memoizedState() {
        return {
            lastKey: -1,
            lastNeedle: -1,
            lastIndex: -1
        };
    }
    /**
     * This overly complicated beast is just to record the last tested line/column and the resulting
     * index, allowing us to skip a few tests if mappings are monotonically increasing.
     */ function memoizedBinarySearch(haystack, needle, state, key) {
        const { lastKey, lastNeedle, lastIndex } = state;
        let low = 0;
        let high = haystack.length - 1;
        if (key === lastKey) {
            if (needle === lastNeedle) {
                found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;
                return lastIndex;
            }
            if (needle >= lastNeedle) {
                // lastIndex may be -1 if the previous needle was not found.
                low = lastIndex === -1 ? 0 : lastIndex;
            } else {
                high = lastIndex;
            }
        }
        state.lastKey = key;
        state.lastNeedle = needle;
        return state.lastIndex = binarySearch(haystack, needle, low, high);
    }
    // Rebuilds the original source files, with mappings that are ordered by source line/column instead
    // of generated line/column.
    function buildBySources(decoded, memos) {
        const sources = memos.map(buildNullArray);
        for(let i = 0; i < decoded.length; i++){
            const line = decoded[i];
            for(let j = 0; j < line.length; j++){
                const seg = line[j];
                if (seg.length === 1) continue;
                const sourceIndex = seg[SOURCES_INDEX];
                const sourceLine = seg[SOURCE_LINE];
                const sourceColumn = seg[SOURCE_COLUMN];
                const originalSource = sources[sourceIndex];
                const originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []);
                const memo = memos[sourceIndex];
                // The binary search either found a match, or it found the left-index just before where the
                // segment should go. Either way, we want to insert after that. And there may be multiple
                // generated segments associated with an original location, so there may need to move several
                // indexes before we find where we need to insert.
                let index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
                memo.lastIndex = ++index;
                insert(originalLine, index, [
                    sourceColumn,
                    i,
                    seg[COLUMN]
                ]);
            }
        }
        return sources;
    }
    function insert(array, index, value) {
        for(let i = array.length; i > index; i--){
            array[i] = array[i - 1];
        }
        array[index] = value;
    }
    // Null arrays allow us to use ordered index keys without actually allocating contiguous memory like
    // a real array. We use a null-prototype object to avoid prototype pollution and deoptimizations.
    // Numeric properties on objects are magically sorted in ascending order by the engine regardless of
    // the insertion order. So, by setting any numeric keys, even out of order, we'll get ascending
    // order when iterating with for-in.
    function buildNullArray() {
        return {
            __proto__: null
        };
    }
    const AnyMap = function(map, mapUrl) {
        const parsed = parse(map);
        if (!('sections' in parsed)) {
            return new TraceMap(parsed, mapUrl);
        }
        const mappings = [];
        const sources = [];
        const sourcesContent = [];
        const names = [];
        const ignoreList = [];
        recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, ignoreList, 0, 0, Infinity, Infinity);
        const joined = {
            version: 3,
            file: parsed.file,
            names,
            sources,
            sourcesContent,
            mappings,
            ignoreList
        };
        return presortedDecodedMap(joined);
    };
    function parse(map) {
        return typeof map === 'string' ? JSON.parse(map) : map;
    }
    function recurse(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
        const { sections } = input;
        for(let i = 0; i < sections.length; i++){
            const { map, offset } = sections[i];
            let sl = stopLine;
            let sc = stopColumn;
            if (i + 1 < sections.length) {
                const nextOffset = sections[i + 1].offset;
                sl = Math.min(stopLine, lineOffset + nextOffset.line);
                if (sl === stopLine) {
                    sc = Math.min(stopColumn, columnOffset + nextOffset.column);
                } else if (sl < stopLine) {
                    sc = columnOffset + nextOffset.column;
                }
            }
            addSection(map, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset + offset.line, columnOffset + offset.column, sl, sc);
        }
    }
    function addSection(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
        const parsed = parse(input);
        if ('sections' in parsed) return recurse(...arguments);
        const map = new TraceMap(parsed, mapUrl);
        const sourcesOffset = sources.length;
        const namesOffset = names.length;
        const decoded = decodedMappings(map);
        const { resolvedSources, sourcesContent: contents, ignoreList: ignores } = map;
        append(sources, resolvedSources);
        append(names, map.names);
        if (contents) append(sourcesContent, contents);
        else for(let i = 0; i < resolvedSources.length; i++)sourcesContent.push(null);
        if (ignores) for(let i = 0; i < ignores.length; i++)ignoreList.push(ignores[i] + sourcesOffset);
        for(let i = 0; i < decoded.length; i++){
            const lineI = lineOffset + i;
            // We can only add so many lines before we step into the range that the next section's map
            // controls. When we get to the last line, then we'll start checking the segments to see if
            // they've crossed into the column range. But it may not have any columns that overstep, so we
            // still need to check that we don't overstep lines, too.
            if (lineI > stopLine) return;
            // The out line may already exist in mappings (if we're continuing the line started by a
            // previous section). Or, we may have jumped ahead several lines to start this section.
            const out = getLine(mappings, lineI);
            // On the 0th loop, the section's column offset shifts us forward. On all other lines (since the
            // map can be multiple lines), it doesn't.
            const cOffset = i === 0 ? columnOffset : 0;
            const line = decoded[i];
            for(let j = 0; j < line.length; j++){
                const seg = line[j];
                const column = cOffset + seg[COLUMN];
                // If this segment steps into the column range that the next section's map controls, we need
                // to stop early.
                if (lineI === stopLine && column >= stopColumn) return;
                if (seg.length === 1) {
                    out.push([
                        column
                    ]);
                    continue;
                }
                const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];
                const sourceLine = seg[SOURCE_LINE];
                const sourceColumn = seg[SOURCE_COLUMN];
                out.push(seg.length === 4 ? [
                    column,
                    sourcesIndex,
                    sourceLine,
                    sourceColumn
                ] : [
                    column,
                    sourcesIndex,
                    sourceLine,
                    sourceColumn,
                    namesOffset + seg[NAMES_INDEX]
                ]);
            }
        }
    }
    function append(arr, other) {
        for(let i = 0; i < other.length; i++)arr.push(other[i]);
    }
    function getLine(arr, index) {
        for(let i = arr.length; i <= index; i++)arr[i] = [];
        return arr[index];
    }
    const LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';
    const COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';
    const LEAST_UPPER_BOUND = -1;
    const GREATEST_LOWER_BOUND = 1;
    class TraceMap {
        constructor(map, mapUrl){
            const isString = typeof map === 'string';
            if (!isString && map._decodedMemo) return map;
            const parsed = isString ? JSON.parse(map) : map;
            const { version, file, names, sourceRoot, sources, sourcesContent } = parsed;
            this.version = version;
            this.file = file;
            this.names = names || [];
            this.sourceRoot = sourceRoot;
            this.sources = sources;
            this.sourcesContent = sourcesContent;
            this.ignoreList = parsed.ignoreList || parsed.x_google_ignoreList || undefined;
            const from = resolve(sourceRoot || '', stripFilename(mapUrl));
            this.resolvedSources = sources.map((s)=>resolve(s || '', from));
            const { mappings } = parsed;
            if (typeof mappings === 'string') {
                this._encoded = mappings;
                this._decoded = undefined;
            } else {
                this._encoded = undefined;
                this._decoded = maybeSort(mappings, isString);
            }
            this._decodedMemo = memoizedState();
            this._bySources = undefined;
            this._bySourceMemos = undefined;
        }
    }
    /**
     * Typescript doesn't allow friend access to private fields, so this just casts the map into a type
     * with public access modifiers.
     */ function cast(map) {
        return map;
    }
    /**
     * Returns the encoded (VLQ string) form of the SourceMap's mappings field.
     */ function encodedMappings(map) {
        var _a;
        var _b;
        return (_a = (_b = cast(map))._encoded) !== null && _a !== void 0 ? _a : _b._encoded = sourcemapCodec.encode(cast(map)._decoded);
    }
    /**
     * Returns the decoded (array of lines of segments) form of the SourceMap's mappings field.
     */ function decodedMappings(map) {
        var _a;
        return (_a = cast(map))._decoded || (_a._decoded = sourcemapCodec.decode(cast(map)._encoded));
    }
    /**
     * A low-level API to find the segment associated with a generated line/column (think, from a
     * stack trace). Line and column here are 0-based, unlike `originalPositionFor`.
     */ function traceSegment(map, line, column) {
        const decoded = decodedMappings(map);
        // It's common for parent source maps to have pointers to lines that have no
        // mapping (like a "//# sourceMappingURL=") at the end of the child file.
        if (line >= decoded.length) return null;
        const segments = decoded[line];
        const index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, GREATEST_LOWER_BOUND);
        return index === -1 ? null : segments[index];
    }
    /**
     * A higher-level API to find the source/line/column associated with a generated line/column
     * (think, from a stack trace). Line is 1-based, but column is 0-based, due to legacy behavior in
     * `source-map` library.
     */ function originalPositionFor(map, needle) {
        let { line, column, bias } = needle;
        line--;
        if (line < 0) throw new Error(LINE_GTR_ZERO);
        if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
        const decoded = decodedMappings(map);
        // It's common for parent source maps to have pointers to lines that have no
        // mapping (like a "//# sourceMappingURL=") at the end of the child file.
        if (line >= decoded.length) return OMapping(null, null, null, null);
        const segments = decoded[line];
        const index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
        if (index === -1) return OMapping(null, null, null, null);
        const segment = segments[index];
        if (segment.length === 1) return OMapping(null, null, null, null);
        const { names, resolvedSources } = map;
        return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], segment.length === 5 ? names[segment[NAMES_INDEX]] : null);
    }
    /**
     * Finds the generated line/column position of the provided source/line/column source position.
     */ function generatedPositionFor(map, needle) {
        const { source, line, column, bias } = needle;
        return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);
    }
    /**
     * Finds all generated line/column positions of the provided source/line/column source position.
     */ function allGeneratedPositionsFor(map, needle) {
        const { source, line, column, bias } = needle;
        // SourceMapConsumer uses LEAST_UPPER_BOUND for some reason, so we follow suit.
        return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);
    }
    /**
     * Iterates each mapping in generated position order.
     */ function eachMapping(map, cb) {
        const decoded = decodedMappings(map);
        const { names, resolvedSources } = map;
        for(let i = 0; i < decoded.length; i++){
            const line = decoded[i];
            for(let j = 0; j < line.length; j++){
                const seg = line[j];
                const generatedLine = i + 1;
                const generatedColumn = seg[0];
                let source = null;
                let originalLine = null;
                let originalColumn = null;
                let name = null;
                if (seg.length !== 1) {
                    source = resolvedSources[seg[1]];
                    originalLine = seg[2] + 1;
                    originalColumn = seg[3];
                }
                if (seg.length === 5) name = names[seg[4]];
                cb({
                    generatedLine,
                    generatedColumn,
                    source,
                    originalLine,
                    originalColumn,
                    name
                });
            }
        }
    }
    function sourceIndex(map, source) {
        const { sources, resolvedSources } = map;
        let index = sources.indexOf(source);
        if (index === -1) index = resolvedSources.indexOf(source);
        return index;
    }
    /**
     * Retrieves the source content for a particular source, if its found. Returns null if not.
     */ function sourceContentFor(map, source) {
        const { sourcesContent } = map;
        if (sourcesContent == null) return null;
        const index = sourceIndex(map, source);
        return index === -1 ? null : sourcesContent[index];
    }
    /**
     * Determines if the source is marked to ignore by the source map.
     */ function isIgnored(map, source) {
        const { ignoreList } = map;
        if (ignoreList == null) return false;
        const index = sourceIndex(map, source);
        return index === -1 ? false : ignoreList.includes(index);
    }
    /**
     * A helper that skips sorting of the input map's mappings array, which can be expensive for larger
     * maps.
     */ function presortedDecodedMap(map, mapUrl) {
        const tracer = new TraceMap(clone(map, []), mapUrl);
        cast(tracer)._decoded = map.mappings;
        return tracer;
    }
    /**
     * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects
     * a sourcemap, or to JSON.stringify.
     */ function decodedMap(map) {
        return clone(map, decodedMappings(map));
    }
    /**
     * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects
     * a sourcemap, or to JSON.stringify.
     */ function encodedMap(map) {
        return clone(map, encodedMappings(map));
    }
    function clone(map, mappings) {
        return {
            version: map.version,
            file: map.file,
            names: map.names,
            sourceRoot: map.sourceRoot,
            sources: map.sources,
            sourcesContent: map.sourcesContent,
            mappings,
            ignoreList: map.ignoreList || map.x_google_ignoreList
        };
    }
    function OMapping(source, line, column, name) {
        return {
            source,
            line,
            column,
            name
        };
    }
    function GMapping(line, column) {
        return {
            line,
            column
        };
    }
    function traceSegmentInternal(segments, memo, line, column, bias) {
        let index = memoizedBinarySearch(segments, column, memo, line);
        if (found) {
            index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);
        } else if (bias === LEAST_UPPER_BOUND) index++;
        if (index === -1 || index === segments.length) return -1;
        return index;
    }
    function sliceGeneratedPositions(segments, memo, line, column, bias) {
        let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);
        // We ignored the bias when tracing the segment so that we're guarnateed to find the first (in
        // insertion order) segment that matched. Even if we did respect the bias when tracing, we would
        // still need to call `lowerBound()` to find the first segment, which is slower than just looking
        // for the GREATEST_LOWER_BOUND to begin with. The only difference that matters for us is when the
        // binary search didn't match, in which case GREATEST_LOWER_BOUND just needs to increment to
        // match LEAST_UPPER_BOUND.
        if (!found && bias === LEAST_UPPER_BOUND) min++;
        if (min === -1 || min === segments.length) return [];
        // We may have found the segment that started at an earlier column. If this is the case, then we
        // need to slice all generated segments that match _that_ column, because all such segments span
        // to our desired column.
        const matchedColumn = found ? column : segments[min][COLUMN];
        // The binary search is not guaranteed to find the lower bound when a match wasn't found.
        if (!found) min = lowerBound(segments, matchedColumn, min);
        const max = upperBound(segments, matchedColumn, min);
        const result = [];
        for(; min <= max; min++){
            const segment = segments[min];
            result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
        }
        return result;
    }
    function generatedPosition(map, source, line, column, bias, all) {
        var _a;
        line--;
        if (line < 0) throw new Error(LINE_GTR_ZERO);
        if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
        const { sources, resolvedSources } = map;
        let sourceIndex = sources.indexOf(source);
        if (sourceIndex === -1) sourceIndex = resolvedSources.indexOf(source);
        if (sourceIndex === -1) return all ? [] : GMapping(null, null);
        const generated = (_a = cast(map))._bySources || (_a._bySources = buildBySources(decodedMappings(map), cast(map)._bySourceMemos = sources.map(memoizedState)));
        const segments = generated[sourceIndex][line];
        if (segments == null) return all ? [] : GMapping(null, null);
        const memo = cast(map)._bySourceMemos[sourceIndex];
        if (all) return sliceGeneratedPositions(segments, memo, line, column, bias);
        const index = traceSegmentInternal(segments, memo, line, column, bias);
        if (index === -1) return GMapping(null, null);
        const segment = segments[index];
        return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
    }
    exports1.AnyMap = AnyMap;
    exports1.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND;
    exports1.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND;
    exports1.TraceMap = TraceMap;
    exports1.allGeneratedPositionsFor = allGeneratedPositionsFor;
    exports1.decodedMap = decodedMap;
    exports1.decodedMappings = decodedMappings;
    exports1.eachMapping = eachMapping;
    exports1.encodedMap = encodedMap;
    exports1.encodedMappings = encodedMappings;
    exports1.generatedPositionFor = generatedPositionFor;
    exports1.isIgnored = isIgnored;
    exports1.originalPositionFor = originalPositionFor;
    exports1.presortedDecodedMap = presortedDecodedMap;
    exports1.sourceContentFor = sourceContentFor;
    exports1.traceSegment = traceSegment;
}); //# sourceMappingURL=trace-mapping.umd.js.map
}}),
"[project]/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
(function(global, factory) {
    ("TURBOPACK compile-time truthy", 1) ? factory(exports, __turbopack_require__("[project]/node_modules/@jridgewell/set-array/dist/set-array.umd.js [app-client] (ecmascript)"), __turbopack_require__("[project]/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js [app-client] (ecmascript)"), __turbopack_require__("[project]/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js [app-client] (ecmascript)")) : ("TURBOPACK unreachable", undefined);
})(this, function(exports1, setArray, sourcemapCodec, traceMapping) {
    'use strict';
    const COLUMN = 0;
    const SOURCES_INDEX = 1;
    const SOURCE_LINE = 2;
    const SOURCE_COLUMN = 3;
    const NAMES_INDEX = 4;
    const NO_NAME = -1;
    /**
     * Provides the state to generate a sourcemap.
     */ class GenMapping {
        constructor({ file, sourceRoot } = {}){
            this._names = new setArray.SetArray();
            this._sources = new setArray.SetArray();
            this._sourcesContent = [];
            this._mappings = [];
            this.file = file;
            this.sourceRoot = sourceRoot;
            this._ignoreList = new setArray.SetArray();
        }
    }
    /**
     * Typescript doesn't allow friend access to private fields, so this just casts the map into a type
     * with public access modifiers.
     */ function cast(map) {
        return map;
    }
    function addSegment(map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
        return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
    }
    function addMapping(map, mapping) {
        return addMappingInternal(false, map, mapping);
    }
    /**
     * Same as `addSegment`, but will only add the segment if it generates useful information in the
     * resulting map. This only works correctly if segments are added **in order**, meaning you should
     * not add a segment with a lower generated line/column than one that came before.
     */ const maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content)=>{
        return addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
    };
    /**
     * Same as `addMapping`, but will only add the mapping if it generates useful information in the
     * resulting map. This only works correctly if mappings are added **in order**, meaning you should
     * not add a mapping with a lower generated line/column than one that came before.
     */ const maybeAddMapping = (map, mapping)=>{
        return addMappingInternal(true, map, mapping);
    };
    /**
     * Adds/removes the content of the source file to the source map.
     */ function setSourceContent(map, source, content) {
        const { _sources: sources, _sourcesContent: sourcesContent } = cast(map);
        const index = setArray.put(sources, source);
        sourcesContent[index] = content;
    }
    function setIgnore(map, source, ignore = true) {
        const { _sources: sources, _sourcesContent: sourcesContent, _ignoreList: ignoreList } = cast(map);
        const index = setArray.put(sources, source);
        if (index === sourcesContent.length) sourcesContent[index] = null;
        if (ignore) setArray.put(ignoreList, index);
        else setArray.remove(ignoreList, index);
    }
    /**
     * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects
     * a sourcemap, or to JSON.stringify.
     */ function toDecodedMap(map) {
        const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, _ignoreList: ignoreList } = cast(map);
        removeEmptyFinalLines(mappings);
        return {
            version: 3,
            file: map.file || undefined,
            names: names.array,
            sourceRoot: map.sourceRoot || undefined,
            sources: sources.array,
            sourcesContent,
            mappings,
            ignoreList: ignoreList.array
        };
    }
    /**
     * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects
     * a sourcemap, or to JSON.stringify.
     */ function toEncodedMap(map) {
        const decoded = toDecodedMap(map);
        return Object.assign(Object.assign({}, decoded), {
            mappings: sourcemapCodec.encode(decoded.mappings)
        });
    }
    /**
     * Constructs a new GenMapping, using the already present mappings of the input.
     */ function fromMap(input) {
        const map = new traceMapping.TraceMap(input);
        const gen = new GenMapping({
            file: map.file,
            sourceRoot: map.sourceRoot
        });
        putAll(cast(gen)._names, map.names);
        putAll(cast(gen)._sources, map.sources);
        cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(()=>null);
        cast(gen)._mappings = traceMapping.decodedMappings(map);
        if (map.ignoreList) putAll(cast(gen)._ignoreList, map.ignoreList);
        return gen;
    }
    /**
     * Returns an array of high-level mapping objects for every recorded segment, which could then be
     * passed to the `source-map` library.
     */ function allMappings(map) {
        const out = [];
        const { _mappings: mappings, _sources: sources, _names: names } = cast(map);
        for(let i = 0; i < mappings.length; i++){
            const line = mappings[i];
            for(let j = 0; j < line.length; j++){
                const seg = line[j];
                const generated = {
                    line: i + 1,
                    column: seg[COLUMN]
                };
                let source = undefined;
                let original = undefined;
                let name = undefined;
                if (seg.length !== 1) {
                    source = sources.array[seg[SOURCES_INDEX]];
                    original = {
                        line: seg[SOURCE_LINE] + 1,
                        column: seg[SOURCE_COLUMN]
                    };
                    if (seg.length === 5) name = names.array[seg[NAMES_INDEX]];
                }
                out.push({
                    generated,
                    source,
                    original,
                    name
                });
            }
        }
        return out;
    }
    // This split declaration is only so that terser can elminiate the static initialization block.
    function addSegmentInternal(skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
        const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = cast(map);
        const line = getLine(mappings, genLine);
        const index = getColumnIndex(line, genColumn);
        if (!source) {
            if (skipable && skipSourceless(line, index)) return;
            return insert(line, index, [
                genColumn
            ]);
        }
        const sourcesIndex = setArray.put(sources, source);
        const namesIndex = name ? setArray.put(names, name) : NO_NAME;
        if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = content !== null && content !== void 0 ? content : null;
        if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {
            return;
        }
        return insert(line, index, name ? [
            genColumn,
            sourcesIndex,
            sourceLine,
            sourceColumn,
            namesIndex
        ] : [
            genColumn,
            sourcesIndex,
            sourceLine,
            sourceColumn
        ]);
    }
    function getLine(mappings, index) {
        for(let i = mappings.length; i <= index; i++){
            mappings[i] = [];
        }
        return mappings[index];
    }
    function getColumnIndex(line, genColumn) {
        let index = line.length;
        for(let i = index - 1; i >= 0; index = i--){
            const current = line[i];
            if (genColumn >= current[COLUMN]) break;
        }
        return index;
    }
    function insert(array, index, value) {
        for(let i = array.length; i > index; i--){
            array[i] = array[i - 1];
        }
        array[index] = value;
    }
    function removeEmptyFinalLines(mappings) {
        const { length } = mappings;
        let len = length;
        for(let i = len - 1; i >= 0; len = i, i--){
            if (mappings[i].length > 0) break;
        }
        if (len < length) mappings.length = len;
    }
    function putAll(setarr, array) {
        for(let i = 0; i < array.length; i++)setArray.put(setarr, array[i]);
    }
    function skipSourceless(line, index) {
        // The start of a line is already sourceless, so adding a sourceless segment to the beginning
        // doesn't generate any useful information.
        if (index === 0) return true;
        const prev = line[index - 1];
        // If the previous segment is also sourceless, then adding another sourceless segment doesn't
        // genrate any new information. Else, this segment will end the source/named segment and point to
        // a sourceless position, which is useful.
        return prev.length === 1;
    }
    function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
        // A source/named segment at the start of a line gives position at that genColumn
        if (index === 0) return false;
        const prev = line[index - 1];
        // If the previous segment is sourceless, then we're transitioning to a source.
        if (prev.length === 1) return false;
        // If the previous segment maps to the exact same source position, then this segment doesn't
        // provide any new position information.
        return sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME);
    }
    function addMappingInternal(skipable, map, mapping) {
        const { generated, source, original, name, content } = mapping;
        if (!source) {
            return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);
        }
        return addSegmentInternal(skipable, map, generated.line - 1, generated.column, source, original.line - 1, original.column, name, content);
    }
    exports1.GenMapping = GenMapping;
    exports1.addMapping = addMapping;
    exports1.addSegment = addSegment;
    exports1.allMappings = allMappings;
    exports1.fromMap = fromMap;
    exports1.maybeAddMapping = maybeAddMapping;
    exports1.maybeAddSegment = maybeAddSegment;
    exports1.setIgnore = setIgnore;
    exports1.setSourceContent = setSourceContent;
    exports1.toDecodedMap = toDecodedMap;
    exports1.toEncodedMap = toEncodedMap;
    Object.defineProperty(exports1, '__esModule', {
        value: true
    });
}); //# sourceMappingURL=gen-mapping.umd.js.map
}}),
"[project]/node_modules/jsesc/jsesc.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/buffer/index.js [app-client] (ecmascript)");
'use strict';
const object = {};
const hasOwnProperty = object.hasOwnProperty;
const forOwn = (object, callback)=>{
    for(const key in object){
        if (hasOwnProperty.call(object, key)) {
            callback(key, object[key]);
        }
    }
};
const extend = (destination, source)=>{
    if (!source) {
        return destination;
    }
    forOwn(source, (key, value)=>{
        destination[key] = value;
    });
    return destination;
};
const forEach = (array, callback)=>{
    const length = array.length;
    let index = -1;
    while(++index < length){
        callback(array[index]);
    }
};
const fourHexEscape = (hex)=>{
    return '\\u' + ('0000' + hex).slice(-4);
};
const hexadecimal = (code, lowercase)=>{
    let hexadecimal = code.toString(16);
    if (lowercase) return hexadecimal;
    return hexadecimal.toUpperCase();
};
const toString = object.toString;
const isArray = Array.isArray;
const isBuffer = (value)=>{
    return typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"] === 'function' && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].isBuffer(value);
};
const isObject = (value)=>{
    // This is a very simple check, but it’s good enough for what we need.
    return toString.call(value) == '[object Object]';
};
const isString = (value)=>{
    return typeof value == 'string' || toString.call(value) == '[object String]';
};
const isNumber = (value)=>{
    return typeof value == 'number' || toString.call(value) == '[object Number]';
};
const isBigInt = (value)=>{
    return typeof value == 'bigint';
};
const isFunction = (value)=>{
    return typeof value == 'function';
};
const isMap = (value)=>{
    return toString.call(value) == '[object Map]';
};
const isSet = (value)=>{
    return toString.call(value) == '[object Set]';
};
/*--------------------------------------------------------------------------*/ // https://mathiasbynens.be/notes/javascript-escapes#single
const singleEscapes = {
    '\\': '\\\\',
    '\b': '\\b',
    '\f': '\\f',
    '\n': '\\n',
    '\r': '\\r',
    '\t': '\\t'
};
const regexSingleEscape = /[\\\b\f\n\r\t]/;
const regexDigit = /[0-9]/;
const regexWhitespace = /[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
const escapeEverythingRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^]/g;
const escapeNonAsciiRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^ !#-&\(-\[\]-_a-~]/g;
const jsesc = (argument, options)=>{
    const increaseIndentation = ()=>{
        oldIndent = indent;
        ++options.indentLevel;
        indent = options.indent.repeat(options.indentLevel);
    };
    // Handle options
    const defaults = {
        'escapeEverything': false,
        'minimal': false,
        'isScriptContext': false,
        'quotes': 'single',
        'wrap': false,
        'es6': false,
        'json': false,
        'compact': true,
        'lowercaseHex': false,
        'numbers': 'decimal',
        'indent': '\t',
        'indentLevel': 0,
        '__inline1__': false,
        '__inline2__': false
    };
    const json = options && options.json;
    if (json) {
        defaults.quotes = 'double';
        defaults.wrap = true;
    }
    options = extend(defaults, options);
    if (options.quotes != 'single' && options.quotes != 'double' && options.quotes != 'backtick') {
        options.quotes = 'single';
    }
    const quote = options.quotes == 'double' ? '"' : options.quotes == 'backtick' ? '`' : '\'';
    const compact = options.compact;
    const lowercaseHex = options.lowercaseHex;
    let indent = options.indent.repeat(options.indentLevel);
    let oldIndent = '';
    const inline1 = options.__inline1__;
    const inline2 = options.__inline2__;
    const newLine = compact ? '' : '\n';
    let result;
    let isEmpty = true;
    const useBinNumbers = options.numbers == 'binary';
    const useOctNumbers = options.numbers == 'octal';
    const useDecNumbers = options.numbers == 'decimal';
    const useHexNumbers = options.numbers == 'hexadecimal';
    if (json && argument && isFunction(argument.toJSON)) {
        argument = argument.toJSON();
    }
    if (!isString(argument)) {
        if (isMap(argument)) {
            if (argument.size == 0) {
                return 'new Map()';
            }
            if (!compact) {
                options.__inline1__ = true;
                options.__inline2__ = false;
            }
            return 'new Map(' + jsesc(Array.from(argument), options) + ')';
        }
        if (isSet(argument)) {
            if (argument.size == 0) {
                return 'new Set()';
            }
            return 'new Set(' + jsesc(Array.from(argument), options) + ')';
        }
        if (isBuffer(argument)) {
            if (argument.length == 0) {
                return 'Buffer.from([])';
            }
            return 'Buffer.from(' + jsesc(Array.from(argument), options) + ')';
        }
        if (isArray(argument)) {
            result = [];
            options.wrap = true;
            if (inline1) {
                options.__inline1__ = false;
                options.__inline2__ = true;
            }
            if (!inline2) {
                increaseIndentation();
            }
            forEach(argument, (value)=>{
                isEmpty = false;
                if (inline2) {
                    options.__inline2__ = false;
                }
                result.push((compact || inline2 ? '' : indent) + jsesc(value, options));
            });
            if (isEmpty) {
                return '[]';
            }
            if (inline2) {
                return '[' + result.join(', ') + ']';
            }
            return '[' + newLine + result.join(',' + newLine) + newLine + (compact ? '' : oldIndent) + ']';
        } else if (isNumber(argument) || isBigInt(argument)) {
            if (json) {
                // Some number values (e.g. `Infinity`) cannot be represented in JSON.
                // `BigInt` values less than `-Number.MAX_VALUE` or greater than
                // `Number.MAX_VALUE` cannot be represented in JSON so they will become
                // `-Infinity` or `Infinity`, respectively, and then become `null` when
                // stringified.
                return JSON.stringify(Number(argument));
            }
            let result;
            if (useDecNumbers) {
                result = String(argument);
            } else if (useHexNumbers) {
                let hexadecimal = argument.toString(16);
                if (!lowercaseHex) {
                    hexadecimal = hexadecimal.toUpperCase();
                }
                result = '0x' + hexadecimal;
            } else if (useBinNumbers) {
                result = '0b' + argument.toString(2);
            } else if (useOctNumbers) {
                result = '0o' + argument.toString(8);
            }
            if (isBigInt(argument)) {
                return result + 'n';
            }
            return result;
        } else if (isBigInt(argument)) {
            if (json) {
                // `BigInt` values less than `-Number.MAX_VALUE` or greater than
                // `Number.MAX_VALUE` will become `-Infinity` or `Infinity`,
                // respectively, and cannot be represented in JSON.
                return JSON.stringify(Number(argument));
            }
            return argument + 'n';
        } else if (!isObject(argument)) {
            if (json) {
                // For some values (e.g. `undefined`, `function` objects),
                // `JSON.stringify(value)` returns `undefined` (which isn’t valid
                // JSON) instead of `'null'`.
                return JSON.stringify(argument) || 'null';
            }
            return String(argument);
        } else {
            result = [];
            options.wrap = true;
            increaseIndentation();
            forOwn(argument, (key, value)=>{
                isEmpty = false;
                result.push((compact ? '' : indent) + jsesc(key, options) + ':' + (compact ? '' : ' ') + jsesc(value, options));
            });
            if (isEmpty) {
                return '{}';
            }
            return '{' + newLine + result.join(',' + newLine) + newLine + (compact ? '' : oldIndent) + '}';
        }
    }
    const regex = options.escapeEverything ? escapeEverythingRegex : escapeNonAsciiRegex;
    result = argument.replace(regex, (char, pair, lone, quoteChar, index, string)=>{
        if (pair) {
            if (options.minimal) return pair;
            const first = pair.charCodeAt(0);
            const second = pair.charCodeAt(1);
            if (options.es6) {
                // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                const codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
                const hex = hexadecimal(codePoint, lowercaseHex);
                return '\\u{' + hex + '}';
            }
            return fourHexEscape(hexadecimal(first, lowercaseHex)) + fourHexEscape(hexadecimal(second, lowercaseHex));
        }
        if (lone) {
            return fourHexEscape(hexadecimal(lone.charCodeAt(0), lowercaseHex));
        }
        if (char == '\0' && !json && !regexDigit.test(string.charAt(index + 1))) {
            return '\\0';
        }
        if (quoteChar) {
            if (quoteChar == quote || options.escapeEverything) {
                return '\\' + quoteChar;
            }
            return quoteChar;
        }
        if (regexSingleEscape.test(char)) {
            // no need for a `hasOwnProperty` check here
            return singleEscapes[char];
        }
        if (options.minimal && !regexWhitespace.test(char)) {
            return char;
        }
        const hex = hexadecimal(char.charCodeAt(0), lowercaseHex);
        if (json || hex.length > 2) {
            return fourHexEscape(hex);
        }
        return '\\x' + ('00' + hex).slice(-2);
    });
    if (quote == '`') {
        result = result.replace(/\$\{/g, '\\${');
    }
    if (options.isScriptContext) {
        // https://mathiasbynens.be/notes/etago
        result = result.replace(/<\/(script|style)/gi, '<\\/$1').replace(/<!--/g, json ? '\\u003C!--' : '\\x3C!--');
    }
    if (options.wrap) {
        result = quote + result + quote;
    }
    return result;
};
jsesc.version = '3.0.2';
module.exports = jsesc;
}}),
"[project]/node_modules/picocolors/picocolors.browser.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var x = String;
var create = function() {
    return {
        isColorSupported: false,
        reset: x,
        bold: x,
        dim: x,
        italic: x,
        underline: x,
        inverse: x,
        hidden: x,
        strikethrough: x,
        black: x,
        red: x,
        green: x,
        yellow: x,
        blue: x,
        magenta: x,
        cyan: x,
        white: x,
        gray: x,
        bgBlack: x,
        bgRed: x,
        bgGreen: x,
        bgYellow: x,
        bgBlue: x,
        bgMagenta: x,
        bgCyan: x,
        bgWhite: x,
        blackBright: x,
        redBright: x,
        greenBright: x,
        yellowBright: x,
        blueBright: x,
        magentaBright: x,
        cyanBright: x,
        whiteBright: x,
        bgBlackBright: x,
        bgRedBright: x,
        bgGreenBright: x,
        bgYellowBright: x,
        bgBlueBright: x,
        bgMagentaBright: x,
        bgCyanBright: x,
        bgWhiteBright: x
    };
};
module.exports = create();
module.exports.createColors = create;
}}),
"[project]/node_modules/js-tokens/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
// Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell
// License: MIT. (See LICENSE.)
Object.defineProperty(exports, "__esModule", {
    value: true
});
// This regex comes from regex.coffee, and is inserted here by generate-index.js
// (run `npm run build`).
exports.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
exports.matchToToken = function(match) {
    var token = {
        type: "invalid",
        value: match[0],
        closed: undefined
    };
    if (match[1]) token.type = "string", token.closed = !!(match[3] || match[4]);
    else if (match[5]) token.type = "comment";
    else if (match[6]) token.type = "comment", token.closed = !!match[7];
    else if (match[8]) token.type = "regex";
    else if (match[9]) token.type = "number";
    else if (match[10]) token.type = "name";
    else if (match[11]) token.type = "punctuator";
    else if (match[12]) token.type = "whitespace";
    return token;
};
}}),
"[project]/node_modules/convert-source-map/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/buffer/index.js [app-client] (ecmascript)");
'use strict';
Object.defineProperty(exports, 'commentRegex', {
    get: function getCommentRegex() {
        // Groups: 1: media type, 2: MIME type, 3: charset, 4: encoding, 5: data.
        return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;
    }
});
Object.defineProperty(exports, 'mapFileCommentRegex', {
    get: function getMapFileCommentRegex() {
        // Matches sourceMappingURL in either // or /* comment styles.
        return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/mg;
    }
});
var decodeBase64;
if (typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"] !== 'undefined') {
    if (typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from === 'function') {
        decodeBase64 = decodeBase64WithBufferFrom;
    } else {
        decodeBase64 = decodeBase64WithNewBuffer;
    }
} else {
    decodeBase64 = decodeBase64WithAtob;
}
function decodeBase64WithBufferFrom(base64) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(base64, 'base64').toString();
}
function decodeBase64WithNewBuffer(base64) {
    if (typeof value === 'number') {
        throw new TypeError('The value to decode must not be of type number.');
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"](base64, 'base64').toString();
}
function decodeBase64WithAtob(base64) {
    return decodeURIComponent(escape(atob(base64)));
}
function stripComment(sm) {
    return sm.split(',').pop();
}
function readFromFileMap(sm, read) {
    var r = exports.mapFileCommentRegex.exec(sm);
    // for some odd reason //# .. captures in 1 and /* .. */ in 2
    var filename = r[1] || r[2];
    try {
        var sm = read(filename);
        if (sm != null && typeof sm.catch === 'function') {
            return sm.catch(throwError);
        } else {
            return sm;
        }
    } catch (e) {
        throwError(e);
    }
    function throwError(e) {
        throw new Error('An error occurred while trying to read the map file at ' + filename + '\n' + e.stack);
    }
}
function Converter(sm, opts) {
    opts = opts || {};
    if (opts.hasComment) {
        sm = stripComment(sm);
    }
    if (opts.encoding === 'base64') {
        sm = decodeBase64(sm);
    } else if (opts.encoding === 'uri') {
        sm = decodeURIComponent(sm);
    }
    if (opts.isJSON || opts.encoding) {
        sm = JSON.parse(sm);
    }
    this.sourcemap = sm;
}
Converter.prototype.toJSON = function(space) {
    return JSON.stringify(this.sourcemap, null, space);
};
if (typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"] !== 'undefined') {
    if (typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from === 'function') {
        Converter.prototype.toBase64 = encodeBase64WithBufferFrom;
    } else {
        Converter.prototype.toBase64 = encodeBase64WithNewBuffer;
    }
} else {
    Converter.prototype.toBase64 = encodeBase64WithBtoa;
}
function encodeBase64WithBufferFrom() {
    var json = this.toJSON();
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(json, 'utf8').toString('base64');
}
function encodeBase64WithNewBuffer() {
    var json = this.toJSON();
    if (typeof json === 'number') {
        throw new TypeError('The json to encode must not be of type number.');
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"](json, 'utf8').toString('base64');
}
function encodeBase64WithBtoa() {
    var json = this.toJSON();
    return btoa(unescape(encodeURIComponent(json)));
}
Converter.prototype.toURI = function() {
    var json = this.toJSON();
    return encodeURIComponent(json);
};
Converter.prototype.toComment = function(options) {
    var encoding, content, data;
    if (options != null && options.encoding === 'uri') {
        encoding = '';
        content = this.toURI();
    } else {
        encoding = ';base64';
        content = this.toBase64();
    }
    data = 'sourceMappingURL=data:application/json;charset=utf-8' + encoding + ',' + content;
    return options != null && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
};
// returns copy instead of original
Converter.prototype.toObject = function() {
    return JSON.parse(this.toJSON());
};
Converter.prototype.addProperty = function(key, value1) {
    if (this.sourcemap.hasOwnProperty(key)) throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
    return this.setProperty(key, value1);
};
Converter.prototype.setProperty = function(key, value1) {
    this.sourcemap[key] = value1;
    return this;
};
Converter.prototype.getProperty = function(key) {
    return this.sourcemap[key];
};
exports.fromObject = function(obj) {
    return new Converter(obj);
};
exports.fromJSON = function(json) {
    return new Converter(json, {
        isJSON: true
    });
};
exports.fromURI = function(uri) {
    return new Converter(uri, {
        encoding: 'uri'
    });
};
exports.fromBase64 = function(base64) {
    return new Converter(base64, {
        encoding: 'base64'
    });
};
exports.fromComment = function(comment) {
    var m, encoding;
    comment = comment.replace(/^\/\*/g, '//').replace(/\*\/$/g, '');
    m = exports.commentRegex.exec(comment);
    encoding = m && m[4] || 'uri';
    return new Converter(comment, {
        encoding: encoding,
        hasComment: true
    });
};
function makeConverter(sm) {
    return new Converter(sm, {
        isJSON: true
    });
}
exports.fromMapFileComment = function(comment, read) {
    if (typeof read === 'string') {
        throw new Error('String directory paths are no longer supported with `fromMapFileComment`\n' + 'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading');
    }
    var sm = readFromFileMap(comment, read);
    if (sm != null && typeof sm.then === 'function') {
        return sm.then(makeConverter);
    } else {
        return makeConverter(sm);
    }
};
// Finds last sourcemap comment in file or returns null if none was found
exports.fromSource = function(content) {
    var m = content.match(exports.commentRegex);
    return m ? exports.fromComment(m.pop()) : null;
};
// Finds last sourcemap comment in file or returns null if none was found
exports.fromMapFileSource = function(content, read) {
    if (typeof read === 'string') {
        throw new Error('String directory paths are no longer supported with `fromMapFileSource`\n' + 'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading');
    }
    var m = content.match(exports.mapFileCommentRegex);
    return m ? exports.fromMapFileComment(m.pop(), read) : null;
};
exports.removeComments = function(src) {
    return src.replace(exports.commentRegex, '');
};
exports.removeMapFileComments = function(src) {
    return src.replace(exports.mapFileCommentRegex, '');
};
exports.generateMapFileComment = function(file, options) {
    var data = 'sourceMappingURL=' + file;
    return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
};
}}),
"[project]/node_modules/@ampproject/remapping/dist/remapping.umd.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
(function(global, factory) {
    ("TURBOPACK compile-time truthy", 1) ? module.exports = factory(__turbopack_require__("[project]/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js [app-client] (ecmascript)"), __turbopack_require__("[project]/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js [app-client] (ecmascript)")) : ("TURBOPACK unreachable", undefined);
})(this, function(traceMapping, genMapping) {
    'use strict';
    const SOURCELESS_MAPPING = /* #__PURE__ */ SegmentObject('', -1, -1, '', null, false);
    const EMPTY_SOURCES = [];
    function SegmentObject(source, line, column, name, content, ignore) {
        return {
            source,
            line,
            column,
            name,
            content,
            ignore
        };
    }
    function Source(map, sources, source, content, ignore) {
        return {
            map,
            sources,
            source,
            content,
            ignore
        };
    }
    /**
     * MapSource represents a single sourcemap, with the ability to trace mappings into its child nodes
     * (which may themselves be SourceMapTrees).
     */ function MapSource(map, sources) {
        return Source(map, sources, '', null, false);
    }
    /**
     * A "leaf" node in the sourcemap tree, representing an original, unmodified source file. Recursive
     * segment tracing ends at the `OriginalSource`.
     */ function OriginalSource(source, content, ignore) {
        return Source(null, EMPTY_SOURCES, source, content, ignore);
    }
    /**
     * traceMappings is only called on the root level SourceMapTree, and begins the process of
     * resolving each mapping in terms of the original source files.
     */ function traceMappings(tree) {
        // TODO: Eventually support sourceRoot, which has to be removed because the sources are already
        // fully resolved. We'll need to make sources relative to the sourceRoot before adding them.
        const gen = new genMapping.GenMapping({
            file: tree.map.file
        });
        const { sources: rootSources, map } = tree;
        const rootNames = map.names;
        const rootMappings = traceMapping.decodedMappings(map);
        for(let i = 0; i < rootMappings.length; i++){
            const segments = rootMappings[i];
            for(let j = 0; j < segments.length; j++){
                const segment = segments[j];
                const genCol = segment[0];
                let traced = SOURCELESS_MAPPING;
                // 1-length segments only move the current generated column, there's no source information
                // to gather from it.
                if (segment.length !== 1) {
                    const source = rootSources[segment[1]];
                    traced = originalPositionFor(source, segment[2], segment[3], segment.length === 5 ? rootNames[segment[4]] : '');
                    // If the trace is invalid, then the trace ran into a sourcemap that doesn't contain a
                    // respective segment into an original source.
                    if (traced == null) continue;
                }
                const { column, line, name, content, source, ignore } = traced;
                genMapping.maybeAddSegment(gen, i, genCol, source, line, column, name);
                if (source && content != null) genMapping.setSourceContent(gen, source, content);
                if (ignore) genMapping.setIgnore(gen, source, true);
            }
        }
        return gen;
    }
    /**
     * originalPositionFor is only called on children SourceMapTrees. It recurses down into its own
     * child SourceMapTrees, until we find the original source map.
     */ function originalPositionFor(source, line, column, name) {
        if (!source.map) {
            return SegmentObject(source.source, line, column, name, source.content, source.ignore);
        }
        const segment = traceMapping.traceSegment(source.map, line, column);
        // If we couldn't find a segment, then this doesn't exist in the sourcemap.
        if (segment == null) return null;
        // 1-length segments only move the current generated column, there's no source information
        // to gather from it.
        if (segment.length === 1) return SOURCELESS_MAPPING;
        return originalPositionFor(source.sources[segment[1]], segment[2], segment[3], segment.length === 5 ? source.map.names[segment[4]] : name);
    }
    function asArray(value) {
        if (Array.isArray(value)) return value;
        return [
            value
        ];
    }
    /**
     * Recursively builds a tree structure out of sourcemap files, with each node
     * being either an `OriginalSource` "leaf" or a `SourceMapTree` composed of
     * `OriginalSource`s and `SourceMapTree`s.
     *
     * Every sourcemap is composed of a collection of source files and mappings
     * into locations of those source files. When we generate a `SourceMapTree` for
     * the sourcemap, we attempt to load each source file's own sourcemap. If it
     * does not have an associated sourcemap, it is considered an original,
     * unmodified source file.
     */ function buildSourceMapTree(input, loader) {
        const maps = asArray(input).map((m)=>new traceMapping.TraceMap(m, ''));
        const map = maps.pop();
        for(let i = 0; i < maps.length; i++){
            if (maps[i].sources.length > 1) {
                throw new Error(`Transformation map ${i} must have exactly one source file.\n` + 'Did you specify these with the most recent transformation maps first?');
            }
        }
        let tree = build(map, loader, '', 0);
        for(let i = maps.length - 1; i >= 0; i--){
            tree = MapSource(maps[i], [
                tree
            ]);
        }
        return tree;
    }
    function build(map, loader, importer, importerDepth) {
        const { resolvedSources, sourcesContent, ignoreList } = map;
        const depth = importerDepth + 1;
        const children = resolvedSources.map((sourceFile, i)=>{
            // The loading context gives the loader more information about why this file is being loaded
            // (eg, from which importer). It also allows the loader to override the location of the loaded
            // sourcemap/original source, or to override the content in the sourcesContent field if it's
            // an unmodified source file.
            const ctx = {
                importer,
                depth,
                source: sourceFile || '',
                content: undefined,
                ignore: undefined
            };
            // Use the provided loader callback to retrieve the file's sourcemap.
            // TODO: We should eventually support async loading of sourcemap files.
            const sourceMap = loader(ctx.source, ctx);
            const { source, content, ignore } = ctx;
            // If there is a sourcemap, then we need to recurse into it to load its source files.
            if (sourceMap) return build(new traceMapping.TraceMap(sourceMap, source), loader, source, depth);
            // Else, it's an unmodified source file.
            // The contents of this unmodified source file can be overridden via the loader context,
            // allowing it to be explicitly null or a string. If it remains undefined, we fall back to
            // the importing sourcemap's `sourcesContent` field.
            const sourceContent = content !== undefined ? content : sourcesContent ? sourcesContent[i] : null;
            const ignored = ignore !== undefined ? ignore : ignoreList ? ignoreList.includes(i) : false;
            return OriginalSource(source, sourceContent, ignored);
        });
        return MapSource(map, children);
    }
    /**
     * A SourceMap v3 compatible sourcemap, which only includes fields that were
     * provided to it.
     */ class SourceMap {
        constructor(map, options){
            const out = options.decodedMappings ? genMapping.toDecodedMap(map) : genMapping.toEncodedMap(map);
            this.version = out.version; // SourceMap spec says this should be first.
            this.file = out.file;
            this.mappings = out.mappings;
            this.names = out.names;
            this.ignoreList = out.ignoreList;
            this.sourceRoot = out.sourceRoot;
            this.sources = out.sources;
            if (!options.excludeContent) {
                this.sourcesContent = out.sourcesContent;
            }
        }
        toString() {
            return JSON.stringify(this);
        }
    }
    /**
     * Traces through all the mappings in the root sourcemap, through the sources
     * (and their sourcemaps), all the way back to the original source location.
     *
     * `loader` will be called every time we encounter a source file. If it returns
     * a sourcemap, we will recurse into that sourcemap to continue the trace. If
     * it returns a falsey value, that source file is treated as an original,
     * unmodified source file.
     *
     * Pass `excludeContent` to exclude any self-containing source file content
     * from the output sourcemap.
     *
     * Pass `decodedMappings` to receive a SourceMap with decoded (instead of
     * VLQ encoded) mappings.
     */ function remapping(input, loader, options) {
        const opts = typeof options === 'object' ? options : {
            excludeContent: !!options,
            decodedMappings: false
        };
        const tree = buildSourceMapTree(input, loader);
        return new SourceMap(traceMappings(tree), opts);
    }
    return remapping;
}); //# sourceMappingURL=remapping.umd.js.map
}}),
"[project]/node_modules/camelcase/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const UPPERCASE = /[\p{Lu}]/u;
const LOWERCASE = /[\p{Ll}]/u;
const LEADING_CAPITAL = /^[\p{Lu}](?![\p{Lu}])/gu;
const IDENTIFIER = /([\p{Alpha}\p{N}_]|$)/u;
const SEPARATORS = /[_.\- ]+/;
const LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);
const SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');
const NUMBERS_AND_IDENTIFIER = new RegExp('\\d+' + IDENTIFIER.source, 'gu');
const preserveCamelCase = (string, toLowerCase, toUpperCase)=>{
    let isLastCharLower = false;
    let isLastCharUpper = false;
    let isLastLastCharUpper = false;
    for(let i = 0; i < string.length; i++){
        const character = string[i];
        if (isLastCharLower && UPPERCASE.test(character)) {
            string = string.slice(0, i) + '-' + string.slice(i);
            isLastCharLower = false;
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = true;
            i++;
        } else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {
            string = string.slice(0, i - 1) + '-' + string.slice(i - 1);
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = false;
            isLastCharLower = true;
        } else {
            isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;
            isLastLastCharUpper = isLastCharUpper;
            isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;
        }
    }
    return string;
};
const preserveConsecutiveUppercase = (input, toLowerCase)=>{
    LEADING_CAPITAL.lastIndex = 0;
    return input.replace(LEADING_CAPITAL, (m1)=>toLowerCase(m1));
};
const postProcess = (input, toUpperCase)=>{
    SEPARATORS_AND_IDENTIFIER.lastIndex = 0;
    NUMBERS_AND_IDENTIFIER.lastIndex = 0;
    return input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier)=>toUpperCase(identifier)).replace(NUMBERS_AND_IDENTIFIER, (m)=>toUpperCase(m));
};
const camelCase = (input, options)=>{
    if (!(typeof input === 'string' || Array.isArray(input))) {
        throw new TypeError('Expected the input to be `string | string[]`');
    }
    options = {
        pascalCase: false,
        preserveConsecutiveUppercase: false,
        ...options
    };
    if (Array.isArray(input)) {
        input = input.map((x)=>x.trim()).filter((x)=>x.length).join('-');
    } else {
        input = input.trim();
    }
    if (input.length === 0) {
        return '';
    }
    const toLowerCase = options.locale === false ? (string)=>string.toLowerCase() : (string)=>string.toLocaleLowerCase(options.locale);
    const toUpperCase = options.locale === false ? (string)=>string.toUpperCase() : (string)=>string.toLocaleUpperCase(options.locale);
    if (input.length === 1) {
        return options.pascalCase ? toUpperCase(input) : toLowerCase(input);
    }
    const hasUpperCase = input !== toLowerCase(input);
    if (hasUpperCase) {
        input = preserveCamelCase(input, toLowerCase, toUpperCase);
    }
    input = input.replace(LEADING_SEPARATORS, '');
    if (options.preserveConsecutiveUppercase) {
        input = preserveConsecutiveUppercase(input, toLowerCase);
    } else {
        input = toLowerCase(input);
    }
    if (options.pascalCase) {
        input = toUpperCase(input.charAt(0)) + input.slice(1);
    }
    return postProcess(input, toUpperCase);
};
module.exports = camelCase;
// TODO: Remove this for the next major release
module.exports.default = camelCase;
}}),
"[project]/node_modules/cosmiconfig/dist/types.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
}); //# sourceMappingURL=types.js.map
}}),
"[project]/node_modules/cosmiconfig/dist/util.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.removeUndefinedValuesFromObject = exports.getPropertyByPath = exports.emplace = void 0;
/**
 * @internal
 */ function emplace(map, key, fn) {
    const cached = map.get(key);
    if (cached !== undefined) {
        return cached;
    }
    const result = fn();
    map.set(key, result);
    return result;
}
exports.emplace = emplace;
// Resolves property names or property paths defined with period-delimited
// strings or arrays of strings. Property names that are found on the source
// object are used directly (even if they include a period).
// Nested property names that include periods, within a path, are only
// understood in array paths.
/**
 * @internal
 */ function getPropertyByPath(source, path) {
    if (typeof path === 'string' && Object.prototype.hasOwnProperty.call(source, path)) {
        return source[path];
    }
    const parsedPath = typeof path === 'string' ? path.split('.') : path;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return parsedPath.reduce((previous, key)=>{
        if (previous === undefined) {
            return previous;
        }
        return previous[key];
    }, source);
}
exports.getPropertyByPath = getPropertyByPath;
/** @internal */ function removeUndefinedValuesFromObject(options) {
    /* istanbul ignore if -- @preserve */ if (!options) {
        return undefined;
    }
    return Object.fromEntries(Object.entries(options).filter(([, value])=>value !== undefined));
}
exports.removeUndefinedValuesFromObject = removeUndefinedValuesFromObject; //# sourceMappingURL=util.js.map
}}),
"[project]/node_modules/cosmiconfig/dist/ExplorerBase.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getExtensionDescription = exports.ExplorerBase = void 0;
const path_1 = __importDefault(__turbopack_require__("[project]/node_modules/next/dist/compiled/path-browserify/index.js [app-client] (ecmascript)"));
const util_js_1 = __turbopack_require__("[project]/node_modules/cosmiconfig/dist/util.js [app-client] (ecmascript)");
/**
 * @internal
 */ class ExplorerBase {
    #loadingMetaConfig = false;
    config;
    loadCache;
    searchCache;
    constructor(options){
        this.config = options;
        if (options.cache) {
            this.loadCache = new Map();
            this.searchCache = new Map();
        }
        this.#validateConfig();
    }
    set loadingMetaConfig(value) {
        this.#loadingMetaConfig = value;
    }
    #validateConfig() {
        const config = this.config;
        for (const place of config.searchPlaces){
            const extension = path_1.default.extname(place);
            const loader = this.config.loaders[extension || 'noExt'] ?? this.config.loaders['default'];
            if (loader === undefined) {
                throw new Error(`Missing loader for ${getExtensionDescription(place)}.`);
            }
            if (typeof loader !== 'function') {
                throw new Error(`Loader for ${getExtensionDescription(place)} is not a function: Received ${typeof loader}.`);
            }
        }
    }
    clearLoadCache() {
        if (this.loadCache) {
            this.loadCache.clear();
        }
    }
    clearSearchCache() {
        if (this.searchCache) {
            this.searchCache.clear();
        }
    }
    clearCaches() {
        this.clearLoadCache();
        this.clearSearchCache();
    }
    toCosmiconfigResult(filepath, config) {
        if (config === null) {
            return null;
        }
        if (config === undefined) {
            return {
                filepath,
                config: undefined,
                isEmpty: true
            };
        }
        if (this.config.applyPackagePropertyPathToConfiguration || this.#loadingMetaConfig) {
            config = (0, util_js_1.getPropertyByPath)(config, this.config.packageProp);
        }
        if (config === undefined) {
            return {
                filepath,
                config: undefined,
                isEmpty: true
            };
        }
        return {
            config,
            filepath
        };
    }
}
exports.ExplorerBase = ExplorerBase;
/**
 * @internal
 */ function getExtensionDescription(extension) {
    /* istanbul ignore next -- @preserve */ return extension ? `extension "${extension}"` : 'files without extensions';
}
exports.getExtensionDescription = getExtensionDescription; //# sourceMappingURL=ExplorerBase.js.map
}}),
"[project]/node_modules/cosmiconfig/dist/loaders.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
/* eslint-disable @typescript-eslint/no-require-imports */ var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.loadTs = exports.loadTsSync = exports.loadYaml = exports.loadJson = exports.loadJs = exports.loadJsSync = void 0;
const fs_1 = (()=>{
    const e = new Error("Cannot find module 'fs'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
const promises_1 = (()=>{
    const e = new Error("Cannot find module 'fs/promises'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
const path_1 = __importDefault(__turbopack_require__("[project]/node_modules/next/dist/compiled/path-browserify/index.js [app-client] (ecmascript)"));
const url_1 = __turbopack_require__("[project]/node_modules/next/dist/compiled/native-url/index.js [app-client] (ecmascript)");
let importFresh;
const loadJsSync = function loadJsSync(filepath) {
    if (importFresh === undefined) {
        importFresh = __turbopack_require__("[project]/node_modules/import-fresh/index.js [app-client] (ecmascript)");
    }
    return importFresh(filepath);
};
exports.loadJsSync = loadJsSync;
const loadJs = async function loadJs(filepath) {
    try {
        const { href } = (0, url_1.pathToFileURL)(filepath);
        return (await (()=>{
            const e = new Error("Cannot find module 'unknown'");
            e.code = 'MODULE_NOT_FOUND';
            throw e;
        })()).default;
    } catch (error) {
        return (0, exports.loadJsSync)(filepath, '');
    }
};
exports.loadJs = loadJs;
let parseJson;
const loadJson = function loadJson(filepath, content) {
    if (parseJson === undefined) {
        parseJson = __turbopack_require__("[project]/node_modules/parse-json/index.js [app-client] (ecmascript)");
    }
    try {
        return parseJson(content);
    } catch (error) {
        error.message = `JSON Error in ${filepath}:\n${error.message}`;
        throw error;
    }
};
exports.loadJson = loadJson;
let yaml;
const loadYaml = function loadYaml(filepath, content) {
    if (yaml === undefined) {
        yaml = __turbopack_require__("[project]/node_modules/js-yaml/index.js [app-client] (ecmascript)");
    }
    try {
        return yaml.load(content);
    } catch (error) {
        error.message = `YAML Error in ${filepath}:\n${error.message}`;
        throw error;
    }
};
exports.loadYaml = loadYaml;
let typescript;
const loadTsSync = function loadTsSync(filepath, content) {
    /* istanbul ignore next -- @preserve */ if (typescript === undefined) {
        typescript = __turbopack_require__("[project]/node_modules/typescript/lib/typescript.js [app-client] (ecmascript)");
    }
    const compiledFilepath = `${filepath.slice(0, -2)}cjs`;
    try {
        const config = resolveTsConfig(path_1.default.dirname(filepath)) ?? {};
        config.compilerOptions = {
            ...config.compilerOptions,
            module: typescript.ModuleKind.NodeNext,
            moduleResolution: typescript.ModuleResolutionKind.NodeNext,
            target: typescript.ScriptTarget.ES2022,
            noEmit: false
        };
        content = typescript.transpileModule(content, config).outputText;
        (0, fs_1.writeFileSync)(compiledFilepath, content);
        return (0, exports.loadJsSync)(compiledFilepath, content).default;
    } catch (error) {
        error.message = `TypeScript Error in ${filepath}:\n${error.message}`;
        throw error;
    } finally{
        if ((0, fs_1.existsSync)(compiledFilepath)) {
            (0, fs_1.rmSync)(compiledFilepath);
        }
    }
};
exports.loadTsSync = loadTsSync;
const loadTs = async function loadTs(filepath, content) {
    if (typescript === undefined) {
        typescript = (await __turbopack_require__("[project]/node_modules/typescript/lib/typescript.js [app-client] (ecmascript, async loader)")(__turbopack_import__)).default;
    }
    const compiledFilepath = `${filepath.slice(0, -2)}mjs`;
    try {
        const config = resolveTsConfig(path_1.default.dirname(filepath)) ?? {};
        config.compilerOptions = {
            ...config.compilerOptions,
            module: typescript.ModuleKind.ES2022,
            moduleResolution: typescript.ModuleResolutionKind.Bundler,
            target: typescript.ScriptTarget.ES2022,
            noEmit: false
        };
        content = typescript.transpileModule(content, config).outputText;
        await (0, promises_1.writeFile)(compiledFilepath, content);
        const { href } = (0, url_1.pathToFileURL)(compiledFilepath);
        return (await (()=>{
            const e = new Error("Cannot find module 'unknown'");
            e.code = 'MODULE_NOT_FOUND';
            throw e;
        })()).default;
    } catch (error) {
        error.message = `TypeScript Error in ${filepath}:\n${error.message}`;
        throw error;
    } finally{
        if ((0, fs_1.existsSync)(compiledFilepath)) {
            await (0, promises_1.rm)(compiledFilepath);
        }
    }
};
exports.loadTs = loadTs;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function resolveTsConfig(directory) {
    const filePath = typescript.findConfigFile(directory, (fileName)=>{
        return typescript.sys.fileExists(fileName);
    });
    if (filePath !== undefined) {
        const { config, error } = typescript.readConfigFile(filePath, (path)=>typescript.sys.readFile(path));
        if (error) {
            throw new Error(`Error in ${filePath}: ${error.messageText.toString()}`);
        }
        return config;
    }
    return;
} //# sourceMappingURL=loaders.js.map
}}),
"[project]/node_modules/cosmiconfig/dist/Explorer.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Explorer = void 0;
const promises_1 = __importDefault((()=>{
    const e = new Error("Cannot find module 'fs/promises'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})());
const path_1 = __importDefault(__turbopack_require__("[project]/node_modules/next/dist/compiled/path-browserify/index.js [app-client] (ecmascript)"));
const path_type_1 = __turbopack_require__("[project]/node_modules/path-type/index.js [app-client] (ecmascript)");
const ExplorerBase_js_1 = __turbopack_require__("[project]/node_modules/cosmiconfig/dist/ExplorerBase.js [app-client] (ecmascript)");
const loaders_js_1 = __turbopack_require__("[project]/node_modules/cosmiconfig/dist/loaders.js [app-client] (ecmascript)");
const util_js_1 = __turbopack_require__("[project]/node_modules/cosmiconfig/dist/util.js [app-client] (ecmascript)");
/**
 * @internal
 */ class Explorer extends ExplorerBase_js_1.ExplorerBase {
    async load(filepath) {
        filepath = path_1.default.resolve(filepath);
        const load = async ()=>{
            return await this.config.transform(await this.#readConfiguration(filepath));
        };
        if (this.loadCache) {
            return await (0, util_js_1.emplace)(this.loadCache, filepath, load);
        }
        return await load();
    }
    async search(from = '') {
        if (this.config.metaConfigFilePath) {
            this.loadingMetaConfig = true;
            const config = await this.load(this.config.metaConfigFilePath);
            this.loadingMetaConfig = false;
            if (config && !config.isEmpty) {
                return config;
            }
        }
        const stopDir = path_1.default.resolve(this.config.stopDir);
        from = path_1.default.resolve(from);
        const search = async ()=>{
            /* istanbul ignore if -- @preserve */ if (await (0, path_type_1.isDirectory)(from)) {
                for (const place of this.config.searchPlaces){
                    const filepath = path_1.default.join(from, place);
                    try {
                        const result = await this.#readConfiguration(filepath);
                        if (result !== null && !(result.isEmpty && this.config.ignoreEmptySearchPlaces)) {
                            return await this.config.transform(result);
                        }
                    } catch (error) {
                        if (error.code === 'ENOENT' || error.code === 'EISDIR' || error.code === 'ENOTDIR') {
                            continue;
                        }
                        throw error;
                    }
                }
            }
            const dir = path_1.default.dirname(from);
            if (from !== stopDir && from !== dir) {
                from = dir;
                if (this.searchCache) {
                    return await (0, util_js_1.emplace)(this.searchCache, from, search);
                }
                return await search();
            }
            return await this.config.transform(null);
        };
        if (this.searchCache) {
            return await (0, util_js_1.emplace)(this.searchCache, from, search);
        }
        return await search();
    }
    async #readConfiguration(filepath) {
        const contents = await promises_1.default.readFile(filepath, {
            encoding: 'utf-8'
        });
        return this.toCosmiconfigResult(filepath, await this.#loadConfiguration(filepath, contents));
    }
    async #loadConfiguration(filepath, contents) {
        if (contents.trim() === '') {
            return;
        }
        if (path_1.default.basename(filepath) === 'package.json') {
            return (0, util_js_1.getPropertyByPath)((0, loaders_js_1.loadJson)(filepath, contents), this.config.packageProp) ?? null;
        }
        const extension = path_1.default.extname(filepath);
        try {
            const loader = this.config.loaders[extension || 'noExt'] ?? this.config.loaders['default'];
            if (loader !== undefined) {
                // eslint-disable-next-line @typescript-eslint/return-await
                return await loader(filepath, contents);
            }
        } catch (error) {
            error.filepath = filepath;
            throw error;
        }
        throw new Error(`No loader specified for ${(0, ExplorerBase_js_1.getExtensionDescription)(extension)}`);
    }
}
exports.Explorer = Explorer; //# sourceMappingURL=Explorer.js.map
}}),
"[project]/node_modules/cosmiconfig/dist/ExplorerSync.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ExplorerSync = void 0;
const fs_1 = __importDefault((()=>{
    const e = new Error("Cannot find module 'fs'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})());
const path_1 = __importDefault(__turbopack_require__("[project]/node_modules/next/dist/compiled/path-browserify/index.js [app-client] (ecmascript)"));
const path_type_1 = __turbopack_require__("[project]/node_modules/path-type/index.js [app-client] (ecmascript)");
const ExplorerBase_js_1 = __turbopack_require__("[project]/node_modules/cosmiconfig/dist/ExplorerBase.js [app-client] (ecmascript)");
const loaders_js_1 = __turbopack_require__("[project]/node_modules/cosmiconfig/dist/loaders.js [app-client] (ecmascript)");
const util_js_1 = __turbopack_require__("[project]/node_modules/cosmiconfig/dist/util.js [app-client] (ecmascript)");
/**
 * @internal
 */ class ExplorerSync extends ExplorerBase_js_1.ExplorerBase {
    load(filepath) {
        filepath = path_1.default.resolve(filepath);
        const load = ()=>{
            return this.config.transform(this.#readConfiguration(filepath));
        };
        if (this.loadCache) {
            return (0, util_js_1.emplace)(this.loadCache, filepath, load);
        }
        return load();
    }
    search(from = '') {
        if (this.config.metaConfigFilePath) {
            this.loadingMetaConfig = true;
            const config = this.load(this.config.metaConfigFilePath);
            this.loadingMetaConfig = false;
            if (config && !config.isEmpty) {
                return config;
            }
        }
        const stopDir = path_1.default.resolve(this.config.stopDir);
        from = path_1.default.resolve(from);
        const search = ()=>{
            /* istanbul ignore if -- @preserve */ if ((0, path_type_1.isDirectorySync)(from)) {
                for (const place of this.config.searchPlaces){
                    const filepath = path_1.default.join(from, place);
                    try {
                        const result = this.#readConfiguration(filepath);
                        if (result !== null && !(result.isEmpty && this.config.ignoreEmptySearchPlaces)) {
                            return this.config.transform(result);
                        }
                    } catch (error) {
                        if (error.code === 'ENOENT' || error.code === 'EISDIR' || error.code === 'ENOTDIR') {
                            continue;
                        }
                        throw error;
                    }
                }
            }
            const dir = path_1.default.dirname(from);
            if (from !== stopDir && from !== dir) {
                from = dir;
                if (this.searchCache) {
                    return (0, util_js_1.emplace)(this.searchCache, from, search);
                }
                return search();
            }
            return this.config.transform(null);
        };
        if (this.searchCache) {
            return (0, util_js_1.emplace)(this.searchCache, from, search);
        }
        return search();
    }
    #readConfiguration(filepath) {
        const contents = fs_1.default.readFileSync(filepath, 'utf8');
        return this.toCosmiconfigResult(filepath, this.#loadConfiguration(filepath, contents));
    }
    #loadConfiguration(filepath, contents) {
        if (contents.trim() === '') {
            return;
        }
        if (path_1.default.basename(filepath) === 'package.json') {
            return (0, util_js_1.getPropertyByPath)((0, loaders_js_1.loadJson)(filepath, contents), this.config.packageProp) ?? null;
        }
        const extension = path_1.default.extname(filepath);
        try {
            const loader = this.config.loaders[extension || 'noExt'] ?? this.config.loaders['default'];
            if (loader !== undefined) {
                return loader(filepath, contents);
            }
        } catch (error) {
            error.filepath = filepath;
            throw error;
        }
        throw new Error(`No loader specified for ${(0, ExplorerBase_js_1.getExtensionDescription)(extension)}`);
    }
    /**
     * @deprecated Use {@link ExplorerSync.prototype.load}.
     */ /* istanbul ignore next */ loadSync(filepath) {
        return this.load(filepath);
    }
    /**
     * @deprecated Use {@link ExplorerSync.prototype.search}.
     */ /* istanbul ignore next */ searchSync(from = '') {
        return this.search(from);
    }
}
exports.ExplorerSync = ExplorerSync; //# sourceMappingURL=ExplorerSync.js.map
}}),
"[project]/node_modules/cosmiconfig/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cosmiconfigSync = exports.cosmiconfig = exports.defaultLoadersSync = exports.defaultLoaders = exports.metaSearchPlaces = void 0;
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */ __exportStar(__turbopack_require__("[project]/node_modules/cosmiconfig/dist/types.js [app-client] (ecmascript)"), exports);
const os_1 = __importDefault(__turbopack_require__("[project]/node_modules/next/dist/compiled/os-browserify/browser.js [app-client] (ecmascript)"));
const Explorer_js_1 = __turbopack_require__("[project]/node_modules/cosmiconfig/dist/Explorer.js [app-client] (ecmascript)");
const ExplorerSync_js_1 = __turbopack_require__("[project]/node_modules/cosmiconfig/dist/ExplorerSync.js [app-client] (ecmascript)");
const loaders_js_1 = __turbopack_require__("[project]/node_modules/cosmiconfig/dist/loaders.js [app-client] (ecmascript)");
const util_1 = __turbopack_require__("[project]/node_modules/cosmiconfig/dist/util.js [app-client] (ecmascript)");
// this needs to be hardcoded, as this is intended for end users, who can't supply options at this point
exports.metaSearchPlaces = [
    'package.json',
    '.config.json',
    '.config.yaml',
    '.config.yml',
    '.config.js',
    '.config.ts',
    '.config.cjs',
    '.config.mjs'
];
// do not allow mutation of default loaders. Make sure it is set inside options
exports.defaultLoaders = Object.freeze({
    '.mjs': loaders_js_1.loadJs,
    '.cjs': loaders_js_1.loadJs,
    '.js': loaders_js_1.loadJs,
    '.ts': loaders_js_1.loadTs,
    '.json': loaders_js_1.loadJson,
    '.yaml': loaders_js_1.loadYaml,
    '.yml': loaders_js_1.loadYaml,
    noExt: loaders_js_1.loadYaml
});
exports.defaultLoadersSync = Object.freeze({
    '.cjs': loaders_js_1.loadJsSync,
    '.js': loaders_js_1.loadJsSync,
    '.ts': loaders_js_1.loadTsSync,
    '.json': loaders_js_1.loadJson,
    '.yaml': loaders_js_1.loadYaml,
    '.yml': loaders_js_1.loadYaml,
    noExt: loaders_js_1.loadYaml
});
const identity = function identity(x) {
    return x;
};
function getInternalOptions(moduleName, options) {
    const metaExplorer = new ExplorerSync_js_1.ExplorerSync({
        packageProp: 'cosmiconfig',
        stopDir: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cwd(),
        searchPlaces: exports.metaSearchPlaces,
        ignoreEmptySearchPlaces: false,
        applyPackagePropertyPathToConfiguration: true,
        loaders: exports.defaultLoaders,
        transform: identity,
        cache: true,
        metaConfigFilePath: null
    });
    const metaConfig = metaExplorer.search();
    if (!metaConfig) {
        return options;
    }
    if (metaConfig.config?.loaders) {
        throw new Error('Can not specify loaders in meta config file');
    }
    const overrideOptions = metaConfig.config ?? {};
    if (overrideOptions.searchPlaces) {
        overrideOptions.searchPlaces = overrideOptions.searchPlaces.map((path)=>path.replace('{name}', moduleName));
    }
    overrideOptions.metaConfigFilePath = metaConfig.filepath;
    return {
        ...options,
        ...(0, util_1.removeUndefinedValuesFromObject)(overrideOptions)
    };
}
function normalizeOptions(moduleName, options) {
    const defaults = {
        packageProp: moduleName,
        searchPlaces: [
            'package.json',
            `.${moduleName}rc`,
            `.${moduleName}rc.json`,
            `.${moduleName}rc.yaml`,
            `.${moduleName}rc.yml`,
            `.${moduleName}rc.js`,
            `.${moduleName}rc.ts`,
            `.${moduleName}rc.cjs`,
            `.${moduleName}rc.mjs`,
            `.config/${moduleName}rc`,
            `.config/${moduleName}rc.json`,
            `.config/${moduleName}rc.yaml`,
            `.config/${moduleName}rc.yml`,
            `.config/${moduleName}rc.js`,
            `.config/${moduleName}rc.ts`,
            `.config/${moduleName}rc.cjs`,
            `.config/${moduleName}rc.mjs`,
            `${moduleName}.config.js`,
            `${moduleName}.config.ts`,
            `${moduleName}.config.cjs`,
            `${moduleName}.config.mjs`
        ],
        ignoreEmptySearchPlaces: true,
        stopDir: os_1.default.homedir(),
        cache: true,
        transform: identity,
        loaders: exports.defaultLoaders,
        metaConfigFilePath: null
    };
    return {
        ...defaults,
        ...(0, util_1.removeUndefinedValuesFromObject)(options),
        loaders: {
            ...defaults.loaders,
            ...options.loaders
        }
    };
}
function normalizeOptionsSync(moduleName, options) {
    const defaults = {
        packageProp: moduleName,
        searchPlaces: [
            'package.json',
            `.${moduleName}rc`,
            `.${moduleName}rc.json`,
            `.${moduleName}rc.yaml`,
            `.${moduleName}rc.yml`,
            `.${moduleName}rc.js`,
            `.${moduleName}rc.ts`,
            `.${moduleName}rc.cjs`,
            `.config/${moduleName}rc`,
            `.config/${moduleName}rc.json`,
            `.config/${moduleName}rc.yaml`,
            `.config/${moduleName}rc.yml`,
            `.config/${moduleName}rc.js`,
            `.config/${moduleName}rc.ts`,
            `.config/${moduleName}rc.cjs`,
            `${moduleName}.config.js`,
            `${moduleName}.config.ts`,
            `${moduleName}.config.cjs`
        ],
        ignoreEmptySearchPlaces: true,
        stopDir: os_1.default.homedir(),
        cache: true,
        transform: identity,
        loaders: exports.defaultLoadersSync,
        metaConfigFilePath: null
    };
    return {
        ...defaults,
        ...(0, util_1.removeUndefinedValuesFromObject)(options),
        loaders: {
            ...defaults.loaders,
            ...options.loaders
        }
    };
}
function cosmiconfig(moduleName, options = {}) {
    const internalOptions = getInternalOptions(moduleName, options);
    const normalizedOptions = normalizeOptions(moduleName, internalOptions);
    const explorer = new Explorer_js_1.Explorer(normalizedOptions);
    return {
        search: explorer.search.bind(explorer),
        load: explorer.load.bind(explorer),
        clearLoadCache: explorer.clearLoadCache.bind(explorer),
        clearSearchCache: explorer.clearSearchCache.bind(explorer),
        clearCaches: explorer.clearCaches.bind(explorer)
    };
}
exports.cosmiconfig = cosmiconfig;
function cosmiconfigSync(moduleName, options = {}) {
    const internalOptions = getInternalOptions(moduleName, options);
    const normalizedOptions = normalizeOptionsSync(moduleName, internalOptions);
    const explorerSync = new ExplorerSync_js_1.ExplorerSync(normalizedOptions);
    return {
        search: explorerSync.search.bind(explorerSync),
        load: explorerSync.load.bind(explorerSync),
        clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),
        clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),
        clearCaches: explorerSync.clearCaches.bind(explorerSync)
    };
}
exports.cosmiconfigSync = cosmiconfigSync; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/path-type/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const { promisify } = __turbopack_require__("[project]/node_modules/next/dist/compiled/util/util.js [app-client] (ecmascript)");
const fs = (()=>{
    const e = new Error("Cannot find module 'fs'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
async function isType(fsStatType, statsMethodName, filePath) {
    if (typeof filePath !== 'string') {
        throw new TypeError(`Expected a string, got ${typeof filePath}`);
    }
    try {
        const stats = await promisify(fs[fsStatType])(filePath);
        return stats[statsMethodName]();
    } catch (error) {
        if (error.code === 'ENOENT') {
            return false;
        }
        throw error;
    }
}
function isTypeSync(fsStatType, statsMethodName, filePath) {
    if (typeof filePath !== 'string') {
        throw new TypeError(`Expected a string, got ${typeof filePath}`);
    }
    try {
        return fs[fsStatType](filePath)[statsMethodName]();
    } catch (error) {
        if (error.code === 'ENOENT') {
            return false;
        }
        throw error;
    }
}
exports.isFile = isType.bind(null, 'stat', 'isFile');
exports.isDirectory = isType.bind(null, 'stat', 'isDirectory');
exports.isSymlink = isType.bind(null, 'lstat', 'isSymbolicLink');
exports.isFileSync = isTypeSync.bind(null, 'statSync', 'isFile');
exports.isDirectorySync = isTypeSync.bind(null, 'statSync', 'isDirectory');
exports.isSymlinkSync = isTypeSync.bind(null, 'lstatSync', 'isSymbolicLink');
}}),
"[project]/node_modules/resolve-from/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const path = __turbopack_require__("[project]/node_modules/next/dist/compiled/path-browserify/index.js [app-client] (ecmascript)");
const Module = (()=>{
    const e = new Error("Cannot find module 'module'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
const fs = (()=>{
    const e = new Error("Cannot find module 'fs'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
const resolveFrom = (fromDir, moduleId, silent)=>{
    if (typeof fromDir !== 'string') {
        throw new TypeError(`Expected \`fromDir\` to be of type \`string\`, got \`${typeof fromDir}\``);
    }
    if (typeof moduleId !== 'string') {
        throw new TypeError(`Expected \`moduleId\` to be of type \`string\`, got \`${typeof moduleId}\``);
    }
    try {
        fromDir = fs.realpathSync(fromDir);
    } catch (err) {
        if (err.code === 'ENOENT') {
            fromDir = path.resolve(fromDir);
        } else if (silent) {
            return null;
        } else {
            throw err;
        }
    }
    const fromFile = path.join(fromDir, 'noop.js');
    const resolveFileName = ()=>Module._resolveFilename(moduleId, {
            id: fromFile,
            filename: fromFile,
            paths: Module._nodeModulePaths(fromDir)
        });
    if (silent) {
        try {
            return resolveFileName();
        } catch (err) {
            return null;
        }
    }
    return resolveFileName();
};
module.exports = (fromDir, moduleId)=>resolveFrom(fromDir, moduleId);
module.exports.silent = (fromDir, moduleId)=>resolveFrom(fromDir, moduleId, true);
}}),
"[project]/node_modules/callsites/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const callsites = ()=>{
    const _prepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = (_, stack)=>stack;
    const stack = new Error().stack.slice(1);
    Error.prepareStackTrace = _prepareStackTrace;
    return stack;
};
module.exports = callsites;
// TODO: Remove this for the next major release
module.exports.default = callsites;
}}),
"[project]/node_modules/parent-module/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const callsites = __turbopack_require__("[project]/node_modules/callsites/index.js [app-client] (ecmascript)");
module.exports = (filepath)=>{
    const stacks = callsites();
    if (!filepath) {
        return stacks[2].getFileName();
    }
    let seenVal = false;
    // Skip the first stack as it's this function
    stacks.shift();
    for (const stack of stacks){
        const parentFilepath = stack.getFileName();
        if (typeof parentFilepath !== 'string') {
            continue;
        }
        if (parentFilepath === filepath) {
            seenVal = true;
            continue;
        }
        // Skip native modules
        if (parentFilepath === 'module.js') {
            continue;
        }
        if (seenVal && parentFilepath !== filepath) {
            return parentFilepath;
        }
    }
};
}}),
"[project]/node_modules/import-fresh/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const path = __turbopack_require__("[project]/node_modules/next/dist/compiled/path-browserify/index.js [app-client] (ecmascript)");
const resolveFrom = __turbopack_require__("[project]/node_modules/resolve-from/index.js [app-client] (ecmascript)");
const parentModule = __turbopack_require__("[project]/node_modules/parent-module/index.js [app-client] (ecmascript)");
module.exports = (moduleId)=>{
    if (typeof moduleId !== 'string') {
        throw new TypeError('Expected a string');
    }
    const parentPath = parentModule(__filename);
    const cwd = parentPath ? path.dirname(parentPath) : __dirname;
    const filePath = resolveFrom(cwd, moduleId);
    const oldModule = __turbopack_cache__[filePath];
    // Delete itself from module parent
    if (oldModule && oldModule.parent) {
        let i = oldModule.parent.children.length;
        while(i--){
            if (oldModule.parent.children[i].id === filePath) {
                oldModule.parent.children.splice(i, 1);
            }
        }
    }
    delete __turbopack_cache__[filePath]; // Delete module from cache
    const parent = __turbopack_cache__[parentPath]; // If `filePath` and `parentPath` are the same, cache will already be deleted so we won't get a memory leak in next step
    return parent === undefined ? (()=>{
        const e = new Error("Cannot find module 'unknown'");
        e.code = 'MODULE_NOT_FOUND';
        throw e;
    })() : parent.require(filePath); // In case cache doesn't have parent, fall back to normal require
};
}}),
"[project]/node_modules/error-ex/node_modules/is-arrayish/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
module.exports = function isArrayish(obj) {
    if (!obj) {
        return false;
    }
    return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && obj.splice instanceof Function;
};
}}),
"[project]/node_modules/error-ex/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var util = __turbopack_require__("[project]/node_modules/next/dist/compiled/util/util.js [app-client] (ecmascript)");
var isArrayish = __turbopack_require__("[project]/node_modules/error-ex/node_modules/is-arrayish/index.js [app-client] (ecmascript)");
var errorEx = function errorEx(name, properties) {
    if (!name || name.constructor !== String) {
        properties = name || {};
        name = Error.name;
    }
    var errorExError = function ErrorEXError(message) {
        if (!this) {
            return new ErrorEXError(message);
        }
        message = message instanceof Error ? message.message : message || this.message;
        Error.call(this, message);
        Error.captureStackTrace(this, errorExError);
        this.name = name;
        Object.defineProperty(this, 'message', {
            configurable: true,
            enumerable: false,
            get: function() {
                var newMessage = message.split(/\r?\n/g);
                for(var key in properties){
                    if (!properties.hasOwnProperty(key)) {
                        continue;
                    }
                    var modifier = properties[key];
                    if ('message' in modifier) {
                        newMessage = modifier.message(this[key], newMessage) || newMessage;
                        if (!isArrayish(newMessage)) {
                            newMessage = [
                                newMessage
                            ];
                        }
                    }
                }
                return newMessage.join('\n');
            },
            set: function(v) {
                message = v;
            }
        });
        var overwrittenStack = null;
        var stackDescriptor = Object.getOwnPropertyDescriptor(this, 'stack');
        var stackGetter = stackDescriptor.get;
        var stackValue = stackDescriptor.value;
        delete stackDescriptor.value;
        delete stackDescriptor.writable;
        stackDescriptor.set = function(newstack) {
            overwrittenStack = newstack;
        };
        stackDescriptor.get = function() {
            var stack = (overwrittenStack || (stackGetter ? stackGetter.call(this) : stackValue)).split(/\r?\n+/g);
            // starting in Node 7, the stack builder caches the message.
            // just replace it.
            if (!overwrittenStack) {
                stack[0] = this.name + ': ' + this.message;
            }
            var lineCount = 1;
            for(var key in properties){
                if (!properties.hasOwnProperty(key)) {
                    continue;
                }
                var modifier = properties[key];
                if ('line' in modifier) {
                    var line = modifier.line(this[key]);
                    if (line) {
                        stack.splice(lineCount++, 0, '    ' + line);
                    }
                }
                if ('stack' in modifier) {
                    modifier.stack(this[key], stack);
                }
            }
            return stack.join('\n');
        };
        Object.defineProperty(this, 'stack', stackDescriptor);
    };
    if (Object.setPrototypeOf) {
        Object.setPrototypeOf(errorExError.prototype, Error.prototype);
        Object.setPrototypeOf(errorExError, Error);
    } else {
        util.inherits(errorExError, Error);
    }
    return errorExError;
};
errorEx.append = function(str, def) {
    return {
        message: function(v, message) {
            v = v || def;
            if (v) {
                message[0] += ' ' + str.replace('%s', v.toString());
            }
            return message;
        }
    };
};
errorEx.line = function(str, def) {
    return {
        line: function(v) {
            v = v || def;
            if (v) {
                return str.replace('%s', v.toString());
            }
            return null;
        }
    };
};
module.exports = errorEx;
}}),
"[project]/node_modules/json-parse-even-better-errors/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/buffer/index.js [app-client] (ecmascript)");
'use strict';
const hexify = (char)=>{
    const h = char.charCodeAt(0).toString(16).toUpperCase();
    return '0x' + (h.length % 2 ? '0' : '') + h;
};
const parseError = (e, txt, context)=>{
    if (!txt) {
        return {
            message: e.message + ' while parsing empty string',
            position: 0
        };
    }
    const badToken = e.message.match(/^Unexpected token (.) .*position\s+(\d+)/i);
    const errIdx = badToken ? +badToken[2] : e.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1 : null;
    const msg = badToken ? e.message.replace(/^Unexpected token ./, `Unexpected token ${JSON.stringify(badToken[1])} (${hexify(badToken[1])})`) : e.message;
    if (errIdx !== null && errIdx !== undefined) {
        const start = errIdx <= context ? 0 : errIdx - context;
        const end = errIdx + context >= txt.length ? txt.length : errIdx + context;
        const slice = (start === 0 ? '' : '...') + txt.slice(start, end) + (end === txt.length ? '' : '...');
        const near = txt === slice ? '' : 'near ';
        return {
            message: msg + ` while parsing ${near}${JSON.stringify(slice)}`,
            position: errIdx
        };
    } else {
        return {
            message: msg + ` while parsing '${txt.slice(0, context * 2)}'`,
            position: 0
        };
    }
};
class JSONParseError extends SyntaxError {
    constructor(er, txt, context, caller){
        context = context || 20;
        const metadata = parseError(er, txt, context);
        super(metadata.message);
        Object.assign(this, metadata);
        this.code = 'EJSONPARSE';
        this.systemError = er;
        Error.captureStackTrace(this, caller || this.constructor);
    }
    get name() {
        return this.constructor.name;
    }
    set name(n) {}
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
}
const kIndent = Symbol.for('indent');
const kNewline = Symbol.for('newline');
// only respect indentation if we got a line break, otherwise squash it
// things other than objects and arrays aren't indented, so ignore those
// Important: in both of these regexps, the $1 capture group is the newline
// or undefined, and the $2 capture group is the indent, or undefined.
const formatRE = /^\s*[{\[]((?:\r?\n)+)([\s\t]*)/;
const emptyRE = /^(?:\{\}|\[\])((?:\r?\n)+)?$/;
const parseJson = (txt, reviver, context)=>{
    const parseText = stripBOM(txt);
    context = context || 20;
    try {
        // get the indentation so that we can save it back nicely
        // if the file starts with {" then we have an indent of '', ie, none
        // otherwise, pick the indentation of the next line after the first \n
        // If the pattern doesn't match, then it means no indentation.
        // JSON.stringify ignores symbols, so this is reasonably safe.
        // if the string is '{}' or '[]', then use the default 2-space indent.
        const [, newline = '\n', indent = '  '] = parseText.match(emptyRE) || parseText.match(formatRE) || [
            ,
            '',
            ''
        ];
        const result = JSON.parse(parseText, reviver);
        if (result && typeof result === 'object') {
            result[kNewline] = newline;
            result[kIndent] = indent;
        }
        return result;
    } catch (e) {
        if (typeof txt !== 'string' && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].isBuffer(txt)) {
            const isEmptyArray = Array.isArray(txt) && txt.length === 0;
            throw Object.assign(new TypeError(`Cannot parse ${isEmptyArray ? 'an empty array' : String(txt)}`), {
                code: 'EJSONPARSE',
                systemError: e
            });
        }
        throw new JSONParseError(e, parseText, context, parseJson);
    }
};
// Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
// because the buffer-to-string conversion in `fs.readFileSync()`
// translates it to FEFF, the UTF-16 BOM.
const stripBOM = (txt)=>String(txt).replace(/^\uFEFF/, '');
module.exports = parseJson;
parseJson.JSONParseError = JSONParseError;
parseJson.noExceptions = (txt, reviver)=>{
    try {
        return JSON.parse(stripBOM(txt), reviver);
    } catch (e) {}
};
}}),
"[project]/node_modules/lines-and-columns/build/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports.LinesAndColumns = void 0;
var LF = '\n';
var CR = '\r';
var LinesAndColumns = function() {
    function LinesAndColumns(string) {
        this.string = string;
        var offsets = [
            0
        ];
        for(var offset = 0; offset < string.length;){
            switch(string[offset]){
                case LF:
                    offset += LF.length;
                    offsets.push(offset);
                    break;
                case CR:
                    offset += CR.length;
                    if (string[offset] === LF) {
                        offset += LF.length;
                    }
                    offsets.push(offset);
                    break;
                default:
                    offset++;
                    break;
            }
        }
        this.offsets = offsets;
    }
    LinesAndColumns.prototype.locationForIndex = function(index) {
        if (index < 0 || index > this.string.length) {
            return null;
        }
        var line = 0;
        var offsets = this.offsets;
        while(offsets[line + 1] <= index){
            line++;
        }
        var column = index - offsets[line];
        return {
            line: line,
            column: column
        };
    };
    LinesAndColumns.prototype.indexForLocation = function(location) {
        var line = location.line, column = location.column;
        if (line < 0 || line >= this.offsets.length) {
            return null;
        }
        if (column < 0 || column > this.lengthOfLine(line)) {
            return null;
        }
        return this.offsets[line] + column;
    };
    LinesAndColumns.prototype.lengthOfLine = function(line) {
        var offset = this.offsets[line];
        var nextOffset = line === this.offsets.length - 1 ? this.string.length : this.offsets[line + 1];
        return nextOffset - offset;
    };
    return LinesAndColumns;
}();
exports.LinesAndColumns = LinesAndColumns;
exports["default"] = LinesAndColumns;
}}),
"[project]/node_modules/parse-json/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const errorEx = __turbopack_require__("[project]/node_modules/error-ex/index.js [app-client] (ecmascript)");
const fallback = __turbopack_require__("[project]/node_modules/json-parse-even-better-errors/index.js [app-client] (ecmascript)");
const { default: LinesAndColumns } = __turbopack_require__("[project]/node_modules/lines-and-columns/build/index.js [app-client] (ecmascript)");
const { codeFrameColumns } = __turbopack_require__("[project]/node_modules/@babel/code-frame/lib/index.js [app-client] (ecmascript)");
const JSONError = errorEx('JSONError', {
    fileName: errorEx.append('in %s'),
    codeFrame: errorEx.append('\n\n%s\n')
});
const parseJson = (string, reviver, filename)=>{
    if (typeof reviver === 'string') {
        filename = reviver;
        reviver = null;
    }
    try {
        try {
            return JSON.parse(string, reviver);
        } catch (error) {
            fallback(string, reviver);
            throw error;
        }
    } catch (error) {
        error.message = error.message.replace(/\n/g, '');
        const indexMatch = error.message.match(/in JSON at position (\d+) while parsing/);
        const jsonError = new JSONError(error);
        if (filename) {
            jsonError.fileName = filename;
        }
        if (indexMatch && indexMatch.length > 0) {
            const lines = new LinesAndColumns(string);
            const index = Number(indexMatch[1]);
            const location = lines.locationForIndex(index);
            const codeFrame = codeFrameColumns(string, {
                start: {
                    line: location.line + 1,
                    column: location.column + 1
                }
            }, {
                highlightCode: true
            });
            jsonError.codeFrame = codeFrame;
        }
        throw jsonError;
    }
};
parseJson.JSONError = JSONError;
module.exports = parseJson;
}}),
"[project]/node_modules/@svgr/core/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var path = __turbopack_require__("[project]/node_modules/next/dist/compiled/path-browserify/index.js [app-client] (ecmascript)");
var camelCase = __turbopack_require__("[project]/node_modules/camelcase/index.js [app-client] (ecmascript)");
var cosmiconfig = __turbopack_require__("[project]/node_modules/cosmiconfig/dist/index.js [app-client] (ecmascript)");
var __defProp$1 = Object.defineProperty;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value)=>key in obj ? __defProp$1(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __spreadValues$1 = (a, b)=>{
    for(var prop in b || (b = {}))if (__hasOwnProp$1.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);
    if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)){
        if (__propIsEnum$1.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);
    }
    return a;
};
const VALID_CHAR_REGEX = /[^a-zA-Z0-9 _-]/g;
const getComponentName = (filePath)=>{
    if (!filePath) return "SvgComponent";
    const pascalCaseFileName = camelCase(path.parse(filePath).name.replace(VALID_CHAR_REGEX, ""), {
        pascalCase: true
    });
    return `Svg${pascalCaseFileName}`;
};
const expandState = (state)=>{
    return __spreadValues$1({
        componentName: state.componentName || getComponentName(state.filePath)
    }, state);
};
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __spreadValues = (a, b)=>{
    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    }
    return a;
};
var __objRest = (source, exclude)=>{
    var target = {};
    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];
    }
    return target;
};
const DEFAULT_CONFIG = {
    dimensions: true,
    expandProps: "end",
    icon: false,
    native: false,
    typescript: false,
    prettier: true,
    prettierConfig: void 0,
    memo: false,
    ref: false,
    replaceAttrValues: void 0,
    svgProps: void 0,
    svgo: true,
    svgoConfig: void 0,
    template: void 0,
    index: false,
    titleProp: false,
    descProp: false,
    runtimeConfig: true,
    namedExport: "ReactComponent",
    exportType: "default"
};
const explorer = cosmiconfig.cosmiconfig("svgr");
const explorerSync = cosmiconfig.cosmiconfigSync("svgr");
const resolveConfig = async (searchFrom, configFile)=>{
    if (configFile == null) {
        const result2 = await explorer.search(searchFrom);
        return result2 ? result2.config : null;
    }
    const result = await explorer.load(configFile);
    return result ? result.config : null;
};
resolveConfig.sync = (searchFrom, configFile)=>{
    if (configFile == null) {
        const result2 = explorerSync.search(searchFrom);
        return result2 ? result2.config : null;
    }
    const result = explorerSync.load(configFile);
    return result ? result.config : null;
};
const resolveConfigFile = async (filePath)=>{
    const result = await explorer.search(filePath);
    return result ? result.filepath : null;
};
resolveConfigFile.sync = (filePath)=>{
    const result = explorerSync.search(filePath);
    return result ? result.filepath : null;
};
const loadConfig = async (_a, state = {})=>{
    var _b = _a, { configFile } = _b, baseConfig = __objRest(_b, [
        "configFile"
    ]);
    const rcConfig = state.filePath && baseConfig.runtimeConfig !== false ? await resolveConfig(state.filePath, configFile) : {};
    return __spreadValues(__spreadValues(__spreadValues({}, DEFAULT_CONFIG), baseConfig), rcConfig);
};
loadConfig.sync = (_c, state = {})=>{
    var _d = _c, { configFile } = _d, baseConfig = __objRest(_d, [
        "configFile"
    ]);
    const rcConfig = state.filePath && baseConfig.runtimeConfig !== false ? resolveConfig.sync(state.filePath, configFile) : {};
    return __spreadValues(__spreadValues(__spreadValues({}, DEFAULT_CONFIG), baseConfig), rcConfig);
};
const DEFAULT_PLUGINS = [];
const getPlugins = (config, state)=>{
    var _a;
    if (config.plugins) {
        return config.plugins;
    }
    if ((_a = state.caller) == null ? void 0 : _a.defaultPlugins) {
        return state.caller.defaultPlugins;
    }
    return DEFAULT_PLUGINS;
};
const resolvePlugin = (plugin)=>{
    if (typeof plugin === "function") {
        return plugin;
    }
    if (typeof plugin === "string") {
        return loadPlugin(plugin);
    }
    throw new Error(`Invalid plugin "${plugin}"`);
};
const pluginCache = {};
const resolveModule = (m)=>m ? m.default || m : null;
const loadPlugin = (moduleName)=>{
    if (pluginCache[moduleName]) {
        return pluginCache[moduleName];
    }
    try {
        const plugin = resolveModule((()=>{
            const e = new Error("Cannot find module 'unknown'");
            e.code = 'MODULE_NOT_FOUND';
            throw e;
        })());
        if (!plugin) {
            throw new Error(`Invalid plugin "${moduleName}"`);
        }
        pluginCache[moduleName] = plugin;
        return pluginCache[moduleName];
    } catch (error) {
        console.log(error);
        throw new Error(`Module "${moduleName}" missing. Maybe \`npm install ${moduleName}\` could help!`);
    }
};
const run = (code, config, state)=>{
    const expandedState = expandState(state);
    const plugins = getPlugins(config, state).map(resolvePlugin);
    let nextCode = String(code).replace("\0", "");
    for (const plugin of plugins){
        nextCode = plugin(nextCode, config, expandedState);
    }
    return nextCode;
};
const transform = async (code, config = {}, state = {})=>{
    config = await loadConfig(config, state);
    return run(code, config, state);
};
transform.sync = (code, config = {}, state = {})=>{
    config = loadConfig.sync(config, state);
    return run(code, config, state);
};
exports.DEFAULT_CONFIG = DEFAULT_CONFIG;
exports.loadConfig = loadConfig;
exports.resolveConfig = resolveConfig;
exports.resolveConfigFile = resolveConfigFile;
exports.transform = transform; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@svgr/plugin-svgo/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
'use strict';
var svgo = __turbopack_require__("[project]/node_modules/svgo/lib/svgo-node.js [app-client] (ecmascript)");
var cosmiconfig = __turbopack_require__("[project]/node_modules/cosmiconfig/dist/index.js [app-client] (ecmascript)");
const explorer = cosmiconfig.cosmiconfigSync("svgo", {
    searchPlaces: [
        "package.json",
        ".svgorc",
        ".svgorc.js",
        ".svgorc.json",
        ".svgorc.yaml",
        ".svgorc.yml",
        "svgo.config.js",
        "svgo.config.cjs",
        ".svgo.yml"
    ],
    transform: (result)=>result && result.config,
    cache: true
});
const getSvgoConfigFromSvgrConfig = (config)=>{
    const params = {
        overrides: {}
    };
    if (config.icon || config.dimensions === false) {
        params.overrides.removeViewBox = false;
    }
    if (config.native) {
        params.overrides.inlineStyles = {
            onlyMatchedOnce: false
        };
    }
    return {
        plugins: [
            {
                name: "preset-default",
                params
            },
            "prefixIds"
        ]
    };
};
const getSvgoConfig = (config, state)=>{
    const cwd = state.filePath || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cwd();
    if (config.svgoConfig) return config.svgoConfig;
    if (config.runtimeConfig) {
        const userConfig = explorer.search(cwd);
        if (userConfig) return userConfig;
    }
    return getSvgoConfigFromSvgrConfig(config);
};
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __spreadValues = (a, b)=>{
    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    }
    return a;
};
var __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));
const svgoPlugin = (code, config, state)=>{
    if (!config.svgo) return code;
    const svgoConfig = getSvgoConfig(config, state);
    const result = svgo.optimize(code, __spreadProps(__spreadValues({}, svgoConfig), {
        path: state.filePath
    }));
    if (result.modernError) {
        throw result.modernError;
    }
    return result.data;
};
module.exports = svgoPlugin; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@svgr/hast-util-to-babel-ast/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var t = __turbopack_require__("[project]/node_modules/@babel/types/lib/index.js [app-client] (ecmascript)");
var entities = __turbopack_require__("[project]/node_modules/entities/lib/index.js [app-client] (ecmascript)");
function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function(k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function() {
                        return e[k];
                    }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}
var t__namespace = /*#__PURE__*/ _interopNamespaceDefault(t);
const one = (h, node, parent)=>{
    const type = node && node.type;
    const fn = h.handlers[type];
    if (!type) {
        throw new Error(`Expected node, got \`${node}\``);
    }
    if (!fn) {
        throw new Error(`Node of type ${type} is unknown`);
    }
    return fn(h, node, parent);
};
const all = (helpers, parent)=>{
    const nodes = parent.children || [];
    const { length } = nodes;
    const values = [];
    let index = -1;
    while(++index < length){
        const node = nodes[index];
        if (typeof node !== "string") {
            const result = one(helpers, node, parent);
            values.push(result);
        }
    }
    return values.filter(Boolean);
};
const isNumeric = (value)=>{
    return !Number.isNaN(value - parseFloat(value));
};
const hyphenToCamelCase = (string)=>{
    return string.replace(/-(.)/g, (_, chr)=>chr.toUpperCase());
};
const trimEnd = (haystack, needle)=>{
    return haystack.endsWith(needle) ? haystack.slice(0, -needle.length) : haystack;
};
const KEBAB_REGEX = /[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g;
const kebabCase = (str)=>{
    return str.replace(KEBAB_REGEX, (match)=>`-${match.toLowerCase()}`);
};
const SPACES_REGEXP = /[\t\r\n\u0085\u2028\u2029]+/g;
const replaceSpaces = (str)=>{
    return str.replace(SPACES_REGEXP, " ");
};
const PX_REGEX = /^\d+px$/;
const MS_REGEX = /^-ms-/;
const VAR_REGEX = /^--/;
const isConvertiblePixelValue = (value)=>{
    return PX_REGEX.test(value);
};
const formatKey = (key)=>{
    if (VAR_REGEX.test(key)) {
        return t__namespace.stringLiteral(key);
    }
    key = key.toLowerCase();
    if (MS_REGEX.test(key)) key = key.substr(1);
    return t__namespace.identifier(hyphenToCamelCase(key));
};
const formatValue = (value)=>{
    if (isNumeric(value)) return t__namespace.numericLiteral(Number(value));
    if (isConvertiblePixelValue(value)) return t__namespace.numericLiteral(Number(trimEnd(value, "px")));
    return t__namespace.stringLiteral(value);
};
const stringToObjectStyle = (rawStyle)=>{
    const entries = rawStyle.split(";");
    const properties = [];
    let index = -1;
    while(++index < entries.length){
        const entry = entries[index];
        const style = entry.trim();
        const firstColon = style.indexOf(":");
        const value = style.substr(firstColon + 1).trim();
        const key = style.substr(0, firstColon);
        if (key !== "") {
            const property = t__namespace.objectProperty(formatKey(key), formatValue(value));
            properties.push(property);
        }
    }
    return t__namespace.objectExpression(properties);
};
const ATTRIBUTE_MAPPING = {
    // HTML
    accept: "accept",
    acceptcharset: "acceptCharset",
    "accept-charset": "acceptCharset",
    accesskey: "accessKey",
    action: "action",
    allowfullscreen: "allowFullScreen",
    alt: "alt",
    as: "as",
    async: "async",
    autocapitalize: "autoCapitalize",
    autocomplete: "autoComplete",
    autocorrect: "autoCorrect",
    autofocus: "autoFocus",
    autoplay: "autoPlay",
    autosave: "autoSave",
    capture: "capture",
    cellpadding: "cellPadding",
    cellspacing: "cellSpacing",
    challenge: "challenge",
    charset: "charSet",
    checked: "checked",
    children: "children",
    cite: "cite",
    class: "className",
    classid: "classID",
    classname: "className",
    cols: "cols",
    colspan: "colSpan",
    content: "content",
    contenteditable: "contentEditable",
    contextmenu: "contextMenu",
    controls: "controls",
    controlslist: "controlsList",
    coords: "coords",
    crossorigin: "crossOrigin",
    dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
    data: "data",
    datetime: "dateTime",
    default: "default",
    defaultchecked: "defaultChecked",
    defaultvalue: "defaultValue",
    defer: "defer",
    dir: "dir",
    disabled: "disabled",
    download: "download",
    draggable: "draggable",
    enctype: "encType",
    for: "htmlFor",
    form: "form",
    formmethod: "formMethod",
    formaction: "formAction",
    formenctype: "formEncType",
    formnovalidate: "formNoValidate",
    formtarget: "formTarget",
    frameborder: "frameBorder",
    headers: "headers",
    height: "height",
    hidden: "hidden",
    high: "high",
    href: "href",
    hreflang: "hrefLang",
    htmlfor: "htmlFor",
    httpequiv: "httpEquiv",
    "http-equiv": "httpEquiv",
    icon: "icon",
    id: "id",
    innerhtml: "innerHTML",
    inputmode: "inputMode",
    integrity: "integrity",
    is: "is",
    itemid: "itemID",
    itemprop: "itemProp",
    itemref: "itemRef",
    itemscope: "itemScope",
    itemtype: "itemType",
    keyparams: "keyParams",
    keytype: "keyType",
    kind: "kind",
    label: "label",
    lang: "lang",
    list: "list",
    loop: "loop",
    low: "low",
    manifest: "manifest",
    marginwidth: "marginWidth",
    marginheight: "marginHeight",
    max: "max",
    maxlength: "maxLength",
    media: "media",
    mediagroup: "mediaGroup",
    method: "method",
    min: "min",
    minlength: "minLength",
    multiple: "multiple",
    muted: "muted",
    name: "name",
    nomodule: "noModule",
    nonce: "nonce",
    novalidate: "noValidate",
    open: "open",
    optimum: "optimum",
    pattern: "pattern",
    placeholder: "placeholder",
    playsinline: "playsInline",
    poster: "poster",
    preload: "preload",
    profile: "profile",
    radiogroup: "radioGroup",
    readonly: "readOnly",
    referrerpolicy: "referrerPolicy",
    rel: "rel",
    required: "required",
    reversed: "reversed",
    role: "role",
    rows: "rows",
    rowspan: "rowSpan",
    sandbox: "sandbox",
    scope: "scope",
    scoped: "scoped",
    scrolling: "scrolling",
    seamless: "seamless",
    selected: "selected",
    shape: "shape",
    size: "size",
    sizes: "sizes",
    span: "span",
    spellcheck: "spellCheck",
    src: "src",
    srcdoc: "srcDoc",
    srclang: "srcLang",
    srcset: "srcSet",
    start: "start",
    step: "step",
    style: "style",
    summary: "summary",
    tabindex: "tabIndex",
    target: "target",
    title: "title",
    type: "type",
    usemap: "useMap",
    value: "value",
    width: "width",
    wmode: "wmode",
    wrap: "wrap",
    // SVG
    about: "about",
    accentheight: "accentHeight",
    "accent-height": "accentHeight",
    accumulate: "accumulate",
    additive: "additive",
    alignmentbaseline: "alignmentBaseline",
    "alignment-baseline": "alignmentBaseline",
    allowreorder: "allowReorder",
    alphabetic: "alphabetic",
    amplitude: "amplitude",
    arabicform: "arabicForm",
    "arabic-form": "arabicForm",
    ascent: "ascent",
    attributename: "attributeName",
    attributetype: "attributeType",
    autoreverse: "autoReverse",
    azimuth: "azimuth",
    basefrequency: "baseFrequency",
    baselineshift: "baselineShift",
    "baseline-shift": "baselineShift",
    baseprofile: "baseProfile",
    bbox: "bbox",
    begin: "begin",
    bias: "bias",
    by: "by",
    calcmode: "calcMode",
    capheight: "capHeight",
    "cap-height": "capHeight",
    clip: "clip",
    clippath: "clipPath",
    "clip-path": "clipPath",
    clippathunits: "clipPathUnits",
    cliprule: "clipRule",
    "clip-rule": "clipRule",
    color: "color",
    colorinterpolation: "colorInterpolation",
    "color-interpolation": "colorInterpolation",
    colorinterpolationfilters: "colorInterpolationFilters",
    "color-interpolation-filters": "colorInterpolationFilters",
    colorprofile: "colorProfile",
    "color-profile": "colorProfile",
    colorrendering: "colorRendering",
    "color-rendering": "colorRendering",
    contentscripttype: "contentScriptType",
    contentstyletype: "contentStyleType",
    cursor: "cursor",
    cx: "cx",
    cy: "cy",
    d: "d",
    datatype: "datatype",
    decelerate: "decelerate",
    descent: "descent",
    diffuseconstant: "diffuseConstant",
    direction: "direction",
    display: "display",
    divisor: "divisor",
    dominantbaseline: "dominantBaseline",
    "dominant-baseline": "dominantBaseline",
    dur: "dur",
    dx: "dx",
    dy: "dy",
    edgemode: "edgeMode",
    elevation: "elevation",
    enablebackground: "enableBackground",
    "enable-background": "enableBackground",
    end: "end",
    exponent: "exponent",
    externalresourcesrequired: "externalResourcesRequired",
    fill: "fill",
    fillopacity: "fillOpacity",
    "fill-opacity": "fillOpacity",
    fillrule: "fillRule",
    "fill-rule": "fillRule",
    filter: "filter",
    filterres: "filterRes",
    filterunits: "filterUnits",
    floodopacity: "floodOpacity",
    "flood-opacity": "floodOpacity",
    floodcolor: "floodColor",
    "flood-color": "floodColor",
    focusable: "focusable",
    fontfamily: "fontFamily",
    "font-family": "fontFamily",
    fontsize: "fontSize",
    "font-size": "fontSize",
    fontsizeadjust: "fontSizeAdjust",
    "font-size-adjust": "fontSizeAdjust",
    fontstretch: "fontStretch",
    "font-stretch": "fontStretch",
    fontstyle: "fontStyle",
    "font-style": "fontStyle",
    fontvariant: "fontVariant",
    "font-variant": "fontVariant",
    fontweight: "fontWeight",
    "font-weight": "fontWeight",
    format: "format",
    from: "from",
    fx: "fx",
    fy: "fy",
    g1: "g1",
    g2: "g2",
    glyphname: "glyphName",
    "glyph-name": "glyphName",
    glyphorientationhorizontal: "glyphOrientationHorizontal",
    "glyph-orientation-horizontal": "glyphOrientationHorizontal",
    glyphorientationvertical: "glyphOrientationVertical",
    "glyph-orientation-vertical": "glyphOrientationVertical",
    glyphref: "glyphRef",
    gradienttransform: "gradientTransform",
    gradientunits: "gradientUnits",
    hanging: "hanging",
    horizadvx: "horizAdvX",
    "horiz-adv-x": "horizAdvX",
    horizoriginx: "horizOriginX",
    "horiz-origin-x": "horizOriginX",
    ideographic: "ideographic",
    imagerendering: "imageRendering",
    "image-rendering": "imageRendering",
    in2: "in2",
    in: "in",
    inlist: "inlist",
    intercept: "intercept",
    k1: "k1",
    k2: "k2",
    k3: "k3",
    k4: "k4",
    k: "k",
    kernelmatrix: "kernelMatrix",
    kernelunitlength: "kernelUnitLength",
    kerning: "kerning",
    keypoints: "keyPoints",
    keysplines: "keySplines",
    keytimes: "keyTimes",
    lengthadjust: "lengthAdjust",
    letterspacing: "letterSpacing",
    "letter-spacing": "letterSpacing",
    lightingcolor: "lightingColor",
    "lighting-color": "lightingColor",
    limitingconeangle: "limitingConeAngle",
    local: "local",
    markerend: "markerEnd",
    "marker-end": "markerEnd",
    markerheight: "markerHeight",
    markermid: "markerMid",
    "marker-mid": "markerMid",
    markerstart: "markerStart",
    "marker-start": "markerStart",
    markerunits: "markerUnits",
    markerwidth: "markerWidth",
    mask: "mask",
    maskcontentunits: "maskContentUnits",
    maskunits: "maskUnits",
    mathematical: "mathematical",
    mode: "mode",
    numoctaves: "numOctaves",
    offset: "offset",
    opacity: "opacity",
    operator: "operator",
    order: "order",
    orient: "orient",
    orientation: "orientation",
    origin: "origin",
    overflow: "overflow",
    overlineposition: "overlinePosition",
    "overline-position": "overlinePosition",
    overlinethickness: "overlineThickness",
    "overline-thickness": "overlineThickness",
    paintorder: "paintOrder",
    "paint-order": "paintOrder",
    panose1: "panose1",
    "panose-1": "panose1",
    pathlength: "pathLength",
    patterncontentunits: "patternContentUnits",
    patterntransform: "patternTransform",
    patternunits: "patternUnits",
    pointerevents: "pointerEvents",
    "pointer-events": "pointerEvents",
    points: "points",
    pointsatx: "pointsAtX",
    pointsaty: "pointsAtY",
    pointsatz: "pointsAtZ",
    prefix: "prefix",
    preservealpha: "preserveAlpha",
    preserveaspectratio: "preserveAspectRatio",
    primitiveunits: "primitiveUnits",
    property: "property",
    r: "r",
    radius: "radius",
    refx: "refX",
    refy: "refY",
    renderingintent: "renderingIntent",
    "rendering-intent": "renderingIntent",
    repeatcount: "repeatCount",
    repeatdur: "repeatDur",
    requiredextensions: "requiredExtensions",
    requiredfeatures: "requiredFeatures",
    resource: "resource",
    restart: "restart",
    result: "result",
    results: "results",
    rotate: "rotate",
    rx: "rx",
    ry: "ry",
    scale: "scale",
    security: "security",
    seed: "seed",
    shaperendering: "shapeRendering",
    "shape-rendering": "shapeRendering",
    slope: "slope",
    spacing: "spacing",
    specularconstant: "specularConstant",
    specularexponent: "specularExponent",
    speed: "speed",
    spreadmethod: "spreadMethod",
    startoffset: "startOffset",
    stddeviation: "stdDeviation",
    stemh: "stemh",
    stemv: "stemv",
    stitchtiles: "stitchTiles",
    stopcolor: "stopColor",
    "stop-color": "stopColor",
    stopopacity: "stopOpacity",
    "stop-opacity": "stopOpacity",
    strikethroughposition: "strikethroughPosition",
    "strikethrough-position": "strikethroughPosition",
    strikethroughthickness: "strikethroughThickness",
    "strikethrough-thickness": "strikethroughThickness",
    string: "string",
    stroke: "stroke",
    strokedasharray: "strokeDasharray",
    "stroke-dasharray": "strokeDasharray",
    strokedashoffset: "strokeDashoffset",
    "stroke-dashoffset": "strokeDashoffset",
    strokelinecap: "strokeLinecap",
    "stroke-linecap": "strokeLinecap",
    strokelinejoin: "strokeLinejoin",
    "stroke-linejoin": "strokeLinejoin",
    strokemiterlimit: "strokeMiterlimit",
    "stroke-miterlimit": "strokeMiterlimit",
    strokewidth: "strokeWidth",
    "stroke-width": "strokeWidth",
    strokeopacity: "strokeOpacity",
    "stroke-opacity": "strokeOpacity",
    suppresscontenteditablewarning: "suppressContentEditableWarning",
    suppresshydrationwarning: "suppressHydrationWarning",
    surfacescale: "surfaceScale",
    systemlanguage: "systemLanguage",
    tablevalues: "tableValues",
    targetx: "targetX",
    targety: "targetY",
    textanchor: "textAnchor",
    "text-anchor": "textAnchor",
    textdecoration: "textDecoration",
    "text-decoration": "textDecoration",
    textlength: "textLength",
    textrendering: "textRendering",
    "text-rendering": "textRendering",
    to: "to",
    transform: "transform",
    typeof: "typeof",
    u1: "u1",
    u2: "u2",
    underlineposition: "underlinePosition",
    "underline-position": "underlinePosition",
    underlinethickness: "underlineThickness",
    "underline-thickness": "underlineThickness",
    unicode: "unicode",
    unicodebidi: "unicodeBidi",
    "unicode-bidi": "unicodeBidi",
    unicoderange: "unicodeRange",
    "unicode-range": "unicodeRange",
    unitsperem: "unitsPerEm",
    "units-per-em": "unitsPerEm",
    unselectable: "unselectable",
    valphabetic: "vAlphabetic",
    "v-alphabetic": "vAlphabetic",
    values: "values",
    vectoreffect: "vectorEffect",
    "vector-effect": "vectorEffect",
    version: "version",
    vertadvy: "vertAdvY",
    "vert-adv-y": "vertAdvY",
    vertoriginx: "vertOriginX",
    "vert-origin-x": "vertOriginX",
    vertoriginy: "vertOriginY",
    "vert-origin-y": "vertOriginY",
    vhanging: "vHanging",
    "v-hanging": "vHanging",
    videographic: "vIdeographic",
    "v-ideographic": "vIdeographic",
    viewbox: "viewBox",
    viewtarget: "viewTarget",
    visibility: "visibility",
    vmathematical: "vMathematical",
    "v-mathematical": "vMathematical",
    vocab: "vocab",
    widths: "widths",
    wordspacing: "wordSpacing",
    "word-spacing": "wordSpacing",
    writingmode: "writingMode",
    "writing-mode": "writingMode",
    x1: "x1",
    x2: "x2",
    x: "x",
    xchannelselector: "xChannelSelector",
    xheight: "xHeight",
    "x-height": "xHeight",
    xlinkactuate: "xlinkActuate",
    "xlink:actuate": "xlinkActuate",
    xlinkarcrole: "xlinkArcrole",
    "xlink:arcrole": "xlinkArcrole",
    xlinkhref: "xlinkHref",
    "xlink:href": "xlinkHref",
    xlinkrole: "xlinkRole",
    "xlink:role": "xlinkRole",
    xlinkshow: "xlinkShow",
    "xlink:show": "xlinkShow",
    xlinktitle: "xlinkTitle",
    "xlink:title": "xlinkTitle",
    xlinktype: "xlinkType",
    "xlink:type": "xlinkType",
    xmlbase: "xmlBase",
    "xml:base": "xmlBase",
    xmllang: "xmlLang",
    "xml:lang": "xmlLang",
    xmlns: "xmlns",
    "xml:space": "xmlSpace",
    xmlnsxlink: "xmlnsXlink",
    "xmlns:xlink": "xmlnsXlink",
    xmlspace: "xmlSpace",
    y1: "y1",
    y2: "y2",
    y: "y",
    ychannelselector: "yChannelSelector",
    z: "z",
    zoomandpan: "zoomAndPan"
};
const ELEMENT_ATTRIBUTE_MAPPING = {
    input: {
        checked: "defaultChecked",
        value: "defaultValue",
        maxlength: "maxLength"
    },
    form: {
        enctype: "encType"
    }
};
const ELEMENT_TAG_NAME_MAPPING = {
    a: "a",
    altglyph: "altGlyph",
    altglyphdef: "altGlyphDef",
    altglyphitem: "altGlyphItem",
    animate: "animate",
    animatecolor: "animateColor",
    animatemotion: "animateMotion",
    animatetransform: "animateTransform",
    audio: "audio",
    canvas: "canvas",
    circle: "circle",
    clippath: "clipPath",
    "color-profile": "colorProfile",
    cursor: "cursor",
    defs: "defs",
    desc: "desc",
    discard: "discard",
    ellipse: "ellipse",
    feblend: "feBlend",
    fecolormatrix: "feColorMatrix",
    fecomponenttransfer: "feComponentTransfer",
    fecomposite: "feComposite",
    feconvolvematrix: "feConvolveMatrix",
    fediffuselighting: "feDiffuseLighting",
    fedisplacementmap: "feDisplacementMap",
    fedistantlight: "feDistantLight",
    fedropshadow: "feDropShadow",
    feflood: "feFlood",
    fefunca: "feFuncA",
    fefuncb: "feFuncB",
    fefuncg: "feFuncG",
    fefuncr: "feFuncR",
    fegaussianblur: "feGaussianBlur",
    feimage: "feImage",
    femerge: "feMerge",
    femergenode: "feMergeNode",
    femorphology: "feMorphology",
    feoffset: "feOffset",
    fepointlight: "fePointLight",
    fespecularlighting: "feSpecularLighting",
    fespotlight: "feSpotLight",
    fetile: "feTile",
    feturbulence: "feTurbulence",
    filter: "filter",
    font: "font",
    "font-face": "fontFace",
    "font-face-format": "fontFaceFormat",
    "font-face-name": "fontFaceName",
    "font-face-src": "fontFaceSrc",
    "font-face-uri": "fontFaceUri",
    foreignobject: "foreignObject",
    g: "g",
    glyph: "glyph",
    glyphref: "glyphRef",
    hatch: "hatch",
    hatchpath: "hatchpath",
    hkern: "hkern",
    iframe: "iframe",
    image: "image",
    line: "line",
    lineargradient: "linearGradient",
    marker: "marker",
    mask: "mask",
    mesh: "mesh",
    meshgradient: "meshgradient",
    meshpatch: "meshpatch",
    meshrow: "meshrow",
    metadata: "metadata",
    "missing-glyph": "missingGlyph",
    mpath: "mpath",
    path: "path",
    pattern: "pattern",
    polygon: "polygon",
    polyline: "polyline",
    radialgradient: "radialGradient",
    rect: "rect",
    script: "script",
    set: "set",
    solidcolor: "solidcolor",
    stop: "stop",
    style: "style",
    svg: "svg",
    switch: "switch",
    symbol: "symbol",
    text: "text",
    textpath: "textPath",
    title: "title",
    tref: "tref",
    tspan: "tspan",
    unknown: "unknown",
    use: "use",
    video: "video",
    view: "view",
    vkern: "vkern"
};
const convertAriaAttribute = (kebabKey)=>{
    const [aria, ...parts] = kebabKey.split("-");
    return `${aria}-${parts.join("").toLowerCase()}`;
};
const getKey = (key, node)=>{
    const lowerCaseKey = key.toLowerCase();
    const mappedElementAttribute = // @ts-ignore
    ELEMENT_ATTRIBUTE_MAPPING[node.name] && // @ts-ignore
    ELEMENT_ATTRIBUTE_MAPPING[node.name][lowerCaseKey];
    const mappedAttribute = ATTRIBUTE_MAPPING[lowerCaseKey];
    if (mappedElementAttribute || mappedAttribute) {
        return t__namespace.jsxIdentifier(mappedElementAttribute || mappedAttribute);
    }
    const kebabKey = kebabCase(key);
    if (kebabKey.startsWith("aria-")) {
        return t__namespace.jsxIdentifier(convertAriaAttribute(kebabKey));
    }
    if (kebabKey.startsWith("data-")) {
        return t__namespace.jsxIdentifier(kebabKey);
    }
    return t__namespace.jsxIdentifier(key);
};
const getValue = (key, value)=>{
    if (Array.isArray(value)) {
        return t__namespace.stringLiteral(replaceSpaces(value.join(" ")));
    }
    if (key === "style") {
        return t__namespace.jsxExpressionContainer(stringToObjectStyle(value));
    }
    if (typeof value === "number" || isNumeric(value)) {
        return t__namespace.jsxExpressionContainer(t__namespace.numericLiteral(Number(value)));
    }
    return t__namespace.stringLiteral(replaceSpaces(value));
};
const getAttributes = (node)=>{
    if (!node.properties) return [];
    const keys = Object.keys(node.properties);
    const attributes = [];
    let index = -1;
    while(++index < keys.length){
        const key = keys[index];
        const value = node.properties[key];
        const attribute = t__namespace.jsxAttribute(getKey(key, node), getValue(key, value));
        attributes.push(attribute);
    }
    return attributes;
};
const root = (h, node)=>// @ts-ignore
    t__namespace.program(all(h, node));
const comment = (_, node, parent)=>{
    if (parent.type === "root" || !node.value) return null;
    const expression = t__namespace.jsxEmptyExpression();
    t__namespace.addComment(expression, "inner", node.value);
    return t__namespace.jsxExpressionContainer(expression);
};
const SPACE_REGEX = /^\s+$/;
const text = (h, node, parent)=>{
    if (parent.type === "root") return null;
    if (typeof node.value === "string" && SPACE_REGEX.test(node.value)) return null;
    return t__namespace.jsxExpressionContainer(t__namespace.stringLiteral(entities.decodeXML(String(node.value))));
};
const element = (h, node, parent)=>{
    if (!node.tagName) return null;
    const children = all(h, node);
    const selfClosing = children.length === 0;
    const name = ELEMENT_TAG_NAME_MAPPING[node.tagName] || node.tagName;
    const openingElement = t__namespace.jsxOpeningElement(t__namespace.jsxIdentifier(name), getAttributes(node), selfClosing);
    const closingElement = !selfClosing ? t__namespace.jsxClosingElement(t__namespace.jsxIdentifier(name)) : null;
    const jsxElement = t__namespace.jsxElement(openingElement, closingElement, children);
    if (parent.type === "root") {
        return t__namespace.expressionStatement(jsxElement);
    }
    return jsxElement;
};
var handlers = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    comment: comment,
    element: element,
    root: root,
    text: text
});
const helpers = {
    handlers
};
const toBabelAST = (tree)=>root(helpers, tree);
module.exports = toBabelAST; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@svgr/babel-plugin-add-jsx-attribute/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var core = __turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)");
const positionMethod = {
    start: "unshiftContainer",
    end: "pushContainer"
};
const addJSXAttribute = (_, opts)=>{
    function getAttributeValue({ literal, value }) {
        if (typeof value === "boolean") {
            return core.types.jsxExpressionContainer(core.types.booleanLiteral(value));
        }
        if (typeof value === "number") {
            return core.types.jsxExpressionContainer(core.types.numericLiteral(value));
        }
        if (typeof value === "string" && literal) {
            return core.types.jsxExpressionContainer(core.template.ast(value).expression);
        }
        if (typeof value === "string") {
            return core.types.stringLiteral(value);
        }
        return null;
    }
    function getAttribute({ spread, name, value, literal }) {
        if (spread) {
            return core.types.jsxSpreadAttribute(core.types.identifier(name));
        }
        return core.types.jsxAttribute(core.types.jsxIdentifier(name), getAttributeValue({
            value,
            literal
        }));
    }
    return {
        visitor: {
            JSXOpeningElement (path) {
                if (!core.types.isJSXIdentifier(path.node.name)) return;
                if (!opts.elements.includes(path.node.name.name)) return;
                opts.attributes.forEach(({ name, value = null, spread = false, literal = false, position = "end" })=>{
                    const method = positionMethod[position];
                    const newAttribute = getAttribute({
                        spread,
                        name,
                        value,
                        literal
                    });
                    const attributes = path.get("attributes");
                    const isEqualAttribute = (attribute)=>{
                        if (spread) return attribute.isJSXSpreadAttribute() && attribute.get("argument").isIdentifier({
                            name
                        });
                        return attribute.isJSXAttribute() && attribute.get("name").isJSXIdentifier({
                            name
                        });
                    };
                    const replaced = attributes.some((attribute)=>{
                        if (!isEqualAttribute(attribute)) return false;
                        attribute.replaceWith(newAttribute);
                        return true;
                    });
                    if (!replaced) {
                        path[method]("attributes", newAttribute);
                    }
                });
            }
        }
    };
};
module.exports = addJSXAttribute; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@svgr/babel-plugin-remove-jsx-attribute/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var core = __turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)");
const removeJSXAttribute = (_, opts)=>({
        visitor: {
            JSXOpeningElement (path) {
                if (!core.types.isJSXIdentifier(path.node.name)) return;
                if (!opts.elements.includes(path.node.name.name)) return;
                path.get("attributes").forEach((attribute)=>{
                    if (core.types.isJSXAttribute(attribute.node) && core.types.isJSXIdentifier(attribute.node.name) && opts.attributes.includes(attribute.node.name.name)) {
                        attribute.remove();
                    }
                });
            }
        }
    });
module.exports = removeJSXAttribute; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@svgr/babel-plugin-remove-jsx-empty-expression/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var core = __turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)");
const removeJSXEmptyExpression = ()=>({
        visitor: {
            JSXExpressionContainer (path) {
                if (core.types.isJSXEmptyExpression(path.get("expression"))) {
                    path.remove();
                }
            }
        }
    });
module.exports = removeJSXEmptyExpression; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@svgr/babel-plugin-replace-jsx-attribute-value/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var core = __turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)");
const addJSXAttribute = (api, opts)=>{
    const getAttributeValue = (value, literal)=>{
        if (typeof value === "string" && literal) {
            return core.types.jsxExpressionContainer(core.template.ast(value).expression);
        }
        if (typeof value === "string") {
            return core.types.stringLiteral(value);
        }
        if (typeof value === "boolean") {
            return core.types.jsxExpressionContainer(core.types.booleanLiteral(value));
        }
        if (typeof value === "number") {
            return core.types.jsxExpressionContainer(core.types.numericLiteral(value));
        }
        return null;
    };
    return {
        visitor: {
            JSXAttribute (path) {
                const valuePath = path.get("value");
                if (!valuePath.isStringLiteral()) return;
                opts.values.forEach(({ value, newValue, literal })=>{
                    if (!valuePath.isStringLiteral({
                        value
                    })) return;
                    const attributeValue = getAttributeValue(newValue, literal);
                    if (attributeValue) {
                        valuePath.replaceWith(attributeValue);
                    }
                });
            }
        }
    };
};
module.exports = addJSXAttribute; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@svgr/babel-plugin-svg-dynamic-title/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var core = __turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)");
const elements = [
    "svg",
    "Svg"
];
const createTagElement = (tag, children = [], attributes = [])=>{
    const eleName = core.types.jsxIdentifier(tag);
    return core.types.jsxElement(core.types.jsxOpeningElement(eleName, attributes), core.types.jsxClosingElement(eleName), children);
};
const createTagIdAttribute = (tag)=>core.types.jsxAttribute(core.types.jsxIdentifier("id"), core.types.jsxExpressionContainer(core.types.identifier(`${tag}Id`)));
const addTagIdAttribute = (tag, attributes)=>{
    const existingId = attributes.find((attribute)=>core.types.isJSXAttribute(attribute) && attribute.name.name === "id");
    if (!existingId) {
        return [
            ...attributes,
            createTagIdAttribute(tag)
        ];
    }
    existingId.value = core.types.jsxExpressionContainer(core.types.isStringLiteral(existingId.value) ? core.types.logicalExpression("||", core.types.identifier(`${tag}Id`), existingId.value) : core.types.identifier(`${tag}Id`));
    return attributes;
};
const plugin = ()=>({
        visitor: {
            JSXElement (path, state) {
                const tag = state.opts.tag || "title";
                if (!elements.length) return;
                const openingElement = path.get("openingElement");
                const openingElementName = openingElement.get("name");
                if (!elements.some((element)=>openingElementName.isJSXIdentifier({
                        name: element
                    }))) {
                    return;
                }
                const getTagElement = (existingTitle)=>{
                    var _a;
                    const tagExpression = core.types.identifier(tag);
                    if (existingTitle) {
                        existingTitle.openingElement.attributes = addTagIdAttribute(tag, existingTitle.openingElement.attributes);
                    }
                    const conditionalTitle = core.types.conditionalExpression(tagExpression, createTagElement(tag, [
                        core.types.jsxExpressionContainer(tagExpression)
                    ], existingTitle ? existingTitle.openingElement.attributes : [
                        createTagIdAttribute(tag)
                    ]), core.types.nullLiteral());
                    if ((_a = existingTitle == null ? void 0 : existingTitle.children) == null ? void 0 : _a.length) {
                        return core.types.jsxExpressionContainer(core.types.conditionalExpression(core.types.binaryExpression("===", tagExpression, core.types.identifier("undefined")), existingTitle, conditionalTitle));
                    }
                    return core.types.jsxExpressionContainer(conditionalTitle);
                };
                let tagElement = null;
                const hasTitle = path.get("children").some((childPath)=>{
                    if (childPath.node === tagElement) return false;
                    if (!childPath.isJSXElement()) return false;
                    const name = childPath.get("openingElement").get("name");
                    if (!name.isJSXIdentifier()) return false;
                    if (name.node.name !== tag) return false;
                    tagElement = getTagElement(childPath.node);
                    childPath.replaceWith(tagElement);
                    return true;
                });
                tagElement = tagElement || getTagElement();
                if (!hasTitle) {
                    path.node.children.unshift(tagElement);
                    path.replaceWith(path.node);
                }
            }
        }
    });
module.exports = plugin; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@svgr/babel-plugin-svg-em-dimensions/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var core = __turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)");
const elements = [
    "svg",
    "Svg"
];
const getValue = (raw)=>{
    if (raw === void 0) return core.types.stringLiteral("1em");
    switch(typeof raw){
        case "number":
            return core.types.jsxExpressionContainer(core.types.numericLiteral(raw));
        case "string":
            return core.types.stringLiteral(raw);
        default:
            return core.types.stringLiteral("1em");
    }
};
const plugin = (_, opts)=>({
        visitor: {
            JSXOpeningElement (path) {
                if (!elements.some((element)=>path.get("name").isJSXIdentifier({
                        name: element
                    }))) return;
                const values = {
                    width: getValue(opts.width),
                    height: getValue(opts.height)
                };
                const requiredAttributes = Object.keys(values);
                path.get("attributes").forEach((attributePath)=>{
                    if (!attributePath.isJSXAttribute()) return;
                    const namePath = attributePath.get("name");
                    if (!namePath.isJSXIdentifier()) return;
                    const index = requiredAttributes.indexOf(namePath.node.name);
                    if (index === -1) return;
                    const valuePath = attributePath.get("value");
                    valuePath.replaceWith(values[namePath.node.name]);
                    requiredAttributes.splice(index, 1);
                });
                path.pushContainer("attributes", requiredAttributes.map((attr)=>core.types.jsxAttribute(core.types.jsxIdentifier(attr), values[attr])));
            }
        }
    });
module.exports = plugin; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@svgr/babel-plugin-transform-react-native-svg/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var core = __turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)");
const elementToComponent = {
    svg: "Svg",
    circle: "Circle",
    clipPath: "ClipPath",
    ellipse: "Ellipse",
    g: "G",
    linearGradient: "LinearGradient",
    radialGradient: "RadialGradient",
    line: "Line",
    path: "Path",
    pattern: "Pattern",
    polygon: "Polygon",
    polyline: "Polyline",
    rect: "Rect",
    symbol: "Symbol",
    text: "Text",
    textPath: "TextPath",
    tspan: "TSpan",
    use: "Use",
    defs: "Defs",
    stop: "Stop",
    mask: "Mask",
    image: "Image",
    foreignObject: "ForeignObject"
};
const plugin = ()=>{
    function replaceElement(path, state) {
        const namePath = path.get("openingElement").get("name");
        if (!namePath.isJSXIdentifier()) return;
        const { name } = namePath.node;
        const component = elementToComponent[name];
        if (component) {
            namePath.replaceWith(core.types.jsxIdentifier(component));
            if (path.has("closingElement")) {
                const closingNamePath = path.get("closingElement").get("name");
                closingNamePath.replaceWith(core.types.jsxIdentifier(component));
            }
            state.replacedComponents.add(component);
            return;
        }
        state.unsupportedComponents.add(name);
        path.remove();
    }
    const svgElementVisitor = {
        JSXElement (path, state) {
            if (!path.get("openingElement").get("name").isJSXIdentifier({
                name: "svg"
            })) {
                return;
            }
            replaceElement(path, state);
            path.traverse(jsxElementVisitor, state);
        }
    };
    const jsxElementVisitor = {
        JSXElement (path, state) {
            replaceElement(path, state);
        }
    };
    const importDeclarationVisitor = {
        ImportDeclaration (path, state) {
            if (path.get("source").isStringLiteral({
                value: "react-native-svg"
            }) && !path.get("importKind").hasNode()) {
                state.replacedComponents.forEach((component)=>{
                    if (path.get("specifiers").some((specifier)=>specifier.get("local").isIdentifier({
                            name: component
                        }))) {
                        return;
                    }
                    path.pushContainer("specifiers", core.types.importSpecifier(core.types.identifier(component), core.types.identifier(component)));
                });
            } else if (path.get("source").isStringLiteral({
                value: "expo"
            })) {
                path.pushContainer("specifiers", core.types.importSpecifier(core.types.identifier("Svg"), core.types.identifier("Svg")));
            } else {
                return;
            }
            if (state.unsupportedComponents.size && !path.has("trailingComments")) {
                const componentList = [
                    ...state.unsupportedComponents
                ].join(", ");
                path.addComment("trailing", ` SVGR has dropped some elements not supported by react-native-svg: ${componentList} `);
            }
        }
    };
    return {
        visitor: {
            Program (path, state) {
                state.replacedComponents = /* @__PURE__ */ new Set();
                state.unsupportedComponents = /* @__PURE__ */ new Set();
                path.traverse(svgElementVisitor, state);
                path.traverse(importDeclarationVisitor, state);
            }
        }
    };
};
module.exports = plugin; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@svgr/babel-plugin-transform-svg-component/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var core = __turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)");
const defaultTemplate = (variables, { tpl })=>{
    return tpl`
${variables.imports};

${variables.interfaces};

const ${variables.componentName} = (${variables.props}) => (
  ${variables.jsx}
);
 
${variables.exports};
`;
};
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __spreadValues = (a, b)=>{
    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    }
    return a;
};
var __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));
const tsOptionalPropertySignature = (...args)=>{
    return __spreadProps(__spreadValues({}, core.types.tsPropertySignature(...args)), {
        optional: true
    });
};
const getOrCreateImport = ({ imports }, sourceValue, importKind = void 0)=>{
    const existing = imports.find((imp2)=>imp2.source.value === sourceValue && imp2.importKind === importKind && !imp2.specifiers.some((specifier)=>specifier.type === "ImportNamespaceSpecifier"));
    if (existing) return existing;
    const imp = core.types.importDeclaration([], core.types.stringLiteral(sourceValue));
    if (importKind !== void 0) {
        imp.importKind = importKind;
    }
    imports.push(imp);
    return imp;
};
const tsTypeReferenceSVGProps = (ctx)=>{
    if (ctx.opts.native) {
        const identifier2 = core.types.identifier("SvgProps");
        getOrCreateImport(ctx, "react-native-svg", "type").specifiers.push(core.types.importSpecifier(identifier2, identifier2));
        return core.types.tsTypeReference(identifier2);
    }
    const identifier = core.types.identifier("SVGProps");
    getOrCreateImport(ctx, ctx.importSource, "type").specifiers.push(core.types.importSpecifier(identifier, identifier));
    return core.types.tsTypeReference(identifier, core.types.tsTypeParameterInstantiation([
        core.types.tsTypeReference(core.types.identifier("SVGSVGElement"))
    ]));
};
const tsTypeReferenceSVGRef = (ctx)=>{
    const identifier = core.types.identifier("Ref");
    getOrCreateImport(ctx, ctx.importSource).specifiers.push(core.types.importSpecifier(identifier, identifier));
    return core.types.tsTypeReference(identifier, core.types.tsTypeParameterInstantiation([
        core.types.tsTypeReference(core.types.identifier("SVGSVGElement"))
    ]));
};
const getJsxRuntimeImport = (cfg)=>{
    const specifiers = (()=>{
        if (cfg.namespace) return [
            core.types.importNamespaceSpecifier(core.types.identifier(cfg.namespace))
        ];
        if (cfg.defaultSpecifier) {
            const identifier = core.types.identifier(cfg.defaultSpecifier);
            return [
                core.types.importDefaultSpecifier(identifier)
            ];
        }
        if (cfg.specifiers) return cfg.specifiers.map((specifier)=>{
            const identifier = core.types.identifier(specifier);
            return core.types.importSpecifier(identifier, identifier);
        });
        throw new Error(`Specify "namespace", "defaultSpecifier", or "specifiers" in "jsxRuntimeImport" option`);
    })();
    return core.types.importDeclaration(specifiers, core.types.stringLiteral(cfg.source));
};
const defaultJsxRuntimeImport = {
    source: "react",
    namespace: "React"
};
const defaultImportSource = "react";
const getVariables = ({ opts, jsx })=>{
    var _a, _b, _c, _d;
    const interfaces = [];
    const props = [];
    const imports = [];
    const exports = [];
    const ctx = {
        importSource: (_a = opts.importSource) != null ? _a : defaultImportSource,
        exportIdentifier: core.types.identifier(opts.state.componentName),
        opts,
        interfaces,
        props,
        imports,
        exports
    };
    if (opts.jsxRuntime !== "automatic") {
        imports.push(getJsxRuntimeImport((_b = opts.jsxRuntimeImport) != null ? _b : defaultJsxRuntimeImport));
    }
    if (opts.native) {
        getOrCreateImport(ctx, "react-native-svg").specifiers.push(core.types.importDefaultSpecifier(core.types.identifier("Svg")));
    }
    if (opts.titleProp || opts.descProp) {
        const properties = [];
        const propertySignatures = [];
        const createProperty = (attr)=>{
            return core.types.objectProperty(core.types.identifier(attr), core.types.identifier(attr), false, true);
        };
        const createSignature = (attr)=>{
            return tsOptionalPropertySignature(core.types.identifier(attr), core.types.tsTypeAnnotation(core.types.tsStringKeyword()));
        };
        if (opts.titleProp) {
            properties.push(createProperty("title"), createProperty("titleId"));
            if (opts.typescript) {
                propertySignatures.push(createSignature("title"), createSignature("titleId"));
            }
        }
        if (opts.descProp) {
            properties.push(createProperty("desc"), createProperty("descId"));
            if (opts.typescript) {
                propertySignatures.push(createSignature("desc"), createSignature("descId"));
            }
        }
        const prop = core.types.objectPattern(properties);
        props.push(prop);
        if (opts.typescript) {
            interfaces.push(core.types.tsInterfaceDeclaration(core.types.identifier("SVGRProps"), null, null, core.types.tSInterfaceBody(propertySignatures)));
            prop.typeAnnotation = core.types.tsTypeAnnotation(core.types.tsTypeReference(core.types.identifier("SVGRProps")));
        }
    }
    if (opts.expandProps) {
        const identifier = core.types.identifier("props");
        if (core.types.isObjectPattern(props[0])) {
            props[0].properties.push(core.types.restElement(identifier));
            if (opts.typescript) {
                props[0].typeAnnotation = core.types.tsTypeAnnotation(core.types.tsIntersectionType([
                    tsTypeReferenceSVGProps(ctx),
                    props[0].typeAnnotation.typeAnnotation
                ]));
            }
        } else {
            props.push(identifier);
            if (opts.typescript) {
                identifier.typeAnnotation = core.types.tsTypeAnnotation(tsTypeReferenceSVGProps(ctx));
            }
        }
    }
    if (opts.ref) {
        if (props.length === 0) {
            props.push(core.types.identifier("_"));
        }
        const prop = core.types.identifier("ref");
        props.push(prop);
        if (opts.typescript) {
            prop.typeAnnotation = core.types.tsTypeAnnotation(tsTypeReferenceSVGRef(ctx));
        }
        const forwardRef = core.types.identifier("forwardRef");
        const ForwardRef = core.types.identifier("ForwardRef");
        getOrCreateImport(ctx, ctx.importSource).specifiers.push(core.types.importSpecifier(forwardRef, forwardRef));
        exports.push(core.types.variableDeclaration("const", [
            core.types.variableDeclarator(ForwardRef, core.types.callExpression(forwardRef, [
                ctx.exportIdentifier
            ]))
        ]));
        ctx.exportIdentifier = ForwardRef;
    }
    if (opts.memo) {
        const memo = core.types.identifier("memo");
        const Memo = core.types.identifier("Memo");
        getOrCreateImport(ctx, ctx.importSource).specifiers.push(core.types.importSpecifier(memo, memo));
        exports.push(core.types.variableDeclaration("const", [
            core.types.variableDeclarator(Memo, core.types.callExpression(memo, [
                ctx.exportIdentifier
            ]))
        ]));
        ctx.exportIdentifier = Memo;
    }
    if (((_c = opts.state.caller) == null ? void 0 : _c.previousExport) || opts.exportType === "named") {
        if (!opts.namedExport) {
            throw new Error(`"namedExport" not specified`);
        }
        exports.push(core.types.exportNamedDeclaration(null, [
            core.types.exportSpecifier(ctx.exportIdentifier, core.types.identifier(opts.namedExport))
        ]));
        if ((_d = opts.state.caller) == null ? void 0 : _d.previousExport) {
            const previousExportAst = core.template.ast(opts.state.caller.previousExport);
            exports.push(...Array.isArray(previousExportAst) ? previousExportAst : [
                previousExportAst
            ]);
        }
    } else {
        exports.push(core.types.exportDefaultDeclaration(ctx.exportIdentifier));
    }
    return {
        componentName: opts.state.componentName,
        props,
        interfaces,
        imports,
        exports,
        jsx
    };
};
const plugin = (_, opts)=>{
    const template = opts.template || defaultTemplate;
    const plugins = opts.typescript ? [
        "jsx",
        "typescript"
    ] : [
        "jsx"
    ];
    const tpl = core.template.smart({
        plugins,
        preserveComments: true
    }).ast;
    return {
        visitor: {
            Program (path) {
                const jsx = path.node.body[0].expression;
                const variables = getVariables({
                    opts,
                    jsx
                });
                const body = template(variables, {
                    options: opts,
                    tpl
                });
                path.node.body = Array.isArray(body) ? body : [
                    body
                ];
                path.replaceWith(path.node);
            }
        }
    };
};
module.exports = plugin; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@svgr/babel-preset/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var addJSXAttribute = __turbopack_require__("[project]/node_modules/@svgr/babel-plugin-add-jsx-attribute/dist/index.js [app-client] (ecmascript)");
var removeJSXAttribute = __turbopack_require__("[project]/node_modules/@svgr/babel-plugin-remove-jsx-attribute/dist/index.js [app-client] (ecmascript)");
var removeJSXEmptyExpression = __turbopack_require__("[project]/node_modules/@svgr/babel-plugin-remove-jsx-empty-expression/dist/index.js [app-client] (ecmascript)");
var replaceJSXAttributeValue = __turbopack_require__("[project]/node_modules/@svgr/babel-plugin-replace-jsx-attribute-value/dist/index.js [app-client] (ecmascript)");
var svgDynamicTitle = __turbopack_require__("[project]/node_modules/@svgr/babel-plugin-svg-dynamic-title/dist/index.js [app-client] (ecmascript)");
var svgEmDimensions = __turbopack_require__("[project]/node_modules/@svgr/babel-plugin-svg-em-dimensions/dist/index.js [app-client] (ecmascript)");
var transformReactNativeSVG = __turbopack_require__("[project]/node_modules/@svgr/babel-plugin-transform-react-native-svg/dist/index.js [app-client] (ecmascript)");
var transformSvgComponent = __turbopack_require__("[project]/node_modules/@svgr/babel-plugin-transform-svg-component/dist/index.js [app-client] (ecmascript)");
const getAttributeValue = (value)=>{
    const literal = typeof value === "string" && value.startsWith("{") && value.endsWith("}");
    return {
        value: literal ? value.slice(1, -1) : value,
        literal
    };
};
const propsToAttributes = (props)=>{
    return Object.keys(props).map((name)=>{
        const { literal, value } = getAttributeValue(props[name]);
        return {
            name,
            literal,
            value
        };
    });
};
function replaceMapToValues(replaceMap) {
    return Object.keys(replaceMap).map((value)=>{
        const { literal, value: newValue } = getAttributeValue(replaceMap[value]);
        return {
            value,
            newValue,
            literal
        };
    });
}
const plugin = (_, opts)=>{
    let toRemoveAttributes = [
        "version"
    ];
    let toAddAttributes = [];
    if (opts.svgProps) {
        toAddAttributes = [
            ...toAddAttributes,
            ...propsToAttributes(opts.svgProps)
        ];
    }
    if (opts.ref) {
        toAddAttributes = [
            ...toAddAttributes,
            {
                name: "ref",
                value: "ref",
                literal: true
            }
        ];
    }
    if (opts.titleProp) {
        toAddAttributes = [
            ...toAddAttributes,
            {
                name: "aria-labelledby",
                value: "titleId",
                literal: true
            }
        ];
    }
    if (opts.descProp) {
        toAddAttributes = [
            ...toAddAttributes,
            {
                name: "aria-describedby",
                value: "descId",
                literal: true
            }
        ];
    }
    if (opts.expandProps) {
        toAddAttributes = [
            ...toAddAttributes,
            {
                name: "props",
                spread: true,
                position: opts.expandProps === "start" || opts.expandProps === "end" ? opts.expandProps : void 0
            }
        ];
    }
    if (!opts.dimensions) {
        toRemoveAttributes = [
            ...toRemoveAttributes,
            "width",
            "height"
        ];
    }
    const plugins = [
        [
            transformSvgComponent,
            opts
        ],
        ...opts.icon !== false && opts.dimensions ? [
            [
                svgEmDimensions,
                opts.icon !== true ? {
                    width: opts.icon,
                    height: opts.icon
                } : opts.native ? {
                    width: 24,
                    height: 24
                } : {}
            ]
        ] : [],
        [
            removeJSXAttribute,
            {
                elements: [
                    "svg",
                    "Svg"
                ],
                attributes: toRemoveAttributes
            }
        ],
        [
            addJSXAttribute,
            {
                elements: [
                    "svg",
                    "Svg"
                ],
                attributes: toAddAttributes
            }
        ],
        removeJSXEmptyExpression
    ];
    if (opts.replaceAttrValues) {
        plugins.push([
            replaceJSXAttributeValue,
            {
                values: replaceMapToValues(opts.replaceAttrValues)
            }
        ]);
    }
    if (opts.titleProp) {
        plugins.push(svgDynamicTitle);
    }
    if (opts.descProp) {
        plugins.push([
            svgDynamicTitle,
            {
                tag: "desc"
            },
            "desc"
        ]);
    }
    if (opts.native) {
        plugins.push(transformReactNativeSVG);
    }
    return {
        plugins
    };
};
module.exports = plugin; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@svgr/plugin-jsx/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var svgParser = __turbopack_require__("[project]/node_modules/svg-parser/dist/svg-parser.esm.js [app-client] (ecmascript)");
var hastToBabelAst = __turbopack_require__("[project]/node_modules/@svgr/hast-util-to-babel-ast/dist/index.js [app-client] (ecmascript)");
var core = __turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)");
var svgrBabelPreset = __turbopack_require__("[project]/node_modules/@svgr/babel-preset/dist/index.js [app-client] (ecmascript)");
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __spreadValues = (a, b)=>{
    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    }
    return a;
};
var __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));
const getJsxRuntimeOptions = (config)=>{
    if (config.jsxRuntimeImport) {
        return {
            importSource: config.jsxRuntimeImport.source,
            jsxRuntimeImport: config.jsxRuntimeImport
        };
    }
    switch(config.jsxRuntime){
        case null:
        case void 0:
        case "classic":
            return {
                jsxRuntime: "classic",
                importSource: "react",
                jsxRuntimeImport: {
                    namespace: "React",
                    source: "react"
                }
            };
        case "classic-preact":
            return {
                jsxRuntime: "classic",
                importSource: "preact/compat",
                jsxRuntimeImport: {
                    specifiers: [
                        "h"
                    ],
                    source: "preact"
                }
            };
        case "automatic":
            return {
                jsxRuntime: "automatic"
            };
        default:
            throw new Error(`Unsupported "jsxRuntime" "${config.jsxRuntime}"`);
    }
};
const jsxPlugin = (code, config, state)=>{
    const filePath = state.filePath || "unknown";
    const hastTree = svgParser.parse(code);
    const babelTree = hastToBabelAst(hastTree);
    const svgPresetOptions = __spreadProps(__spreadValues({
        ref: config.ref,
        titleProp: config.titleProp,
        descProp: config.descProp,
        expandProps: config.expandProps,
        dimensions: config.dimensions,
        icon: config.icon,
        native: config.native,
        svgProps: config.svgProps,
        replaceAttrValues: config.replaceAttrValues,
        typescript: config.typescript,
        template: config.template,
        memo: config.memo,
        exportType: config.exportType,
        namedExport: config.namedExport
    }, getJsxRuntimeOptions(config)), {
        state
    });
    const result = core.transformFromAstSync(babelTree, code, __spreadValues({
        caller: {
            name: "svgr"
        },
        presets: [
            core.createConfigItem([
                svgrBabelPreset,
                svgPresetOptions
            ], {
                type: "preset"
            })
        ],
        filename: filePath,
        babelrc: false,
        configFile: false,
        code: true,
        ast: false,
        // @ts-ignore
        inputSourceMap: false
    }, config.jsx && config.jsx.babelConfig));
    if (!(result == null ? void 0 : result.code)) {
        throw new Error(`Unable to generate SVG file`);
    }
    return result.code;
};
module.exports = jsxPlugin; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@svgr/webpack/dist/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
var util = __turbopack_require__("[project]/node_modules/next/dist/compiled/util/util.js [app-client] (ecmascript)");
var core = __turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)");
var core$1 = __turbopack_require__("[project]/node_modules/@svgr/core/dist/index.js [app-client] (ecmascript)");
var path = __turbopack_require__("[project]/node_modules/next/dist/compiled/path-browserify/index.js [app-client] (ecmascript)");
var svgo = __turbopack_require__("[project]/node_modules/@svgr/plugin-svgo/dist/index.js [app-client] (ecmascript)");
var jsx = __turbopack_require__("[project]/node_modules/@svgr/plugin-jsx/dist/index.js [app-client] (ecmascript)");
var presetReact = __turbopack_require__("[project]/node_modules/@babel/preset-react/lib/index.js [app-client] (ecmascript)");
var presetEnv = __turbopack_require__("[project]/node_modules/@babel/preset-env/lib/index.js [app-client] (ecmascript)");
var presetTS = __turbopack_require__("[project]/node_modules/@babel/preset-typescript/lib/index.js [app-client] (ecmascript)");
var pluginTransformReactConstantElements = __turbopack_require__("[project]/node_modules/@babel/plugin-transform-react-constant-elements/lib/index.js [app-client] (ecmascript)");
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __spreadValues = (a, b)=>{
    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    }
    return a;
};
var __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude)=>{
    var target = {};
    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];
    }
    return target;
};
const babelOptions = {
    babelrc: false,
    configFile: false,
    presets: [
        core.createConfigItem(presetReact, {
            type: "preset"
        }),
        core.createConfigItem([
            presetEnv,
            {
                modules: false
            }
        ], {
            type: "preset"
        })
    ],
    plugins: [
        core.createConfigItem(pluginTransformReactConstantElements)
    ]
};
const typeScriptBabelOptions = __spreadProps(__spreadValues({}, babelOptions), {
    presets: [
        ...babelOptions.presets,
        core.createConfigItem([
            presetTS,
            {
                allowNamespaces: true,
                allExtensions: true,
                isTSX: true
            }
        ], {
            type: "preset"
        })
    ]
});
const tranformSvg = util.callbackify(async (contents, options, state)=>{
    const _a = options, { babel = true } = _a, config = __objRest(_a, [
        "babel"
    ]);
    const jsCode = await core$1.transform(contents, config, state);
    if (!babel) return jsCode;
    const result = await core.transformAsync(jsCode, options.typescript ? typeScriptBabelOptions : babelOptions);
    if (!(result == null ? void 0 : result.code)) {
        throw new Error(`Error while transforming using Babel`);
    }
    return result.code;
});
function svgrLoader(contents) {
    this.cacheable && this.cacheable();
    const callback = this.async();
    const options = this.getOptions();
    const previousExport = (()=>{
        if (contents.startsWith("export ")) return contents;
        const exportMatches = contents.match(/^module.exports\s*=\s*(.*)/);
        return exportMatches ? `export default ${exportMatches[1]}` : null;
    })();
    const state = {
        caller: {
            name: "@svgr/webpack",
            previousExport,
            defaultPlugins: [
                svgo,
                jsx
            ]
        },
        filePath: path.normalize(this.resourcePath)
    };
    if (!previousExport) {
        tranformSvg(contents, options, state, callback);
    } else {
        this.fs.readFile(this.resourcePath, (err, result)=>{
            if (err) {
                callback(err);
                return;
            }
            tranformSvg(String(result), options, state, (err2, content)=>{
                if (err2) {
                    callback(err2);
                    return;
                }
                callback(null, content);
            });
        });
    }
}
module.exports = svgrLoader; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@trysound/sax/lib/sax.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
;
(function(sax) {
    sax.parser = function(strict, opt) {
        return new SAXParser(strict, opt);
    };
    sax.SAXParser = SAXParser;
    // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
    // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
    // since that's the earliest that a buffer overrun could occur.  This way, checks are
    // as rare as required, but as often as necessary to ensure never crossing this bound.
    // Furthermore, buffers are only tested at most once per write(), so passing a very
    // large string into write() might have undesirable effects, but this is manageable by
    // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
    // edge case, result in creating at most one complete copy of the string passed in.
    // Set to Infinity to have unlimited buffers.
    sax.MAX_BUFFER_LENGTH = 64 * 1024;
    var buffers = [
        'comment',
        'sgmlDecl',
        'textNode',
        'tagName',
        'doctype',
        'procInstName',
        'procInstBody',
        'entity',
        'attribName',
        'attribValue',
        'cdata',
        'script'
    ];
    sax.EVENTS = [
        'text',
        'processinginstruction',
        'sgmldeclaration',
        'doctype',
        'comment',
        'opentagstart',
        'attribute',
        'opentag',
        'closetag',
        'opencdata',
        'cdata',
        'closecdata',
        'error',
        'end',
        'ready',
        'script',
        'opennamespace',
        'closenamespace'
    ];
    function SAXParser(strict, opt) {
        if (!(this instanceof SAXParser)) {
            return new SAXParser(strict, opt);
        }
        var parser = this;
        clearBuffers(parser);
        parser.q = parser.c = '';
        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
        parser.opt = opt || {};
        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
        parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase';
        parser.tags = [];
        parser.closed = parser.closedRoot = parser.sawRoot = false;
        parser.tag = parser.error = null;
        parser.strict = !!strict;
        parser.noscript = !!(strict || parser.opt.noscript);
        parser.state = S.BEGIN;
        parser.strictEntities = parser.opt.strictEntities;
        parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
        parser.attribList = [];
        // namespaces form a prototype chain.
        // it always points at the current tag,
        // which protos to its parent tag.
        if (parser.opt.xmlns) {
            parser.ns = Object.create(rootNS);
        }
        // mostly just for error reporting
        parser.trackPosition = parser.opt.position !== false;
        if (parser.trackPosition) {
            parser.position = parser.line = parser.column = 0;
        }
        emit(parser, 'onready');
    }
    if (!Object.create) {
        Object.create = function(o) {
            function F() {}
            F.prototype = o;
            var newf = new F();
            return newf;
        };
    }
    if (!Object.keys) {
        Object.keys = function(o) {
            var a = [];
            for(var i in o)if (o.hasOwnProperty(i)) a.push(i);
            return a;
        };
    }
    function checkBufferLength(parser) {
        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
        var maxActual = 0;
        for(var i = 0, l = buffers.length; i < l; i++){
            var len = parser[buffers[i]].length;
            if (len > maxAllowed) {
                // Text/cdata nodes can get big, and since they're buffered,
                // we can get here under normal conditions.
                // Avoid issues by emitting the text node now,
                // so at least it won't get any bigger.
                switch(buffers[i]){
                    case 'textNode':
                        closeText(parser);
                        break;
                    case 'cdata':
                        emitNode(parser, 'oncdata', parser.cdata);
                        parser.cdata = '';
                        break;
                    case 'script':
                        emitNode(parser, 'onscript', parser.script);
                        parser.script = '';
                        break;
                    default:
                        error(parser, 'Max buffer length exceeded: ' + buffers[i]);
                }
            }
            maxActual = Math.max(maxActual, len);
        }
        // schedule the next check for the earliest possible buffer overrun.
        var m = sax.MAX_BUFFER_LENGTH - maxActual;
        parser.bufferCheckPosition = m + parser.position;
    }
    function clearBuffers(parser) {
        for(var i = 0, l = buffers.length; i < l; i++){
            parser[buffers[i]] = '';
        }
    }
    function flushBuffers(parser) {
        closeText(parser);
        if (parser.cdata !== '') {
            emitNode(parser, 'oncdata', parser.cdata);
            parser.cdata = '';
        }
        if (parser.script !== '') {
            emitNode(parser, 'onscript', parser.script);
            parser.script = '';
        }
    }
    SAXParser.prototype = {
        end: function() {
            end(this);
        },
        write: write,
        resume: function() {
            this.error = null;
            return this;
        },
        close: function() {
            return this.write(null);
        },
        flush: function() {
            flushBuffers(this);
        }
    };
    // this really needs to be replaced with character classes.
    // XML allows all manner of ridiculous numbers and digits.
    var CDATA = '[CDATA[';
    var DOCTYPE = 'DOCTYPE';
    var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';
    var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';
    var rootNS = {
        xml: XML_NAMESPACE,
        xmlns: XMLNS_NAMESPACE
    };
    // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
    // This implementation works on strings, a single character at a time
    // as such, it cannot ever support astral-plane characters (10000-EFFFF)
    // without a significant breaking change to either this  parser, or the
    // JavaScript language.  Implementation of an emoji-capable xml parser
    // is left as an exercise for the reader.
    var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
    var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
    var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
    var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
    function isWhitespace(c) {
        return c === ' ' || c === '\n' || c === '\r' || c === '\t';
    }
    function isQuote(c) {
        return c === '"' || c === '\'';
    }
    function isAttribEnd(c) {
        return c === '>' || isWhitespace(c);
    }
    function isMatch(regex, c) {
        return regex.test(c);
    }
    function notMatch(regex, c) {
        return !isMatch(regex, c);
    }
    var S = 0;
    sax.STATE = {
        BEGIN: S++,
        BEGIN_WHITESPACE: S++,
        TEXT: S++,
        TEXT_ENTITY: S++,
        OPEN_WAKA: S++,
        SGML_DECL: S++,
        SGML_DECL_QUOTED: S++,
        DOCTYPE: S++,
        DOCTYPE_QUOTED: S++,
        DOCTYPE_DTD: S++,
        DOCTYPE_DTD_QUOTED: S++,
        COMMENT_STARTING: S++,
        COMMENT: S++,
        COMMENT_ENDING: S++,
        COMMENT_ENDED: S++,
        CDATA: S++,
        CDATA_ENDING: S++,
        CDATA_ENDING_2: S++,
        PROC_INST: S++,
        PROC_INST_BODY: S++,
        PROC_INST_ENDING: S++,
        OPEN_TAG: S++,
        OPEN_TAG_SLASH: S++,
        ATTRIB: S++,
        ATTRIB_NAME: S++,
        ATTRIB_NAME_SAW_WHITE: S++,
        ATTRIB_VALUE: S++,
        ATTRIB_VALUE_QUOTED: S++,
        ATTRIB_VALUE_CLOSED: S++,
        ATTRIB_VALUE_UNQUOTED: S++,
        ATTRIB_VALUE_ENTITY_Q: S++,
        ATTRIB_VALUE_ENTITY_U: S++,
        CLOSE_TAG: S++,
        CLOSE_TAG_SAW_WHITE: S++,
        SCRIPT: S++,
        SCRIPT_ENDING: S++ // <script> ... <
    };
    sax.XML_ENTITIES = {
        'amp': '&',
        'gt': '>',
        'lt': '<',
        'quot': '"',
        'apos': "'"
    };
    sax.ENTITIES = {
        'amp': '&',
        'gt': '>',
        'lt': '<',
        'quot': '"',
        'apos': "'",
        'AElig': 198,
        'Aacute': 193,
        'Acirc': 194,
        'Agrave': 192,
        'Aring': 197,
        'Atilde': 195,
        'Auml': 196,
        'Ccedil': 199,
        'ETH': 208,
        'Eacute': 201,
        'Ecirc': 202,
        'Egrave': 200,
        'Euml': 203,
        'Iacute': 205,
        'Icirc': 206,
        'Igrave': 204,
        'Iuml': 207,
        'Ntilde': 209,
        'Oacute': 211,
        'Ocirc': 212,
        'Ograve': 210,
        'Oslash': 216,
        'Otilde': 213,
        'Ouml': 214,
        'THORN': 222,
        'Uacute': 218,
        'Ucirc': 219,
        'Ugrave': 217,
        'Uuml': 220,
        'Yacute': 221,
        'aacute': 225,
        'acirc': 226,
        'aelig': 230,
        'agrave': 224,
        'aring': 229,
        'atilde': 227,
        'auml': 228,
        'ccedil': 231,
        'eacute': 233,
        'ecirc': 234,
        'egrave': 232,
        'eth': 240,
        'euml': 235,
        'iacute': 237,
        'icirc': 238,
        'igrave': 236,
        'iuml': 239,
        'ntilde': 241,
        'oacute': 243,
        'ocirc': 244,
        'ograve': 242,
        'oslash': 248,
        'otilde': 245,
        'ouml': 246,
        'szlig': 223,
        'thorn': 254,
        'uacute': 250,
        'ucirc': 251,
        'ugrave': 249,
        'uuml': 252,
        'yacute': 253,
        'yuml': 255,
        'copy': 169,
        'reg': 174,
        'nbsp': 160,
        'iexcl': 161,
        'cent': 162,
        'pound': 163,
        'curren': 164,
        'yen': 165,
        'brvbar': 166,
        'sect': 167,
        'uml': 168,
        'ordf': 170,
        'laquo': 171,
        'not': 172,
        'shy': 173,
        'macr': 175,
        'deg': 176,
        'plusmn': 177,
        'sup1': 185,
        'sup2': 178,
        'sup3': 179,
        'acute': 180,
        'micro': 181,
        'para': 182,
        'middot': 183,
        'cedil': 184,
        'ordm': 186,
        'raquo': 187,
        'frac14': 188,
        'frac12': 189,
        'frac34': 190,
        'iquest': 191,
        'times': 215,
        'divide': 247,
        'OElig': 338,
        'oelig': 339,
        'Scaron': 352,
        'scaron': 353,
        'Yuml': 376,
        'fnof': 402,
        'circ': 710,
        'tilde': 732,
        'Alpha': 913,
        'Beta': 914,
        'Gamma': 915,
        'Delta': 916,
        'Epsilon': 917,
        'Zeta': 918,
        'Eta': 919,
        'Theta': 920,
        'Iota': 921,
        'Kappa': 922,
        'Lambda': 923,
        'Mu': 924,
        'Nu': 925,
        'Xi': 926,
        'Omicron': 927,
        'Pi': 928,
        'Rho': 929,
        'Sigma': 931,
        'Tau': 932,
        'Upsilon': 933,
        'Phi': 934,
        'Chi': 935,
        'Psi': 936,
        'Omega': 937,
        'alpha': 945,
        'beta': 946,
        'gamma': 947,
        'delta': 948,
        'epsilon': 949,
        'zeta': 950,
        'eta': 951,
        'theta': 952,
        'iota': 953,
        'kappa': 954,
        'lambda': 955,
        'mu': 956,
        'nu': 957,
        'xi': 958,
        'omicron': 959,
        'pi': 960,
        'rho': 961,
        'sigmaf': 962,
        'sigma': 963,
        'tau': 964,
        'upsilon': 965,
        'phi': 966,
        'chi': 967,
        'psi': 968,
        'omega': 969,
        'thetasym': 977,
        'upsih': 978,
        'piv': 982,
        'ensp': 8194,
        'emsp': 8195,
        'thinsp': 8201,
        'zwnj': 8204,
        'zwj': 8205,
        'lrm': 8206,
        'rlm': 8207,
        'ndash': 8211,
        'mdash': 8212,
        'lsquo': 8216,
        'rsquo': 8217,
        'sbquo': 8218,
        'ldquo': 8220,
        'rdquo': 8221,
        'bdquo': 8222,
        'dagger': 8224,
        'Dagger': 8225,
        'bull': 8226,
        'hellip': 8230,
        'permil': 8240,
        'prime': 8242,
        'Prime': 8243,
        'lsaquo': 8249,
        'rsaquo': 8250,
        'oline': 8254,
        'frasl': 8260,
        'euro': 8364,
        'image': 8465,
        'weierp': 8472,
        'real': 8476,
        'trade': 8482,
        'alefsym': 8501,
        'larr': 8592,
        'uarr': 8593,
        'rarr': 8594,
        'darr': 8595,
        'harr': 8596,
        'crarr': 8629,
        'lArr': 8656,
        'uArr': 8657,
        'rArr': 8658,
        'dArr': 8659,
        'hArr': 8660,
        'forall': 8704,
        'part': 8706,
        'exist': 8707,
        'empty': 8709,
        'nabla': 8711,
        'isin': 8712,
        'notin': 8713,
        'ni': 8715,
        'prod': 8719,
        'sum': 8721,
        'minus': 8722,
        'lowast': 8727,
        'radic': 8730,
        'prop': 8733,
        'infin': 8734,
        'ang': 8736,
        'and': 8743,
        'or': 8744,
        'cap': 8745,
        'cup': 8746,
        'int': 8747,
        'there4': 8756,
        'sim': 8764,
        'cong': 8773,
        'asymp': 8776,
        'ne': 8800,
        'equiv': 8801,
        'le': 8804,
        'ge': 8805,
        'sub': 8834,
        'sup': 8835,
        'nsub': 8836,
        'sube': 8838,
        'supe': 8839,
        'oplus': 8853,
        'otimes': 8855,
        'perp': 8869,
        'sdot': 8901,
        'lceil': 8968,
        'rceil': 8969,
        'lfloor': 8970,
        'rfloor': 8971,
        'lang': 9001,
        'rang': 9002,
        'loz': 9674,
        'spades': 9824,
        'clubs': 9827,
        'hearts': 9829,
        'diams': 9830
    };
    Object.keys(sax.ENTITIES).forEach(function(key) {
        var e = sax.ENTITIES[key];
        var s = typeof e === 'number' ? String.fromCharCode(e) : e;
        sax.ENTITIES[key] = s;
    });
    for(var s in sax.STATE){
        sax.STATE[sax.STATE[s]] = s;
    }
    // shorthand
    S = sax.STATE;
    function emit(parser, event, data) {
        parser[event] && parser[event](data);
    }
    function emitNode(parser, nodeType, data) {
        if (parser.textNode) closeText(parser);
        emit(parser, nodeType, data);
    }
    function closeText(parser) {
        parser.textNode = textopts(parser.opt, parser.textNode);
        if (parser.textNode) emit(parser, 'ontext', parser.textNode);
        parser.textNode = '';
    }
    function textopts(opt, text) {
        if (opt.trim) text = text.trim();
        if (opt.normalize) text = text.replace(/\s+/g, ' ');
        return text;
    }
    function error(parser, reason) {
        closeText(parser);
        const message = reason + '\nLine: ' + parser.line + '\nColumn: ' + parser.column + '\nChar: ' + parser.c;
        const error = new Error(message);
        error.reason = reason;
        error.line = parser.line;
        error.column = parser.column;
        parser.error = error;
        emit(parser, 'onerror', error);
        return parser;
    }
    function end(parser) {
        if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag');
        if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {
            error(parser, 'Unexpected end');
        }
        closeText(parser);
        parser.c = '';
        parser.closed = true;
        emit(parser, 'onend');
        SAXParser.call(parser, parser.strict, parser.opt);
        return parser;
    }
    function strictFail(parser, message) {
        if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
            throw new Error('bad call to strictFail');
        }
        if (parser.strict) {
            error(parser, message);
        }
    }
    function newTag(parser) {
        if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
        var parent = parser.tags[parser.tags.length - 1] || parser;
        var tag = parser.tag = {
            name: parser.tagName,
            attributes: {}
        };
        // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
        if (parser.opt.xmlns) {
            tag.ns = parent.ns;
        }
        parser.attribList.length = 0;
        emitNode(parser, 'onopentagstart', tag);
    }
    function qname(name, attribute) {
        var i = name.indexOf(':');
        var qualName = i < 0 ? [
            '',
            name
        ] : name.split(':');
        var prefix = qualName[0];
        var local = qualName[1];
        // <x "xmlns"="http://foo">
        if (attribute && name === 'xmlns') {
            prefix = 'xmlns';
            local = '';
        }
        return {
            prefix: prefix,
            local: local
        };
    }
    function attrib(parser) {
        if (!parser.strict) {
            parser.attribName = parser.attribName[parser.looseCase]();
        }
        if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
            parser.attribName = parser.attribValue = '';
            return;
        }
        if (parser.opt.xmlns) {
            var qn = qname(parser.attribName, true);
            var prefix = qn.prefix;
            var local = qn.local;
            if (prefix === 'xmlns') {
                // namespace binding attribute. push the binding into scope
                if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
                    strictFail(parser, 'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' + 'Actual: ' + parser.attribValue);
                } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
                    strictFail(parser, 'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' + 'Actual: ' + parser.attribValue);
                } else {
                    var tag = parser.tag;
                    var parent = parser.tags[parser.tags.length - 1] || parser;
                    if (tag.ns === parent.ns) {
                        tag.ns = Object.create(parent.ns);
                    }
                    tag.ns[local] = parser.attribValue;
                }
            }
            // defer onattribute events until all attributes have been seen
            // so any new bindings can take effect. preserve attribute order
            // so deferred events can be emitted in document order
            parser.attribList.push([
                parser.attribName,
                parser.attribValue
            ]);
        } else {
            // in non-xmlns mode, we can emit the event right away
            parser.tag.attributes[parser.attribName] = parser.attribValue;
            emitNode(parser, 'onattribute', {
                name: parser.attribName,
                value: parser.attribValue
            });
        }
        parser.attribName = parser.attribValue = '';
    }
    function openTag(parser, selfClosing) {
        if (parser.opt.xmlns) {
            // emit namespace binding events
            var tag = parser.tag;
            // add namespace info to tag
            var qn = qname(parser.tagName);
            tag.prefix = qn.prefix;
            tag.local = qn.local;
            tag.uri = tag.ns[qn.prefix] || '';
            if (tag.prefix && !tag.uri) {
                strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(parser.tagName));
                tag.uri = qn.prefix;
            }
            var parent = parser.tags[parser.tags.length - 1] || parser;
            if (tag.ns && parent.ns !== tag.ns) {
                Object.keys(tag.ns).forEach(function(p) {
                    emitNode(parser, 'onopennamespace', {
                        prefix: p,
                        uri: tag.ns[p]
                    });
                });
            }
            // handle deferred onattribute events
            // Note: do not apply default ns to attributes:
            //   http://www.w3.org/TR/REC-xml-names/#defaulting
            for(var i = 0, l = parser.attribList.length; i < l; i++){
                var nv = parser.attribList[i];
                var name = nv[0];
                var value = nv[1];
                var qualName = qname(name, true);
                var prefix = qualName.prefix;
                var local = qualName.local;
                var uri = prefix === '' ? '' : tag.ns[prefix] || '';
                var a = {
                    name: name,
                    value: value,
                    prefix: prefix,
                    local: local,
                    uri: uri
                };
                // if there's any attributes with an undefined namespace,
                // then fail on them now.
                if (prefix && prefix !== 'xmlns' && !uri) {
                    strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(prefix));
                    a.uri = prefix;
                }
                parser.tag.attributes[name] = a;
                emitNode(parser, 'onattribute', a);
            }
            parser.attribList.length = 0;
        }
        parser.tag.isSelfClosing = !!selfClosing;
        // process the tag
        parser.sawRoot = true;
        parser.tags.push(parser.tag);
        emitNode(parser, 'onopentag', parser.tag);
        if (!selfClosing) {
            // special case for <script> in non-strict mode.
            if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
                parser.state = S.SCRIPT;
            } else {
                parser.state = S.TEXT;
            }
            parser.tag = null;
            parser.tagName = '';
        }
        parser.attribName = parser.attribValue = '';
        parser.attribList.length = 0;
    }
    function closeTag(parser) {
        if (!parser.tagName) {
            strictFail(parser, 'Weird empty close tag.');
            parser.textNode += '</>';
            parser.state = S.TEXT;
            return;
        }
        if (parser.script) {
            if (parser.tagName !== 'script') {
                parser.script += '</' + parser.tagName + '>';
                parser.tagName = '';
                parser.state = S.SCRIPT;
                return;
            }
            emitNode(parser, 'onscript', parser.script);
            parser.script = '';
        }
        // first make sure that the closing tag actually exists.
        // <a><b></c></b></a> will close everything, otherwise.
        var t = parser.tags.length;
        var tagName = parser.tagName;
        if (!parser.strict) {
            tagName = tagName[parser.looseCase]();
        }
        var closeTo = tagName;
        while(t--){
            var close = parser.tags[t];
            if (close.name !== closeTo) {
                // fail the first time in strict mode
                strictFail(parser, 'Unexpected close tag');
            } else {
                break;
            }
        }
        // didn't find it.  we already failed for strict, so just abort.
        if (t < 0) {
            strictFail(parser, 'Unmatched closing tag: ' + parser.tagName);
            parser.textNode += '</' + parser.tagName + '>';
            parser.state = S.TEXT;
            return;
        }
        parser.tagName = tagName;
        var s = parser.tags.length;
        while(s-- > t){
            var tag = parser.tag = parser.tags.pop();
            parser.tagName = parser.tag.name;
            emitNode(parser, 'onclosetag', parser.tagName);
            var x = {};
            for(var i in tag.ns){
                x[i] = tag.ns[i];
            }
            var parent = parser.tags[parser.tags.length - 1] || parser;
            if (parser.opt.xmlns && tag.ns !== parent.ns) {
                // remove namespace bindings introduced by tag
                Object.keys(tag.ns).forEach(function(p) {
                    var n = tag.ns[p];
                    emitNode(parser, 'onclosenamespace', {
                        prefix: p,
                        uri: n
                    });
                });
            }
        }
        if (t === 0) parser.closedRoot = true;
        parser.tagName = parser.attribValue = parser.attribName = '';
        parser.attribList.length = 0;
        parser.state = S.TEXT;
    }
    function parseEntity(parser) {
        var entity = parser.entity;
        var entityLC = entity.toLowerCase();
        var num;
        var numStr = '';
        if (parser.ENTITIES[entity]) {
            return parser.ENTITIES[entity];
        }
        if (parser.ENTITIES[entityLC]) {
            return parser.ENTITIES[entityLC];
        }
        entity = entityLC;
        if (entity.charAt(0) === '#') {
            if (entity.charAt(1) === 'x') {
                entity = entity.slice(2);
                num = parseInt(entity, 16);
                numStr = num.toString(16);
            } else {
                entity = entity.slice(1);
                num = parseInt(entity, 10);
                numStr = num.toString(10);
            }
        }
        entity = entity.replace(/^0+/, '');
        if (isNaN(num) || numStr.toLowerCase() !== entity) {
            strictFail(parser, 'Invalid character entity');
            return '&' + parser.entity + ';';
        }
        return String.fromCodePoint(num);
    }
    function beginWhiteSpace(parser, c) {
        if (c === '<') {
            parser.state = S.OPEN_WAKA;
            parser.startTagPosition = parser.position;
        } else if (!isWhitespace(c)) {
            // have to process this as a text node.
            // weird, but happens.
            strictFail(parser, 'Non-whitespace before first tag.');
            parser.textNode = c;
            parser.state = S.TEXT;
        }
    }
    function charAt(chunk, i) {
        var result = '';
        if (i < chunk.length) {
            result = chunk.charAt(i);
        }
        return result;
    }
    function write(chunk) {
        var parser = this;
        if (this.error) {
            throw this.error;
        }
        if (parser.closed) {
            return error(parser, 'Cannot write after close. Assign an onready handler.');
        }
        if (chunk === null) {
            return end(parser);
        }
        if (typeof chunk === 'object') {
            chunk = chunk.toString();
        }
        var i = 0;
        var c = '';
        while(true){
            c = charAt(chunk, i++);
            parser.c = c;
            if (!c) {
                break;
            }
            if (parser.trackPosition) {
                parser.position++;
                if (c === '\n') {
                    parser.line++;
                    parser.column = 0;
                } else {
                    parser.column++;
                }
            }
            switch(parser.state){
                case S.BEGIN:
                    parser.state = S.BEGIN_WHITESPACE;
                    if (c === '\uFEFF') {
                        continue;
                    }
                    beginWhiteSpace(parser, c);
                    continue;
                case S.BEGIN_WHITESPACE:
                    beginWhiteSpace(parser, c);
                    continue;
                case S.TEXT:
                    if (parser.sawRoot && !parser.closedRoot) {
                        var starti = i - 1;
                        while(c && c !== '<' && c !== '&'){
                            c = charAt(chunk, i++);
                            if (c && parser.trackPosition) {
                                parser.position++;
                                if (c === '\n') {
                                    parser.line++;
                                    parser.column = 0;
                                } else {
                                    parser.column++;
                                }
                            }
                        }
                        parser.textNode += chunk.substring(starti, i - 1);
                    }
                    if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                        parser.state = S.OPEN_WAKA;
                        parser.startTagPosition = parser.position;
                    } else {
                        if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
                            strictFail(parser, 'Text data outside of root node.');
                        }
                        if (c === '&') {
                            parser.state = S.TEXT_ENTITY;
                        } else {
                            parser.textNode += c;
                        }
                    }
                    continue;
                case S.SCRIPT:
                    // only non-strict
                    if (c === '<') {
                        parser.state = S.SCRIPT_ENDING;
                    } else {
                        parser.script += c;
                    }
                    continue;
                case S.SCRIPT_ENDING:
                    if (c === '/') {
                        parser.state = S.CLOSE_TAG;
                    } else {
                        parser.script += '<' + c;
                        parser.state = S.SCRIPT;
                    }
                    continue;
                case S.OPEN_WAKA:
                    // either a /, ?, !, or text is coming next.
                    if (c === '!') {
                        parser.state = S.SGML_DECL;
                        parser.sgmlDecl = '';
                    } else if (isWhitespace(c)) {
                    // wait for it...
                    } else if (isMatch(nameStart, c)) {
                        parser.state = S.OPEN_TAG;
                        parser.tagName = c;
                    } else if (c === '/') {
                        parser.state = S.CLOSE_TAG;
                        parser.tagName = '';
                    } else if (c === '?') {
                        parser.state = S.PROC_INST;
                        parser.procInstName = parser.procInstBody = '';
                    } else {
                        strictFail(parser, 'Unencoded <');
                        // if there was some whitespace, then add that in.
                        if (parser.startTagPosition + 1 < parser.position) {
                            var pad = parser.position - parser.startTagPosition;
                            c = new Array(pad).join(' ') + c;
                        }
                        parser.textNode += '<' + c;
                        parser.state = S.TEXT;
                    }
                    continue;
                case S.SGML_DECL:
                    if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                        emitNode(parser, 'onopencdata');
                        parser.state = S.CDATA;
                        parser.sgmlDecl = '';
                        parser.cdata = '';
                    } else if (parser.sgmlDecl + c === '--') {
                        parser.state = S.COMMENT;
                        parser.comment = '';
                        parser.sgmlDecl = '';
                    } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                        parser.state = S.DOCTYPE;
                        if (parser.doctype || parser.sawRoot) {
                            strictFail(parser, 'Inappropriately located doctype declaration');
                        }
                        parser.doctype = '';
                        parser.sgmlDecl = '';
                    } else if (c === '>') {
                        emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl);
                        parser.sgmlDecl = '';
                        parser.state = S.TEXT;
                    } else if (isQuote(c)) {
                        parser.state = S.SGML_DECL_QUOTED;
                        parser.sgmlDecl += c;
                    } else {
                        parser.sgmlDecl += c;
                    }
                    continue;
                case S.SGML_DECL_QUOTED:
                    if (c === parser.q) {
                        parser.state = S.SGML_DECL;
                        parser.q = '';
                    }
                    parser.sgmlDecl += c;
                    continue;
                case S.DOCTYPE:
                    if (c === '>') {
                        parser.state = S.TEXT;
                        emitNode(parser, 'ondoctype', parser.doctype);
                        parser.doctype = true // just remember that we saw it.
                        ;
                    } else {
                        parser.doctype += c;
                        if (c === '[') {
                            parser.state = S.DOCTYPE_DTD;
                        } else if (isQuote(c)) {
                            parser.state = S.DOCTYPE_QUOTED;
                            parser.q = c;
                        }
                    }
                    continue;
                case S.DOCTYPE_QUOTED:
                    parser.doctype += c;
                    if (c === parser.q) {
                        parser.q = '';
                        parser.state = S.DOCTYPE;
                    }
                    continue;
                case S.DOCTYPE_DTD:
                    parser.doctype += c;
                    if (c === ']') {
                        parser.state = S.DOCTYPE;
                    } else if (isQuote(c)) {
                        parser.state = S.DOCTYPE_DTD_QUOTED;
                        parser.q = c;
                    }
                    continue;
                case S.DOCTYPE_DTD_QUOTED:
                    parser.doctype += c;
                    if (c === parser.q) {
                        parser.state = S.DOCTYPE_DTD;
                        parser.q = '';
                    }
                    continue;
                case S.COMMENT:
                    if (c === '-') {
                        parser.state = S.COMMENT_ENDING;
                    } else {
                        parser.comment += c;
                    }
                    continue;
                case S.COMMENT_ENDING:
                    if (c === '-') {
                        parser.state = S.COMMENT_ENDED;
                        parser.comment = textopts(parser.opt, parser.comment);
                        if (parser.comment) {
                            emitNode(parser, 'oncomment', parser.comment);
                        }
                        parser.comment = '';
                    } else {
                        parser.comment += '-' + c;
                        parser.state = S.COMMENT;
                    }
                    continue;
                case S.COMMENT_ENDED:
                    if (c !== '>') {
                        strictFail(parser, 'Malformed comment');
                        // allow <!-- blah -- bloo --> in non-strict mode,
                        // which is a comment of " blah -- bloo "
                        parser.comment += '--' + c;
                        parser.state = S.COMMENT;
                    } else {
                        parser.state = S.TEXT;
                    }
                    continue;
                case S.CDATA:
                    if (c === ']') {
                        parser.state = S.CDATA_ENDING;
                    } else {
                        parser.cdata += c;
                    }
                    continue;
                case S.CDATA_ENDING:
                    if (c === ']') {
                        parser.state = S.CDATA_ENDING_2;
                    } else {
                        parser.cdata += ']' + c;
                        parser.state = S.CDATA;
                    }
                    continue;
                case S.CDATA_ENDING_2:
                    if (c === '>') {
                        if (parser.cdata) {
                            emitNode(parser, 'oncdata', parser.cdata);
                        }
                        emitNode(parser, 'onclosecdata');
                        parser.cdata = '';
                        parser.state = S.TEXT;
                    } else if (c === ']') {
                        parser.cdata += ']';
                    } else {
                        parser.cdata += ']]' + c;
                        parser.state = S.CDATA;
                    }
                    continue;
                case S.PROC_INST:
                    if (c === '?') {
                        parser.state = S.PROC_INST_ENDING;
                    } else if (isWhitespace(c)) {
                        parser.state = S.PROC_INST_BODY;
                    } else {
                        parser.procInstName += c;
                    }
                    continue;
                case S.PROC_INST_BODY:
                    if (!parser.procInstBody && isWhitespace(c)) {
                        continue;
                    } else if (c === '?') {
                        parser.state = S.PROC_INST_ENDING;
                    } else {
                        parser.procInstBody += c;
                    }
                    continue;
                case S.PROC_INST_ENDING:
                    if (c === '>') {
                        emitNode(parser, 'onprocessinginstruction', {
                            name: parser.procInstName,
                            body: parser.procInstBody
                        });
                        parser.procInstName = parser.procInstBody = '';
                        parser.state = S.TEXT;
                    } else {
                        parser.procInstBody += '?' + c;
                        parser.state = S.PROC_INST_BODY;
                    }
                    continue;
                case S.OPEN_TAG:
                    if (isMatch(nameBody, c)) {
                        parser.tagName += c;
                    } else {
                        newTag(parser);
                        if (c === '>') {
                            openTag(parser);
                        } else if (c === '/') {
                            parser.state = S.OPEN_TAG_SLASH;
                        } else {
                            if (!isWhitespace(c)) {
                                strictFail(parser, 'Invalid character in tag name');
                            }
                            parser.state = S.ATTRIB;
                        }
                    }
                    continue;
                case S.OPEN_TAG_SLASH:
                    if (c === '>') {
                        openTag(parser, true);
                        closeTag(parser);
                    } else {
                        strictFail(parser, 'Forward-slash in opening tag not followed by >');
                        parser.state = S.ATTRIB;
                    }
                    continue;
                case S.ATTRIB:
                    // haven't read the attribute name yet.
                    if (isWhitespace(c)) {
                        continue;
                    } else if (c === '>') {
                        openTag(parser);
                    } else if (c === '/') {
                        parser.state = S.OPEN_TAG_SLASH;
                    } else if (isMatch(nameStart, c)) {
                        parser.attribName = c;
                        parser.attribValue = '';
                        parser.state = S.ATTRIB_NAME;
                    } else {
                        strictFail(parser, 'Invalid attribute name');
                    }
                    continue;
                case S.ATTRIB_NAME:
                    if (c === '=') {
                        parser.state = S.ATTRIB_VALUE;
                    } else if (c === '>') {
                        strictFail(parser, 'Attribute without value');
                        parser.attribValue = parser.attribName;
                        attrib(parser);
                        openTag(parser);
                    } else if (isWhitespace(c)) {
                        parser.state = S.ATTRIB_NAME_SAW_WHITE;
                    } else if (isMatch(nameBody, c)) {
                        parser.attribName += c;
                    } else {
                        strictFail(parser, 'Invalid attribute name');
                    }
                    continue;
                case S.ATTRIB_NAME_SAW_WHITE:
                    if (c === '=') {
                        parser.state = S.ATTRIB_VALUE;
                    } else if (isWhitespace(c)) {
                        continue;
                    } else {
                        strictFail(parser, 'Attribute without value');
                        parser.tag.attributes[parser.attribName] = '';
                        parser.attribValue = '';
                        emitNode(parser, 'onattribute', {
                            name: parser.attribName,
                            value: ''
                        });
                        parser.attribName = '';
                        if (c === '>') {
                            openTag(parser);
                        } else if (isMatch(nameStart, c)) {
                            parser.attribName = c;
                            parser.state = S.ATTRIB_NAME;
                        } else {
                            strictFail(parser, 'Invalid attribute name');
                            parser.state = S.ATTRIB;
                        }
                    }
                    continue;
                case S.ATTRIB_VALUE:
                    if (isWhitespace(c)) {
                        continue;
                    } else if (isQuote(c)) {
                        parser.q = c;
                        parser.state = S.ATTRIB_VALUE_QUOTED;
                    } else {
                        strictFail(parser, 'Unquoted attribute value');
                        parser.state = S.ATTRIB_VALUE_UNQUOTED;
                        parser.attribValue = c;
                    }
                    continue;
                case S.ATTRIB_VALUE_QUOTED:
                    if (c !== parser.q) {
                        if (c === '&') {
                            parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                        } else {
                            parser.attribValue += c;
                        }
                        continue;
                    }
                    attrib(parser);
                    parser.q = '';
                    parser.state = S.ATTRIB_VALUE_CLOSED;
                    continue;
                case S.ATTRIB_VALUE_CLOSED:
                    if (isWhitespace(c)) {
                        parser.state = S.ATTRIB;
                    } else if (c === '>') {
                        openTag(parser);
                    } else if (c === '/') {
                        parser.state = S.OPEN_TAG_SLASH;
                    } else if (isMatch(nameStart, c)) {
                        strictFail(parser, 'No whitespace between attributes');
                        parser.attribName = c;
                        parser.attribValue = '';
                        parser.state = S.ATTRIB_NAME;
                    } else {
                        strictFail(parser, 'Invalid attribute name');
                    }
                    continue;
                case S.ATTRIB_VALUE_UNQUOTED:
                    if (!isAttribEnd(c)) {
                        if (c === '&') {
                            parser.state = S.ATTRIB_VALUE_ENTITY_U;
                        } else {
                            parser.attribValue += c;
                        }
                        continue;
                    }
                    attrib(parser);
                    if (c === '>') {
                        openTag(parser);
                    } else {
                        parser.state = S.ATTRIB;
                    }
                    continue;
                case S.CLOSE_TAG:
                    if (!parser.tagName) {
                        if (isWhitespace(c)) {
                            continue;
                        } else if (notMatch(nameStart, c)) {
                            if (parser.script) {
                                parser.script += '</' + c;
                                parser.state = S.SCRIPT;
                            } else {
                                strictFail(parser, 'Invalid tagname in closing tag.');
                            }
                        } else {
                            parser.tagName = c;
                        }
                    } else if (c === '>') {
                        closeTag(parser);
                    } else if (isMatch(nameBody, c)) {
                        parser.tagName += c;
                    } else if (parser.script) {
                        parser.script += '</' + parser.tagName;
                        parser.tagName = '';
                        parser.state = S.SCRIPT;
                    } else {
                        if (!isWhitespace(c)) {
                            strictFail(parser, 'Invalid tagname in closing tag');
                        }
                        parser.state = S.CLOSE_TAG_SAW_WHITE;
                    }
                    continue;
                case S.CLOSE_TAG_SAW_WHITE:
                    if (isWhitespace(c)) {
                        continue;
                    }
                    if (c === '>') {
                        closeTag(parser);
                    } else {
                        strictFail(parser, 'Invalid characters in closing tag');
                    }
                    continue;
                case S.TEXT_ENTITY:
                case S.ATTRIB_VALUE_ENTITY_Q:
                case S.ATTRIB_VALUE_ENTITY_U:
                    var returnState;
                    var buffer;
                    switch(parser.state){
                        case S.TEXT_ENTITY:
                            returnState = S.TEXT;
                            buffer = 'textNode';
                            break;
                        case S.ATTRIB_VALUE_ENTITY_Q:
                            returnState = S.ATTRIB_VALUE_QUOTED;
                            buffer = 'attribValue';
                            break;
                        case S.ATTRIB_VALUE_ENTITY_U:
                            returnState = S.ATTRIB_VALUE_UNQUOTED;
                            buffer = 'attribValue';
                            break;
                    }
                    if (c === ';') {
                        var parsedEntity = parseEntity(parser);
                        // Custom entities can contain tags, so we potentially need to parse the result
                        if (parser.state === S.TEXT_ENTITY && !sax.ENTITIES[parser.entity] && parsedEntity !== '&' + parser.entity + ';') {
                            chunk = chunk.slice(0, i) + parsedEntity + chunk.slice(i);
                        } else {
                            parser[buffer] += parsedEntity;
                        }
                        parser.entity = '';
                        parser.state = returnState;
                    } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
                        parser.entity += c;
                    } else {
                        strictFail(parser, 'Invalid character in entity name');
                        parser[buffer] += '&' + parser.entity + c;
                        parser.entity = '';
                        parser.state = returnState;
                    }
                    continue;
                default:
                    throw new Error(parser, 'Unknown state: ' + parser.state);
            }
        } // while
        if (parser.position >= parser.bufferCheckPosition) {
            checkBufferLength(parser);
        }
        return parser;
    }
})(("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : exports);
}}),
"[project]/node_modules/css-what/lib/es/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
;
}}),
"[project]/node_modules/css-what/lib/es/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/css-what/lib/es/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/css-what/lib/es/types.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AttributeAction": (()=>AttributeAction),
    "IgnoreCaseMode": (()=>IgnoreCaseMode),
    "SelectorType": (()=>SelectorType)
});
var SelectorType;
(function(SelectorType) {
    SelectorType["Attribute"] = "attribute";
    SelectorType["Pseudo"] = "pseudo";
    SelectorType["PseudoElement"] = "pseudo-element";
    SelectorType["Tag"] = "tag";
    SelectorType["Universal"] = "universal";
    // Traversals
    SelectorType["Adjacent"] = "adjacent";
    SelectorType["Child"] = "child";
    SelectorType["Descendant"] = "descendant";
    SelectorType["Parent"] = "parent";
    SelectorType["Sibling"] = "sibling";
    SelectorType["ColumnCombinator"] = "column-combinator";
})(SelectorType || (SelectorType = {}));
const IgnoreCaseMode = {
    Unknown: null,
    QuirksMode: "quirks",
    IgnoreCase: true,
    CaseSensitive: false
};
var AttributeAction;
(function(AttributeAction) {
    AttributeAction["Any"] = "any";
    AttributeAction["Element"] = "element";
    AttributeAction["End"] = "end";
    AttributeAction["Equals"] = "equals";
    AttributeAction["Exists"] = "exists";
    AttributeAction["Hyphen"] = "hyphen";
    AttributeAction["Not"] = "not";
    AttributeAction["Start"] = "start";
})(AttributeAction || (AttributeAction = {}));
}}),
"[project]/node_modules/css-what/lib/es/parse.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "isTraversal": (()=>isTraversal),
    "parse": (()=>parse)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-what/lib/es/types.js [app-client] (ecmascript)");
;
const reName = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/;
const reEscape = /\\([\da-f]{1,6}\s?|(\s)|.)/gi;
const actionTypes = new Map([
    [
        126 /* Tilde */ ,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Element
    ],
    [
        94 /* Circumflex */ ,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Start
    ],
    [
        36 /* Dollar */ ,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].End
    ],
    [
        42 /* Asterisk */ ,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Any
    ],
    [
        33 /* ExclamationMark */ ,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Not
    ],
    [
        124 /* Pipe */ ,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Hyphen
    ]
]);
// Pseudos, whose data property is parsed as well.
const unpackPseudos = new Set([
    "has",
    "not",
    "matches",
    "is",
    "where",
    "host",
    "host-context"
]);
function isTraversal(selector) {
    switch(selector.type){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Adjacent:
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Child:
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Descendant:
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Parent:
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Sibling:
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].ColumnCombinator:
            return true;
        default:
            return false;
    }
}
const stripQuotesFromPseudos = new Set([
    "contains",
    "icontains"
]);
// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152
function funescape(_, escaped, escapedWhitespace) {
    const high = parseInt(escaped, 16) - 0x10000;
    // NaN means non-codepoint
    return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);
}
function unescapeCSS(str) {
    return str.replace(reEscape, funescape);
}
function isQuote(c) {
    return c === 39 /* SingleQuote */  || c === 34 /* DoubleQuote */ ;
}
function isWhitespace(c) {
    return c === 32 /* Space */  || c === 9 /* Tab */  || c === 10 /* NewLine */  || c === 12 /* FormFeed */  || c === 13 /* CarriageReturn */ ;
}
function parse(selector) {
    const subselects = [];
    const endIndex = parseSelector(subselects, `${selector}`, 0);
    if (endIndex < selector.length) {
        throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);
    }
    return subselects;
}
function parseSelector(subselects, selector, selectorIndex) {
    let tokens = [];
    function getName(offset) {
        const match = selector.slice(selectorIndex + offset).match(reName);
        if (!match) {
            throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);
        }
        const [name] = match;
        selectorIndex += offset + name.length;
        return unescapeCSS(name);
    }
    function stripWhitespace(offset) {
        selectorIndex += offset;
        while(selectorIndex < selector.length && isWhitespace(selector.charCodeAt(selectorIndex))){
            selectorIndex++;
        }
    }
    function readValueWithParenthesis() {
        selectorIndex += 1;
        const start = selectorIndex;
        let counter = 1;
        for(; counter > 0 && selectorIndex < selector.length; selectorIndex++){
            if (selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */  && !isEscaped(selectorIndex)) {
                counter++;
            } else if (selector.charCodeAt(selectorIndex) === 41 /* RightParenthesis */  && !isEscaped(selectorIndex)) {
                counter--;
            }
        }
        if (counter) {
            throw new Error("Parenthesis not matched");
        }
        return unescapeCSS(selector.slice(start, selectorIndex - 1));
    }
    function isEscaped(pos) {
        let slashCount = 0;
        while(selector.charCodeAt(--pos) === 92 /* BackSlash */ )slashCount++;
        return (slashCount & 1) === 1;
    }
    function ensureNotTraversal() {
        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {
            throw new Error("Did not expect successive traversals.");
        }
    }
    function addTraversal(type) {
        if (tokens.length > 0 && tokens[tokens.length - 1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Descendant) {
            tokens[tokens.length - 1].type = type;
            return;
        }
        ensureNotTraversal();
        tokens.push({
            type
        });
    }
    function addSpecialAttribute(name, action) {
        tokens.push({
            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Attribute,
            name,
            action,
            value: getName(1),
            namespace: null,
            ignoreCase: "quirks"
        });
    }
    /**
     * We have finished parsing the current part of the selector.
     *
     * Remove descendant tokens at the end if they exist,
     * and return the last index, so that parsing can be
     * picked up from here.
     */ function finalizeSubselector() {
        if (tokens.length && tokens[tokens.length - 1].type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Descendant) {
            tokens.pop();
        }
        if (tokens.length === 0) {
            throw new Error("Empty sub-selector");
        }
        subselects.push(tokens);
    }
    stripWhitespace(0);
    if (selector.length === selectorIndex) {
        return selectorIndex;
    }
    loop: while(selectorIndex < selector.length){
        const firstChar = selector.charCodeAt(selectorIndex);
        switch(firstChar){
            // Whitespace
            case 32 /* Space */ :
            case 9 /* Tab */ :
            case 10 /* NewLine */ :
            case 12 /* FormFeed */ :
            case 13 /* CarriageReturn */ :
                {
                    if (tokens.length === 0 || tokens[0].type !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Descendant) {
                        ensureNotTraversal();
                        tokens.push({
                            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Descendant
                        });
                    }
                    stripWhitespace(1);
                    break;
                }
            // Traversals
            case 62 /* GreaterThan */ :
                {
                    addTraversal(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Child);
                    stripWhitespace(1);
                    break;
                }
            case 60 /* LessThan */ :
                {
                    addTraversal(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Parent);
                    stripWhitespace(1);
                    break;
                }
            case 126 /* Tilde */ :
                {
                    addTraversal(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Sibling);
                    stripWhitespace(1);
                    break;
                }
            case 43 /* Plus */ :
                {
                    addTraversal(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Adjacent);
                    stripWhitespace(1);
                    break;
                }
            // Special attribute selectors: .class, #id
            case 46 /* Period */ :
                {
                    addSpecialAttribute("class", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Element);
                    break;
                }
            case 35 /* Hash */ :
                {
                    addSpecialAttribute("id", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Equals);
                    break;
                }
            case 91 /* LeftSquareBracket */ :
                {
                    stripWhitespace(1);
                    // Determine attribute name and namespace
                    let name;
                    let namespace = null;
                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ ) {
                        // Equivalent to no namespace
                        name = getName(1);
                    } else if (selector.startsWith("*|", selectorIndex)) {
                        namespace = "*";
                        name = getName(2);
                    } else {
                        name = getName(0);
                        if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */  && selector.charCodeAt(selectorIndex + 1) !== 61 /* Equal */ ) {
                            namespace = name;
                            name = getName(1);
                        }
                    }
                    stripWhitespace(0);
                    // Determine comparison operation
                    let action = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Exists;
                    const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));
                    if (possibleAction) {
                        action = possibleAction;
                        if (selector.charCodeAt(selectorIndex + 1) !== 61 /* Equal */ ) {
                            throw new Error("Expected `=`");
                        }
                        stripWhitespace(2);
                    } else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */ ) {
                        action = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Equals;
                        stripWhitespace(1);
                    }
                    // Determine value
                    let value = "";
                    let ignoreCase = null;
                    if (action !== "exists") {
                        if (isQuote(selector.charCodeAt(selectorIndex))) {
                            const quote = selector.charCodeAt(selectorIndex);
                            let sectionEnd = selectorIndex + 1;
                            while(sectionEnd < selector.length && (selector.charCodeAt(sectionEnd) !== quote || isEscaped(sectionEnd))){
                                sectionEnd += 1;
                            }
                            if (selector.charCodeAt(sectionEnd) !== quote) {
                                throw new Error("Attribute value didn't end");
                            }
                            value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));
                            selectorIndex = sectionEnd + 1;
                        } else {
                            const valueStart = selectorIndex;
                            while(selectorIndex < selector.length && (!isWhitespace(selector.charCodeAt(selectorIndex)) && selector.charCodeAt(selectorIndex) !== 93 /* RightSquareBracket */  || isEscaped(selectorIndex))){
                                selectorIndex += 1;
                            }
                            value = unescapeCSS(selector.slice(valueStart, selectorIndex));
                        }
                        stripWhitespace(0);
                        // See if we have a force ignore flag
                        const forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;
                        // If the forceIgnore flag is set (either `i` or `s`), use that value
                        if (forceIgnore === 115 /* LowerS */ ) {
                            ignoreCase = false;
                            stripWhitespace(1);
                        } else if (forceIgnore === 105 /* LowerI */ ) {
                            ignoreCase = true;
                            stripWhitespace(1);
                        }
                    }
                    if (selector.charCodeAt(selectorIndex) !== 93 /* RightSquareBracket */ ) {
                        throw new Error("Attribute selector didn't terminate");
                    }
                    selectorIndex += 1;
                    const attributeSelector = {
                        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Attribute,
                        name,
                        action,
                        value,
                        namespace,
                        ignoreCase
                    };
                    tokens.push(attributeSelector);
                    break;
                }
            case 58 /* Colon */ :
                {
                    if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */ ) {
                        tokens.push({
                            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].PseudoElement,
                            name: getName(2).toLowerCase(),
                            data: selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */  ? readValueWithParenthesis() : null
                        });
                        continue;
                    }
                    const name = getName(1).toLowerCase();
                    let data = null;
                    if (selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */ ) {
                        if (unpackPseudos.has(name)) {
                            if (isQuote(selector.charCodeAt(selectorIndex + 1))) {
                                throw new Error(`Pseudo-selector ${name} cannot be quoted`);
                            }
                            data = [];
                            selectorIndex = parseSelector(data, selector, selectorIndex + 1);
                            if (selector.charCodeAt(selectorIndex) !== 41 /* RightParenthesis */ ) {
                                throw new Error(`Missing closing parenthesis in :${name} (${selector})`);
                            }
                            selectorIndex += 1;
                        } else {
                            data = readValueWithParenthesis();
                            if (stripQuotesFromPseudos.has(name)) {
                                const quot = data.charCodeAt(0);
                                if (quot === data.charCodeAt(data.length - 1) && isQuote(quot)) {
                                    data = data.slice(1, -1);
                                }
                            }
                            data = unescapeCSS(data);
                        }
                    }
                    tokens.push({
                        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Pseudo,
                        name,
                        data
                    });
                    break;
                }
            case 44 /* Comma */ :
                {
                    finalizeSubselector();
                    tokens = [];
                    stripWhitespace(1);
                    break;
                }
            default:
                {
                    if (selector.startsWith("/*", selectorIndex)) {
                        const endIndex = selector.indexOf("*/", selectorIndex + 2);
                        if (endIndex < 0) {
                            throw new Error("Comment was not terminated");
                        }
                        selectorIndex = endIndex + 2;
                        // Remove leading whitespace
                        if (tokens.length === 0) {
                            stripWhitespace(0);
                        }
                        break;
                    }
                    let namespace = null;
                    let name;
                    if (firstChar === 42 /* Asterisk */ ) {
                        selectorIndex += 1;
                        name = "*";
                    } else if (firstChar === 124 /* Pipe */ ) {
                        name = "";
                        if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */ ) {
                            addTraversal(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].ColumnCombinator);
                            stripWhitespace(2);
                            break;
                        }
                    } else if (reName.test(selector.slice(selectorIndex))) {
                        name = getName(0);
                    } else {
                        break loop;
                    }
                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */  && selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */ ) {
                        namespace = name;
                        if (selector.charCodeAt(selectorIndex + 1) === 42 /* Asterisk */ ) {
                            name = "*";
                            selectorIndex += 2;
                        } else {
                            name = getName(1);
                        }
                    }
                    tokens.push(name === "*" ? {
                        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Universal,
                        namespace
                    } : {
                        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Tag,
                        name,
                        namespace
                    });
                }
        }
    }
    finalizeSubselector();
    return selectorIndex;
}
}}),
"[project]/node_modules/css-what/lib/es/stringify.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "stringify": (()=>stringify)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-what/lib/es/types.js [app-client] (ecmascript)");
;
const attribValChars = [
    "\\",
    '"'
];
const pseudoValChars = [
    ...attribValChars,
    "(",
    ")"
];
const charsToEscapeInAttributeValue = new Set(attribValChars.map((c)=>c.charCodeAt(0)));
const charsToEscapeInPseudoValue = new Set(pseudoValChars.map((c)=>c.charCodeAt(0)));
const charsToEscapeInName = new Set([
    ...pseudoValChars,
    "~",
    "^",
    "$",
    "*",
    "+",
    "!",
    "|",
    ":",
    "[",
    "]",
    " ",
    "."
].map((c)=>c.charCodeAt(0)));
function stringify(selector) {
    return selector.map((token)=>token.map(stringifyToken).join("")).join(", ");
}
function stringifyToken(token, index, arr) {
    switch(token.type){
        // Simple types
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Child:
            return index === 0 ? "> " : " > ";
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Parent:
            return index === 0 ? "< " : " < ";
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Sibling:
            return index === 0 ? "~ " : " ~ ";
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Adjacent:
            return index === 0 ? "+ " : " + ";
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Descendant:
            return " ";
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].ColumnCombinator:
            return index === 0 ? "|| " : " || ";
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Universal:
            // Return an empty string if the selector isn't needed.
            return token.namespace === "*" && index + 1 < arr.length && "name" in arr[index + 1] ? "" : `${getNamespace(token.namespace)}*`;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Tag:
            return getNamespacedName(token);
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].PseudoElement:
            return `::${escapeName(token.name, charsToEscapeInName)}${token.data === null ? "" : `(${escapeName(token.data, charsToEscapeInPseudoValue)})`}`;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Pseudo:
            return `:${escapeName(token.name, charsToEscapeInName)}${token.data === null ? "" : `(${typeof token.data === "string" ? escapeName(token.data, charsToEscapeInPseudoValue) : stringify(token.data)})`}`;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"].Attribute:
            {
                if (token.name === "id" && token.action === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Equals && token.ignoreCase === "quirks" && !token.namespace) {
                    return `#${escapeName(token.value, charsToEscapeInName)}`;
                }
                if (token.name === "class" && token.action === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Element && token.ignoreCase === "quirks" && !token.namespace) {
                    return `.${escapeName(token.value, charsToEscapeInName)}`;
                }
                const name = getNamespacedName(token);
                if (token.action === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Exists) {
                    return `[${name}]`;
                }
                return `[${name}${getActionValue(token.action)}="${escapeName(token.value, charsToEscapeInAttributeValue)}"${token.ignoreCase === null ? "" : token.ignoreCase ? " i" : " s"}]`;
            }
    }
}
function getActionValue(action) {
    switch(action){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Equals:
            return "";
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Element:
            return "~";
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Start:
            return "^";
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].End:
            return "$";
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Any:
            return "*";
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Not:
            return "!";
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Hyphen:
            return "|";
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"].Exists:
            throw new Error("Shouldn't be here");
    }
}
function getNamespacedName(token) {
    return `${getNamespace(token.namespace)}${escapeName(token.name, charsToEscapeInName)}`;
}
function getNamespace(namespace) {
    return namespace !== null ? `${namespace === "*" ? "*" : escapeName(namespace, charsToEscapeInName)}|` : "";
}
function escapeName(str, charsToEscape) {
    let lastIdx = 0;
    let ret = "";
    for(let i = 0; i < str.length; i++){
        if (charsToEscape.has(str.charCodeAt(i))) {
            ret += `${str.slice(lastIdx, i)}\\${str.charAt(i)}`;
            lastIdx = i + 1;
        }
    }
    return ret.length > 0 ? ret + str.slice(lastIdx) : str;
}
}}),
"[project]/node_modules/css-what/lib/es/index.js [app-client] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AttributeAction": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AttributeAction"]),
    "IgnoreCaseMode": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IgnoreCaseMode"]),
    "SelectorType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SelectorType"]),
    "isTraversal": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$parse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTraversal"]),
    "parse": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$parse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parse"]),
    "stringify": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$stringify$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringify"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$parse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-what/lib/es/parse.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$stringify$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-what/lib/es/stringify.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/css-what/lib/es/types.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/css-what/lib/es/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/css-what/lib/es/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AttributeAction": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AttributeAction"]),
    "IgnoreCaseMode": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["IgnoreCaseMode"]),
    "SelectorType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["SelectorType"]),
    "isTraversal": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isTraversal"]),
    "parse": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["parse"]),
    "stringify": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["stringify"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/css-what/lib/es/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$css$2d$what$2f$lib$2f$es$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_import__("[project]/node_modules/css-what/lib/es/index.js [app-client] (ecmascript) <exports>");
}}),
"[project]/node_modules/nth-check/lib/parse.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parse = void 0;
// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is " \t\r\n\f"
var whitespace = new Set([
    9,
    10,
    12,
    13,
    32
]);
var ZERO = "0".charCodeAt(0);
var NINE = "9".charCodeAt(0);
/**
 * Parses an expression.
 *
 * @throws An `Error` if parsing fails.
 * @returns An array containing the integer step size and the integer offset of the nth rule.
 * @example nthCheck.parse("2n+3"); // returns [2, 3]
 */ function parse(formula) {
    formula = formula.trim().toLowerCase();
    if (formula === "even") {
        return [
            2,
            0
        ];
    } else if (formula === "odd") {
        return [
            2,
            1
        ];
    }
    // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
    var idx = 0;
    var a = 0;
    var sign = readSign();
    var number = readNumber();
    if (idx < formula.length && formula.charAt(idx) === "n") {
        idx++;
        a = sign * (number !== null && number !== void 0 ? number : 1);
        skipWhitespace();
        if (idx < formula.length) {
            sign = readSign();
            skipWhitespace();
            number = readNumber();
        } else {
            sign = number = 0;
        }
    }
    // Throw if there is anything else
    if (number === null || idx < formula.length) {
        throw new Error("n-th rule couldn't be parsed ('".concat(formula, "')"));
    }
    return [
        a,
        sign * number
    ];
    "TURBOPACK unreachable";
    function readSign() {
        if (formula.charAt(idx) === "-") {
            idx++;
            return -1;
        }
        if (formula.charAt(idx) === "+") {
            idx++;
        }
        return 1;
    }
    function readNumber() {
        var start = idx;
        var value = 0;
        while(idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE){
            value = value * 10 + (formula.charCodeAt(idx) - ZERO);
            idx++;
        }
        // Return `null` if we didn't read anything.
        return idx === start ? null : value;
    }
    function skipWhitespace() {
        while(idx < formula.length && whitespace.has(formula.charCodeAt(idx))){
            idx++;
        }
    }
}
exports.parse = parse; //# sourceMappingURL=parse.js.map
}}),
"[project]/node_modules/nth-check/lib/compile.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.generate = exports.compile = void 0;
var boolbase_1 = __importDefault(__turbopack_require__("[project]/node_modules/boolbase/index.js [app-client] (ecmascript)"));
/**
 * Returns a function that checks if an elements index matches the given rule
 * highly optimized to return the fastest solution.
 *
 * @param parsed A tuple [a, b], as returned by `parse`.
 * @returns A highly optimized function that returns whether an index matches the nth-check.
 * @example
 *
 * ```js
 * const check = nthCheck.compile([2, 3]);
 *
 * check(0); // `false`
 * check(1); // `false`
 * check(2); // `true`
 * check(3); // `false`
 * check(4); // `true`
 * check(5); // `false`
 * check(6); // `true`
 * ```
 */ function compile(parsed) {
    var a = parsed[0];
    // Subtract 1 from `b`, to convert from one- to zero-indexed.
    var b = parsed[1] - 1;
    /*
     * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.
     * Besides, the specification states that no elements are
     * matched when `a` and `b` are 0.
     *
     * `b < 0` here as we subtracted 1 from `b` above.
     */ if (b < 0 && a <= 0) return boolbase_1.default.falseFunc;
    // When `a` is in the range -1..1, it matches any element (so only `b` is checked).
    if (a === -1) return function(index) {
        return index <= b;
    };
    if (a === 0) return function(index) {
        return index === b;
    };
    // When `b <= 0` and `a === 1`, they match any element.
    if (a === 1) return b < 0 ? boolbase_1.default.trueFunc : function(index) {
        return index >= b;
    };
    /*
     * Otherwise, modulo can be used to check if there is a match.
     *
     * Modulo doesn't care about the sign, so let's use `a`s absolute value.
     */ var absA = Math.abs(a);
    // Get `b mod a`, + a if this is negative.
    var bMod = (b % absA + absA) % absA;
    return a > 1 ? function(index) {
        return index >= b && index % absA === bMod;
    } : function(index) {
        return index <= b && index % absA === bMod;
    };
}
exports.compile = compile;
/**
 * Returns a function that produces a monotonously increasing sequence of indices.
 *
 * If the sequence has an end, the returned function will return `null` after
 * the last index in the sequence.
 *
 * @param parsed A tuple [a, b], as returned by `parse`.
 * @returns A function that produces a sequence of indices.
 * @example <caption>Always increasing (2n+3)</caption>
 *
 * ```js
 * const gen = nthCheck.generate([2, 3])
 *
 * gen() // `1`
 * gen() // `3`
 * gen() // `5`
 * gen() // `8`
 * gen() // `11`
 * ```
 *
 * @example <caption>With end value (-2n+10)</caption>
 *
 * ```js
 *
 * const gen = nthCheck.generate([-2, 5]);
 *
 * gen() // 0
 * gen() // 2
 * gen() // 4
 * gen() // null
 * ```
 */ function generate(parsed) {
    var a = parsed[0];
    // Subtract 1 from `b`, to convert from one- to zero-indexed.
    var b = parsed[1] - 1;
    var n = 0;
    // Make sure to always return an increasing sequence
    if (a < 0) {
        var aPos_1 = -a;
        // Get `b mod a`
        var minValue_1 = (b % aPos_1 + aPos_1) % aPos_1;
        return function() {
            var val = minValue_1 + aPos_1 * n++;
            return val > b ? null : val;
        };
    }
    if (a === 0) return b < 0 ? function() {
        return null;
    } : function() {
        return n++ === 0 ? b : null;
    };
    if (b < 0) {
        b += a * Math.ceil(-b / a);
    }
    return function() {
        return a * n++ + b;
    };
}
exports.generate = generate; //# sourceMappingURL=compile.js.map
}}),
"[project]/node_modules/nth-check/lib/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sequence = exports.generate = exports.compile = exports.parse = void 0;
var parse_js_1 = __turbopack_require__("[project]/node_modules/nth-check/lib/parse.js [app-client] (ecmascript)");
Object.defineProperty(exports, "parse", {
    enumerable: true,
    get: function() {
        return parse_js_1.parse;
    }
});
var compile_js_1 = __turbopack_require__("[project]/node_modules/nth-check/lib/compile.js [app-client] (ecmascript)");
Object.defineProperty(exports, "compile", {
    enumerable: true,
    get: function() {
        return compile_js_1.compile;
    }
});
Object.defineProperty(exports, "generate", {
    enumerable: true,
    get: function() {
        return compile_js_1.generate;
    }
});
/**
 * Parses and compiles a formula to a highly optimized function.
 * Combination of {@link parse} and {@link compile}.
 *
 * If the formula doesn't match any elements,
 * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.
 * Otherwise, a function accepting an _index_ is returned, which returns
 * whether or not the passed _index_ matches the formula.
 *
 * Note: The nth-rule starts counting at `1`, the returned function at `0`.
 *
 * @param formula The formula to compile.
 * @example
 * const check = nthCheck("2n+3");
 *
 * check(0); // `false`
 * check(1); // `false`
 * check(2); // `true`
 * check(3); // `false`
 * check(4); // `true`
 * check(5); // `false`
 * check(6); // `true`
 */ function nthCheck(formula) {
    return (0, compile_js_1.compile)((0, parse_js_1.parse)(formula));
}
exports.default = nthCheck;
/**
 * Parses and compiles a formula to a generator that produces a sequence of indices.
 * Combination of {@link parse} and {@link generate}.
 *
 * @param formula The formula to compile.
 * @returns A function that produces a sequence of indices.
 * @example <caption>Always increasing</caption>
 *
 * ```js
 * const gen = nthCheck.sequence('2n+3')
 *
 * gen() // `1`
 * gen() // `3`
 * gen() // `5`
 * gen() // `8`
 * gen() // `11`
 * ```
 *
 * @example <caption>With end value</caption>
 *
 * ```js
 *
 * const gen = nthCheck.sequence('-2n+5');
 *
 * gen() // 0
 * gen() // 2
 * gen() // 4
 * gen() // null
 * ```
 */ function sequence(formula) {
    return (0, compile_js_1.generate)((0, parse_js_1.parse)(formula));
}
exports.sequence = sequence; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/boolbase/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = {
    trueFunc: function trueFunc() {
        return true;
    },
    falseFunc: function falseFunc() {
        return false;
    }
};
}}),
"[project]/node_modules/css-select/lib/pseudo-selectors/filters.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.filters = void 0;
var nth_check_1 = __importDefault(__turbopack_require__("[project]/node_modules/nth-check/lib/index.js [app-client] (ecmascript)"));
var boolbase_1 = __importDefault(__turbopack_require__("[project]/node_modules/boolbase/index.js [app-client] (ecmascript)"));
function getChildFunc(next, adapter) {
    return function(elem) {
        var parent = adapter.getParent(elem);
        return parent != null && adapter.isTag(parent) && next(elem);
    };
}
exports.filters = {
    contains: function(next, text, _a) {
        var adapter = _a.adapter;
        return function contains(elem) {
            return next(elem) && adapter.getText(elem).includes(text);
        };
    },
    icontains: function(next, text, _a) {
        var adapter = _a.adapter;
        var itext = text.toLowerCase();
        return function icontains(elem) {
            return next(elem) && adapter.getText(elem).toLowerCase().includes(itext);
        };
    },
    // Location specific methods
    "nth-child": function(next, rule, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var func = (0, nth_check_1.default)(rule);
        if (func === boolbase_1.default.falseFunc) return boolbase_1.default.falseFunc;
        if (func === boolbase_1.default.trueFunc) return getChildFunc(next, adapter);
        return function nthChild(elem) {
            var siblings = adapter.getSiblings(elem);
            var pos = 0;
            for(var i = 0; i < siblings.length; i++){
                if (equals(elem, siblings[i])) break;
                if (adapter.isTag(siblings[i])) {
                    pos++;
                }
            }
            return func(pos) && next(elem);
        };
    },
    "nth-last-child": function(next, rule, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var func = (0, nth_check_1.default)(rule);
        if (func === boolbase_1.default.falseFunc) return boolbase_1.default.falseFunc;
        if (func === boolbase_1.default.trueFunc) return getChildFunc(next, adapter);
        return function nthLastChild(elem) {
            var siblings = adapter.getSiblings(elem);
            var pos = 0;
            for(var i = siblings.length - 1; i >= 0; i--){
                if (equals(elem, siblings[i])) break;
                if (adapter.isTag(siblings[i])) {
                    pos++;
                }
            }
            return func(pos) && next(elem);
        };
    },
    "nth-of-type": function(next, rule, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var func = (0, nth_check_1.default)(rule);
        if (func === boolbase_1.default.falseFunc) return boolbase_1.default.falseFunc;
        if (func === boolbase_1.default.trueFunc) return getChildFunc(next, adapter);
        return function nthOfType(elem) {
            var siblings = adapter.getSiblings(elem);
            var pos = 0;
            for(var i = 0; i < siblings.length; i++){
                var currentSibling = siblings[i];
                if (equals(elem, currentSibling)) break;
                if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === adapter.getName(elem)) {
                    pos++;
                }
            }
            return func(pos) && next(elem);
        };
    },
    "nth-last-of-type": function(next, rule, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var func = (0, nth_check_1.default)(rule);
        if (func === boolbase_1.default.falseFunc) return boolbase_1.default.falseFunc;
        if (func === boolbase_1.default.trueFunc) return getChildFunc(next, adapter);
        return function nthLastOfType(elem) {
            var siblings = adapter.getSiblings(elem);
            var pos = 0;
            for(var i = siblings.length - 1; i >= 0; i--){
                var currentSibling = siblings[i];
                if (equals(elem, currentSibling)) break;
                if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === adapter.getName(elem)) {
                    pos++;
                }
            }
            return func(pos) && next(elem);
        };
    },
    // TODO determine the actual root element
    root: function(next, _rule, _a) {
        var adapter = _a.adapter;
        return function(elem) {
            var parent = adapter.getParent(elem);
            return (parent == null || !adapter.isTag(parent)) && next(elem);
        };
    },
    scope: function(next, rule, options, context) {
        var equals = options.equals;
        if (!context || context.length === 0) {
            // Equivalent to :root
            return exports.filters["root"](next, rule, options);
        }
        if (context.length === 1) {
            // NOTE: can't be unpacked, as :has uses this for side-effects
            return function(elem) {
                return equals(context[0], elem) && next(elem);
            };
        }
        return function(elem) {
            return context.includes(elem) && next(elem);
        };
    },
    hover: dynamicStatePseudo("isHovered"),
    visited: dynamicStatePseudo("isVisited"),
    active: dynamicStatePseudo("isActive")
};
/**
 * Dynamic state pseudos. These depend on optional Adapter methods.
 *
 * @param name The name of the adapter method to call.
 * @returns Pseudo for the `filters` object.
 */ function dynamicStatePseudo(name) {
    return function dynamicPseudo(next, _rule, _a) {
        var adapter = _a.adapter;
        var func = adapter[name];
        if (typeof func !== "function") {
            return boolbase_1.default.falseFunc;
        }
        return function active(elem) {
            return func(elem) && next(elem);
        };
    };
} //# sourceMappingURL=filters.js.map
}}),
"[project]/node_modules/css-select/lib/pseudo-selectors/pseudos.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.verifyPseudoArgs = exports.pseudos = void 0;
// While filters are precompiled, pseudos get called when they are needed
exports.pseudos = {
    empty: function(elem, _a) {
        var adapter = _a.adapter;
        return !adapter.getChildren(elem).some(function(elem) {
            // FIXME: `getText` call is potentially expensive.
            return adapter.isTag(elem) || adapter.getText(elem) !== "";
        });
    },
    "first-child": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        if (adapter.prevElementSibling) {
            return adapter.prevElementSibling(elem) == null;
        }
        var firstChild = adapter.getSiblings(elem).find(function(elem) {
            return adapter.isTag(elem);
        });
        return firstChild != null && equals(elem, firstChild);
    },
    "last-child": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var siblings = adapter.getSiblings(elem);
        for(var i = siblings.length - 1; i >= 0; i--){
            if (equals(elem, siblings[i])) return true;
            if (adapter.isTag(siblings[i])) break;
        }
        return false;
    },
    "first-of-type": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var siblings = adapter.getSiblings(elem);
        var elemName = adapter.getName(elem);
        for(var i = 0; i < siblings.length; i++){
            var currentSibling = siblings[i];
            if (equals(elem, currentSibling)) return true;
            if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === elemName) {
                break;
            }
        }
        return false;
    },
    "last-of-type": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var siblings = adapter.getSiblings(elem);
        var elemName = adapter.getName(elem);
        for(var i = siblings.length - 1; i >= 0; i--){
            var currentSibling = siblings[i];
            if (equals(elem, currentSibling)) return true;
            if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === elemName) {
                break;
            }
        }
        return false;
    },
    "only-of-type": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var elemName = adapter.getName(elem);
        return adapter.getSiblings(elem).every(function(sibling) {
            return equals(elem, sibling) || !adapter.isTag(sibling) || adapter.getName(sibling) !== elemName;
        });
    },
    "only-child": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        return adapter.getSiblings(elem).every(function(sibling) {
            return equals(elem, sibling) || !adapter.isTag(sibling);
        });
    }
};
function verifyPseudoArgs(func, name, subselect, argIndex) {
    if (subselect === null) {
        if (func.length > argIndex) {
            throw new Error("Pseudo-class :".concat(name, " requires an argument"));
        }
    } else if (func.length === argIndex) {
        throw new Error("Pseudo-class :".concat(name, " doesn't have any arguments"));
    }
}
exports.verifyPseudoArgs = verifyPseudoArgs; //# sourceMappingURL=pseudos.js.map
}}),
"[project]/node_modules/css-select/lib/pseudo-selectors/aliases.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.aliases = void 0;
/**
 * Aliases are pseudos that are expressed as selectors.
 */ exports.aliases = {
    // Links
    "any-link": ":is(a, area, link)[href]",
    link: ":any-link:not(:visited)",
    // Forms
    // https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements
    disabled: ":is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] > option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )",
    enabled: ":not(:disabled)",
    checked: ":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",
    required: ":is(input, select, textarea)[required]",
    optional: ":is(input, select, textarea):not([required])",
    // JQuery extensions
    // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-selectedness
    selected: "option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",
    checkbox: "[type=checkbox]",
    file: "[type=file]",
    password: "[type=password]",
    radio: "[type=radio]",
    reset: "[type=reset]",
    image: "[type=image]",
    submit: "[type=submit]",
    parent: ":not(:empty)",
    header: ":is(h1, h2, h3, h4, h5, h6)",
    button: ":is(button, input[type=button])",
    input: ":is(input, textarea, select, button)",
    text: "input:is(:not([type!='']), [type=text])"
}; //# sourceMappingURL=aliases.js.map
}}),
"[project]/node_modules/css-select/lib/sort.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isTraversal = void 0;
var css_what_1 = __turbopack_require__("[project]/node_modules/css-what/lib/es/index.js [app-client] (ecmascript)");
var procedure = new Map([
    [
        css_what_1.SelectorType.Universal,
        50
    ],
    [
        css_what_1.SelectorType.Tag,
        30
    ],
    [
        css_what_1.SelectorType.Attribute,
        1
    ],
    [
        css_what_1.SelectorType.Pseudo,
        0
    ]
]);
function isTraversal(token) {
    return !procedure.has(token.type);
}
exports.isTraversal = isTraversal;
var attributes = new Map([
    [
        css_what_1.AttributeAction.Exists,
        10
    ],
    [
        css_what_1.AttributeAction.Equals,
        8
    ],
    [
        css_what_1.AttributeAction.Not,
        7
    ],
    [
        css_what_1.AttributeAction.Start,
        6
    ],
    [
        css_what_1.AttributeAction.End,
        6
    ],
    [
        css_what_1.AttributeAction.Any,
        5
    ]
]);
/**
 * Sort the parts of the passed selector,
 * as there is potential for optimization
 * (some types of selectors are faster than others)
 *
 * @param arr Selector to sort
 */ function sortByProcedure(arr) {
    var procs = arr.map(getProcedure);
    for(var i = 1; i < arr.length; i++){
        var procNew = procs[i];
        if (procNew < 0) continue;
        for(var j = i - 1; j >= 0 && procNew < procs[j]; j--){
            var token = arr[j + 1];
            arr[j + 1] = arr[j];
            arr[j] = token;
            procs[j + 1] = procs[j];
            procs[j] = procNew;
        }
    }
}
exports.default = sortByProcedure;
function getProcedure(token) {
    var _a, _b;
    var proc = (_a = procedure.get(token.type)) !== null && _a !== void 0 ? _a : -1;
    if (token.type === css_what_1.SelectorType.Attribute) {
        proc = (_b = attributes.get(token.action)) !== null && _b !== void 0 ? _b : 4;
        if (token.action === css_what_1.AttributeAction.Equals && token.name === "id") {
            // Prefer ID selectors (eg. #ID)
            proc = 9;
        }
        if (token.ignoreCase) {
            /*
             * IgnoreCase adds some overhead, prefer "normal" token
             * this is a binary operation, to ensure it's still an int
             */ proc >>= 1;
        }
    } else if (token.type === css_what_1.SelectorType.Pseudo) {
        if (!token.data) {
            proc = 3;
        } else if (token.name === "has" || token.name === "contains") {
            proc = 0; // Expensive in any case
        } else if (Array.isArray(token.data)) {
            // Eg. :matches, :not
            proc = Math.min.apply(Math, token.data.map(function(d) {
                return Math.min.apply(Math, d.map(getProcedure));
            }));
            // If we have traversals, try to avoid executing this selector
            if (proc < 0) {
                proc = 0;
            }
        } else {
            proc = 2;
        }
    }
    return proc;
} //# sourceMappingURL=sort.js.map
}}),
"[project]/node_modules/css-select/lib/pseudo-selectors/subselects.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.subselects = exports.getNextSiblings = exports.ensureIsTag = exports.PLACEHOLDER_ELEMENT = void 0;
var boolbase_1 = __importDefault(__turbopack_require__("[project]/node_modules/boolbase/index.js [app-client] (ecmascript)"));
var sort_js_1 = __turbopack_require__("[project]/node_modules/css-select/lib/sort.js [app-client] (ecmascript)");
/** Used as a placeholder for :has. Will be replaced with the actual element. */ exports.PLACEHOLDER_ELEMENT = {};
function ensureIsTag(next, adapter) {
    if (next === boolbase_1.default.falseFunc) return boolbase_1.default.falseFunc;
    return function(elem) {
        return adapter.isTag(elem) && next(elem);
    };
}
exports.ensureIsTag = ensureIsTag;
function getNextSiblings(elem, adapter) {
    var siblings = adapter.getSiblings(elem);
    if (siblings.length <= 1) return [];
    var elemIndex = siblings.indexOf(elem);
    if (elemIndex < 0 || elemIndex === siblings.length - 1) return [];
    return siblings.slice(elemIndex + 1).filter(adapter.isTag);
}
exports.getNextSiblings = getNextSiblings;
function copyOptions(options) {
    // Not copied: context, rootFunc
    return {
        xmlMode: !!options.xmlMode,
        lowerCaseAttributeNames: !!options.lowerCaseAttributeNames,
        lowerCaseTags: !!options.lowerCaseTags,
        quirksMode: !!options.quirksMode,
        cacheResults: !!options.cacheResults,
        pseudos: options.pseudos,
        adapter: options.adapter,
        equals: options.equals
    };
}
var is = function(next, token, options, context, compileToken) {
    var func = compileToken(token, copyOptions(options), context);
    return func === boolbase_1.default.trueFunc ? next : func === boolbase_1.default.falseFunc ? boolbase_1.default.falseFunc : function(elem) {
        return func(elem) && next(elem);
    };
};
/*
 * :not, :has, :is, :matches and :where have to compile selectors
 * doing this in src/pseudos.ts would lead to circular dependencies,
 * so we add them here
 */ exports.subselects = {
    is: is,
    /**
     * `:matches` and `:where` are aliases for `:is`.
     */ matches: is,
    where: is,
    not: function(next, token, options, context, compileToken) {
        var func = compileToken(token, copyOptions(options), context);
        return func === boolbase_1.default.falseFunc ? next : func === boolbase_1.default.trueFunc ? boolbase_1.default.falseFunc : function(elem) {
            return !func(elem) && next(elem);
        };
    },
    has: function(next, subselect, options, _context, compileToken) {
        var adapter = options.adapter;
        var opts = copyOptions(options);
        opts.relativeSelector = true;
        var context = subselect.some(function(s) {
            return s.some(sort_js_1.isTraversal);
        }) ? [
            exports.PLACEHOLDER_ELEMENT
        ] : undefined;
        var compiled = compileToken(subselect, opts, context);
        if (compiled === boolbase_1.default.falseFunc) return boolbase_1.default.falseFunc;
        var hasElement = ensureIsTag(compiled, adapter);
        // If `compiled` is `trueFunc`, we can skip this.
        if (context && compiled !== boolbase_1.default.trueFunc) {
            /*
             * `shouldTestNextSiblings` will only be true if the query starts with
             * a traversal (sibling or adjacent). That means we will always have a context.
             */ var _a = compiled.shouldTestNextSiblings, shouldTestNextSiblings_1 = _a === void 0 ? false : _a;
            return function(elem) {
                if (!next(elem)) return false;
                context[0] = elem;
                var childs = adapter.getChildren(elem);
                var nextElements = shouldTestNextSiblings_1 ? __spreadArray(__spreadArray([], childs, true), getNextSiblings(elem, adapter), true) : childs;
                return adapter.existsOne(hasElement, nextElements);
            };
        }
        return function(elem) {
            return next(elem) && adapter.existsOne(hasElement, adapter.getChildren(elem));
        };
    }
}; //# sourceMappingURL=subselects.js.map
}}),
"[project]/node_modules/css-select/lib/pseudo-selectors/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.compilePseudoSelector = exports.aliases = exports.pseudos = exports.filters = void 0;
var css_what_1 = __turbopack_require__("[project]/node_modules/css-what/lib/es/index.js [app-client] (ecmascript)");
var filters_js_1 = __turbopack_require__("[project]/node_modules/css-select/lib/pseudo-selectors/filters.js [app-client] (ecmascript)");
Object.defineProperty(exports, "filters", {
    enumerable: true,
    get: function() {
        return filters_js_1.filters;
    }
});
var pseudos_js_1 = __turbopack_require__("[project]/node_modules/css-select/lib/pseudo-selectors/pseudos.js [app-client] (ecmascript)");
Object.defineProperty(exports, "pseudos", {
    enumerable: true,
    get: function() {
        return pseudos_js_1.pseudos;
    }
});
var aliases_js_1 = __turbopack_require__("[project]/node_modules/css-select/lib/pseudo-selectors/aliases.js [app-client] (ecmascript)");
Object.defineProperty(exports, "aliases", {
    enumerable: true,
    get: function() {
        return aliases_js_1.aliases;
    }
});
var subselects_js_1 = __turbopack_require__("[project]/node_modules/css-select/lib/pseudo-selectors/subselects.js [app-client] (ecmascript)");
function compilePseudoSelector(next, selector, options, context, compileToken) {
    var _a;
    var name = selector.name, data = selector.data;
    if (Array.isArray(data)) {
        if (!(name in subselects_js_1.subselects)) {
            throw new Error("Unknown pseudo-class :".concat(name, "(").concat(data, ")"));
        }
        return subselects_js_1.subselects[name](next, data, options, context, compileToken);
    }
    var userPseudo = (_a = options.pseudos) === null || _a === void 0 ? void 0 : _a[name];
    var stringPseudo = typeof userPseudo === "string" ? userPseudo : aliases_js_1.aliases[name];
    if (typeof stringPseudo === "string") {
        if (data != null) {
            throw new Error("Pseudo ".concat(name, " doesn't have any arguments"));
        }
        // The alias has to be parsed here, to make sure options are respected.
        var alias = (0, css_what_1.parse)(stringPseudo);
        return subselects_js_1.subselects["is"](next, alias, options, context, compileToken);
    }
    if (typeof userPseudo === "function") {
        (0, pseudos_js_1.verifyPseudoArgs)(userPseudo, name, data, 1);
        return function(elem) {
            return userPseudo(elem, data) && next(elem);
        };
    }
    if (name in filters_js_1.filters) {
        return filters_js_1.filters[name](next, data, options, context);
    }
    if (name in pseudos_js_1.pseudos) {
        var pseudo_1 = pseudos_js_1.pseudos[name];
        (0, pseudos_js_1.verifyPseudoArgs)(pseudo_1, name, data, 2);
        return function(elem) {
            return pseudo_1(elem, options, data) && next(elem);
        };
    }
    throw new Error("Unknown pseudo-class :".concat(name));
}
exports.compilePseudoSelector = compilePseudoSelector; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/css-select/lib/attributes.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.attributeRules = void 0;
var boolbase_1 = __importDefault(__turbopack_require__("[project]/node_modules/boolbase/index.js [app-client] (ecmascript)"));
/**
 * All reserved characters in a regex, used for escaping.
 *
 * Taken from XRegExp, (c) 2007-2020 Steven Levithan under the MIT license
 * https://github.com/slevithan/xregexp/blob/95eeebeb8fac8754d54eafe2b4743661ac1cf028/src/xregexp.js#L794
 */ var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;
function escapeRegex(value) {
    return value.replace(reChars, "\\$&");
}
/**
 * Attributes that are case-insensitive in HTML.
 *
 * @private
 * @see https://html.spec.whatwg.org/multipage/semantics-other.html#case-sensitivity-of-selectors
 */ var caseInsensitiveAttributes = new Set([
    "accept",
    "accept-charset",
    "align",
    "alink",
    "axis",
    "bgcolor",
    "charset",
    "checked",
    "clear",
    "codetype",
    "color",
    "compact",
    "declare",
    "defer",
    "dir",
    "direction",
    "disabled",
    "enctype",
    "face",
    "frame",
    "hreflang",
    "http-equiv",
    "lang",
    "language",
    "link",
    "media",
    "method",
    "multiple",
    "nohref",
    "noresize",
    "noshade",
    "nowrap",
    "readonly",
    "rel",
    "rev",
    "rules",
    "scope",
    "scrolling",
    "selected",
    "shape",
    "target",
    "text",
    "type",
    "valign",
    "valuetype",
    "vlink"
]);
function shouldIgnoreCase(selector, options) {
    return typeof selector.ignoreCase === "boolean" ? selector.ignoreCase : selector.ignoreCase === "quirks" ? !!options.quirksMode : !options.xmlMode && caseInsensitiveAttributes.has(selector.name);
}
/**
 * Attribute selectors
 */ exports.attributeRules = {
    equals: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name;
        var value = data.value;
        if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return function(elem) {
                var attr = adapter.getAttributeValue(elem, name);
                return attr != null && attr.length === value.length && attr.toLowerCase() === value && next(elem);
            };
        }
        return function(elem) {
            return adapter.getAttributeValue(elem, name) === value && next(elem);
        };
    },
    hyphen: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name;
        var value = data.value;
        var len = value.length;
        if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return function hyphenIC(elem) {
                var attr = adapter.getAttributeValue(elem, name);
                return attr != null && (attr.length === len || attr.charAt(len) === "-") && attr.substr(0, len).toLowerCase() === value && next(elem);
            };
        }
        return function hyphen(elem) {
            var attr = adapter.getAttributeValue(elem, name);
            return attr != null && (attr.length === len || attr.charAt(len) === "-") && attr.substr(0, len) === value && next(elem);
        };
    },
    element: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name, value = data.value;
        if (/\s/.test(value)) {
            return boolbase_1.default.falseFunc;
        }
        var regex = new RegExp("(?:^|\\s)".concat(escapeRegex(value), "(?:$|\\s)"), shouldIgnoreCase(data, options) ? "i" : "");
        return function element(elem) {
            var attr = adapter.getAttributeValue(elem, name);
            return attr != null && attr.length >= value.length && regex.test(attr) && next(elem);
        };
    },
    exists: function(next, _a, _b) {
        var name = _a.name;
        var adapter = _b.adapter;
        return function(elem) {
            return adapter.hasAttrib(elem, name) && next(elem);
        };
    },
    start: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name;
        var value = data.value;
        var len = value.length;
        if (len === 0) {
            return boolbase_1.default.falseFunc;
        }
        if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return function(elem) {
                var attr = adapter.getAttributeValue(elem, name);
                return attr != null && attr.length >= len && attr.substr(0, len).toLowerCase() === value && next(elem);
            };
        }
        return function(elem) {
            var _a;
            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.startsWith(value)) && next(elem);
        };
    },
    end: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name;
        var value = data.value;
        var len = -value.length;
        if (len === 0) {
            return boolbase_1.default.falseFunc;
        }
        if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return function(elem) {
                var _a;
                return ((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.substr(len).toLowerCase()) === value && next(elem);
            };
        }
        return function(elem) {
            var _a;
            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.endsWith(value)) && next(elem);
        };
    },
    any: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name, value = data.value;
        if (value === "") {
            return boolbase_1.default.falseFunc;
        }
        if (shouldIgnoreCase(data, options)) {
            var regex_1 = new RegExp(escapeRegex(value), "i");
            return function anyIC(elem) {
                var attr = adapter.getAttributeValue(elem, name);
                return attr != null && attr.length >= value.length && regex_1.test(attr) && next(elem);
            };
        }
        return function(elem) {
            var _a;
            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.includes(value)) && next(elem);
        };
    },
    not: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name;
        var value = data.value;
        if (value === "") {
            return function(elem) {
                return !!adapter.getAttributeValue(elem, name) && next(elem);
            };
        } else if (shouldIgnoreCase(data, options)) {
            value = value.toLowerCase();
            return function(elem) {
                var attr = adapter.getAttributeValue(elem, name);
                return (attr == null || attr.length !== value.length || attr.toLowerCase() !== value) && next(elem);
            };
        }
        return function(elem) {
            return adapter.getAttributeValue(elem, name) !== value && next(elem);
        };
    }
}; //# sourceMappingURL=attributes.js.map
}}),
"[project]/node_modules/css-select/lib/general.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.compileGeneralSelector = void 0;
var attributes_js_1 = __turbopack_require__("[project]/node_modules/css-select/lib/attributes.js [app-client] (ecmascript)");
var index_js_1 = __turbopack_require__("[project]/node_modules/css-select/lib/pseudo-selectors/index.js [app-client] (ecmascript)");
var css_what_1 = __turbopack_require__("[project]/node_modules/css-what/lib/es/index.js [app-client] (ecmascript)");
function getElementParent(node, adapter) {
    var parent = adapter.getParent(node);
    if (parent && adapter.isTag(parent)) {
        return parent;
    }
    return null;
}
/*
 * All available rules
 */ function compileGeneralSelector(next, selector, options, context, compileToken) {
    var adapter = options.adapter, equals = options.equals;
    switch(selector.type){
        case css_what_1.SelectorType.PseudoElement:
            {
                throw new Error("Pseudo-elements are not supported by css-select");
            }
        case css_what_1.SelectorType.ColumnCombinator:
            {
                throw new Error("Column combinators are not yet supported by css-select");
            }
        case css_what_1.SelectorType.Attribute:
            {
                if (selector.namespace != null) {
                    throw new Error("Namespaced attributes are not yet supported by css-select");
                }
                if (!options.xmlMode || options.lowerCaseAttributeNames) {
                    selector.name = selector.name.toLowerCase();
                }
                return attributes_js_1.attributeRules[selector.action](next, selector, options);
            }
        case css_what_1.SelectorType.Pseudo:
            {
                return (0, index_js_1.compilePseudoSelector)(next, selector, options, context, compileToken);
            }
        // Tags
        case css_what_1.SelectorType.Tag:
            {
                if (selector.namespace != null) {
                    throw new Error("Namespaced tag names are not yet supported by css-select");
                }
                var name_1 = selector.name;
                if (!options.xmlMode || options.lowerCaseTags) {
                    name_1 = name_1.toLowerCase();
                }
                return function tag(elem) {
                    return adapter.getName(elem) === name_1 && next(elem);
                };
            }
        // Traversal
        case css_what_1.SelectorType.Descendant:
            {
                if (options.cacheResults === false || typeof WeakSet === "undefined") {
                    return function descendant(elem) {
                        var current = elem;
                        while(current = getElementParent(current, adapter)){
                            if (next(current)) {
                                return true;
                            }
                        }
                        return false;
                    };
                }
                // @ts-expect-error `ElementNode` is not extending object
                var isFalseCache_1 = new WeakSet();
                return function cachedDescendant(elem) {
                    var current = elem;
                    while(current = getElementParent(current, adapter)){
                        if (!isFalseCache_1.has(current)) {
                            if (adapter.isTag(current) && next(current)) {
                                return true;
                            }
                            isFalseCache_1.add(current);
                        }
                    }
                    return false;
                };
            }
        case "_flexibleDescendant":
            {
                // Include element itself, only used while querying an array
                return function flexibleDescendant(elem) {
                    var current = elem;
                    do {
                        if (next(current)) return true;
                    }while (current = getElementParent(current, adapter))
                    return false;
                };
            }
        case css_what_1.SelectorType.Parent:
            {
                return function parent(elem) {
                    return adapter.getChildren(elem).some(function(elem) {
                        return adapter.isTag(elem) && next(elem);
                    });
                };
            }
        case css_what_1.SelectorType.Child:
            {
                return function child(elem) {
                    var parent = adapter.getParent(elem);
                    return parent != null && adapter.isTag(parent) && next(parent);
                };
            }
        case css_what_1.SelectorType.Sibling:
            {
                return function sibling(elem) {
                    var siblings = adapter.getSiblings(elem);
                    for(var i = 0; i < siblings.length; i++){
                        var currentSibling = siblings[i];
                        if (equals(elem, currentSibling)) break;
                        if (adapter.isTag(currentSibling) && next(currentSibling)) {
                            return true;
                        }
                    }
                    return false;
                };
            }
        case css_what_1.SelectorType.Adjacent:
            {
                if (adapter.prevElementSibling) {
                    return function adjacent(elem) {
                        var previous = adapter.prevElementSibling(elem);
                        return previous != null && next(previous);
                    };
                }
                return function adjacent(elem) {
                    var siblings = adapter.getSiblings(elem);
                    var lastElement;
                    for(var i = 0; i < siblings.length; i++){
                        var currentSibling = siblings[i];
                        if (equals(elem, currentSibling)) break;
                        if (adapter.isTag(currentSibling)) {
                            lastElement = currentSibling;
                        }
                    }
                    return !!lastElement && next(lastElement);
                };
            }
        case css_what_1.SelectorType.Universal:
            {
                if (selector.namespace != null && selector.namespace !== "*") {
                    throw new Error("Namespaced universal selectors are not yet supported by css-select");
                }
                return next;
            }
    }
}
exports.compileGeneralSelector = compileGeneralSelector; //# sourceMappingURL=general.js.map
}}),
"[project]/node_modules/css-select/lib/compile.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.compileToken = exports.compileUnsafe = exports.compile = void 0;
var css_what_1 = __turbopack_require__("[project]/node_modules/css-what/lib/es/index.js [app-client] (ecmascript)");
var boolbase_1 = __importDefault(__turbopack_require__("[project]/node_modules/boolbase/index.js [app-client] (ecmascript)"));
var sort_js_1 = __importStar(__turbopack_require__("[project]/node_modules/css-select/lib/sort.js [app-client] (ecmascript)"));
var general_js_1 = __turbopack_require__("[project]/node_modules/css-select/lib/general.js [app-client] (ecmascript)");
var subselects_js_1 = __turbopack_require__("[project]/node_modules/css-select/lib/pseudo-selectors/subselects.js [app-client] (ecmascript)");
/**
 * Compiles a selector to an executable function.
 *
 * @param selector Selector to compile.
 * @param options Compilation options.
 * @param context Optional context for the selector.
 */ function compile(selector, options, context) {
    var next = compileUnsafe(selector, options, context);
    return (0, subselects_js_1.ensureIsTag)(next, options.adapter);
}
exports.compile = compile;
function compileUnsafe(selector, options, context) {
    var token = typeof selector === "string" ? (0, css_what_1.parse)(selector) : selector;
    return compileToken(token, options, context);
}
exports.compileUnsafe = compileUnsafe;
function includesScopePseudo(t) {
    return t.type === css_what_1.SelectorType.Pseudo && (t.name === "scope" || Array.isArray(t.data) && t.data.some(function(data) {
        return data.some(includesScopePseudo);
    }));
}
var DESCENDANT_TOKEN = {
    type: css_what_1.SelectorType.Descendant
};
var FLEXIBLE_DESCENDANT_TOKEN = {
    type: "_flexibleDescendant"
};
var SCOPE_TOKEN = {
    type: css_what_1.SelectorType.Pseudo,
    name: "scope",
    data: null
};
/*
 * CSS 4 Spec (Draft): 3.4.1. Absolutizing a Relative Selector
 * http://www.w3.org/TR/selectors4/#absolutizing
 */ function absolutize(token, _a, context) {
    var adapter = _a.adapter;
    // TODO Use better check if the context is a document
    var hasContext = !!(context === null || context === void 0 ? void 0 : context.every(function(e) {
        var parent = adapter.isTag(e) && adapter.getParent(e);
        return e === subselects_js_1.PLACEHOLDER_ELEMENT || parent && adapter.isTag(parent);
    }));
    for(var _i = 0, token_1 = token; _i < token_1.length; _i++){
        var t = token_1[_i];
        if (t.length > 0 && (0, sort_js_1.isTraversal)(t[0]) && t[0].type !== css_what_1.SelectorType.Descendant) {
        // Don't continue in else branch
        } else if (hasContext && !t.some(includesScopePseudo)) {
            t.unshift(DESCENDANT_TOKEN);
        } else {
            continue;
        }
        t.unshift(SCOPE_TOKEN);
    }
}
function compileToken(token, options, context) {
    var _a;
    token.forEach(sort_js_1.default);
    context = (_a = options.context) !== null && _a !== void 0 ? _a : context;
    var isArrayContext = Array.isArray(context);
    var finalContext = context && (Array.isArray(context) ? context : [
        context
    ]);
    // Check if the selector is relative
    if (options.relativeSelector !== false) {
        absolutize(token, options, finalContext);
    } else if (token.some(function(t) {
        return t.length > 0 && (0, sort_js_1.isTraversal)(t[0]);
    })) {
        throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");
    }
    var shouldTestNextSiblings = false;
    var query = token.map(function(rules) {
        if (rules.length >= 2) {
            var first = rules[0], second = rules[1];
            if (first.type !== css_what_1.SelectorType.Pseudo || first.name !== "scope") {
            // Ignore
            } else if (isArrayContext && second.type === css_what_1.SelectorType.Descendant) {
                rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
            } else if (second.type === css_what_1.SelectorType.Adjacent || second.type === css_what_1.SelectorType.Sibling) {
                shouldTestNextSiblings = true;
            }
        }
        return compileRules(rules, options, finalContext);
    }).reduce(reduceRules, boolbase_1.default.falseFunc);
    query.shouldTestNextSiblings = shouldTestNextSiblings;
    return query;
}
exports.compileToken = compileToken;
function compileRules(rules, options, context) {
    var _a;
    return rules.reduce(function(previous, rule) {
        return previous === boolbase_1.default.falseFunc ? boolbase_1.default.falseFunc : (0, general_js_1.compileGeneralSelector)(previous, rule, options, context, compileToken);
    }, (_a = options.rootFunc) !== null && _a !== void 0 ? _a : boolbase_1.default.trueFunc);
}
function reduceRules(a, b) {
    if (b === boolbase_1.default.falseFunc || a === boolbase_1.default.trueFunc) {
        return a;
    }
    if (a === boolbase_1.default.falseFunc || b === boolbase_1.default.trueFunc) {
        return b;
    }
    return function combine(elem) {
        return a(elem) || b(elem);
    };
} //# sourceMappingURL=compile.js.map
}}),
"[project]/node_modules/css-select/lib/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.aliases = exports.pseudos = exports.filters = exports.is = exports.selectOne = exports.selectAll = exports.prepareContext = exports._compileToken = exports._compileUnsafe = exports.compile = void 0;
var DomUtils = __importStar(__turbopack_require__("[project]/node_modules/domutils/lib/index.js [app-client] (ecmascript)"));
var boolbase_1 = __importDefault(__turbopack_require__("[project]/node_modules/boolbase/index.js [app-client] (ecmascript)"));
var compile_js_1 = __turbopack_require__("[project]/node_modules/css-select/lib/compile.js [app-client] (ecmascript)");
var subselects_js_1 = __turbopack_require__("[project]/node_modules/css-select/lib/pseudo-selectors/subselects.js [app-client] (ecmascript)");
var defaultEquals = function(a, b) {
    return a === b;
};
var defaultOptions = {
    adapter: DomUtils,
    equals: defaultEquals
};
function convertOptionFormats(options) {
    var _a, _b, _c, _d;
    /*
     * We force one format of options to the other one.
     */ // @ts-expect-error Default options may have incompatible `Node` / `ElementNode`.
    var opts = options !== null && options !== void 0 ? options : defaultOptions;
    // @ts-expect-error Same as above.
    (_a = opts.adapter) !== null && _a !== void 0 ? _a : opts.adapter = DomUtils;
    // @ts-expect-error `equals` does not exist on `Options`
    (_b = opts.equals) !== null && _b !== void 0 ? _b : opts.equals = (_d = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null && _d !== void 0 ? _d : defaultEquals;
    return opts;
}
function wrapCompile(func) {
    return function addAdapter(selector, options, context) {
        var opts = convertOptionFormats(options);
        return func(selector, opts, context);
    };
}
/**
 * Compiles the query, returns a function.
 */ exports.compile = wrapCompile(compile_js_1.compile);
exports._compileUnsafe = wrapCompile(compile_js_1.compileUnsafe);
exports._compileToken = wrapCompile(compile_js_1.compileToken);
function getSelectorFunc(searchFunc) {
    return function select(query, elements, options) {
        var opts = convertOptionFormats(options);
        if (typeof query !== "function") {
            query = (0, compile_js_1.compileUnsafe)(query, opts, elements);
        }
        var filteredElements = prepareContext(elements, opts.adapter, query.shouldTestNextSiblings);
        return searchFunc(query, filteredElements, opts);
    };
}
function prepareContext(elems, adapter, shouldTestNextSiblings) {
    if (shouldTestNextSiblings === void 0) {
        shouldTestNextSiblings = false;
    }
    /*
     * Add siblings if the query requires them.
     * See https://github.com/fb55/css-select/pull/43#issuecomment-225414692
     */ if (shouldTestNextSiblings) {
        elems = appendNextSiblings(elems, adapter);
    }
    return Array.isArray(elems) ? adapter.removeSubsets(elems) : adapter.getChildren(elems);
}
exports.prepareContext = prepareContext;
function appendNextSiblings(elem, adapter) {
    // Order matters because jQuery seems to check the children before the siblings
    var elems = Array.isArray(elem) ? elem.slice(0) : [
        elem
    ];
    var elemsLength = elems.length;
    for(var i = 0; i < elemsLength; i++){
        var nextSiblings = (0, subselects_js_1.getNextSiblings)(elems[i], adapter);
        elems.push.apply(elems, nextSiblings);
    }
    return elems;
}
/**
 * @template Node The generic Node type for the DOM adapter being used.
 * @template ElementNode The Node type for elements for the DOM adapter being used.
 * @param elems Elements to query. If it is an element, its children will be queried..
 * @param query can be either a CSS selector string or a compiled query function.
 * @param [options] options for querying the document.
 * @see compile for supported selector queries.
 * @returns All matching elements.
 *
 */ exports.selectAll = getSelectorFunc(function(query, elems, options) {
    return query === boolbase_1.default.falseFunc || !elems || elems.length === 0 ? [] : options.adapter.findAll(query, elems);
});
/**
 * @template Node The generic Node type for the DOM adapter being used.
 * @template ElementNode The Node type for elements for the DOM adapter being used.
 * @param elems Elements to query. If it is an element, its children will be queried..
 * @param query can be either a CSS selector string or a compiled query function.
 * @param [options] options for querying the document.
 * @see compile for supported selector queries.
 * @returns the first match, or null if there was no match.
 */ exports.selectOne = getSelectorFunc(function(query, elems, options) {
    return query === boolbase_1.default.falseFunc || !elems || elems.length === 0 ? null : options.adapter.findOne(query, elems);
});
/**
 * Tests whether or not an element is matched by query.
 *
 * @template Node The generic Node type for the DOM adapter being used.
 * @template ElementNode The Node type for elements for the DOM adapter being used.
 * @param elem The element to test if it matches the query.
 * @param query can be either a CSS selector string or a compiled query function.
 * @param [options] options for querying the document.
 * @see compile for supported selector queries.
 * @returns
 */ function is(elem, query, options) {
    var opts = convertOptionFormats(options);
    return (typeof query === "function" ? query : (0, compile_js_1.compile)(query, opts))(elem);
}
exports.is = is;
/**
 * Alias for selectAll(query, elems, options).
 * @see [compile] for supported selector queries.
 */ exports.default = exports.selectAll;
// Export filters, pseudos and aliases to allow users to supply their own.
/** @deprecated Use the `pseudos` option instead. */ var index_js_1 = __turbopack_require__("[project]/node_modules/css-select/lib/pseudo-selectors/index.js [app-client] (ecmascript)");
Object.defineProperty(exports, "filters", {
    enumerable: true,
    get: function() {
        return index_js_1.filters;
    }
});
Object.defineProperty(exports, "pseudos", {
    enumerable: true,
    get: function() {
        return index_js_1.pseudos;
    }
});
Object.defineProperty(exports, "aliases", {
    enumerable: true,
    get: function() {
        return index_js_1.aliases;
    }
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/domelementtype/lib/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;
/** Types of elements found in htmlparser2's DOM */ var ElementType;
(function(ElementType) {
    /** Type for the root element of a document */ ElementType["Root"] = "root";
    /** Type for Text */ ElementType["Text"] = "text";
    /** Type for <? ... ?> */ ElementType["Directive"] = "directive";
    /** Type for <!-- ... --> */ ElementType["Comment"] = "comment";
    /** Type for <script> tags */ ElementType["Script"] = "script";
    /** Type for <style> tags */ ElementType["Style"] = "style";
    /** Type for Any tag */ ElementType["Tag"] = "tag";
    /** Type for <![CDATA[ ... ]]> */ ElementType["CDATA"] = "cdata";
    /** Type for <!doctype ...> */ ElementType["Doctype"] = "doctype";
})(ElementType = exports.ElementType || (exports.ElementType = {}));
/**
 * Tests whether an element is a tag or not.
 *
 * @param elem Element to test
 */ function isTag(elem) {
    return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;
}
exports.isTag = isTag;
// Exports for backwards compatibility
/** Type for the root element of a document */ exports.Root = ElementType.Root;
/** Type for Text */ exports.Text = ElementType.Text;
/** Type for <? ... ?> */ exports.Directive = ElementType.Directive;
/** Type for <!-- ... --> */ exports.Comment = ElementType.Comment;
/** Type for <script> tags */ exports.Script = ElementType.Script;
/** Type for <style> tags */ exports.Style = ElementType.Style;
/** Type for Any tag */ exports.Tag = ElementType.Tag;
/** Type for <![CDATA[ ... ]]> */ exports.CDATA = ElementType.CDATA;
/** Type for <!doctype ...> */ exports.Doctype = ElementType.Doctype;
}}),
"[project]/node_modules/domhandler/lib/node.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.CDATA = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
var domelementtype_1 = __turbopack_require__("[project]/node_modules/domelementtype/lib/index.js [app-client] (ecmascript)");
/**
 * This object will be used as the prototype for Nodes when creating a
 * DOM-Level-1-compliant structure.
 */ var Node = function() {
    function Node() {
        /** Parent of the node */ this.parent = null;
        /** Previous sibling */ this.prev = null;
        /** Next sibling */ this.next = null;
        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */ this.startIndex = null;
        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */ this.endIndex = null;
    }
    Object.defineProperty(Node.prototype, "parentNode", {
        // Read-write aliases for properties
        /**
         * Same as {@link parent}.
         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
         */ get: function() {
            return this.parent;
        },
        set: function(parent) {
            this.parent = parent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "previousSibling", {
        /**
         * Same as {@link prev}.
         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
         */ get: function() {
            return this.prev;
        },
        set: function(prev) {
            this.prev = prev;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "nextSibling", {
        /**
         * Same as {@link next}.
         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
         */ get: function() {
            return this.next;
        },
        set: function(next) {
            this.next = next;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Clone this node, and optionally its children.
     *
     * @param recursive Clone child nodes as well.
     * @returns A clone of the node.
     */ Node.prototype.cloneNode = function(recursive) {
        if (recursive === void 0) {
            recursive = false;
        }
        return cloneNode(this, recursive);
    };
    return Node;
}();
exports.Node = Node;
/**
 * A node that contains some data.
 */ var DataNode = function(_super) {
    __extends(DataNode, _super);
    /**
     * @param data The content of the data node
     */ function DataNode(data) {
        var _this = _super.call(this) || this;
        _this.data = data;
        return _this;
    }
    Object.defineProperty(DataNode.prototype, "nodeValue", {
        /**
         * Same as {@link data}.
         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
         */ get: function() {
            return this.data;
        },
        set: function(data) {
            this.data = data;
        },
        enumerable: false,
        configurable: true
    });
    return DataNode;
}(Node);
exports.DataNode = DataNode;
/**
 * Text within the document.
 */ var Text = function(_super) {
    __extends(Text, _super);
    function Text() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = domelementtype_1.ElementType.Text;
        return _this;
    }
    Object.defineProperty(Text.prototype, "nodeType", {
        get: function() {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    return Text;
}(DataNode);
exports.Text = Text;
/**
 * Comments within the document.
 */ var Comment = function(_super) {
    __extends(Comment, _super);
    function Comment() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = domelementtype_1.ElementType.Comment;
        return _this;
    }
    Object.defineProperty(Comment.prototype, "nodeType", {
        get: function() {
            return 8;
        },
        enumerable: false,
        configurable: true
    });
    return Comment;
}(DataNode);
exports.Comment = Comment;
/**
 * Processing instructions, including doc types.
 */ var ProcessingInstruction = function(_super) {
    __extends(ProcessingInstruction, _super);
    function ProcessingInstruction(name, data) {
        var _this = _super.call(this, data) || this;
        _this.name = name;
        _this.type = domelementtype_1.ElementType.Directive;
        return _this;
    }
    Object.defineProperty(ProcessingInstruction.prototype, "nodeType", {
        get: function() {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    return ProcessingInstruction;
}(DataNode);
exports.ProcessingInstruction = ProcessingInstruction;
/**
 * A `Node` that can have children.
 */ var NodeWithChildren = function(_super) {
    __extends(NodeWithChildren, _super);
    /**
     * @param children Children of the node. Only certain node types can have children.
     */ function NodeWithChildren(children) {
        var _this = _super.call(this) || this;
        _this.children = children;
        return _this;
    }
    Object.defineProperty(NodeWithChildren.prototype, "firstChild", {
        // Aliases
        /** First child of the node. */ get: function() {
            var _a;
            return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeWithChildren.prototype, "lastChild", {
        /** Last child of the node. */ get: function() {
            return this.children.length > 0 ? this.children[this.children.length - 1] : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeWithChildren.prototype, "childNodes", {
        /**
         * Same as {@link children}.
         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
         */ get: function() {
            return this.children;
        },
        set: function(children) {
            this.children = children;
        },
        enumerable: false,
        configurable: true
    });
    return NodeWithChildren;
}(Node);
exports.NodeWithChildren = NodeWithChildren;
var CDATA = function(_super) {
    __extends(CDATA, _super);
    function CDATA() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = domelementtype_1.ElementType.CDATA;
        return _this;
    }
    Object.defineProperty(CDATA.prototype, "nodeType", {
        get: function() {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    return CDATA;
}(NodeWithChildren);
exports.CDATA = CDATA;
/**
 * The root node of the document.
 */ var Document = function(_super) {
    __extends(Document, _super);
    function Document() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = domelementtype_1.ElementType.Root;
        return _this;
    }
    Object.defineProperty(Document.prototype, "nodeType", {
        get: function() {
            return 9;
        },
        enumerable: false,
        configurable: true
    });
    return Document;
}(NodeWithChildren);
exports.Document = Document;
/**
 * An element within the DOM.
 */ var Element = function(_super) {
    __extends(Element, _super);
    /**
     * @param name Name of the tag, eg. `div`, `span`.
     * @param attribs Object mapping attribute names to attribute values.
     * @param children Children of the node.
     */ function Element(name, attribs, children, type) {
        if (children === void 0) {
            children = [];
        }
        if (type === void 0) {
            type = name === "script" ? domelementtype_1.ElementType.Script : name === "style" ? domelementtype_1.ElementType.Style : domelementtype_1.ElementType.Tag;
        }
        var _this = _super.call(this, children) || this;
        _this.name = name;
        _this.attribs = attribs;
        _this.type = type;
        return _this;
    }
    Object.defineProperty(Element.prototype, "nodeType", {
        get: function() {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "tagName", {
        // DOM Level 1 aliases
        /**
         * Same as {@link name}.
         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
         */ get: function() {
            return this.name;
        },
        set: function(name) {
            this.name = name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "attributes", {
        get: function() {
            var _this = this;
            return Object.keys(this.attribs).map(function(name) {
                var _a, _b;
                return {
                    name: name,
                    value: _this.attribs[name],
                    namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
                    prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
                };
            });
        },
        enumerable: false,
        configurable: true
    });
    return Element;
}(NodeWithChildren);
exports.Element = Element;
/**
 * @param node Node to check.
 * @returns `true` if the node is a `Element`, `false` otherwise.
 */ function isTag(node) {
    return (0, domelementtype_1.isTag)(node);
}
exports.isTag = isTag;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `CDATA`, `false` otherwise.
 */ function isCDATA(node) {
    return node.type === domelementtype_1.ElementType.CDATA;
}
exports.isCDATA = isCDATA;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `Text`, `false` otherwise.
 */ function isText(node) {
    return node.type === domelementtype_1.ElementType.Text;
}
exports.isText = isText;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `Comment`, `false` otherwise.
 */ function isComment(node) {
    return node.type === domelementtype_1.ElementType.Comment;
}
exports.isComment = isComment;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
 */ function isDirective(node) {
    return node.type === domelementtype_1.ElementType.Directive;
}
exports.isDirective = isDirective;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
 */ function isDocument(node) {
    return node.type === domelementtype_1.ElementType.Root;
}
exports.isDocument = isDocument;
/**
 * @param node Node to check.
 * @returns `true` if the node has children, `false` otherwise.
 */ function hasChildren(node) {
    return Object.prototype.hasOwnProperty.call(node, "children");
}
exports.hasChildren = hasChildren;
/**
 * Clone a node, and optionally its children.
 *
 * @param recursive Clone child nodes as well.
 * @returns A clone of the node.
 */ function cloneNode(node, recursive) {
    if (recursive === void 0) {
        recursive = false;
    }
    var result;
    if (isText(node)) {
        result = new Text(node.data);
    } else if (isComment(node)) {
        result = new Comment(node.data);
    } else if (isTag(node)) {
        var children = recursive ? cloneChildren(node.children) : [];
        var clone_1 = new Element(node.name, __assign({}, node.attribs), children);
        children.forEach(function(child) {
            return child.parent = clone_1;
        });
        if (node.namespace != null) {
            clone_1.namespace = node.namespace;
        }
        if (node["x-attribsNamespace"]) {
            clone_1["x-attribsNamespace"] = __assign({}, node["x-attribsNamespace"]);
        }
        if (node["x-attribsPrefix"]) {
            clone_1["x-attribsPrefix"] = __assign({}, node["x-attribsPrefix"]);
        }
        result = clone_1;
    } else if (isCDATA(node)) {
        var children = recursive ? cloneChildren(node.children) : [];
        var clone_2 = new CDATA(children);
        children.forEach(function(child) {
            return child.parent = clone_2;
        });
        result = clone_2;
    } else if (isDocument(node)) {
        var children = recursive ? cloneChildren(node.children) : [];
        var clone_3 = new Document(children);
        children.forEach(function(child) {
            return child.parent = clone_3;
        });
        if (node["x-mode"]) {
            clone_3["x-mode"] = node["x-mode"];
        }
        result = clone_3;
    } else if (isDirective(node)) {
        var instruction = new ProcessingInstruction(node.name, node.data);
        if (node["x-name"] != null) {
            instruction["x-name"] = node["x-name"];
            instruction["x-publicId"] = node["x-publicId"];
            instruction["x-systemId"] = node["x-systemId"];
        }
        result = instruction;
    } else {
        throw new Error("Not implemented yet: ".concat(node.type));
    }
    result.startIndex = node.startIndex;
    result.endIndex = node.endIndex;
    if (node.sourceCodeLocation != null) {
        result.sourceCodeLocation = node.sourceCodeLocation;
    }
    return result;
}
exports.cloneNode = cloneNode;
function cloneChildren(childs) {
    var children = childs.map(function(child) {
        return cloneNode(child, true);
    });
    for(var i = 1; i < children.length; i++){
        children[i].prev = children[i - 1];
        children[i - 1].next = children[i];
    }
    return children;
}
}}),
"[project]/node_modules/domhandler/lib/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DomHandler = void 0;
var domelementtype_1 = __turbopack_require__("[project]/node_modules/domelementtype/lib/index.js [app-client] (ecmascript)");
var node_js_1 = __turbopack_require__("[project]/node_modules/domhandler/lib/node.js [app-client] (ecmascript)");
__exportStar(__turbopack_require__("[project]/node_modules/domhandler/lib/node.js [app-client] (ecmascript)"), exports);
// Default options
var defaultOpts = {
    withStartIndices: false,
    withEndIndices: false,
    xmlMode: false
};
var DomHandler = function() {
    /**
     * @param callback Called once parsing has completed.
     * @param options Settings for the handler.
     * @param elementCB Callback whenever a tag is closed.
     */ function DomHandler(callback, options, elementCB) {
        /** The elements of the DOM */ this.dom = [];
        /** The root element for the DOM */ this.root = new node_js_1.Document(this.dom);
        /** Indicated whether parsing has been completed. */ this.done = false;
        /** Stack of open tags. */ this.tagStack = [
            this.root
        ];
        /** A data node that is still being written to. */ this.lastNode = null;
        /** Reference to the parser instance. Used for location information. */ this.parser = null;
        // Make it possible to skip arguments, for backwards-compatibility
        if (typeof options === "function") {
            elementCB = options;
            options = defaultOpts;
        }
        if (typeof callback === "object") {
            options = callback;
            callback = undefined;
        }
        this.callback = callback !== null && callback !== void 0 ? callback : null;
        this.options = options !== null && options !== void 0 ? options : defaultOpts;
        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
    }
    DomHandler.prototype.onparserinit = function(parser) {
        this.parser = parser;
    };
    // Resets the handler back to starting state
    DomHandler.prototype.onreset = function() {
        this.dom = [];
        this.root = new node_js_1.Document(this.dom);
        this.done = false;
        this.tagStack = [
            this.root
        ];
        this.lastNode = null;
        this.parser = null;
    };
    // Signals the handler that parsing is done
    DomHandler.prototype.onend = function() {
        if (this.done) return;
        this.done = true;
        this.parser = null;
        this.handleCallback(null);
    };
    DomHandler.prototype.onerror = function(error) {
        this.handleCallback(error);
    };
    DomHandler.prototype.onclosetag = function() {
        this.lastNode = null;
        var elem = this.tagStack.pop();
        if (this.options.withEndIndices) {
            elem.endIndex = this.parser.endIndex;
        }
        if (this.elementCB) this.elementCB(elem);
    };
    DomHandler.prototype.onopentag = function(name, attribs) {
        var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : undefined;
        var element = new node_js_1.Element(name, attribs, undefined, type);
        this.addNode(element);
        this.tagStack.push(element);
    };
    DomHandler.prototype.ontext = function(data) {
        var lastNode = this.lastNode;
        if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {
            lastNode.data += data;
            if (this.options.withEndIndices) {
                lastNode.endIndex = this.parser.endIndex;
            }
        } else {
            var node = new node_js_1.Text(data);
            this.addNode(node);
            this.lastNode = node;
        }
    };
    DomHandler.prototype.oncomment = function(data) {
        if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {
            this.lastNode.data += data;
            return;
        }
        var node = new node_js_1.Comment(data);
        this.addNode(node);
        this.lastNode = node;
    };
    DomHandler.prototype.oncommentend = function() {
        this.lastNode = null;
    };
    DomHandler.prototype.oncdatastart = function() {
        var text = new node_js_1.Text("");
        var node = new node_js_1.CDATA([
            text
        ]);
        this.addNode(node);
        text.parent = node;
        this.lastNode = text;
    };
    DomHandler.prototype.oncdataend = function() {
        this.lastNode = null;
    };
    DomHandler.prototype.onprocessinginstruction = function(name, data) {
        var node = new node_js_1.ProcessingInstruction(name, data);
        this.addNode(node);
    };
    DomHandler.prototype.handleCallback = function(error) {
        if (typeof this.callback === "function") {
            this.callback(error, this.dom);
        } else if (error) {
            throw error;
        }
    };
    DomHandler.prototype.addNode = function(node) {
        var parent = this.tagStack[this.tagStack.length - 1];
        var previousSibling = parent.children[parent.children.length - 1];
        if (this.options.withStartIndices) {
            node.startIndex = this.parser.startIndex;
        }
        if (this.options.withEndIndices) {
            node.endIndex = this.parser.endIndex;
        }
        parent.children.push(node);
        if (previousSibling) {
            node.prev = previousSibling;
            previousSibling.next = node;
        }
        node.parent = parent;
        this.lastNode = null;
    };
    return DomHandler;
}();
exports.DomHandler = DomHandler;
exports.default = DomHandler;
}}),
"[project]/node_modules/dom-serializer/lib/foreignNames.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.attributeNames = exports.elementNames = void 0;
exports.elementNames = new Map([
    "altGlyph",
    "altGlyphDef",
    "altGlyphItem",
    "animateColor",
    "animateMotion",
    "animateTransform",
    "clipPath",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feDropShadow",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "foreignObject",
    "glyphRef",
    "linearGradient",
    "radialGradient",
    "textPath"
].map(function(val) {
    return [
        val.toLowerCase(),
        val
    ];
}));
exports.attributeNames = new Map([
    "definitionURL",
    "attributeName",
    "attributeType",
    "baseFrequency",
    "baseProfile",
    "calcMode",
    "clipPathUnits",
    "diffuseConstant",
    "edgeMode",
    "filterUnits",
    "glyphRef",
    "gradientTransform",
    "gradientUnits",
    "kernelMatrix",
    "kernelUnitLength",
    "keyPoints",
    "keySplines",
    "keyTimes",
    "lengthAdjust",
    "limitingConeAngle",
    "markerHeight",
    "markerUnits",
    "markerWidth",
    "maskContentUnits",
    "maskUnits",
    "numOctaves",
    "pathLength",
    "patternContentUnits",
    "patternTransform",
    "patternUnits",
    "pointsAtX",
    "pointsAtY",
    "pointsAtZ",
    "preserveAlpha",
    "preserveAspectRatio",
    "primitiveUnits",
    "refX",
    "refY",
    "repeatCount",
    "repeatDur",
    "requiredExtensions",
    "requiredFeatures",
    "specularConstant",
    "specularExponent",
    "spreadMethod",
    "startOffset",
    "stdDeviation",
    "stitchTiles",
    "surfaceScale",
    "systemLanguage",
    "tableValues",
    "targetX",
    "targetY",
    "textLength",
    "viewBox",
    "viewTarget",
    "xChannelSelector",
    "yChannelSelector",
    "zoomAndPan"
].map(function(val) {
    return [
        val.toLowerCase(),
        val
    ];
}));
}}),
"[project]/node_modules/dom-serializer/lib/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.render = void 0;
/*
 * Module dependencies
 */ var ElementType = __importStar(__turbopack_require__("[project]/node_modules/domelementtype/lib/index.js [app-client] (ecmascript)"));
var entities_1 = __turbopack_require__("[project]/node_modules/entities/lib/index.js [app-client] (ecmascript)");
/**
 * Mixed-case SVG and MathML tags & attributes
 * recognized by the HTML parser.
 *
 * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign
 */ var foreignNames_js_1 = __turbopack_require__("[project]/node_modules/dom-serializer/lib/foreignNames.js [app-client] (ecmascript)");
var unencodedElements = new Set([
    "style",
    "script",
    "xmp",
    "iframe",
    "noembed",
    "noframes",
    "plaintext",
    "noscript"
]);
function replaceQuotes(value) {
    return value.replace(/"/g, "&quot;");
}
/**
 * Format attributes
 */ function formatAttributes(attributes, opts) {
    var _a;
    if (!attributes) return;
    var encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false ? replaceQuotes : opts.xmlMode || opts.encodeEntities !== "utf8" ? entities_1.encodeXML : entities_1.escapeAttribute;
    return Object.keys(attributes).map(function(key) {
        var _a, _b;
        var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";
        if (opts.xmlMode === "foreign") {
            /* Fix up mixed-case attribute names */ key = (_b = foreignNames_js_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
        }
        if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
            return key;
        }
        return "".concat(key, "=\"").concat(encode(value), "\"");
    }).join(" ");
}
/**
 * Self-enclosing tags
 */ var singleTag = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
]);
/**
 * Renders a DOM node or an array of DOM nodes to a string.
 *
 * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).
 *
 * @param node Node to be rendered.
 * @param options Changes serialization behavior
 */ function render(node, options) {
    if (options === void 0) {
        options = {};
    }
    var nodes = "length" in node ? node : [
        node
    ];
    var output = "";
    for(var i = 0; i < nodes.length; i++){
        output += renderNode(nodes[i], options);
    }
    return output;
}
exports.render = render;
exports.default = render;
function renderNode(node, options) {
    switch(node.type){
        case ElementType.Root:
            return render(node.children, options);
        // @ts-expect-error We don't use `Doctype` yet
        case ElementType.Doctype:
        case ElementType.Directive:
            return renderDirective(node);
        case ElementType.Comment:
            return renderComment(node);
        case ElementType.CDATA:
            return renderCdata(node);
        case ElementType.Script:
        case ElementType.Style:
        case ElementType.Tag:
            return renderTag(node, options);
        case ElementType.Text:
            return renderText(node, options);
    }
}
var foreignModeIntegrationPoints = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title"
]);
var foreignElements = new Set([
    "svg",
    "math"
]);
function renderTag(elem, opts) {
    var _a;
    // Handle SVG / MathML in HTML
    if (opts.xmlMode === "foreign") {
        /* Fix up mixed-case element names */ elem.name = (_a = foreignNames_js_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
        /* Exit foreign mode at integration points */ if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {
            opts = __assign(__assign({}, opts), {
                xmlMode: false
            });
        }
    }
    if (!opts.xmlMode && foreignElements.has(elem.name)) {
        opts = __assign(__assign({}, opts), {
            xmlMode: "foreign"
        });
    }
    var tag = "<".concat(elem.name);
    var attribs = formatAttributes(elem.attribs, opts);
    if (attribs) {
        tag += " ".concat(attribs);
    }
    if (elem.children.length === 0 && (opts.xmlMode ? opts.selfClosingTags !== false : opts.selfClosingTags && singleTag.has(elem.name))) {
        if (!opts.xmlMode) tag += " ";
        tag += "/>";
    } else {
        tag += ">";
        if (elem.children.length > 0) {
            tag += render(elem.children, opts);
        }
        if (opts.xmlMode || !singleTag.has(elem.name)) {
            tag += "</".concat(elem.name, ">");
        }
    }
    return tag;
}
function renderDirective(elem) {
    return "<".concat(elem.data, ">");
}
function renderText(elem, opts) {
    var _a;
    var data = elem.data || "";
    // If entities weren't decoded, no need to encode them back
    if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {
        data = opts.xmlMode || opts.encodeEntities !== "utf8" ? (0, entities_1.encodeXML)(data) : (0, entities_1.escapeText)(data);
    }
    return data;
}
function renderCdata(elem) {
    return "<![CDATA[".concat(elem.children[0].data, "]]>");
}
function renderComment(elem) {
    return "<!--".concat(elem.data, "-->");
}
}}),
"[project]/node_modules/domutils/lib/stringify.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getOuterHTML = getOuterHTML;
exports.getInnerHTML = getInnerHTML;
exports.getText = getText;
exports.textContent = textContent;
exports.innerText = innerText;
var domhandler_1 = __turbopack_require__("[project]/node_modules/domhandler/lib/index.js [app-client] (ecmascript)");
var dom_serializer_1 = __importDefault(__turbopack_require__("[project]/node_modules/dom-serializer/lib/index.js [app-client] (ecmascript)"));
var domelementtype_1 = __turbopack_require__("[project]/node_modules/domelementtype/lib/index.js [app-client] (ecmascript)");
/**
 * @category Stringify
 * @deprecated Use the `dom-serializer` module directly.
 * @param node Node to get the outer HTML of.
 * @param options Options for serialization.
 * @returns `node`'s outer HTML.
 */ function getOuterHTML(node, options) {
    return (0, dom_serializer_1.default)(node, options);
}
/**
 * @category Stringify
 * @deprecated Use the `dom-serializer` module directly.
 * @param node Node to get the inner HTML of.
 * @param options Options for serialization.
 * @returns `node`'s inner HTML.
 */ function getInnerHTML(node, options) {
    return (0, domhandler_1.hasChildren)(node) ? node.children.map(function(node) {
        return getOuterHTML(node, options);
    }).join("") : "";
}
/**
 * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags. Ignores comments.
 *
 * @category Stringify
 * @deprecated Use `textContent` instead.
 * @param node Node to get the inner text of.
 * @returns `node`'s inner text.
 */ function getText(node) {
    if (Array.isArray(node)) return node.map(getText).join("");
    if ((0, domhandler_1.isTag)(node)) return node.name === "br" ? "\n" : getText(node.children);
    if ((0, domhandler_1.isCDATA)(node)) return getText(node.children);
    if ((0, domhandler_1.isText)(node)) return node.data;
    return "";
}
/**
 * Get a node's text content. Ignores comments.
 *
 * @category Stringify
 * @param node Node to get the text content of.
 * @returns `node`'s text content.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}
 */ function textContent(node) {
    if (Array.isArray(node)) return node.map(textContent).join("");
    if ((0, domhandler_1.hasChildren)(node) && !(0, domhandler_1.isComment)(node)) {
        return textContent(node.children);
    }
    if ((0, domhandler_1.isText)(node)) return node.data;
    return "";
}
/**
 * Get a node's inner text, ignoring `<script>` and `<style>` tags. Ignores comments.
 *
 * @category Stringify
 * @param node Node to get the inner text of.
 * @returns `node`'s inner text.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}
 */ function innerText(node) {
    if (Array.isArray(node)) return node.map(innerText).join("");
    if ((0, domhandler_1.hasChildren)(node) && (node.type === domelementtype_1.ElementType.Tag || (0, domhandler_1.isCDATA)(node))) {
        return innerText(node.children);
    }
    if ((0, domhandler_1.isText)(node)) return node.data;
    return "";
} //# sourceMappingURL=stringify.js.map
}}),
"[project]/node_modules/domutils/lib/traversal.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getChildren = getChildren;
exports.getParent = getParent;
exports.getSiblings = getSiblings;
exports.getAttributeValue = getAttributeValue;
exports.hasAttrib = hasAttrib;
exports.getName = getName;
exports.nextElementSibling = nextElementSibling;
exports.prevElementSibling = prevElementSibling;
var domhandler_1 = __turbopack_require__("[project]/node_modules/domhandler/lib/index.js [app-client] (ecmascript)");
/**
 * Get a node's children.
 *
 * @category Traversal
 * @param elem Node to get the children of.
 * @returns `elem`'s children, or an empty array.
 */ function getChildren(elem) {
    return (0, domhandler_1.hasChildren)(elem) ? elem.children : [];
}
/**
 * Get a node's parent.
 *
 * @category Traversal
 * @param elem Node to get the parent of.
 * @returns `elem`'s parent node, or `null` if `elem` is a root node.
 */ function getParent(elem) {
    return elem.parent || null;
}
/**
 * Gets an elements siblings, including the element itself.
 *
 * Attempts to get the children through the element's parent first. If we don't
 * have a parent (the element is a root node), we walk the element's `prev` &
 * `next` to get all remaining nodes.
 *
 * @category Traversal
 * @param elem Element to get the siblings of.
 * @returns `elem`'s siblings, including `elem`.
 */ function getSiblings(elem) {
    var _a, _b;
    var parent = getParent(elem);
    if (parent != null) return getChildren(parent);
    var siblings = [
        elem
    ];
    var prev = elem.prev, next = elem.next;
    while(prev != null){
        siblings.unshift(prev);
        _a = prev, prev = _a.prev;
    }
    while(next != null){
        siblings.push(next);
        _b = next, next = _b.next;
    }
    return siblings;
}
/**
 * Gets an attribute from an element.
 *
 * @category Traversal
 * @param elem Element to check.
 * @param name Attribute name to retrieve.
 * @returns The element's attribute value, or `undefined`.
 */ function getAttributeValue(elem, name) {
    var _a;
    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
}
/**
 * Checks whether an element has an attribute.
 *
 * @category Traversal
 * @param elem Element to check.
 * @param name Attribute name to look for.
 * @returns Returns whether `elem` has the attribute `name`.
 */ function hasAttrib(elem, name) {
    return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
}
/**
 * Get the tag name of an element.
 *
 * @category Traversal
 * @param elem The element to get the name for.
 * @returns The tag name of `elem`.
 */ function getName(elem) {
    return elem.name;
}
/**
 * Returns the next element sibling of a node.
 *
 * @category Traversal
 * @param elem The element to get the next sibling of.
 * @returns `elem`'s next sibling that is a tag, or `null` if there is no next
 * sibling.
 */ function nextElementSibling(elem) {
    var _a;
    var next = elem.next;
    while(next !== null && !(0, domhandler_1.isTag)(next))_a = next, next = _a.next;
    return next;
}
/**
 * Returns the previous element sibling of a node.
 *
 * @category Traversal
 * @param elem The element to get the previous sibling of.
 * @returns `elem`'s previous sibling that is a tag, or `null` if there is no
 * previous sibling.
 */ function prevElementSibling(elem) {
    var _a;
    var prev = elem.prev;
    while(prev !== null && !(0, domhandler_1.isTag)(prev))_a = prev, prev = _a.prev;
    return prev;
} //# sourceMappingURL=traversal.js.map
}}),
"[project]/node_modules/domutils/lib/manipulation.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.removeElement = removeElement;
exports.replaceElement = replaceElement;
exports.appendChild = appendChild;
exports.append = append;
exports.prependChild = prependChild;
exports.prepend = prepend;
/**
 * Remove an element from the dom
 *
 * @category Manipulation
 * @param elem The element to be removed
 */ function removeElement(elem) {
    if (elem.prev) elem.prev.next = elem.next;
    if (elem.next) elem.next.prev = elem.prev;
    if (elem.parent) {
        var childs = elem.parent.children;
        var childsIndex = childs.lastIndexOf(elem);
        if (childsIndex >= 0) {
            childs.splice(childsIndex, 1);
        }
    }
    elem.next = null;
    elem.prev = null;
    elem.parent = null;
}
/**
 * Replace an element in the dom
 *
 * @category Manipulation
 * @param elem The element to be replaced
 * @param replacement The element to be added
 */ function replaceElement(elem, replacement) {
    var prev = replacement.prev = elem.prev;
    if (prev) {
        prev.next = replacement;
    }
    var next = replacement.next = elem.next;
    if (next) {
        next.prev = replacement;
    }
    var parent = replacement.parent = elem.parent;
    if (parent) {
        var childs = parent.children;
        childs[childs.lastIndexOf(elem)] = replacement;
        elem.parent = null;
    }
}
/**
 * Append a child to an element.
 *
 * @category Manipulation
 * @param parent The element to append to.
 * @param child The element to be added as a child.
 */ function appendChild(parent, child) {
    removeElement(child);
    child.next = null;
    child.parent = parent;
    if (parent.children.push(child) > 1) {
        var sibling = parent.children[parent.children.length - 2];
        sibling.next = child;
        child.prev = sibling;
    } else {
        child.prev = null;
    }
}
/**
 * Append an element after another.
 *
 * @category Manipulation
 * @param elem The element to append after.
 * @param next The element be added.
 */ function append(elem, next) {
    removeElement(next);
    var parent = elem.parent;
    var currNext = elem.next;
    next.next = currNext;
    next.prev = elem;
    elem.next = next;
    next.parent = parent;
    if (currNext) {
        currNext.prev = next;
        if (parent) {
            var childs = parent.children;
            childs.splice(childs.lastIndexOf(currNext), 0, next);
        }
    } else if (parent) {
        parent.children.push(next);
    }
}
/**
 * Prepend a child to an element.
 *
 * @category Manipulation
 * @param parent The element to prepend before.
 * @param child The element to be added as a child.
 */ function prependChild(parent, child) {
    removeElement(child);
    child.parent = parent;
    child.prev = null;
    if (parent.children.unshift(child) !== 1) {
        var sibling = parent.children[1];
        sibling.prev = child;
        child.next = sibling;
    } else {
        child.next = null;
    }
}
/**
 * Prepend an element before another.
 *
 * @category Manipulation
 * @param elem The element to prepend before.
 * @param prev The element be added.
 */ function prepend(elem, prev) {
    removeElement(prev);
    var parent = elem.parent;
    if (parent) {
        var childs = parent.children;
        childs.splice(childs.indexOf(elem), 0, prev);
    }
    if (elem.prev) {
        elem.prev.next = prev;
    }
    prev.parent = parent;
    prev.prev = elem.prev;
    prev.next = elem;
    elem.prev = prev;
} //# sourceMappingURL=manipulation.js.map
}}),
"[project]/node_modules/domutils/lib/querying.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.filter = filter;
exports.find = find;
exports.findOneChild = findOneChild;
exports.findOne = findOne;
exports.existsOne = existsOne;
exports.findAll = findAll;
var domhandler_1 = __turbopack_require__("[project]/node_modules/domhandler/lib/index.js [app-client] (ecmascript)");
/**
 * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param node Node to search. Will be included in the result set if it matches.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes passing `test`.
 */ function filter(test, node, recurse, limit) {
    if (recurse === void 0) {
        recurse = true;
    }
    if (limit === void 0) {
        limit = Infinity;
    }
    return find(test, Array.isArray(node) ? node : [
        node
    ], recurse, limit);
}
/**
 * Search an array of nodes and their children for nodes passing a test function.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes passing `test`.
 */ function find(test, nodes, recurse, limit) {
    var result = [];
    /** Stack of the arrays we are looking at. */ var nodeStack = [
        Array.isArray(nodes) ? nodes : [
            nodes
        ]
    ];
    /** Stack of the indices within the arrays. */ var indexStack = [
        0
    ];
    for(;;){
        // First, check if the current array has any more elements to look at.
        if (indexStack[0] >= nodeStack[0].length) {
            // If we have no more arrays to look at, we are done.
            if (indexStack.length === 1) {
                return result;
            }
            // Otherwise, remove the current array from the stack.
            nodeStack.shift();
            indexStack.shift();
            continue;
        }
        var elem = nodeStack[0][indexStack[0]++];
        if (test(elem)) {
            result.push(elem);
            if (--limit <= 0) return result;
        }
        if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {
            /*
             * Add the children to the stack. We are depth-first, so this is
             * the next array we look at.
             */ indexStack.unshift(0);
            nodeStack.unshift(elem.children);
        }
    }
}
/**
 * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns The first node in the array that passes `test`.
 * @deprecated Use `Array.prototype.find` directly.
 */ function findOneChild(test, nodes) {
    return nodes.find(test);
}
/**
 * Finds one element in a tree that passes a test.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Node or array of nodes to search.
 * @param recurse Also consider child nodes.
 * @returns The first node that passes `test`.
 */ function findOne(test, nodes, recurse) {
    if (recurse === void 0) {
        recurse = true;
    }
    var searchedNodes = Array.isArray(nodes) ? nodes : [
        nodes
    ];
    for(var i = 0; i < searchedNodes.length; i++){
        var node = searchedNodes[i];
        if ((0, domhandler_1.isTag)(node) && test(node)) {
            return node;
        }
        if (recurse && (0, domhandler_1.hasChildren)(node) && node.children.length > 0) {
            var found = findOne(test, node.children, true);
            if (found) return found;
        }
    }
    return null;
}
/**
 * Checks if a tree of nodes contains at least one node passing a test.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns Whether a tree of nodes contains at least one node passing the test.
 */ function existsOne(test, nodes) {
    return (Array.isArray(nodes) ? nodes : [
        nodes
    ]).some(function(node) {
        return (0, domhandler_1.isTag)(node) && test(node) || (0, domhandler_1.hasChildren)(node) && existsOne(test, node.children);
    });
}
/**
 * Search an array of nodes and their children for elements passing a test function.
 *
 * Same as `find`, but limited to elements and with less options, leading to reduced complexity.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns All nodes passing `test`.
 */ function findAll(test, nodes) {
    var result = [];
    var nodeStack = [
        Array.isArray(nodes) ? nodes : [
            nodes
        ]
    ];
    var indexStack = [
        0
    ];
    for(;;){
        if (indexStack[0] >= nodeStack[0].length) {
            if (nodeStack.length === 1) {
                return result;
            }
            // Otherwise, remove the current array from the stack.
            nodeStack.shift();
            indexStack.shift();
            continue;
        }
        var elem = nodeStack[0][indexStack[0]++];
        if ((0, domhandler_1.isTag)(elem) && test(elem)) result.push(elem);
        if ((0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {
            indexStack.unshift(0);
            nodeStack.unshift(elem.children);
        }
    }
} //# sourceMappingURL=querying.js.map
}}),
"[project]/node_modules/domutils/lib/legacy.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.testElement = testElement;
exports.getElements = getElements;
exports.getElementById = getElementById;
exports.getElementsByTagName = getElementsByTagName;
exports.getElementsByClassName = getElementsByClassName;
exports.getElementsByTagType = getElementsByTagType;
var domhandler_1 = __turbopack_require__("[project]/node_modules/domhandler/lib/index.js [app-client] (ecmascript)");
var querying_js_1 = __turbopack_require__("[project]/node_modules/domutils/lib/querying.js [app-client] (ecmascript)");
/**
 * A map of functions to check nodes against.
 */ var Checks = {
    tag_name: function(name) {
        if (typeof name === "function") {
            return function(elem) {
                return (0, domhandler_1.isTag)(elem) && name(elem.name);
            };
        } else if (name === "*") {
            return domhandler_1.isTag;
        }
        return function(elem) {
            return (0, domhandler_1.isTag)(elem) && elem.name === name;
        };
    },
    tag_type: function(type) {
        if (typeof type === "function") {
            return function(elem) {
                return type(elem.type);
            };
        }
        return function(elem) {
            return elem.type === type;
        };
    },
    tag_contains: function(data) {
        if (typeof data === "function") {
            return function(elem) {
                return (0, domhandler_1.isText)(elem) && data(elem.data);
            };
        }
        return function(elem) {
            return (0, domhandler_1.isText)(elem) && elem.data === data;
        };
    }
};
/**
 * Returns a function to check whether a node has an attribute with a particular
 * value.
 *
 * @param attrib Attribute to check.
 * @param value Attribute value to look for.
 * @returns A function to check whether the a node has an attribute with a
 *   particular value.
 */ function getAttribCheck(attrib, value) {
    if (typeof value === "function") {
        return function(elem) {
            return (0, domhandler_1.isTag)(elem) && value(elem.attribs[attrib]);
        };
    }
    return function(elem) {
        return (0, domhandler_1.isTag)(elem) && elem.attribs[attrib] === value;
    };
}
/**
 * Returns a function that returns `true` if either of the input functions
 * returns `true` for a node.
 *
 * @param a First function to combine.
 * @param b Second function to combine.
 * @returns A function taking a node and returning `true` if either of the input
 *   functions returns `true` for the node.
 */ function combineFuncs(a, b) {
    return function(elem) {
        return a(elem) || b(elem);
    };
}
/**
 * Returns a function that executes all checks in `options` and returns `true`
 * if any of them match a node.
 *
 * @param options An object describing nodes to look for.
 * @returns A function that executes all checks in `options` and returns `true`
 *   if any of them match a node.
 */ function compileTest(options) {
    var funcs = Object.keys(options).map(function(key) {
        var value = options[key];
        return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value) : getAttribCheck(key, value);
    });
    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}
/**
 * Checks whether a node matches the description in `options`.
 *
 * @category Legacy Query Functions
 * @param options An object describing nodes to look for.
 * @param node The element to test.
 * @returns Whether the element matches the description in `options`.
 */ function testElement(options, node) {
    var test = compileTest(options);
    return test ? test(node) : true;
}
/**
 * Returns all nodes that match `options`.
 *
 * @category Legacy Query Functions
 * @param options An object describing nodes to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes that match `options`.
 */ function getElements(options, nodes, recurse, limit) {
    if (limit === void 0) {
        limit = Infinity;
    }
    var test = compileTest(options);
    return test ? (0, querying_js_1.filter)(test, nodes, recurse, limit) : [];
}
/**
 * Returns the node with the supplied ID.
 *
 * @category Legacy Query Functions
 * @param id The unique ID attribute value to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @returns The node with the supplied ID.
 */ function getElementById(id, nodes, recurse) {
    if (recurse === void 0) {
        recurse = true;
    }
    if (!Array.isArray(nodes)) nodes = [
        nodes
    ];
    return (0, querying_js_1.findOne)(getAttribCheck("id", id), nodes, recurse);
}
/**
 * Returns all nodes with the supplied `tagName`.
 *
 * @category Legacy Query Functions
 * @param tagName Tag name to search for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes with the supplied `tagName`.
 */ function getElementsByTagName(tagName, nodes, recurse, limit) {
    if (recurse === void 0) {
        recurse = true;
    }
    if (limit === void 0) {
        limit = Infinity;
    }
    return (0, querying_js_1.filter)(Checks["tag_name"](tagName), nodes, recurse, limit);
}
/**
 * Returns all nodes with the supplied `className`.
 *
 * @category Legacy Query Functions
 * @param className Class name to search for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes with the supplied `className`.
 */ function getElementsByClassName(className, nodes, recurse, limit) {
    if (recurse === void 0) {
        recurse = true;
    }
    if (limit === void 0) {
        limit = Infinity;
    }
    return (0, querying_js_1.filter)(getAttribCheck("class", className), nodes, recurse, limit);
}
/**
 * Returns all nodes with the supplied `type`.
 *
 * @category Legacy Query Functions
 * @param type Element type to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes with the supplied `type`.
 */ function getElementsByTagType(type, nodes, recurse, limit) {
    if (recurse === void 0) {
        recurse = true;
    }
    if (limit === void 0) {
        limit = Infinity;
    }
    return (0, querying_js_1.filter)(Checks["tag_type"](type), nodes, recurse, limit);
} //# sourceMappingURL=legacy.js.map
}}),
"[project]/node_modules/domutils/lib/helpers.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DocumentPosition = void 0;
exports.removeSubsets = removeSubsets;
exports.compareDocumentPosition = compareDocumentPosition;
exports.uniqueSort = uniqueSort;
var domhandler_1 = __turbopack_require__("[project]/node_modules/domhandler/lib/index.js [app-client] (ecmascript)");
/**
 * Given an array of nodes, remove any member that is contained by another
 * member.
 *
 * @category Helpers
 * @param nodes Nodes to filter.
 * @returns Remaining nodes that aren't contained by other nodes.
 */ function removeSubsets(nodes) {
    var idx = nodes.length;
    /*
     * Check if each node (or one of its ancestors) is already contained in the
     * array.
     */ while(--idx >= 0){
        var node = nodes[idx];
        /*
         * Remove the node if it is not unique.
         * We are going through the array from the end, so we only
         * have to check nodes that preceed the node under consideration in the array.
         */ if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
            nodes.splice(idx, 1);
            continue;
        }
        for(var ancestor = node.parent; ancestor; ancestor = ancestor.parent){
            if (nodes.includes(ancestor)) {
                nodes.splice(idx, 1);
                break;
            }
        }
    }
    return nodes;
}
/**
 * @category Helpers
 * @see {@link http://dom.spec.whatwg.org/#dom-node-comparedocumentposition}
 */ var DocumentPosition;
(function(DocumentPosition) {
    DocumentPosition[DocumentPosition["DISCONNECTED"] = 1] = "DISCONNECTED";
    DocumentPosition[DocumentPosition["PRECEDING"] = 2] = "PRECEDING";
    DocumentPosition[DocumentPosition["FOLLOWING"] = 4] = "FOLLOWING";
    DocumentPosition[DocumentPosition["CONTAINS"] = 8] = "CONTAINS";
    DocumentPosition[DocumentPosition["CONTAINED_BY"] = 16] = "CONTAINED_BY";
})(DocumentPosition || (exports.DocumentPosition = DocumentPosition = {}));
/**
 * Compare the position of one node against another node in any other document,
 * returning a bitmask with the values from {@link DocumentPosition}.
 *
 * Document order:
 * > There is an ordering, document order, defined on all the nodes in the
 * > document corresponding to the order in which the first character of the
 * > XML representation of each node occurs in the XML representation of the
 * > document after expansion of general entities. Thus, the document element
 * > node will be the first node. Element nodes occur before their children.
 * > Thus, document order orders element nodes in order of the occurrence of
 * > their start-tag in the XML (after expansion of entities). The attribute
 * > nodes of an element occur after the element and before its children. The
 * > relative order of attribute nodes is implementation-dependent.
 *
 * Source:
 * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
 *
 * @category Helpers
 * @param nodeA The first node to use in the comparison
 * @param nodeB The second node to use in the comparison
 * @returns A bitmask describing the input nodes' relative position.
 *
 * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
 * a description of these values.
 */ function compareDocumentPosition(nodeA, nodeB) {
    var aParents = [];
    var bParents = [];
    if (nodeA === nodeB) {
        return 0;
    }
    var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;
    while(current){
        aParents.unshift(current);
        current = current.parent;
    }
    current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;
    while(current){
        bParents.unshift(current);
        current = current.parent;
    }
    var maxIdx = Math.min(aParents.length, bParents.length);
    var idx = 0;
    while(idx < maxIdx && aParents[idx] === bParents[idx]){
        idx++;
    }
    if (idx === 0) {
        return DocumentPosition.DISCONNECTED;
    }
    var sharedParent = aParents[idx - 1];
    var siblings = sharedParent.children;
    var aSibling = aParents[idx];
    var bSibling = bParents[idx];
    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
        if (sharedParent === nodeB) {
            return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;
        }
        return DocumentPosition.FOLLOWING;
    }
    if (sharedParent === nodeA) {
        return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;
    }
    return DocumentPosition.PRECEDING;
}
/**
 * Sort an array of nodes based on their relative position in the document,
 * removing any duplicate nodes. If the array contains nodes that do not belong
 * to the same document, sort order is unspecified.
 *
 * @category Helpers
 * @param nodes Array of DOM nodes.
 * @returns Collection of unique nodes, sorted in document order.
 */ function uniqueSort(nodes) {
    nodes = nodes.filter(function(node, i, arr) {
        return !arr.includes(node, i + 1);
    });
    nodes.sort(function(a, b) {
        var relative = compareDocumentPosition(a, b);
        if (relative & DocumentPosition.PRECEDING) {
            return -1;
        } else if (relative & DocumentPosition.FOLLOWING) {
            return 1;
        }
        return 0;
    });
    return nodes;
} //# sourceMappingURL=helpers.js.map
}}),
"[project]/node_modules/domutils/lib/feeds.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getFeed = getFeed;
var stringify_js_1 = __turbopack_require__("[project]/node_modules/domutils/lib/stringify.js [app-client] (ecmascript)");
var legacy_js_1 = __turbopack_require__("[project]/node_modules/domutils/lib/legacy.js [app-client] (ecmascript)");
/**
 * Get the feed object from the root of a DOM tree.
 *
 * @category Feeds
 * @param doc - The DOM to to extract the feed from.
 * @returns The feed.
 */ function getFeed(doc) {
    var feedRoot = getOneElement(isValidFeed, doc);
    return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
}
/**
 * Parse an Atom feed.
 *
 * @param feedRoot The root of the feed.
 * @returns The parsed feed.
 */ function getAtomFeed(feedRoot) {
    var _a;
    var childs = feedRoot.children;
    var feed = {
        type: "atom",
        items: (0, legacy_js_1.getElementsByTagName)("entry", childs).map(function(item) {
            var _a;
            var children = item.children;
            var entry = {
                media: getMediaElements(children)
            };
            addConditionally(entry, "id", "id", children);
            addConditionally(entry, "title", "title", children);
            var href = (_a = getOneElement("link", children)) === null || _a === void 0 ? void 0 : _a.attribs["href"];
            if (href) {
                entry.link = href;
            }
            var description = fetch("summary", children) || fetch("content", children);
            if (description) {
                entry.description = description;
            }
            var pubDate = fetch("updated", children);
            if (pubDate) {
                entry.pubDate = new Date(pubDate);
            }
            return entry;
        })
    };
    addConditionally(feed, "id", "id", childs);
    addConditionally(feed, "title", "title", childs);
    var href = (_a = getOneElement("link", childs)) === null || _a === void 0 ? void 0 : _a.attribs["href"];
    if (href) {
        feed.link = href;
    }
    addConditionally(feed, "description", "subtitle", childs);
    var updated = fetch("updated", childs);
    if (updated) {
        feed.updated = new Date(updated);
    }
    addConditionally(feed, "author", "email", childs, true);
    return feed;
}
/**
 * Parse a RSS feed.
 *
 * @param feedRoot The root of the feed.
 * @returns The parsed feed.
 */ function getRssFeed(feedRoot) {
    var _a, _b;
    var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
    var feed = {
        type: feedRoot.name.substr(0, 3),
        id: "",
        items: (0, legacy_js_1.getElementsByTagName)("item", feedRoot.children).map(function(item) {
            var children = item.children;
            var entry = {
                media: getMediaElements(children)
            };
            addConditionally(entry, "id", "guid", children);
            addConditionally(entry, "title", "title", children);
            addConditionally(entry, "link", "link", children);
            addConditionally(entry, "description", "description", children);
            var pubDate = fetch("pubDate", children) || fetch("dc:date", children);
            if (pubDate) entry.pubDate = new Date(pubDate);
            return entry;
        })
    };
    addConditionally(feed, "title", "title", childs);
    addConditionally(feed, "link", "link", childs);
    addConditionally(feed, "description", "description", childs);
    var updated = fetch("lastBuildDate", childs);
    if (updated) {
        feed.updated = new Date(updated);
    }
    addConditionally(feed, "author", "managingEditor", childs, true);
    return feed;
}
var MEDIA_KEYS_STRING = [
    "url",
    "type",
    "lang"
];
var MEDIA_KEYS_INT = [
    "fileSize",
    "bitrate",
    "framerate",
    "samplingrate",
    "channels",
    "duration",
    "height",
    "width"
];
/**
 * Get all media elements of a feed item.
 *
 * @param where Nodes to search in.
 * @returns Media elements.
 */ function getMediaElements(where) {
    return (0, legacy_js_1.getElementsByTagName)("media:content", where).map(function(elem) {
        var attribs = elem.attribs;
        var media = {
            medium: attribs["medium"],
            isDefault: !!attribs["isDefault"]
        };
        for(var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++){
            var attrib = MEDIA_KEYS_STRING_1[_i];
            if (attribs[attrib]) {
                media[attrib] = attribs[attrib];
            }
        }
        for(var _a = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++){
            var attrib = MEDIA_KEYS_INT_1[_a];
            if (attribs[attrib]) {
                media[attrib] = parseInt(attribs[attrib], 10);
            }
        }
        if (attribs["expression"]) {
            media.expression = attribs["expression"];
        }
        return media;
    });
}
/**
 * Get one element by tag name.
 *
 * @param tagName Tag name to look for
 * @param node Node to search in
 * @returns The element or null
 */ function getOneElement(tagName, node) {
    return (0, legacy_js_1.getElementsByTagName)(tagName, node, true, 1)[0];
}
/**
 * Get the text content of an element with a certain tag name.
 *
 * @param tagName Tag name to look for.
 * @param where Node to search in.
 * @param recurse Whether to recurse into child nodes.
 * @returns The text content of the element.
 */ function fetch(tagName, where, recurse) {
    if (recurse === void 0) {
        recurse = false;
    }
    return (0, stringify_js_1.textContent)((0, legacy_js_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();
}
/**
 * Adds a property to an object if it has a value.
 *
 * @param obj Object to be extended
 * @param prop Property name
 * @param tagName Tag name that contains the conditionally added property
 * @param where Element to search for the property
 * @param recurse Whether to recurse into child nodes.
 */ function addConditionally(obj, prop, tagName, where, recurse) {
    if (recurse === void 0) {
        recurse = false;
    }
    var val = fetch(tagName, where, recurse);
    if (val) obj[prop] = val;
}
/**
 * Checks if an element is a feed root node.
 *
 * @param value The name of the element to check.
 * @returns Whether an element is a feed root node.
 */ function isValidFeed(value) {
    return value === "rss" || value === "feed" || value === "rdf:RDF";
} //# sourceMappingURL=feeds.js.map
}}),
"[project]/node_modules/domutils/lib/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hasChildren = exports.isDocument = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
__exportStar(__turbopack_require__("[project]/node_modules/domutils/lib/stringify.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/domutils/lib/traversal.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/domutils/lib/manipulation.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/domutils/lib/querying.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/domutils/lib/legacy.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/domutils/lib/helpers.js [app-client] (ecmascript)"), exports);
__exportStar(__turbopack_require__("[project]/node_modules/domutils/lib/feeds.js [app-client] (ecmascript)"), exports);
/** @deprecated Use these methods from `domhandler` directly. */ var domhandler_1 = __turbopack_require__("[project]/node_modules/domhandler/lib/index.js [app-client] (ecmascript)");
Object.defineProperty(exports, "isTag", {
    enumerable: true,
    get: function() {
        return domhandler_1.isTag;
    }
});
Object.defineProperty(exports, "isCDATA", {
    enumerable: true,
    get: function() {
        return domhandler_1.isCDATA;
    }
});
Object.defineProperty(exports, "isText", {
    enumerable: true,
    get: function() {
        return domhandler_1.isText;
    }
});
Object.defineProperty(exports, "isComment", {
    enumerable: true,
    get: function() {
        return domhandler_1.isComment;
    }
});
Object.defineProperty(exports, "isDocument", {
    enumerable: true,
    get: function() {
        return domhandler_1.isDocument;
    }
});
Object.defineProperty(exports, "hasChildren", {
    enumerable: true,
    get: function() {
        return domhandler_1.hasChildren;
    }
}); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/source-map-js/lib/base64.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */ exports.encode = function(number) {
    if (0 <= number && number < intToCharMap.length) {
        return intToCharMap[number];
    }
    throw new TypeError("Must be between 0 and 63: " + number);
};
/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */ exports.decode = function(charCode) {
    var bigA = 65; // 'A'
    var bigZ = 90; // 'Z'
    var littleA = 97; // 'a'
    var littleZ = 122; // 'z'
    var zero = 48; // '0'
    var nine = 57; // '9'
    var plus = 43; // '+'
    var slash = 47; // '/'
    var littleOffset = 26;
    var numberOffset = 52;
    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    if (bigA <= charCode && charCode <= bigZ) {
        return charCode - bigA;
    }
    // 26 - 51: abcdefghijklmnopqrstuvwxyz
    if (littleA <= charCode && charCode <= littleZ) {
        return charCode - littleA + littleOffset;
    }
    // 52 - 61: 0123456789
    if (zero <= charCode && charCode <= nine) {
        return charCode - zero + numberOffset;
    }
    // 62: +
    if (charCode == plus) {
        return 62;
    }
    // 63: /
    if (charCode == slash) {
        return 63;
    }
    // Invalid base64 digit.
    return -1;
};
}}),
"[project]/node_modules/source-map-js/lib/base64-vlq.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ var base64 = __turbopack_require__("[project]/node_modules/source-map-js/lib/base64.js [app-client] (ecmascript)");
// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011
var VLQ_BASE_SHIFT = 5;
// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;
// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;
/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */ function toVLQSigned(aValue) {
    return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
}
/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */ function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative ? -shifted : shifted;
}
/**
 * Returns the base 64 VLQ encoded value.
 */ exports.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;
    var vlq = toVLQSigned(aValue);
    do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) {
            // There are still more digits in this value, so we must make sure the
            // continuation bit is marked.
            digit |= VLQ_CONTINUATION_BIT;
        }
        encoded += base64.encode(digit);
    }while (vlq > 0)
    return encoded;
};
/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */ exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;
    do {
        if (aIndex >= strLen) {
            throw new Error("Expected more digits in base 64 VLQ value.");
        }
        digit = base64.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
            throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }
        continuation = !!(digit & VLQ_CONTINUATION_BIT);
        digit &= VLQ_BASE_MASK;
        result = result + (digit << shift);
        shift += VLQ_BASE_SHIFT;
    }while (continuation)
    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aIndex;
};
}}),
"[project]/node_modules/source-map-js/lib/util.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ /**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */ function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
        return aArgs[aName];
    } else if (arguments.length === 3) {
        return aDefaultValue;
    } else {
        throw new Error('"' + aName + '" is a required argument.');
    }
}
exports.getArg = getArg;
var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;
function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
        return null;
    }
    return {
        scheme: match[1],
        auth: match[2],
        host: match[3],
        port: match[4],
        path: match[5]
    };
}
exports.urlParse = urlParse;
function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) {
        url += aParsedUrl.scheme + ':';
    }
    url += '//';
    if (aParsedUrl.auth) {
        url += aParsedUrl.auth + '@';
    }
    if (aParsedUrl.host) {
        url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
        url += ":" + aParsedUrl.port;
    }
    if (aParsedUrl.path) {
        url += aParsedUrl.path;
    }
    return url;
}
exports.urlGenerate = urlGenerate;
var MAX_CACHED_INPUTS = 32;
/**
 * Takes some function `f(input) -> result` and returns a memoized version of
 * `f`.
 *
 * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The
 * memoization is a dumb-simple, linear least-recently-used cache.
 */ function lruMemoize(f) {
    var cache = [];
    return function(input) {
        for(var i = 0; i < cache.length; i++){
            if (cache[i].input === input) {
                var temp = cache[0];
                cache[0] = cache[i];
                cache[i] = temp;
                return cache[0].result;
            }
        }
        var result = f(input);
        cache.unshift({
            input,
            result
        });
        if (cache.length > MAX_CACHED_INPUTS) {
            cache.pop();
        }
        return result;
    };
}
/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */ var normalize = lruMemoize(function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
        if (!url.path) {
            return aPath;
        }
        path = url.path;
    }
    var isAbsolute = exports.isAbsolute(path);
    // Split the path into parts between `/` characters. This is much faster than
    // using `.split(/\/+/g)`.
    var parts = [];
    var start = 0;
    var i = 0;
    while(true){
        start = i;
        i = path.indexOf("/", start);
        if (i === -1) {
            parts.push(path.slice(start));
            break;
        } else {
            parts.push(path.slice(start, i));
            while(i < path.length && path[i] === "/"){
                i++;
            }
        }
    }
    for(var part, up = 0, i = parts.length - 1; i >= 0; i--){
        part = parts[i];
        if (part === '.') {
            parts.splice(i, 1);
        } else if (part === '..') {
            up++;
        } else if (up > 0) {
            if (part === '') {
                // The first part is blank if the path is absolute. Trying to go
                // above the root is a no-op. Therefore we can remove all '..' parts
                // directly after the root.
                parts.splice(i + 1, up);
                up = 0;
            } else {
                parts.splice(i, 2);
                up--;
            }
        }
    }
    path = parts.join('/');
    if (path === '') {
        path = isAbsolute ? '/' : '.';
    }
    if (url) {
        url.path = path;
        return urlGenerate(url);
    }
    return path;
});
exports.normalize = normalize;
/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */ function join(aRoot, aPath) {
    if (aRoot === "") {
        aRoot = ".";
    }
    if (aPath === "") {
        aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
        aRoot = aRootUrl.path || '/';
    }
    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) {
            aPathUrl.scheme = aRootUrl.scheme;
        }
        return urlGenerate(aPathUrl);
    }
    if (aPathUrl || aPath.match(dataUrlRegexp)) {
        return aPath;
    }
    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
    }
    var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
    if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
    }
    return joined;
}
exports.join = join;
exports.isAbsolute = function(aPath) {
    return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};
/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */ function relative(aRoot, aPath) {
    if (aRoot === "") {
        aRoot = ".";
    }
    aRoot = aRoot.replace(/\/$/, '');
    // It is possible for the path to be above the root. In this case, simply
    // checking whether the root is a prefix of the path won't work. Instead, we
    // need to remove components from the root one by one, until either we find
    // a prefix that fits, or we run out of components to remove.
    var level = 0;
    while(aPath.indexOf(aRoot + '/') !== 0){
        var index = aRoot.lastIndexOf("/");
        if (index < 0) {
            return aPath;
        }
        // If the only part of the root that is left is the scheme (i.e. http://,
        // file:///, etc.), one or more slashes (/), or simply nothing at all, we
        // have exhausted all components, so the path is not relative to the root.
        aRoot = aRoot.slice(0, index);
        if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
            return aPath;
        }
        ++level;
    }
    // Make sure we add a "../" for each component we removed from the root.
    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;
var supportsNullProto = function() {
    var obj = Object.create(null);
    return !('__proto__' in obj);
}();
function identity(s) {
    return s;
}
/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */ function toSetString(aStr) {
    if (isProtoString(aStr)) {
        return '$' + aStr;
    }
    return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;
function fromSetString(aStr) {
    if (isProtoString(aStr)) {
        return aStr.slice(1);
    }
    return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;
function isProtoString(s) {
    if (!s) {
        return false;
    }
    var length = s.length;
    if (length < 9 /* "__proto__".length */ ) {
        return false;
    }
    if (s.charCodeAt(length - 1) !== 95 /* '_' */  || s.charCodeAt(length - 2) !== 95 /* '_' */  || s.charCodeAt(length - 3) !== 111 /* 'o' */  || s.charCodeAt(length - 4) !== 116 /* 't' */  || s.charCodeAt(length - 5) !== 111 /* 'o' */  || s.charCodeAt(length - 6) !== 114 /* 'r' */  || s.charCodeAt(length - 7) !== 112 /* 'p' */  || s.charCodeAt(length - 8) !== 95 /* '_' */  || s.charCodeAt(length - 9) !== 95 /* '_' */ ) {
        return false;
    }
    for(var i = length - 10; i >= 0; i--){
        if (s.charCodeAt(i) !== 36 /* '$' */ ) {
            return false;
        }
    }
    return true;
}
/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */ function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
        return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;
function compareByOriginalPositionsNoSource(mappingA, mappingB, onlyCompareOriginal) {
    var cmp;
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
        return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositionsNoSource = compareByOriginalPositionsNoSource;
/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */ function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
    }
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
        return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
function compareByGeneratedPositionsDeflatedNoLine(mappingA, mappingB, onlyCompareGenerated) {
    var cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
    }
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
        return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflatedNoLine = compareByGeneratedPositionsDeflatedNoLine;
function strcmp(aStr1, aStr2) {
    if (aStr1 === aStr2) {
        return 0;
    }
    if (aStr1 === null) {
        return 1; // aStr2 !== null
    }
    if (aStr2 === null) {
        return -1; // aStr1 !== null
    }
    if (aStr1 > aStr2) {
        return 1;
    }
    return -1;
}
/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */ function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
        return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */ function parseSourceMapInput(str) {
    return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;
/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */ function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
    sourceURL = sourceURL || '';
    if (sourceRoot) {
        // This follows what Chrome does.
        if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
            sourceRoot += '/';
        }
        // The spec says:
        //   Line 4: An optional source root, useful for relocating source
        //   files on a server or removing repeated values in the
        //   “sources” entry.  This value is prepended to the individual
        //   entries in the “source” field.
        sourceURL = sourceRoot + sourceURL;
    }
    // Historically, SourceMapConsumer did not take the sourceMapURL as
    // a parameter.  This mode is still somewhat supported, which is why
    // this code block is conditional.  However, it's preferable to pass
    // the source map URL to SourceMapConsumer, so that this function
    // can implement the source URL resolution algorithm as outlined in
    // the spec.  This block is basically the equivalent of:
    //    new URL(sourceURL, sourceMapURL).toString()
    // ... except it avoids using URL, which wasn't available in the
    // older releases of node still supported by this library.
    //
    // The spec says:
    //   If the sources are not absolute URLs after prepending of the
    //   “sourceRoot”, the sources are resolved relative to the
    //   SourceMap (like resolving script src in a html document).
    if (sourceMapURL) {
        var parsed = urlParse(sourceMapURL);
        if (!parsed) {
            throw new Error("sourceMapURL could not be parsed");
        }
        if (parsed.path) {
            // Strip the last path component, but keep the "/".
            var index = parsed.path.lastIndexOf('/');
            if (index >= 0) {
                parsed.path = parsed.path.substring(0, index + 1);
            }
        }
        sourceURL = join(urlGenerate(parsed), sourceURL);
    }
    return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;
}}),
"[project]/node_modules/source-map-js/lib/array-set.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var util = __turbopack_require__("[project]/node_modules/source-map-js/lib/util.js [app-client] (ecmascript)");
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";
/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */ function ArraySet() {
    this._array = [];
    this._set = hasNativeMap ? new Map() : Object.create(null);
}
/**
 * Static method for creating ArraySet instances from an existing array.
 */ ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet();
    for(var i = 0, len = aArray.length; i < len; i++){
        set.add(aArray[i], aAllowDuplicates);
    }
    return set;
};
/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */ ArraySet.prototype.size = function ArraySet_size() {
    return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};
/**
 * Add the given string to this set.
 *
 * @param String aStr
 */ ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
    var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
    }
    if (!isDuplicate) {
        if (hasNativeMap) {
            this._set.set(aStr, idx);
        } else {
            this._set[sStr] = idx;
        }
    }
};
/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */ ArraySet.prototype.has = function ArraySet_has(aStr) {
    if (hasNativeMap) {
        return this._set.has(aStr);
    } else {
        var sStr = util.toSetString(aStr);
        return has.call(this._set, sStr);
    }
};
/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */ ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
            return idx;
        }
    } else {
        var sStr = util.toSetString(aStr);
        if (has.call(this._set, sStr)) {
            return this._set[sStr];
        }
    }
    throw new Error('"' + aStr + '" is not in the set.');
};
/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */ ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
    }
    throw new Error('No element indexed by ' + aIdx);
};
/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */ ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
};
exports.ArraySet = ArraySet;
}}),
"[project]/node_modules/source-map-js/lib/mapping-list.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var util = __turbopack_require__("[project]/node_modules/source-map-js/lib/util.js [app-client] (ecmascript)");
/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */ function generatedPositionAfter(mappingA, mappingB) {
    // Optimized for most common case
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}
/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */ function MappingList() {
    this._array = [];
    this._sorted = true;
    // Serves as infimum
    this._last = {
        generatedLine: -1,
        generatedColumn: 0
    };
}
/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */ MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
};
/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */ MappingList.prototype.add = function MappingList_add(aMapping) {
    if (generatedPositionAfter(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
    } else {
        this._sorted = false;
        this._array.push(aMapping);
    }
};
/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */ MappingList.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
        this._array.sort(util.compareByGeneratedPositionsInflated);
        this._sorted = true;
    }
    return this._array;
};
exports.MappingList = MappingList;
}}),
"[project]/node_modules/source-map-js/lib/source-map-generator.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var base64VLQ = __turbopack_require__("[project]/node_modules/source-map-js/lib/base64-vlq.js [app-client] (ecmascript)");
var util = __turbopack_require__("[project]/node_modules/source-map-js/lib/util.js [app-client] (ecmascript)");
var ArraySet = __turbopack_require__("[project]/node_modules/source-map-js/lib/array-set.js [app-client] (ecmascript)").ArraySet;
var MappingList = __turbopack_require__("[project]/node_modules/source-map-js/lib/mapping-list.js [app-client] (ecmascript)").MappingList;
/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */ function SourceMapGenerator(aArgs) {
    if (!aArgs) {
        aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
    this._ignoreInvalidMapping = util.getArg(aArgs, 'ignoreInvalidMapping', false);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = new MappingList();
    this._sourcesContents = null;
}
SourceMapGenerator.prototype._version = 3;
/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */ SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer, generatorOps) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator(Object.assign(generatorOps || {}, {
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
    }));
    aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
            generated: {
                line: mapping.generatedLine,
                column: mapping.generatedColumn
            }
        };
        if (mapping.source != null) {
            newMapping.source = mapping.source;
            if (sourceRoot != null) {
                newMapping.source = util.relative(sourceRoot, newMapping.source);
            }
            newMapping.original = {
                line: mapping.originalLine,
                column: mapping.originalColumn
            };
            if (mapping.name != null) {
                newMapping.name = mapping.name;
            }
        }
        generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) {
            sourceRelative = util.relative(sourceRoot, sourceFile);
        }
        if (!generator._sources.has(sourceRelative)) {
            generator._sources.add(sourceRelative);
        }
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
            generator.setSourceContent(sourceFile, content);
        }
    });
    return generator;
};
/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */ SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);
    if (!this._skipValidation) {
        if (this._validateMapping(generated, original, source, name) === false) {
            return;
        }
    }
    if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
            this._sources.add(source);
        }
    }
    if (name != null) {
        name = String(name);
        if (!this._names.has(name)) {
            this._names.add(name);
        }
    }
    this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
    });
};
/**
 * Set the source content for a source file.
 */ SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
    }
    if (aSourceContent != null) {
        // Add the source content to the _sourcesContents map.
        // Create a new _sourcesContents map if the property is null.
        if (!this._sourcesContents) {
            this._sourcesContents = Object.create(null);
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
        // Remove the source file from the _sourcesContents map.
        // If the _sourcesContents map is empty, set the property to null.
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
            this._sourcesContents = null;
        }
    }
};
/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */ SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
            throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' + 'or the source map\'s "file" property. Both were omitted.');
        }
        sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();
    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
            // Check if it can be mapped by the source map, then update the mapping.
            var original = aSourceMapConsumer.originalPositionFor({
                line: mapping.originalLine,
                column: mapping.originalColumn
            });
            if (original.source != null) {
                // Copy mapping
                mapping.source = original.source;
                if (aSourceMapPath != null) {
                    mapping.source = util.join(aSourceMapPath, mapping.source);
                }
                if (sourceRoot != null) {
                    mapping.source = util.relative(sourceRoot, mapping.source);
                }
                mapping.originalLine = original.line;
                mapping.originalColumn = original.column;
                if (original.name != null) {
                    mapping.name = original.name;
                }
            }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
            newSources.add(source);
        }
        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
            newNames.add(name);
        }
    }, this);
    this._sources = newSources;
    this._names = newNames;
    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
            if (aSourceMapPath != null) {
                sourceFile = util.join(aSourceMapPath, sourceFile);
            }
            if (sourceRoot != null) {
                sourceFile = util.relative(sourceRoot, sourceFile);
            }
            this.setSourceContent(sourceFile, content);
        }
    }, this);
};
/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */ SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        var message = 'original.line and original.column are not numbers -- you probably meant to omit ' + 'the original mapping entirely and only map the generated position. If so, pass ' + 'null for the original mapping instead of an object with empty or null values.';
        if (this._ignoreInvalidMapping) {
            if (typeof console !== 'undefined' && console.warn) {
                console.warn(message);
            }
            return false;
        } else {
            throw new Error(message);
        }
    }
    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
        // Case 1.
        return;
    } else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
        // Cases 2 and 3.
        return;
    } else {
        var message = 'Invalid mapping: ' + JSON.stringify({
            generated: aGenerated,
            source: aSource,
            original: aOriginal,
            name: aName
        });
        if (this._ignoreInvalidMapping) {
            if (typeof console !== 'undefined' && console.warn) {
                console.warn(message);
            }
            return false;
        } else {
            throw new Error(message);
        }
    }
};
/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */ SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;
    var mappings = this._mappings.toArray();
    for(var i = 0, len = mappings.length; i < len; i++){
        mapping = mappings[i];
        next = '';
        if (mapping.generatedLine !== previousGeneratedLine) {
            previousGeneratedColumn = 0;
            while(mapping.generatedLine !== previousGeneratedLine){
                next += ';';
                previousGeneratedLine++;
            }
        } else {
            if (i > 0) {
                if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
                    continue;
                }
                next += ',';
            }
        }
        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
            sourceIdx = this._sources.indexOf(mapping.source);
            next += base64VLQ.encode(sourceIdx - previousSource);
            previousSource = sourceIdx;
            // lines are stored 0-based in SourceMap spec version 3
            next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
            previousOriginalLine = mapping.originalLine - 1;
            next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
            previousOriginalColumn = mapping.originalColumn;
            if (mapping.name != null) {
                nameIdx = this._names.indexOf(mapping.name);
                next += base64VLQ.encode(nameIdx - previousName);
                previousName = nameIdx;
            }
        }
        result += next;
    }
    return result;
};
SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function(source) {
        if (!this._sourcesContents) {
            return null;
        }
        if (aSourceRoot != null) {
            source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
    }, this);
};
/**
 * Externalize the source map.
 */ SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
    var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
    };
    if (this._file != null) {
        map.file = this._file;
    }
    if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }
    return map;
};
/**
 * Render the source map being generated to a string.
 */ SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
};
exports.SourceMapGenerator = SourceMapGenerator;
}}),
"[project]/node_modules/csso/dist/version.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = "5.0.5";
}}),
"[project]/node_modules/csso/cjs/usage.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const { hasOwnProperty } = Object.prototype;
function buildMap(list, caseInsensitive) {
    const map = Object.create(null);
    if (!Array.isArray(list)) {
        return null;
    }
    for (let name of list){
        if (caseInsensitive) {
            name = name.toLowerCase();
        }
        map[name] = true;
    }
    return map;
}
function buildList(data) {
    if (!data) {
        return null;
    }
    const tags = buildMap(data.tags, true);
    const ids = buildMap(data.ids);
    const classes = buildMap(data.classes);
    if (tags === null && ids === null && classes === null) {
        return null;
    }
    return {
        tags,
        ids,
        classes
    };
}
function buildIndex(data) {
    let scopes = false;
    if (data.scopes && Array.isArray(data.scopes)) {
        scopes = Object.create(null);
        for(let i = 0; i < data.scopes.length; i++){
            const list = data.scopes[i];
            if (!list || !Array.isArray(list)) {
                throw new Error('Wrong usage format');
            }
            for (const name of list){
                if (hasOwnProperty.call(scopes, name)) {
                    throw new Error(`Class can't be used for several scopes: ${name}`);
                }
                scopes[name] = i + 1;
            }
        }
    }
    return {
        whitelist: buildList(data),
        blacklist: buildList(data.blacklist),
        scopes
    };
}
exports.buildIndex = buildIndex;
}}),
"[project]/node_modules/csso/cjs/clean/utils.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
function hasNoChildren(node) {
    return !node || !node.children || node.children.isEmpty;
}
function isNodeChildrenList(node, list) {
    return node !== null && node.children === list;
}
exports.hasNoChildren = hasNoChildren;
exports.isNodeChildrenList = isNodeChildrenList;
}}),
"[project]/node_modules/csso/cjs/clean/Atrule.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const utils = __turbopack_require__("[project]/node_modules/csso/cjs/clean/utils.cjs [app-client] (ecmascript)");
function cleanAtrule(node, item, list) {
    if (node.block) {
        // otherwise removed at-rule don't prevent @import for removal
        if (this.stylesheet !== null) {
            this.stylesheet.firstAtrulesAllowed = false;
        }
        if (utils.hasNoChildren(node.block)) {
            list.remove(item);
            return;
        }
    }
    switch(node.name){
        case 'charset':
            if (utils.hasNoChildren(node.prelude)) {
                list.remove(item);
                return;
            }
            // if there is any rule before @charset -> remove it
            if (item.prev) {
                list.remove(item);
                return;
            }
            break;
        case 'import':
            if (this.stylesheet === null || !this.stylesheet.firstAtrulesAllowed) {
                list.remove(item);
                return;
            }
            // if there are some rules that not an @import or @charset before @import
            // remove it
            list.prevUntil(item.prev, function(rule) {
                if (rule.type === 'Atrule') {
                    if (rule.name === 'import' || rule.name === 'charset') {
                        return;
                    }
                }
                this.root.firstAtrulesAllowed = false;
                list.remove(item);
                return true;
            }, this);
            break;
        default:
            {
                const name = cssTree.keyword(node.name).basename;
                if (name === 'keyframes' || name === 'media' || name === 'supports') {
                    // drop at-rule with no prelude
                    if (utils.hasNoChildren(node.prelude) || utils.hasNoChildren(node.block)) {
                        list.remove(item);
                    }
                }
            }
    }
}
module.exports = cleanAtrule;
}}),
"[project]/node_modules/csso/cjs/clean/Comment.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
function cleanComment(data, item, list) {
    list.remove(item);
}
module.exports = cleanComment;
}}),
"[project]/node_modules/csso/cjs/clean/Declaration.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
function cleanDeclartion(node, item, list) {
    if (node.value.children && node.value.children.isEmpty) {
        list.remove(item);
        return;
    }
    if (cssTree.property(node.property).custom) {
        if (/\S/.test(node.value.value)) {
            node.value.value = node.value.value.trim();
        }
    }
}
module.exports = cleanDeclartion;
}}),
"[project]/node_modules/csso/cjs/clean/Raw.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const utils = __turbopack_require__("[project]/node_modules/csso/cjs/clean/utils.cjs [app-client] (ecmascript)");
function cleanRaw(node, item, list) {
    // raw in stylesheet or block children
    if (utils.isNodeChildrenList(this.stylesheet, list) || utils.isNodeChildrenList(this.block, list)) {
        list.remove(item);
    }
}
module.exports = cleanRaw;
}}),
"[project]/node_modules/csso/cjs/clean/Rule.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const utils = __turbopack_require__("[project]/node_modules/csso/cjs/clean/utils.cjs [app-client] (ecmascript)");
const { hasOwnProperty } = Object.prototype;
const skipUsageFilteringAtrule = new Set([
    'keyframes'
]);
function cleanUnused(selectorList, usageData) {
    selectorList.children.forEach((selector, item, list)=>{
        let shouldRemove = false;
        cssTree.walk(selector, function(node) {
            // ignore nodes in nested selectors
            if (this.selector === null || this.selector === selectorList) {
                switch(node.type){
                    case 'SelectorList':
                        // TODO: remove toLowerCase when pseudo selectors will be normalized
                        // ignore selectors inside :not()
                        if (this.function === null || this.function.name.toLowerCase() !== 'not') {
                            if (cleanUnused(node, usageData)) {
                                shouldRemove = true;
                            }
                        }
                        break;
                    case 'ClassSelector':
                        if (usageData.whitelist !== null && usageData.whitelist.classes !== null && !hasOwnProperty.call(usageData.whitelist.classes, node.name)) {
                            shouldRemove = true;
                        }
                        if (usageData.blacklist !== null && usageData.blacklist.classes !== null && hasOwnProperty.call(usageData.blacklist.classes, node.name)) {
                            shouldRemove = true;
                        }
                        break;
                    case 'IdSelector':
                        if (usageData.whitelist !== null && usageData.whitelist.ids !== null && !hasOwnProperty.call(usageData.whitelist.ids, node.name)) {
                            shouldRemove = true;
                        }
                        if (usageData.blacklist !== null && usageData.blacklist.ids !== null && hasOwnProperty.call(usageData.blacklist.ids, node.name)) {
                            shouldRemove = true;
                        }
                        break;
                    case 'TypeSelector':
                        // TODO: remove toLowerCase when type selectors will be normalized
                        // ignore universal selectors
                        if (node.name.charAt(node.name.length - 1) !== '*') {
                            if (usageData.whitelist !== null && usageData.whitelist.tags !== null && !hasOwnProperty.call(usageData.whitelist.tags, node.name.toLowerCase())) {
                                shouldRemove = true;
                            }
                            if (usageData.blacklist !== null && usageData.blacklist.tags !== null && hasOwnProperty.call(usageData.blacklist.tags, node.name.toLowerCase())) {
                                shouldRemove = true;
                            }
                        }
                        break;
                }
            }
        });
        if (shouldRemove) {
            list.remove(item);
        }
    });
    return selectorList.children.isEmpty;
}
function cleanRule(node, item, list, options) {
    if (utils.hasNoChildren(node.prelude) || utils.hasNoChildren(node.block)) {
        list.remove(item);
        return;
    }
    // avoid usage filtering for some at-rules
    if (this.atrule && skipUsageFilteringAtrule.has(cssTree.keyword(this.atrule.name).basename)) {
        return;
    }
    const { usage } = options;
    if (usage && (usage.whitelist !== null || usage.blacklist !== null)) {
        cleanUnused(node.prelude, usage);
        if (utils.hasNoChildren(node.prelude)) {
            list.remove(item);
            return;
        }
    }
}
module.exports = cleanRule;
}}),
"[project]/node_modules/csso/cjs/clean/TypeSelector.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
// remove useless universal selector
function cleanTypeSelector(node, item, list) {
    const name = item.data.name;
    // check it's a non-namespaced universal selector
    if (name !== '*') {
        return;
    }
    // remove when universal selector before other selectors
    const nextType = item.next && item.next.data.type;
    if (nextType === 'IdSelector' || nextType === 'ClassSelector' || nextType === 'AttributeSelector' || nextType === 'PseudoClassSelector' || nextType === 'PseudoElementSelector') {
        list.remove(item);
    }
}
module.exports = cleanTypeSelector;
}}),
"[project]/node_modules/csso/cjs/clean/WhiteSpace.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
function cleanWhitespace(node, item, list) {
    list.remove(item);
}
module.exports = cleanWhitespace;
}}),
"[project]/node_modules/csso/cjs/clean/index.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const Atrule = __turbopack_require__("[project]/node_modules/csso/cjs/clean/Atrule.cjs [app-client] (ecmascript)");
const Comment = __turbopack_require__("[project]/node_modules/csso/cjs/clean/Comment.cjs [app-client] (ecmascript)");
const Declaration = __turbopack_require__("[project]/node_modules/csso/cjs/clean/Declaration.cjs [app-client] (ecmascript)");
const Raw = __turbopack_require__("[project]/node_modules/csso/cjs/clean/Raw.cjs [app-client] (ecmascript)");
const Rule = __turbopack_require__("[project]/node_modules/csso/cjs/clean/Rule.cjs [app-client] (ecmascript)");
const TypeSelector = __turbopack_require__("[project]/node_modules/csso/cjs/clean/TypeSelector.cjs [app-client] (ecmascript)");
const WhiteSpace = __turbopack_require__("[project]/node_modules/csso/cjs/clean/WhiteSpace.cjs [app-client] (ecmascript)");
const handlers = {
    Atrule,
    Comment,
    Declaration,
    Raw,
    Rule,
    TypeSelector,
    WhiteSpace
};
function clean(ast, options) {
    cssTree.walk(ast, {
        leave (node, item, list) {
            if (handlers.hasOwnProperty(node.type)) {
                handlers[node.type].call(this, node, item, list, options);
            }
        }
    });
}
module.exports = clean;
}}),
"[project]/node_modules/csso/cjs/replace/atrule/keyframes.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
function compressKeyframes(node) {
    node.block.children.forEach((rule)=>{
        rule.prelude.children.forEach((simpleselector)=>{
            simpleselector.children.forEach((data, item)=>{
                if (data.type === 'Percentage' && data.value === '100') {
                    item.data = {
                        type: 'TypeSelector',
                        loc: data.loc,
                        name: 'to'
                    };
                } else if (data.type === 'TypeSelector' && data.name === 'from') {
                    item.data = {
                        type: 'Percentage',
                        loc: data.loc,
                        value: '0'
                    };
                }
            });
        });
    });
}
module.exports = compressKeyframes;
}}),
"[project]/node_modules/csso/cjs/replace/Atrule.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const keyframes = __turbopack_require__("[project]/node_modules/csso/cjs/replace/atrule/keyframes.cjs [app-client] (ecmascript)");
function Atrule(node) {
    // compress @keyframe selectors
    if (cssTree.keyword(node.name).basename === 'keyframes') {
        keyframes(node);
    }
}
module.exports = Atrule;
}}),
"[project]/node_modules/csso/cjs/replace/AttributeSelector.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
// Can unquote attribute detection
// Adopted implementation of Mathias Bynens
// https://github.com/mathiasbynens/mothereff.in/blob/master/unquoted-attributes/eff.js
const blockUnquoteRx = /^(-?\d|--)|[\u0000-\u002c\u002e\u002f\u003A-\u0040\u005B-\u005E\u0060\u007B-\u009f]/;
function canUnquote(value) {
    if (value === '' || value === '-') {
        return false;
    }
    return !blockUnquoteRx.test(value);
}
function AttributeSelector(node) {
    const attrValue = node.value;
    if (!attrValue || attrValue.type !== 'String') {
        return;
    }
    if (canUnquote(attrValue.value)) {
        node.value = {
            type: 'Identifier',
            loc: attrValue.loc,
            name: attrValue.value
        };
    }
}
module.exports = AttributeSelector;
}}),
"[project]/node_modules/csso/cjs/replace/property/font.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
function compressFont(node) {
    const list = node.children;
    list.forEachRight(function(node, item) {
        if (node.type === 'Identifier') {
            if (node.name === 'bold') {
                item.data = {
                    type: 'Number',
                    loc: node.loc,
                    value: '700'
                };
            } else if (node.name === 'normal') {
                const prev = item.prev;
                if (prev && prev.data.type === 'Operator' && prev.data.value === '/') {
                    this.remove(prev);
                }
                this.remove(item);
            }
        }
    });
    if (list.isEmpty) {
        list.insert(list.createItem({
            type: 'Identifier',
            name: 'normal'
        }));
    }
}
module.exports = compressFont;
}}),
"[project]/node_modules/csso/cjs/replace/property/font-weight.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
function compressFontWeight(node) {
    const value = node.children.head.data;
    if (value.type === 'Identifier') {
        switch(value.name){
            case 'normal':
                node.children.head.data = {
                    type: 'Number',
                    loc: value.loc,
                    value: '400'
                };
                break;
            case 'bold':
                node.children.head.data = {
                    type: 'Number',
                    loc: value.loc,
                    value: '700'
                };
                break;
        }
    }
}
module.exports = compressFontWeight;
}}),
"[project]/node_modules/csso/cjs/replace/property/background.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
function compressBackground(node) {
    function flush() {
        if (!buffer.length) {
            buffer.unshift({
                type: 'Number',
                loc: null,
                value: '0'
            }, {
                type: 'Number',
                loc: null,
                value: '0'
            });
        }
        newValue.push.apply(newValue, buffer);
        buffer = [];
    }
    let newValue = [];
    let buffer = [];
    node.children.forEach((node)=>{
        if (node.type === 'Operator' && node.value === ',') {
            flush();
            newValue.push(node);
            return;
        }
        // remove defaults
        if (node.type === 'Identifier') {
            if (node.name === 'transparent' || node.name === 'none' || node.name === 'repeat' || node.name === 'scroll') {
                return;
            }
        }
        buffer.push(node);
    });
    flush();
    node.children = new cssTree.List().fromArray(newValue);
}
module.exports = compressBackground;
}}),
"[project]/node_modules/csso/cjs/replace/property/border.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
function compressBorder(node) {
    node.children.forEach((node, item, list)=>{
        if (node.type === 'Identifier' && node.name.toLowerCase() === 'none') {
            if (list.head === list.tail) {
                // replace `none` for zero when `none` is a single term
                item.data = {
                    type: 'Number',
                    loc: node.loc,
                    value: '0'
                };
            } else {
                list.remove(item);
            }
        }
    });
}
module.exports = compressBorder;
}}),
"[project]/node_modules/csso/cjs/replace/Value.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const font = __turbopack_require__("[project]/node_modules/csso/cjs/replace/property/font.cjs [app-client] (ecmascript)");
const fontWeight = __turbopack_require__("[project]/node_modules/csso/cjs/replace/property/font-weight.cjs [app-client] (ecmascript)");
const background = __turbopack_require__("[project]/node_modules/csso/cjs/replace/property/background.cjs [app-client] (ecmascript)");
const border = __turbopack_require__("[project]/node_modules/csso/cjs/replace/property/border.cjs [app-client] (ecmascript)");
const handlers = {
    'font': font,
    'font-weight': fontWeight,
    'background': background,
    'border': border,
    'outline': border
};
function compressValue(node) {
    if (!this.declaration) {
        return;
    }
    const property = cssTree.property(this.declaration.property);
    if (handlers.hasOwnProperty(property.basename)) {
        handlers[property.basename](node);
    }
}
module.exports = compressValue;
}}),
"[project]/node_modules/csso/cjs/replace/Number.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const OMIT_PLUSSIGN = /^(?:\+|(-))?0*(\d*)(?:\.0*|(\.\d*?)0*)?$/;
const KEEP_PLUSSIGN = /^([\+\-])?0*(\d*)(?:\.0*|(\.\d*?)0*)?$/;
const unsafeToRemovePlusSignAfter = new Set([
    'Dimension',
    'Hash',
    'Identifier',
    'Number',
    'Raw',
    'UnicodeRange'
]);
function packNumber(value, item) {
    // omit plus sign only if no prev or prev is safe type
    const regexp = item && item.prev !== null && unsafeToRemovePlusSignAfter.has(item.prev.data.type) ? KEEP_PLUSSIGN : OMIT_PLUSSIGN;
    // 100 -> '100'
    // 00100 -> '100'
    // +100 -> '100'
    // -100 -> '-100'
    // 0.123 -> '.123'
    // 0.12300 -> '.123'
    // 0.0 -> ''
    // 0 -> ''
    // -0 -> '-'
    value = String(value).replace(regexp, '$1$2$3');
    if (value === '' || value === '-') {
        value = '0';
    }
    // FIXME: is it solution simplier?
    // value = String(Number(value)).replace(/^(-?)0+\./, '$1.');
    return value;
}
function Number(node) {
    node.value = packNumber(node.value);
}
exports.Number = Number;
exports.packNumber = packNumber;
}}),
"[project]/node_modules/csso/cjs/replace/Dimension.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const _Number = __turbopack_require__("[project]/node_modules/csso/cjs/replace/Number.cjs [app-client] (ecmascript)");
const MATH_FUNCTIONS = new Set([
    'calc',
    'min',
    'max',
    'clamp'
]);
const LENGTH_UNIT = new Set([
    // absolute length units
    'px',
    'mm',
    'cm',
    'in',
    'pt',
    'pc',
    // relative length units
    'em',
    'ex',
    'ch',
    'rem',
    // viewport-percentage lengths
    'vh',
    'vw',
    'vmin',
    'vmax',
    'vm'
]);
function compressDimension(node, item) {
    const value = _Number.packNumber(node.value);
    node.value = value;
    if (value === '0' && this.declaration !== null && this.atrulePrelude === null) {
        const unit = node.unit.toLowerCase();
        // only length values can be compressed
        if (!LENGTH_UNIT.has(unit)) {
            return;
        }
        // issue #362: shouldn't remove unit in -ms-flex since it breaks flex in IE10/11
        // issue #200: shouldn't remove unit in flex since it breaks flex in IE10/11
        if (this.declaration.property === '-ms-flex' || this.declaration.property === 'flex') {
            return;
        }
        // issue #222: don't remove units inside calc
        if (this.function && MATH_FUNCTIONS.has(this.function.name)) {
            return;
        }
        item.data = {
            type: 'Number',
            loc: node.loc,
            value
        };
    }
}
module.exports = compressDimension;
}}),
"[project]/node_modules/csso/cjs/replace/Percentage.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const _Number = __turbopack_require__("[project]/node_modules/csso/cjs/replace/Number.cjs [app-client] (ecmascript)");
const blacklist = new Set([
    // see https://github.com/jakubpawlowicz/clean-css/issues/957
    'width',
    'min-width',
    'max-width',
    'height',
    'min-height',
    'max-height',
    // issue #410: Don’t remove units in flex-basis value for (-ms-)flex shorthand
    // issue #362: shouldn't remove unit in -ms-flex since it breaks flex in IE10/11
    // issue #200: shouldn't remove unit in flex since it breaks flex in IE10/11
    'flex',
    '-ms-flex'
]);
function compressPercentage(node, item) {
    node.value = _Number.packNumber(node.value);
    if (node.value === '0' && this.declaration && !blacklist.has(this.declaration.property)) {
        // try to convert a number
        item.data = {
            type: 'Number',
            loc: node.loc,
            value: node.value
        };
        // that's ok only when new value matches on length
        if (!cssTree.lexer.matchDeclaration(this.declaration).isType(item.data, 'length')) {
            // otherwise rollback changes
            item.data = node;
        }
    }
}
module.exports = compressPercentage;
}}),
"[project]/node_modules/csso/cjs/replace/Url.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
function Url(node) {
    // convert `\\` to `/`
    node.value = node.value.replace(/\\/g, '/');
}
module.exports = Url;
}}),
"[project]/node_modules/csso/cjs/replace/color.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const _Number = __turbopack_require__("[project]/node_modules/csso/cjs/replace/Number.cjs [app-client] (ecmascript)");
// http://www.w3.org/TR/css3-color/#svg-color
const NAME_TO_HEX = {
    'aliceblue': 'f0f8ff',
    'antiquewhite': 'faebd7',
    'aqua': '0ff',
    'aquamarine': '7fffd4',
    'azure': 'f0ffff',
    'beige': 'f5f5dc',
    'bisque': 'ffe4c4',
    'black': '000',
    'blanchedalmond': 'ffebcd',
    'blue': '00f',
    'blueviolet': '8a2be2',
    'brown': 'a52a2a',
    'burlywood': 'deb887',
    'cadetblue': '5f9ea0',
    'chartreuse': '7fff00',
    'chocolate': 'd2691e',
    'coral': 'ff7f50',
    'cornflowerblue': '6495ed',
    'cornsilk': 'fff8dc',
    'crimson': 'dc143c',
    'cyan': '0ff',
    'darkblue': '00008b',
    'darkcyan': '008b8b',
    'darkgoldenrod': 'b8860b',
    'darkgray': 'a9a9a9',
    'darkgrey': 'a9a9a9',
    'darkgreen': '006400',
    'darkkhaki': 'bdb76b',
    'darkmagenta': '8b008b',
    'darkolivegreen': '556b2f',
    'darkorange': 'ff8c00',
    'darkorchid': '9932cc',
    'darkred': '8b0000',
    'darksalmon': 'e9967a',
    'darkseagreen': '8fbc8f',
    'darkslateblue': '483d8b',
    'darkslategray': '2f4f4f',
    'darkslategrey': '2f4f4f',
    'darkturquoise': '00ced1',
    'darkviolet': '9400d3',
    'deeppink': 'ff1493',
    'deepskyblue': '00bfff',
    'dimgray': '696969',
    'dimgrey': '696969',
    'dodgerblue': '1e90ff',
    'firebrick': 'b22222',
    'floralwhite': 'fffaf0',
    'forestgreen': '228b22',
    'fuchsia': 'f0f',
    'gainsboro': 'dcdcdc',
    'ghostwhite': 'f8f8ff',
    'gold': 'ffd700',
    'goldenrod': 'daa520',
    'gray': '808080',
    'grey': '808080',
    'green': '008000',
    'greenyellow': 'adff2f',
    'honeydew': 'f0fff0',
    'hotpink': 'ff69b4',
    'indianred': 'cd5c5c',
    'indigo': '4b0082',
    'ivory': 'fffff0',
    'khaki': 'f0e68c',
    'lavender': 'e6e6fa',
    'lavenderblush': 'fff0f5',
    'lawngreen': '7cfc00',
    'lemonchiffon': 'fffacd',
    'lightblue': 'add8e6',
    'lightcoral': 'f08080',
    'lightcyan': 'e0ffff',
    'lightgoldenrodyellow': 'fafad2',
    'lightgray': 'd3d3d3',
    'lightgrey': 'd3d3d3',
    'lightgreen': '90ee90',
    'lightpink': 'ffb6c1',
    'lightsalmon': 'ffa07a',
    'lightseagreen': '20b2aa',
    'lightskyblue': '87cefa',
    'lightslategray': '789',
    'lightslategrey': '789',
    'lightsteelblue': 'b0c4de',
    'lightyellow': 'ffffe0',
    'lime': '0f0',
    'limegreen': '32cd32',
    'linen': 'faf0e6',
    'magenta': 'f0f',
    'maroon': '800000',
    'mediumaquamarine': '66cdaa',
    'mediumblue': '0000cd',
    'mediumorchid': 'ba55d3',
    'mediumpurple': '9370db',
    'mediumseagreen': '3cb371',
    'mediumslateblue': '7b68ee',
    'mediumspringgreen': '00fa9a',
    'mediumturquoise': '48d1cc',
    'mediumvioletred': 'c71585',
    'midnightblue': '191970',
    'mintcream': 'f5fffa',
    'mistyrose': 'ffe4e1',
    'moccasin': 'ffe4b5',
    'navajowhite': 'ffdead',
    'navy': '000080',
    'oldlace': 'fdf5e6',
    'olive': '808000',
    'olivedrab': '6b8e23',
    'orange': 'ffa500',
    'orangered': 'ff4500',
    'orchid': 'da70d6',
    'palegoldenrod': 'eee8aa',
    'palegreen': '98fb98',
    'paleturquoise': 'afeeee',
    'palevioletred': 'db7093',
    'papayawhip': 'ffefd5',
    'peachpuff': 'ffdab9',
    'peru': 'cd853f',
    'pink': 'ffc0cb',
    'plum': 'dda0dd',
    'powderblue': 'b0e0e6',
    'purple': '800080',
    'rebeccapurple': '639',
    'red': 'f00',
    'rosybrown': 'bc8f8f',
    'royalblue': '4169e1',
    'saddlebrown': '8b4513',
    'salmon': 'fa8072',
    'sandybrown': 'f4a460',
    'seagreen': '2e8b57',
    'seashell': 'fff5ee',
    'sienna': 'a0522d',
    'silver': 'c0c0c0',
    'skyblue': '87ceeb',
    'slateblue': '6a5acd',
    'slategray': '708090',
    'slategrey': '708090',
    'snow': 'fffafa',
    'springgreen': '00ff7f',
    'steelblue': '4682b4',
    'tan': 'd2b48c',
    'teal': '008080',
    'thistle': 'd8bfd8',
    'tomato': 'ff6347',
    'turquoise': '40e0d0',
    'violet': 'ee82ee',
    'wheat': 'f5deb3',
    'white': 'fff',
    'whitesmoke': 'f5f5f5',
    'yellow': 'ff0',
    'yellowgreen': '9acd32'
};
const HEX_TO_NAME = {
    '800000': 'maroon',
    '800080': 'purple',
    '808000': 'olive',
    '808080': 'gray',
    '00ffff': 'cyan',
    'f0ffff': 'azure',
    'f5f5dc': 'beige',
    'ffe4c4': 'bisque',
    '000000': 'black',
    '0000ff': 'blue',
    'a52a2a': 'brown',
    'ff7f50': 'coral',
    'ffd700': 'gold',
    '008000': 'green',
    '4b0082': 'indigo',
    'fffff0': 'ivory',
    'f0e68c': 'khaki',
    '00ff00': 'lime',
    'faf0e6': 'linen',
    '000080': 'navy',
    'ffa500': 'orange',
    'da70d6': 'orchid',
    'cd853f': 'peru',
    'ffc0cb': 'pink',
    'dda0dd': 'plum',
    'f00': 'red',
    'ff0000': 'red',
    'fa8072': 'salmon',
    'a0522d': 'sienna',
    'c0c0c0': 'silver',
    'fffafa': 'snow',
    'd2b48c': 'tan',
    '008080': 'teal',
    'ff6347': 'tomato',
    'ee82ee': 'violet',
    'f5deb3': 'wheat',
    'ffffff': 'white',
    'ffff00': 'yellow'
};
function hueToRgb(p, q, t) {
    if (t < 0) {
        t += 1;
    }
    if (t > 1) {
        t -= 1;
    }
    if (t < 1 / 6) {
        return p + (q - p) * 6 * t;
    }
    if (t < 1 / 2) {
        return q;
    }
    if (t < 2 / 3) {
        return p + (q - p) * (2 / 3 - t) * 6;
    }
    return p;
}
function hslToRgb(h, s, l, a) {
    let r;
    let g;
    let b;
    if (s === 0) {
        r = g = b = l; // achromatic
    } else {
        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;
        r = hueToRgb(p, q, h + 1 / 3);
        g = hueToRgb(p, q, h);
        b = hueToRgb(p, q, h - 1 / 3);
    }
    return [
        Math.round(r * 255),
        Math.round(g * 255),
        Math.round(b * 255),
        a
    ];
}
function toHex(value) {
    value = value.toString(16);
    return value.length === 1 ? '0' + value : value;
}
function parseFunctionArgs(functionArgs, count, rgb) {
    let cursor = functionArgs.head;
    let args = [];
    let wasValue = false;
    while(cursor !== null){
        const { type, value } = cursor.data;
        switch(type){
            case 'Number':
            case 'Percentage':
                if (wasValue) {
                    return;
                }
                wasValue = true;
                args.push({
                    type,
                    value: Number(value)
                });
                break;
            case 'Operator':
                if (value === ',') {
                    if (!wasValue) {
                        return;
                    }
                    wasValue = false;
                } else if (wasValue || value !== '+') {
                    return;
                }
                break;
            default:
                // something we couldn't understand
                return;
        }
        cursor = cursor.next;
    }
    if (args.length !== count) {
        // invalid arguments count
        // TODO: remove those tokens
        return;
    }
    if (args.length === 4) {
        if (args[3].type !== 'Number') {
            // 4th argument should be a number
            // TODO: remove those tokens
            return;
        }
        args[3].type = 'Alpha';
    }
    if (rgb) {
        if (args[0].type !== args[1].type || args[0].type !== args[2].type) {
            // invalid color, numbers and percentage shouldn't be mixed
            // TODO: remove those tokens
            return;
        }
    } else {
        if (args[0].type !== 'Number' || args[1].type !== 'Percentage' || args[2].type !== 'Percentage') {
            // invalid color, for hsl values should be: number, percentage, percentage
            // TODO: remove those tokens
            return;
        }
        args[0].type = 'Angle';
    }
    return args.map(function(arg) {
        let value = Math.max(0, arg.value);
        switch(arg.type){
            case 'Number':
                // fit value to [0..255] range
                value = Math.min(value, 255);
                break;
            case 'Percentage':
                // convert 0..100% to value in [0..255] range
                value = Math.min(value, 100) / 100;
                if (!rgb) {
                    return value;
                }
                value = 255 * value;
                break;
            case 'Angle':
                // fit value to (-360..360) range
                return (value % 360 + 360) % 360 / 360;
            case 'Alpha':
                // fit value to [0..1] range
                return Math.min(value, 1);
        }
        return Math.round(value);
    });
}
function compressFunction(node, item) {
    let functionName = node.name;
    let args;
    if (functionName === 'rgba' || functionName === 'hsla') {
        args = parseFunctionArgs(node.children, 4, functionName === 'rgba');
        if (!args) {
            // something went wrong
            return;
        }
        if (functionName === 'hsla') {
            args = hslToRgb(...args);
            node.name = 'rgba';
        }
        if (args[3] === 0) {
            // try to replace `rgba(x, x, x, 0)` to `transparent`
            // always replace `rgba(0, 0, 0, 0)` to `transparent`
            // otherwise avoid replacement in gradients since it may break color transition
            // http://stackoverflow.com/questions/11829410/css3-gradient-rendering-issues-from-transparent-to-white
            const scopeFunctionName = this.function && this.function.name;
            if (args[0] === 0 && args[1] === 0 && args[2] === 0 || !/^(?:to|from|color-stop)$|gradient$/i.test(scopeFunctionName)) {
                item.data = {
                    type: 'Identifier',
                    loc: node.loc,
                    name: 'transparent'
                };
                return;
            }
        }
        if (args[3] !== 1) {
            // replace argument values for normalized/interpolated
            node.children.forEach((node, item, list)=>{
                if (node.type === 'Operator') {
                    if (node.value !== ',') {
                        list.remove(item);
                    }
                    return;
                }
                item.data = {
                    type: 'Number',
                    loc: node.loc,
                    value: _Number.packNumber(args.shift())
                };
            });
            return;
        }
        // otherwise convert to rgb, i.e. rgba(255, 0, 0, 1) -> rgb(255, 0, 0)
        functionName = 'rgb';
    }
    if (functionName === 'hsl') {
        args = args || parseFunctionArgs(node.children, 3, false);
        if (!args) {
            // something went wrong
            return;
        }
        // convert to rgb
        args = hslToRgb(...args);
        functionName = 'rgb';
    }
    if (functionName === 'rgb') {
        args = args || parseFunctionArgs(node.children, 3, true);
        if (!args) {
            // something went wrong
            return;
        }
        item.data = {
            type: 'Hash',
            loc: node.loc,
            value: toHex(args[0]) + toHex(args[1]) + toHex(args[2])
        };
        compressHex(item.data, item);
    }
}
function compressIdent(node, item) {
    if (this.declaration === null) {
        return;
    }
    let color = node.name.toLowerCase();
    if (NAME_TO_HEX.hasOwnProperty(color) && cssTree.lexer.matchDeclaration(this.declaration).isType(node, 'color')) {
        const hex = NAME_TO_HEX[color];
        if (hex.length + 1 <= color.length) {
            // replace for shorter hex value
            item.data = {
                type: 'Hash',
                loc: node.loc,
                value: hex
            };
        } else {
            // special case for consistent colors
            if (color === 'grey') {
                color = 'gray';
            }
            // just replace value for lower cased name
            node.name = color;
        }
    }
}
function compressHex(node, item) {
    let color = node.value.toLowerCase();
    // #112233 -> #123
    if (color.length === 6 && color[0] === color[1] && color[2] === color[3] && color[4] === color[5]) {
        color = color[0] + color[2] + color[4];
    }
    if (HEX_TO_NAME[color]) {
        item.data = {
            type: 'Identifier',
            loc: node.loc,
            name: HEX_TO_NAME[color]
        };
    } else {
        node.value = color;
    }
}
exports.compressFunction = compressFunction;
exports.compressHex = compressHex;
exports.compressIdent = compressIdent;
}}),
"[project]/node_modules/csso/cjs/replace/index.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const Atrule = __turbopack_require__("[project]/node_modules/csso/cjs/replace/Atrule.cjs [app-client] (ecmascript)");
const AttributeSelector = __turbopack_require__("[project]/node_modules/csso/cjs/replace/AttributeSelector.cjs [app-client] (ecmascript)");
const Value = __turbopack_require__("[project]/node_modules/csso/cjs/replace/Value.cjs [app-client] (ecmascript)");
const Dimension = __turbopack_require__("[project]/node_modules/csso/cjs/replace/Dimension.cjs [app-client] (ecmascript)");
const Percentage = __turbopack_require__("[project]/node_modules/csso/cjs/replace/Percentage.cjs [app-client] (ecmascript)");
const _Number = __turbopack_require__("[project]/node_modules/csso/cjs/replace/Number.cjs [app-client] (ecmascript)");
const Url = __turbopack_require__("[project]/node_modules/csso/cjs/replace/Url.cjs [app-client] (ecmascript)");
const color = __turbopack_require__("[project]/node_modules/csso/cjs/replace/color.cjs [app-client] (ecmascript)");
const handlers = {
    Atrule,
    AttributeSelector,
    Value,
    Dimension,
    Percentage,
    Number: _Number.Number,
    Url,
    Hash: color.compressHex,
    Identifier: color.compressIdent,
    Function: color.compressFunction
};
function replace(ast) {
    cssTree.walk(ast, {
        leave (node, item, list) {
            if (handlers.hasOwnProperty(node.type)) {
                handlers[node.type].call(this, node, item, list);
            }
        }
    });
}
module.exports = replace;
}}),
"[project]/node_modules/csso/cjs/restructure/prepare/createDeclarationIndexer.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
class Index {
    constructor(){
        this.map = new Map();
    }
    resolve(str) {
        let index = this.map.get(str);
        if (index === undefined) {
            index = this.map.size + 1;
            this.map.set(str, index);
        }
        return index;
    }
}
function createDeclarationIndexer() {
    const ids = new Index();
    return function markDeclaration(node) {
        const id = cssTree.generate(node);
        node.id = ids.resolve(id);
        node.length = id.length;
        node.fingerprint = null;
        return node;
    };
}
module.exports = createDeclarationIndexer;
}}),
"[project]/node_modules/csso/cjs/restructure/prepare/specificity.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
function ensureSelectorList(node) {
    if (node.type === 'Raw') {
        return cssTree.parse(node.value, {
            context: 'selectorList'
        });
    }
    return node;
}
function maxSpecificity(a, b) {
    for(let i = 0; i < 3; i++){
        if (a[i] !== b[i]) {
            return a[i] > b[i] ? a : b;
        }
    }
    return a;
}
function maxSelectorListSpecificity(selectorList) {
    return ensureSelectorList(selectorList).children.reduce((result, node)=>maxSpecificity(specificity(node), result), [
        0,
        0,
        0
    ]);
}
// §16. Calculating a selector’s specificity
// https://www.w3.org/TR/selectors-4/#specificity-rules
function specificity(simpleSelector) {
    let A = 0;
    let B = 0;
    let C = 0;
    // A selector’s specificity is calculated for a given element as follows:
    simpleSelector.children.forEach((node)=>{
        switch(node.type){
            // count the number of ID selectors in the selector (= A)
            case 'IdSelector':
                A++;
                break;
            // count the number of class selectors, attributes selectors, ...
            case 'ClassSelector':
            case 'AttributeSelector':
                B++;
                break;
            // ... and pseudo-classes in the selector (= B)
            case 'PseudoClassSelector':
                switch(node.name.toLowerCase()){
                    // The specificity of an :is(), :not(), or :has() pseudo-class is replaced
                    // by the specificity of the most specific complex selector in its selector list argument.
                    case 'not':
                    case 'has':
                    case 'is':
                    // :matches() is used before it was renamed to :is()
                    // https://github.com/w3c/csswg-drafts/issues/3258
                    case 'matches':
                    // Older browsers support :is() functionality as prefixed pseudo-class :any()
                    // https://developer.mozilla.org/en-US/docs/Web/CSS/:is
                    case '-webkit-any':
                    case '-moz-any':
                        {
                            const [a, b, c] = maxSelectorListSpecificity(node.children.first);
                            A += a;
                            B += b;
                            C += c;
                            break;
                        }
                    // Analogously, the specificity of an :nth-child() or :nth-last-child() selector
                    // is the specificity of the pseudo class itself (counting as one pseudo-class selector)
                    // plus the specificity of the most specific complex selector in its selector list argument (if any).
                    case 'nth-child':
                    case 'nth-last-child':
                        {
                            const arg = node.children.first;
                            if (arg.type === 'Nth' && arg.selector) {
                                const [a, b, c] = maxSelectorListSpecificity(arg.selector);
                                A += a;
                                B += b + 1;
                                C += c;
                            } else {
                                B++;
                            }
                            break;
                        }
                    // The specificity of a :where() pseudo-class is replaced by zero.
                    case 'where':
                        break;
                    // The four Level 2 pseudo-elements (::before, ::after, ::first-line, and ::first-letter) may,
                    // for legacy reasons, be represented using the <pseudo-class-selector> grammar,
                    // with only a single ":" character at their start.
                    // https://www.w3.org/TR/selectors-4/#single-colon-pseudos
                    case 'before':
                    case 'after':
                    case 'first-line':
                    case 'first-letter':
                        C++;
                        break;
                    default:
                        B++;
                }
                break;
            // count the number of type selectors ...
            case 'TypeSelector':
                // ignore the universal selector
                if (!node.name.endsWith('*')) {
                    C++;
                }
                break;
            // ... and pseudo-elements in the selector (= C)
            case 'PseudoElementSelector':
                C++;
                break;
        }
    });
    return [
        A,
        B,
        C
    ];
}
module.exports = specificity;
}}),
"[project]/node_modules/csso/cjs/restructure/prepare/processSelector.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const specificity = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/prepare/specificity.cjs [app-client] (ecmascript)");
const nonFreezePseudoElements = new Set([
    'first-letter',
    'first-line',
    'after',
    'before'
]);
const nonFreezePseudoClasses = new Set([
    'link',
    'visited',
    'hover',
    'active',
    'first-letter',
    'first-line',
    'after',
    'before'
]);
function processSelector(node, usageData) {
    const pseudos = new Set();
    node.prelude.children.forEach(function(simpleSelector) {
        let tagName = '*';
        let scope = 0;
        simpleSelector.children.forEach(function(node) {
            switch(node.type){
                case 'ClassSelector':
                    if (usageData && usageData.scopes) {
                        const classScope = usageData.scopes[node.name] || 0;
                        if (scope !== 0 && classScope !== scope) {
                            throw new Error('Selector can\'t has classes from different scopes: ' + cssTree.generate(simpleSelector));
                        }
                        scope = classScope;
                    }
                    break;
                case 'PseudoClassSelector':
                    {
                        const name = node.name.toLowerCase();
                        if (!nonFreezePseudoClasses.has(name)) {
                            pseudos.add(`:${name}`);
                        }
                        break;
                    }
                case 'PseudoElementSelector':
                    {
                        const name = node.name.toLowerCase();
                        if (!nonFreezePseudoElements.has(name)) {
                            pseudos.add(`::${name}`);
                        }
                        break;
                    }
                case 'TypeSelector':
                    tagName = node.name.toLowerCase();
                    break;
                case 'AttributeSelector':
                    if (node.flags) {
                        pseudos.add(`[${node.flags.toLowerCase()}]`);
                    }
                    break;
                case 'Combinator':
                    tagName = '*';
                    break;
            }
        });
        simpleSelector.compareMarker = specificity(simpleSelector).toString();
        simpleSelector.id = null; // pre-init property to avoid multiple hidden class
        simpleSelector.id = cssTree.generate(simpleSelector);
        if (scope) {
            simpleSelector.compareMarker += ':' + scope;
        }
        if (tagName !== '*') {
            simpleSelector.compareMarker += ',' + tagName;
        }
    });
    // add property to all rule nodes to avoid multiple hidden class
    node.pseudoSignature = pseudos.size > 0 ? [
        ...pseudos
    ].sort().join(',') : false;
}
module.exports = processSelector;
}}),
"[project]/node_modules/csso/cjs/restructure/prepare/index.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const createDeclarationIndexer = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/prepare/createDeclarationIndexer.cjs [app-client] (ecmascript)");
const processSelector = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/prepare/processSelector.cjs [app-client] (ecmascript)");
function prepare(ast, options) {
    const markDeclaration = createDeclarationIndexer();
    cssTree.walk(ast, {
        visit: 'Rule',
        enter (node) {
            node.block.children.forEach(markDeclaration);
            processSelector(node, options.usage);
        }
    });
    cssTree.walk(ast, {
        visit: 'Atrule',
        enter (node) {
            if (node.prelude) {
                node.prelude.id = null; // pre-init property to avoid multiple hidden class for generate
                node.prelude.id = cssTree.generate(node.prelude);
            }
            // compare keyframe selectors by its values
            // NOTE: still no clarification about problems with keyframes selector grouping (issue #197)
            if (cssTree.keyword(node.name).basename === 'keyframes') {
                node.block.avoidRulesMerge = true; /* probably we don't need to prevent those merges for @keyframes
                                                       TODO: need to be checked */ 
                node.block.children.forEach(function(rule) {
                    rule.prelude.children.forEach(function(simpleselector) {
                        simpleselector.compareMarker = simpleselector.id;
                    });
                });
            }
        }
    });
    return {
        declaration: markDeclaration
    };
}
module.exports = prepare;
}}),
"[project]/node_modules/csso/cjs/restructure/1-mergeAtrule.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const { hasOwnProperty } = Object.prototype;
function addRuleToMap(map, item, list, single) {
    const node = item.data;
    const name = cssTree.keyword(node.name).basename;
    const id = node.name.toLowerCase() + '/' + (node.prelude ? node.prelude.id : null);
    if (!hasOwnProperty.call(map, name)) {
        map[name] = Object.create(null);
    }
    if (single) {
        delete map[name][id];
    }
    if (!hasOwnProperty.call(map[name], id)) {
        map[name][id] = new cssTree.List();
    }
    map[name][id].append(list.remove(item));
}
function relocateAtrules(ast, options) {
    const collected = Object.create(null);
    let topInjectPoint = null;
    ast.children.forEach(function(node, item, list) {
        if (node.type === 'Atrule') {
            const name = cssTree.keyword(node.name).basename;
            switch(name){
                case 'keyframes':
                    addRuleToMap(collected, item, list, true);
                    return;
                case 'media':
                    if (options.forceMediaMerge) {
                        addRuleToMap(collected, item, list, false);
                        return;
                    }
                    break;
            }
            if (topInjectPoint === null && name !== 'charset' && name !== 'import') {
                topInjectPoint = item;
            }
        } else {
            if (topInjectPoint === null) {
                topInjectPoint = item;
            }
        }
    });
    for(const atrule in collected){
        for(const id in collected[atrule]){
            ast.children.insertList(collected[atrule][id], atrule === 'media' ? null : topInjectPoint);
        }
    }
}
function isMediaRule(node) {
    return node.type === 'Atrule' && node.name === 'media';
}
function processAtrule(node, item, list) {
    if (!isMediaRule(node)) {
        return;
    }
    const prev = item.prev && item.prev.data;
    if (!prev || !isMediaRule(prev)) {
        return;
    }
    // merge @media with same query
    if (node.prelude && prev.prelude && node.prelude.id === prev.prelude.id) {
        prev.block.children.appendList(node.block.children);
        list.remove(item);
    // TODO: use it when we can refer to several points in source
    // prev.loc = {
    //     primary: prev.loc,
    //     merged: node.loc
    // };
    }
}
function rejoinAtrule(ast, options) {
    relocateAtrules(ast, options);
    cssTree.walk(ast, {
        visit: 'Atrule',
        reverse: true,
        enter: processAtrule
    });
}
module.exports = rejoinAtrule;
}}),
"[project]/node_modules/csso/cjs/restructure/utils.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const { hasOwnProperty } = Object.prototype;
function isEqualSelectors(a, b) {
    let cursor1 = a.head;
    let cursor2 = b.head;
    while(cursor1 !== null && cursor2 !== null && cursor1.data.id === cursor2.data.id){
        cursor1 = cursor1.next;
        cursor2 = cursor2.next;
    }
    return cursor1 === null && cursor2 === null;
}
function isEqualDeclarations(a, b) {
    let cursor1 = a.head;
    let cursor2 = b.head;
    while(cursor1 !== null && cursor2 !== null && cursor1.data.id === cursor2.data.id){
        cursor1 = cursor1.next;
        cursor2 = cursor2.next;
    }
    return cursor1 === null && cursor2 === null;
}
function compareDeclarations(declarations1, declarations2) {
    const result = {
        eq: [],
        ne1: [],
        ne2: [],
        ne2overrided: []
    };
    const fingerprints = Object.create(null);
    const declarations2hash = Object.create(null);
    for(let cursor = declarations2.head; cursor; cursor = cursor.next){
        declarations2hash[cursor.data.id] = true;
    }
    for(let cursor = declarations1.head; cursor; cursor = cursor.next){
        const data = cursor.data;
        if (data.fingerprint) {
            fingerprints[data.fingerprint] = data.important;
        }
        if (declarations2hash[data.id]) {
            declarations2hash[data.id] = false;
            result.eq.push(data);
        } else {
            result.ne1.push(data);
        }
    }
    for(let cursor = declarations2.head; cursor; cursor = cursor.next){
        const data = cursor.data;
        if (declarations2hash[data.id]) {
            // when declarations1 has an overriding declaration, this is not a difference
            // unless no !important is used on prev and !important is used on the following
            if (!hasOwnProperty.call(fingerprints, data.fingerprint) || !fingerprints[data.fingerprint] && data.important) {
                result.ne2.push(data);
            }
            result.ne2overrided.push(data);
        }
    }
    return result;
}
function addSelectors(dest, source) {
    source.forEach((sourceData)=>{
        const newStr = sourceData.id;
        let cursor = dest.head;
        while(cursor){
            const nextStr = cursor.data.id;
            if (nextStr === newStr) {
                return;
            }
            if (nextStr > newStr) {
                break;
            }
            cursor = cursor.next;
        }
        dest.insert(dest.createItem(sourceData), cursor);
    });
    return dest;
}
// check if simpleselectors has no equal specificity and element selector
function hasSimilarSelectors(selectors1, selectors2) {
    let cursor1 = selectors1.head;
    while(cursor1 !== null){
        let cursor2 = selectors2.head;
        while(cursor2 !== null){
            if (cursor1.data.compareMarker === cursor2.data.compareMarker) {
                return true;
            }
            cursor2 = cursor2.next;
        }
        cursor1 = cursor1.next;
    }
    return false;
}
// test node can't to be skipped
function unsafeToSkipNode(node) {
    switch(node.type){
        case 'Rule':
            // unsafe skip ruleset with selector similarities
            return hasSimilarSelectors(node.prelude.children, this);
        case 'Atrule':
            // can skip at-rules with blocks
            if (node.block) {
                // unsafe skip at-rule if block contains something unsafe to skip
                return node.block.children.some(unsafeToSkipNode, this);
            }
            break;
        case 'Declaration':
            return false;
    }
    // unsafe by default
    return true;
}
exports.addSelectors = addSelectors;
exports.compareDeclarations = compareDeclarations;
exports.hasSimilarSelectors = hasSimilarSelectors;
exports.isEqualDeclarations = isEqualDeclarations;
exports.isEqualSelectors = isEqualSelectors;
exports.unsafeToSkipNode = unsafeToSkipNode;
}}),
"[project]/node_modules/csso/cjs/restructure/2-initialMergeRuleset.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const utils = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/utils.cjs [app-client] (ecmascript)");
function processRule(node, item, list) {
    const selectors = node.prelude.children;
    const declarations = node.block.children;
    list.prevUntil(item.prev, function(prev) {
        // skip non-ruleset node if safe
        if (prev.type !== 'Rule') {
            return utils.unsafeToSkipNode.call(selectors, prev);
        }
        const prevSelectors = prev.prelude.children;
        const prevDeclarations = prev.block.children;
        // try to join rulesets with equal pseudo signature
        if (node.pseudoSignature === prev.pseudoSignature) {
            // try to join by selectors
            if (utils.isEqualSelectors(prevSelectors, selectors)) {
                prevDeclarations.appendList(declarations);
                list.remove(item);
                return true;
            }
            // try to join by declarations
            if (utils.isEqualDeclarations(declarations, prevDeclarations)) {
                utils.addSelectors(prevSelectors, selectors);
                list.remove(item);
                return true;
            }
        }
        // go to prev ruleset if has no selector similarities
        return utils.hasSimilarSelectors(selectors, prevSelectors);
    });
}
// NOTE: direction should be left to right, since rulesets merge to left
// ruleset. When direction right to left unmerged rulesets may prevent lookup
// TODO: remove initial merge
function initialMergeRule(ast) {
    cssTree.walk(ast, {
        visit: 'Rule',
        enter: processRule
    });
}
module.exports = initialMergeRule;
}}),
"[project]/node_modules/csso/cjs/restructure/3-disjoinRuleset.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
function processRule(node, item, list) {
    const selectors = node.prelude.children;
    // generate new rule sets:
    // .a, .b { color: red; }
    // ->
    // .a { color: red; }
    // .b { color: red; }
    // while there are more than 1 simple selector split for rulesets
    while(selectors.head !== selectors.tail){
        const newSelectors = new cssTree.List();
        newSelectors.insert(selectors.remove(selectors.head));
        list.insert(list.createItem({
            type: 'Rule',
            loc: node.loc,
            prelude: {
                type: 'SelectorList',
                loc: node.prelude.loc,
                children: newSelectors
            },
            block: {
                type: 'Block',
                loc: node.block.loc,
                children: node.block.children.copy()
            },
            pseudoSignature: node.pseudoSignature
        }), item);
    }
}
function disjoinRule(ast) {
    cssTree.walk(ast, {
        visit: 'Rule',
        reverse: true,
        enter: processRule
    });
}
module.exports = disjoinRule;
}}),
"[project]/node_modules/csso/cjs/restructure/4-restructShorthand.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const REPLACE = 1;
const REMOVE = 2;
const TOP = 0;
const RIGHT = 1;
const BOTTOM = 2;
const LEFT = 3;
const SIDES = [
    'top',
    'right',
    'bottom',
    'left'
];
const SIDE = {
    'margin-top': 'top',
    'margin-right': 'right',
    'margin-bottom': 'bottom',
    'margin-left': 'left',
    'padding-top': 'top',
    'padding-right': 'right',
    'padding-bottom': 'bottom',
    'padding-left': 'left',
    'border-top-color': 'top',
    'border-right-color': 'right',
    'border-bottom-color': 'bottom',
    'border-left-color': 'left',
    'border-top-width': 'top',
    'border-right-width': 'right',
    'border-bottom-width': 'bottom',
    'border-left-width': 'left',
    'border-top-style': 'top',
    'border-right-style': 'right',
    'border-bottom-style': 'bottom',
    'border-left-style': 'left'
};
const MAIN_PROPERTY = {
    'margin': 'margin',
    'margin-top': 'margin',
    'margin-right': 'margin',
    'margin-bottom': 'margin',
    'margin-left': 'margin',
    'padding': 'padding',
    'padding-top': 'padding',
    'padding-right': 'padding',
    'padding-bottom': 'padding',
    'padding-left': 'padding',
    'border-color': 'border-color',
    'border-top-color': 'border-color',
    'border-right-color': 'border-color',
    'border-bottom-color': 'border-color',
    'border-left-color': 'border-color',
    'border-width': 'border-width',
    'border-top-width': 'border-width',
    'border-right-width': 'border-width',
    'border-bottom-width': 'border-width',
    'border-left-width': 'border-width',
    'border-style': 'border-style',
    'border-top-style': 'border-style',
    'border-right-style': 'border-style',
    'border-bottom-style': 'border-style',
    'border-left-style': 'border-style'
};
class TRBL {
    constructor(name){
        this.name = name;
        this.loc = null;
        this.iehack = undefined;
        this.sides = {
            'top': null,
            'right': null,
            'bottom': null,
            'left': null
        };
    }
    getValueSequence(declaration, count) {
        const values = [];
        let iehack = '';
        const hasBadValues = declaration.value.type !== 'Value' || declaration.value.children.some(function(child) {
            let special = false;
            switch(child.type){
                case 'Identifier':
                    switch(child.name){
                        case '\\0':
                        case '\\9':
                            iehack = child.name;
                            return;
                        case 'inherit':
                        case 'initial':
                        case 'unset':
                        case 'revert':
                            special = child.name;
                            break;
                    }
                    break;
                case 'Dimension':
                    switch(child.unit){
                        // is not supported until IE11
                        case 'rem':
                        // v* units is too buggy across browsers and better
                        // don't merge values with those units
                        case 'vw':
                        case 'vh':
                        case 'vmin':
                        case 'vmax':
                        case 'vm':
                            special = child.unit;
                            break;
                    }
                    break;
                case 'Hash':
                case 'Number':
                case 'Percentage':
                    break;
                case 'Function':
                    if (child.name === 'var') {
                        return true;
                    }
                    special = child.name;
                    break;
                default:
                    return true; // bad value
            }
            values.push({
                node: child,
                special,
                important: declaration.important
            });
        });
        if (hasBadValues || values.length > count) {
            return false;
        }
        if (typeof this.iehack === 'string' && this.iehack !== iehack) {
            return false;
        }
        this.iehack = iehack; // move outside
        return values;
    }
    canOverride(side, value) {
        const currentValue = this.sides[side];
        return !currentValue || value.important && !currentValue.important;
    }
    add(name, declaration) {
        function attemptToAdd() {
            const sides = this.sides;
            const side = SIDE[name];
            if (side) {
                if (side in sides === false) {
                    return false;
                }
                const values = this.getValueSequence(declaration, 1);
                if (!values || !values.length) {
                    return false;
                }
                // can mix only if specials are equal
                for(const key in sides){
                    if (sides[key] !== null && sides[key].special !== values[0].special) {
                        return false;
                    }
                }
                if (!this.canOverride(side, values[0])) {
                    return true;
                }
                sides[side] = values[0];
                return true;
            } else if (name === this.name) {
                const values = this.getValueSequence(declaration, 4);
                if (!values || !values.length) {
                    return false;
                }
                switch(values.length){
                    case 1:
                        values[RIGHT] = values[TOP];
                        values[BOTTOM] = values[TOP];
                        values[LEFT] = values[TOP];
                        break;
                    case 2:
                        values[BOTTOM] = values[TOP];
                        values[LEFT] = values[RIGHT];
                        break;
                    case 3:
                        values[LEFT] = values[RIGHT];
                        break;
                }
                // can mix only if specials are equal
                for(let i = 0; i < 4; i++){
                    for(const key in sides){
                        if (sides[key] !== null && sides[key].special !== values[i].special) {
                            return false;
                        }
                    }
                }
                for(let i = 0; i < 4; i++){
                    if (this.canOverride(SIDES[i], values[i])) {
                        sides[SIDES[i]] = values[i];
                    }
                }
                return true;
            }
        }
        if (!attemptToAdd.call(this)) {
            return false;
        }
        // TODO: use it when we can refer to several points in source
        // if (this.loc) {
        //     this.loc = {
        //         primary: this.loc,
        //         merged: declaration.loc
        //     };
        // } else {
        //     this.loc = declaration.loc;
        // }
        if (!this.loc) {
            this.loc = declaration.loc;
        }
        return true;
    }
    isOkToMinimize() {
        const top = this.sides.top;
        const right = this.sides.right;
        const bottom = this.sides.bottom;
        const left = this.sides.left;
        if (top && right && bottom && left) {
            const important = top.important + right.important + bottom.important + left.important;
            return important === 0 || important === 4;
        }
        return false;
    }
    getValue() {
        const result = new cssTree.List();
        const sides = this.sides;
        const values = [
            sides.top,
            sides.right,
            sides.bottom,
            sides.left
        ];
        const stringValues = [
            cssTree.generate(sides.top.node),
            cssTree.generate(sides.right.node),
            cssTree.generate(sides.bottom.node),
            cssTree.generate(sides.left.node)
        ];
        if (stringValues[LEFT] === stringValues[RIGHT]) {
            values.pop();
            if (stringValues[BOTTOM] === stringValues[TOP]) {
                values.pop();
                if (stringValues[RIGHT] === stringValues[TOP]) {
                    values.pop();
                }
            }
        }
        for(let i = 0; i < values.length; i++){
            result.appendData(values[i].node);
        }
        if (this.iehack) {
            result.appendData({
                type: 'Identifier',
                loc: null,
                name: this.iehack
            });
        }
        return {
            type: 'Value',
            loc: null,
            children: result
        };
    }
    getDeclaration() {
        return {
            type: 'Declaration',
            loc: this.loc,
            important: this.sides.top.important,
            property: this.name,
            value: this.getValue()
        };
    }
}
function processRule(rule, shorts, shortDeclarations, lastShortSelector) {
    const declarations = rule.block.children;
    const selector = rule.prelude.children.first.id;
    rule.block.children.forEachRight(function(declaration, item) {
        const property = declaration.property;
        if (!MAIN_PROPERTY.hasOwnProperty(property)) {
            return;
        }
        const key = MAIN_PROPERTY[property];
        let shorthand;
        let operation;
        if (!lastShortSelector || selector === lastShortSelector) {
            if (key in shorts) {
                operation = REMOVE;
                shorthand = shorts[key];
            }
        }
        if (!shorthand || !shorthand.add(property, declaration)) {
            operation = REPLACE;
            shorthand = new TRBL(key);
            // if can't parse value ignore it and break shorthand children
            if (!shorthand.add(property, declaration)) {
                lastShortSelector = null;
                return;
            }
        }
        shorts[key] = shorthand;
        shortDeclarations.push({
            operation,
            block: declarations,
            item,
            shorthand
        });
        lastShortSelector = selector;
    });
    return lastShortSelector;
}
function processShorthands(shortDeclarations, markDeclaration) {
    shortDeclarations.forEach(function(item) {
        const shorthand = item.shorthand;
        if (!shorthand.isOkToMinimize()) {
            return;
        }
        if (item.operation === REPLACE) {
            item.item.data = markDeclaration(shorthand.getDeclaration());
        } else {
            item.block.remove(item.item);
        }
    });
}
function restructBlock(ast, indexer) {
    const stylesheetMap = {};
    const shortDeclarations = [];
    cssTree.walk(ast, {
        visit: 'Rule',
        reverse: true,
        enter (node) {
            const stylesheet = this.block || this.stylesheet;
            const ruleId = (node.pseudoSignature || '') + '|' + node.prelude.children.first.id;
            let ruleMap;
            let shorts;
            if (!stylesheetMap.hasOwnProperty(stylesheet.id)) {
                ruleMap = {
                    lastShortSelector: null
                };
                stylesheetMap[stylesheet.id] = ruleMap;
            } else {
                ruleMap = stylesheetMap[stylesheet.id];
            }
            if (ruleMap.hasOwnProperty(ruleId)) {
                shorts = ruleMap[ruleId];
            } else {
                shorts = {};
                ruleMap[ruleId] = shorts;
            }
            ruleMap.lastShortSelector = processRule.call(this, node, shorts, shortDeclarations, ruleMap.lastShortSelector);
        }
    });
    processShorthands(shortDeclarations, indexer.declaration);
}
module.exports = restructBlock;
}}),
"[project]/node_modules/csso/cjs/restructure/6-restructBlock.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
let fingerprintId = 1;
const dontRestructure = new Set([
    'src' // https://github.com/afelix/csso/issues/50
]);
const DONT_MIX_VALUE = {
    // https://developer.mozilla.org/en-US/docs/Web/CSS/display#Browser_compatibility
    'display': /table|ruby|flex|-(flex)?box$|grid|contents|run-in/i,
    // https://developer.mozilla.org/en/docs/Web/CSS/text-align
    'text-align': /^(start|end|match-parent|justify-all)$/i
};
const SAFE_VALUES = {
    cursor: [
        'auto',
        'crosshair',
        'default',
        'move',
        'text',
        'wait',
        'help',
        'n-resize',
        'e-resize',
        's-resize',
        'w-resize',
        'ne-resize',
        'nw-resize',
        'se-resize',
        'sw-resize',
        'pointer',
        'progress',
        'not-allowed',
        'no-drop',
        'vertical-text',
        'all-scroll',
        'col-resize',
        'row-resize'
    ],
    overflow: [
        'hidden',
        'visible',
        'scroll',
        'auto'
    ],
    position: [
        'static',
        'relative',
        'absolute',
        'fixed'
    ]
};
const NEEDLESS_TABLE = {
    'border-width': [
        'border'
    ],
    'border-style': [
        'border'
    ],
    'border-color': [
        'border'
    ],
    'border-top': [
        'border'
    ],
    'border-right': [
        'border'
    ],
    'border-bottom': [
        'border'
    ],
    'border-left': [
        'border'
    ],
    'border-top-width': [
        'border-top',
        'border-width',
        'border'
    ],
    'border-right-width': [
        'border-right',
        'border-width',
        'border'
    ],
    'border-bottom-width': [
        'border-bottom',
        'border-width',
        'border'
    ],
    'border-left-width': [
        'border-left',
        'border-width',
        'border'
    ],
    'border-top-style': [
        'border-top',
        'border-style',
        'border'
    ],
    'border-right-style': [
        'border-right',
        'border-style',
        'border'
    ],
    'border-bottom-style': [
        'border-bottom',
        'border-style',
        'border'
    ],
    'border-left-style': [
        'border-left',
        'border-style',
        'border'
    ],
    'border-top-color': [
        'border-top',
        'border-color',
        'border'
    ],
    'border-right-color': [
        'border-right',
        'border-color',
        'border'
    ],
    'border-bottom-color': [
        'border-bottom',
        'border-color',
        'border'
    ],
    'border-left-color': [
        'border-left',
        'border-color',
        'border'
    ],
    'margin-top': [
        'margin'
    ],
    'margin-right': [
        'margin'
    ],
    'margin-bottom': [
        'margin'
    ],
    'margin-left': [
        'margin'
    ],
    'padding-top': [
        'padding'
    ],
    'padding-right': [
        'padding'
    ],
    'padding-bottom': [
        'padding'
    ],
    'padding-left': [
        'padding'
    ],
    'font-style': [
        'font'
    ],
    'font-variant': [
        'font'
    ],
    'font-weight': [
        'font'
    ],
    'font-size': [
        'font'
    ],
    'font-family': [
        'font'
    ],
    'list-style-type': [
        'list-style'
    ],
    'list-style-position': [
        'list-style'
    ],
    'list-style-image': [
        'list-style'
    ]
};
function getPropertyFingerprint(propertyName, declaration, fingerprints) {
    const realName = cssTree.property(propertyName).basename;
    if (realName === 'background') {
        return propertyName + ':' + cssTree.generate(declaration.value);
    }
    const declarationId = declaration.id;
    let fingerprint = fingerprints[declarationId];
    if (!fingerprint) {
        switch(declaration.value.type){
            case 'Value':
                const special = {};
                let vendorId = '';
                let iehack = '';
                let raw = false;
                declaration.value.children.forEach(function walk(node) {
                    switch(node.type){
                        case 'Value':
                        case 'Brackets':
                        case 'Parentheses':
                            node.children.forEach(walk);
                            break;
                        case 'Raw':
                            raw = true;
                            break;
                        case 'Identifier':
                            {
                                const { name } = node;
                                if (!vendorId) {
                                    vendorId = cssTree.keyword(name).vendor;
                                }
                                if (/\\[09]/.test(name)) {
                                    iehack = RegExp.lastMatch;
                                }
                                if (SAFE_VALUES.hasOwnProperty(realName)) {
                                    if (SAFE_VALUES[realName].indexOf(name) === -1) {
                                        special[name] = true;
                                    }
                                } else if (DONT_MIX_VALUE.hasOwnProperty(realName)) {
                                    if (DONT_MIX_VALUE[realName].test(name)) {
                                        special[name] = true;
                                    }
                                }
                                break;
                            }
                        case 'Function':
                            {
                                let { name } = node;
                                if (!vendorId) {
                                    vendorId = cssTree.keyword(name).vendor;
                                }
                                if (name === 'rect') {
                                    // there are 2 forms of rect:
                                    //   rect(<top>, <right>, <bottom>, <left>) - standart
                                    //   rect(<top> <right> <bottom> <left>) – backwards compatible syntax
                                    // only the same form values can be merged
                                    const hasComma = node.children.some((node)=>node.type === 'Operator' && node.value === ',');
                                    if (!hasComma) {
                                        name = 'rect-backward';
                                    }
                                }
                                special[name + '()'] = true;
                                // check nested tokens too
                                node.children.forEach(walk);
                                break;
                            }
                        case 'Dimension':
                            {
                                const { unit } = node;
                                if (/\\[09]/.test(unit)) {
                                    iehack = RegExp.lastMatch;
                                }
                                switch(unit){
                                    // is not supported until IE11
                                    case 'rem':
                                    // v* units is too buggy across browsers and better
                                    // don't merge values with those units
                                    case 'vw':
                                    case 'vh':
                                    case 'vmin':
                                    case 'vmax':
                                    case 'vm':
                                        special[unit] = true;
                                        break;
                                }
                                break;
                            }
                    }
                });
                fingerprint = raw ? '!' + fingerprintId++ : '!' + Object.keys(special).sort() + '|' + iehack + vendorId;
                break;
            case 'Raw':
                fingerprint = '!' + declaration.value.value;
                break;
            default:
                fingerprint = cssTree.generate(declaration.value);
        }
        fingerprints[declarationId] = fingerprint;
    }
    return propertyName + fingerprint;
}
function needless(props, declaration, fingerprints) {
    const property = cssTree.property(declaration.property);
    if (NEEDLESS_TABLE.hasOwnProperty(property.basename)) {
        const table = NEEDLESS_TABLE[property.basename];
        for (const entry of table){
            const ppre = getPropertyFingerprint(property.prefix + entry, declaration, fingerprints);
            const prev = props.hasOwnProperty(ppre) ? props[ppre] : null;
            if (prev && (!declaration.important || prev.item.data.important)) {
                return prev;
            }
        }
    }
}
function processRule(rule, item, list, props, fingerprints) {
    const declarations = rule.block.children;
    declarations.forEachRight(function(declaration, declarationItem) {
        const { property } = declaration;
        const fingerprint = getPropertyFingerprint(property, declaration, fingerprints);
        const prev = props[fingerprint];
        if (prev && !dontRestructure.has(property)) {
            if (declaration.important && !prev.item.data.important) {
                props[fingerprint] = {
                    block: declarations,
                    item: declarationItem
                };
                prev.block.remove(prev.item);
            // TODO: use it when we can refer to several points in source
            // declaration.loc = {
            //     primary: declaration.loc,
            //     merged: prev.item.data.loc
            // };
            } else {
                declarations.remove(declarationItem);
            // TODO: use it when we can refer to several points in source
            // prev.item.data.loc = {
            //     primary: prev.item.data.loc,
            //     merged: declaration.loc
            // };
            }
        } else {
            const prev = needless(props, declaration, fingerprints);
            if (prev) {
                declarations.remove(declarationItem);
            // TODO: use it when we can refer to several points in source
            // prev.item.data.loc = {
            //     primary: prev.item.data.loc,
            //     merged: declaration.loc
            // };
            } else {
                declaration.fingerprint = fingerprint;
                props[fingerprint] = {
                    block: declarations,
                    item: declarationItem
                };
            }
        }
    });
    if (declarations.isEmpty) {
        list.remove(item);
    }
}
function restructBlock(ast) {
    const stylesheetMap = {};
    const fingerprints = Object.create(null);
    cssTree.walk(ast, {
        visit: 'Rule',
        reverse: true,
        enter (node, item, list) {
            const stylesheet = this.block || this.stylesheet;
            const ruleId = (node.pseudoSignature || '') + '|' + node.prelude.children.first.id;
            let ruleMap;
            let props;
            if (!stylesheetMap.hasOwnProperty(stylesheet.id)) {
                ruleMap = {};
                stylesheetMap[stylesheet.id] = ruleMap;
            } else {
                ruleMap = stylesheetMap[stylesheet.id];
            }
            if (ruleMap.hasOwnProperty(ruleId)) {
                props = ruleMap[ruleId];
            } else {
                props = {};
                ruleMap[ruleId] = props;
            }
            processRule.call(this, node, item, list, props, fingerprints);
        }
    });
}
module.exports = restructBlock;
}}),
"[project]/node_modules/csso/cjs/restructure/7-mergeRuleset.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const utils = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/utils.cjs [app-client] (ecmascript)");
/*
    At this step all rules has single simple selector. We try to join by equal
    declaration blocks to first rule, e.g.

    .a { color: red }
    b { ... }
    .b { color: red }
    ->
    .a, .b { color: red }
    b { ... }
*/ function processRule(node, item, list) {
    const selectors = node.prelude.children;
    const declarations = node.block.children;
    const nodeCompareMarker = selectors.first.compareMarker;
    const skippedCompareMarkers = {};
    list.nextUntil(item.next, function(next, nextItem) {
        // skip non-ruleset node if safe
        if (next.type !== 'Rule') {
            return utils.unsafeToSkipNode.call(selectors, next);
        }
        if (node.pseudoSignature !== next.pseudoSignature) {
            return true;
        }
        const nextFirstSelector = next.prelude.children.head;
        const nextDeclarations = next.block.children;
        const nextCompareMarker = nextFirstSelector.data.compareMarker;
        // if next ruleset has same marked as one of skipped then stop joining
        if (nextCompareMarker in skippedCompareMarkers) {
            return true;
        }
        // try to join by selectors
        if (selectors.head === selectors.tail) {
            if (selectors.first.id === nextFirstSelector.data.id) {
                declarations.appendList(nextDeclarations);
                list.remove(nextItem);
                return;
            }
        }
        // try to join by properties
        if (utils.isEqualDeclarations(declarations, nextDeclarations)) {
            const nextStr = nextFirstSelector.data.id;
            selectors.some((data, item)=>{
                const curStr = data.id;
                if (nextStr < curStr) {
                    selectors.insert(nextFirstSelector, item);
                    return true;
                }
                if (!item.next) {
                    selectors.insert(nextFirstSelector);
                    return true;
                }
            });
            list.remove(nextItem);
            return;
        }
        // go to next ruleset if current one can be skipped (has no equal specificity nor element selector)
        if (nextCompareMarker === nodeCompareMarker) {
            return true;
        }
        skippedCompareMarkers[nextCompareMarker] = true;
    });
}
function mergeRule(ast) {
    cssTree.walk(ast, {
        visit: 'Rule',
        enter: processRule
    });
}
module.exports = mergeRule;
}}),
"[project]/node_modules/csso/cjs/restructure/8-restructRuleset.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const utils = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/utils.cjs [app-client] (ecmascript)");
function calcSelectorLength(list) {
    return list.reduce((res, data)=>res + data.id.length + 1, 0) - 1;
}
function calcDeclarationsLength(tokens) {
    let length = 0;
    for (const token of tokens){
        length += token.length;
    }
    return length + // declarations
    tokens.length - 1 // delimeters
    ;
}
function processRule(node, item, list) {
    const avoidRulesMerge = this.block !== null ? this.block.avoidRulesMerge : false;
    const selectors = node.prelude.children;
    const block = node.block;
    const disallowDownMarkers = Object.create(null);
    let allowMergeUp = true;
    let allowMergeDown = true;
    list.prevUntil(item.prev, function(prev, prevItem) {
        const prevBlock = prev.block;
        const prevType = prev.type;
        if (prevType !== 'Rule') {
            const unsafe = utils.unsafeToSkipNode.call(selectors, prev);
            if (!unsafe && prevType === 'Atrule' && prevBlock) {
                cssTree.walk(prevBlock, {
                    visit: 'Rule',
                    enter (node) {
                        node.prelude.children.forEach((data)=>{
                            disallowDownMarkers[data.compareMarker] = true;
                        });
                    }
                });
            }
            return unsafe;
        }
        if (node.pseudoSignature !== prev.pseudoSignature) {
            return true;
        }
        const prevSelectors = prev.prelude.children;
        allowMergeDown = !prevSelectors.some((selector)=>selector.compareMarker in disallowDownMarkers);
        // try prev ruleset if simpleselectors has no equal specifity and element selector
        if (!allowMergeDown && !allowMergeUp) {
            return true;
        }
        // try to join by selectors
        if (allowMergeUp && utils.isEqualSelectors(prevSelectors, selectors)) {
            prevBlock.children.appendList(block.children);
            list.remove(item);
            return true;
        }
        // try to join by properties
        const diff = utils.compareDeclarations(block.children, prevBlock.children);
        // console.log(diff.eq, diff.ne1, diff.ne2);
        if (diff.eq.length) {
            if (!diff.ne1.length && !diff.ne2.length) {
                // equal blocks
                if (allowMergeDown) {
                    utils.addSelectors(selectors, prevSelectors);
                    list.remove(prevItem);
                }
                return true;
            } else if (!avoidRulesMerge) {
                if (diff.ne1.length && !diff.ne2.length) {
                    // prevBlock is subset block
                    const selectorLength = calcSelectorLength(selectors);
                    const blockLength = calcDeclarationsLength(diff.eq); // declarations length
                    if (allowMergeUp && selectorLength < blockLength) {
                        utils.addSelectors(prevSelectors, selectors);
                        block.children.fromArray(diff.ne1);
                    }
                } else if (!diff.ne1.length && diff.ne2.length) {
                    // node is subset of prevBlock
                    const selectorLength = calcSelectorLength(prevSelectors);
                    const blockLength = calcDeclarationsLength(diff.eq); // declarations length
                    if (allowMergeDown && selectorLength < blockLength) {
                        utils.addSelectors(selectors, prevSelectors);
                        prevBlock.children.fromArray(diff.ne2);
                    }
                } else {
                    // diff.ne1.length && diff.ne2.length
                    // extract equal block
                    const newSelector = {
                        type: 'SelectorList',
                        loc: null,
                        children: utils.addSelectors(prevSelectors.copy(), selectors)
                    };
                    const newBlockLength = calcSelectorLength(newSelector.children) + 2; // selectors length + curly braces length
                    const blockLength = calcDeclarationsLength(diff.eq); // declarations length
                    // create new ruleset if declarations length greater than
                    // ruleset description overhead
                    if (blockLength >= newBlockLength) {
                        const newItem = list.createItem({
                            type: 'Rule',
                            loc: null,
                            prelude: newSelector,
                            block: {
                                type: 'Block',
                                loc: null,
                                children: new cssTree.List().fromArray(diff.eq)
                            },
                            pseudoSignature: node.pseudoSignature
                        });
                        block.children.fromArray(diff.ne1);
                        prevBlock.children.fromArray(diff.ne2overrided);
                        if (allowMergeUp) {
                            list.insert(newItem, prevItem);
                        } else {
                            list.insert(newItem, item);
                        }
                        return true;
                    }
                }
            }
        }
        if (allowMergeUp) {
            // TODO: disallow up merge only if any property interception only (i.e. diff.ne2overrided.length > 0);
            // await property families to find property interception correctly
            allowMergeUp = !prevSelectors.some((prevSelector)=>selectors.some((selector)=>selector.compareMarker === prevSelector.compareMarker));
        }
        prevSelectors.forEach((data)=>{
            disallowDownMarkers[data.compareMarker] = true;
        });
    });
}
function restructRule(ast) {
    cssTree.walk(ast, {
        visit: 'Rule',
        reverse: true,
        enter: processRule
    });
}
module.exports = restructRule;
}}),
"[project]/node_modules/csso/cjs/restructure/index.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const index = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/prepare/index.cjs [app-client] (ecmascript)");
const _1MergeAtrule = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/1-mergeAtrule.cjs [app-client] (ecmascript)");
const _2InitialMergeRuleset = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/2-initialMergeRuleset.cjs [app-client] (ecmascript)");
const _3DisjoinRuleset = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/3-disjoinRuleset.cjs [app-client] (ecmascript)");
const _4RestructShorthand = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/4-restructShorthand.cjs [app-client] (ecmascript)");
const _6RestructBlock = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/6-restructBlock.cjs [app-client] (ecmascript)");
const _7MergeRuleset = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/7-mergeRuleset.cjs [app-client] (ecmascript)");
const _8RestructRuleset = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/8-restructRuleset.cjs [app-client] (ecmascript)");
function restructure(ast, options) {
    // prepare ast for restructing
    const indexer = index(ast, options);
    options.logger('prepare', ast);
    _1MergeAtrule(ast, options);
    options.logger('mergeAtrule', ast);
    _2InitialMergeRuleset(ast);
    options.logger('initialMergeRuleset', ast);
    _3DisjoinRuleset(ast);
    options.logger('disjoinRuleset', ast);
    _4RestructShorthand(ast, indexer);
    options.logger('restructShorthand', ast);
    _6RestructBlock(ast);
    options.logger('restructBlock', ast);
    _7MergeRuleset(ast);
    options.logger('mergeRuleset', ast);
    _8RestructRuleset(ast);
    options.logger('restructRuleset', ast);
}
module.exports = restructure;
}}),
"[project]/node_modules/csso/cjs/compress.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const usage = __turbopack_require__("[project]/node_modules/csso/cjs/usage.cjs [app-client] (ecmascript)");
const index = __turbopack_require__("[project]/node_modules/csso/cjs/clean/index.cjs [app-client] (ecmascript)");
const index$1 = __turbopack_require__("[project]/node_modules/csso/cjs/replace/index.cjs [app-client] (ecmascript)");
const index$2 = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/index.cjs [app-client] (ecmascript)");
function readChunk(input, specialComments) {
    const children = new cssTree.List();
    let nonSpaceTokenInBuffer = false;
    let protectedComment;
    input.nextUntil(input.head, (node, item, list)=>{
        if (node.type === 'Comment') {
            if (!specialComments || node.value.charAt(0) !== '!') {
                list.remove(item);
                return;
            }
            if (nonSpaceTokenInBuffer || protectedComment) {
                return true;
            }
            list.remove(item);
            protectedComment = node;
            return;
        }
        if (node.type !== 'WhiteSpace') {
            nonSpaceTokenInBuffer = true;
        }
        children.insert(list.remove(item));
    });
    return {
        comment: protectedComment,
        stylesheet: {
            type: 'StyleSheet',
            loc: null,
            children
        }
    };
}
function compressChunk(ast, firstAtrulesAllowed, num, options) {
    options.logger(`Compress block #${num}`, null, true);
    let seed = 1;
    if (ast.type === 'StyleSheet') {
        ast.firstAtrulesAllowed = firstAtrulesAllowed;
        ast.id = seed++;
    }
    cssTree.walk(ast, {
        visit: 'Atrule',
        enter (node) {
            if (node.block !== null) {
                node.block.id = seed++;
            }
        }
    });
    options.logger('init', ast);
    // remove redundant
    index(ast, options);
    options.logger('clean', ast);
    // replace nodes for shortened forms
    index$1(ast);
    options.logger('replace', ast);
    // structure optimisations
    if (options.restructuring) {
        index$2(ast, options);
    }
    return ast;
}
function getCommentsOption(options) {
    let comments = 'comments' in options ? options.comments : 'exclamation';
    if (typeof comments === 'boolean') {
        comments = comments ? 'exclamation' : false;
    } else if (comments !== 'exclamation' && comments !== 'first-exclamation') {
        comments = false;
    }
    return comments;
}
function getRestructureOption(options) {
    if ('restructure' in options) {
        return options.restructure;
    }
    return 'restructuring' in options ? options.restructuring : true;
}
function wrapBlock(block) {
    return new cssTree.List().appendData({
        type: 'Rule',
        loc: null,
        prelude: {
            type: 'SelectorList',
            loc: null,
            children: new cssTree.List().appendData({
                type: 'Selector',
                loc: null,
                children: new cssTree.List().appendData({
                    type: 'TypeSelector',
                    loc: null,
                    name: 'x'
                })
            })
        },
        block
    });
}
function compress(ast, options) {
    ast = ast || {
        type: 'StyleSheet',
        loc: null,
        children: new cssTree.List()
    };
    options = options || {};
    const compressOptions = {
        logger: typeof options.logger === 'function' ? options.logger : function() {},
        restructuring: getRestructureOption(options),
        forceMediaMerge: Boolean(options.forceMediaMerge),
        usage: options.usage ? usage.buildIndex(options.usage) : false
    };
    const output = new cssTree.List();
    let specialComments = getCommentsOption(options);
    let firstAtrulesAllowed = true;
    let input;
    let chunk;
    let chunkNum = 1;
    let chunkChildren;
    if (options.clone) {
        ast = cssTree.clone(ast);
    }
    if (ast.type === 'StyleSheet') {
        input = ast.children;
        ast.children = output;
    } else {
        input = wrapBlock(ast);
    }
    do {
        chunk = readChunk(input, Boolean(specialComments));
        compressChunk(chunk.stylesheet, firstAtrulesAllowed, chunkNum++, compressOptions);
        chunkChildren = chunk.stylesheet.children;
        if (chunk.comment) {
            // add \n before comment if there is another content in output
            if (!output.isEmpty) {
                output.insert(cssTree.List.createItem({
                    type: 'Raw',
                    value: '\n'
                }));
            }
            output.insert(cssTree.List.createItem(chunk.comment));
            // add \n after comment if chunk is not empty
            if (!chunkChildren.isEmpty) {
                output.insert(cssTree.List.createItem({
                    type: 'Raw',
                    value: '\n'
                }));
            }
        }
        if (firstAtrulesAllowed && !chunkChildren.isEmpty) {
            const lastRule = chunkChildren.last;
            if (lastRule.type !== 'Atrule' || lastRule.name !== 'import' && lastRule.name !== 'charset') {
                firstAtrulesAllowed = false;
            }
        }
        if (specialComments !== 'exclamation') {
            specialComments = false;
        }
        output.appendList(chunkChildren);
    }while (!input.isEmpty)
    return {
        ast
    };
}
module.exports = compress;
}}),
"[project]/node_modules/csso/cjs/syntax.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const cssTree = __turbopack_require__("[project]/node_modules/csso/node_modules/css-tree/cjs/index.cjs [app-client] (ecmascript)");
const compress = __turbopack_require__("[project]/node_modules/csso/cjs/compress.cjs [app-client] (ecmascript)");
const specificity = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/prepare/specificity.cjs [app-client] (ecmascript)");
function encodeString(value) {
    const stringApostrophe = cssTree.string.encode(value, true);
    const stringQuote = cssTree.string.encode(value);
    return stringApostrophe.length < stringQuote.length ? stringApostrophe : stringQuote;
}
const { lexer, tokenize, parse, generate, walk, find, findLast, findAll, fromPlainObject, toPlainObject } = cssTree.fork({
    node: {
        String: {
            generate (node) {
                this.token(cssTree.tokenTypes.String, encodeString(node.value));
            }
        },
        Url: {
            generate (node) {
                const encodedUrl = cssTree.url.encode(node.value);
                const string = encodeString(node.value);
                this.token(cssTree.tokenTypes.Url, encodedUrl.length <= string.length + 5 /* "url()".length */  ? encodedUrl : 'url(' + string + ')');
            }
        }
    }
});
exports.compress = compress;
exports.specificity = specificity;
exports.find = find;
exports.findAll = findAll;
exports.findLast = findLast;
exports.fromPlainObject = fromPlainObject;
exports.generate = generate;
exports.lexer = lexer;
exports.parse = parse;
exports.toPlainObject = toPlainObject;
exports.tokenize = tokenize;
exports.walk = walk;
}}),
"[project]/node_modules/csso/cjs/utils.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const processSelector = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/prepare/processSelector.cjs [app-client] (ecmascript)");
const utils$1 = __turbopack_require__("[project]/node_modules/csso/cjs/restructure/utils.cjs [app-client] (ecmascript)");
exports.processSelector = processSelector;
exports.addSelectors = utils$1.addSelectors;
exports.compareDeclarations = utils$1.compareDeclarations;
exports.hasSimilarSelectors = utils$1.hasSimilarSelectors;
exports.isEqualDeclarations = utils$1.isEqualDeclarations;
exports.isEqualSelectors = utils$1.isEqualSelectors;
exports.unsafeToSkipNode = utils$1.unsafeToSkipNode;
}}),
"[project]/node_modules/csso/cjs/index.cjs [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const version = __turbopack_require__("[project]/node_modules/csso/dist/version.cjs [app-client] (ecmascript)");
const syntax = __turbopack_require__("[project]/node_modules/csso/cjs/syntax.cjs [app-client] (ecmascript)");
const utils = __turbopack_require__("[project]/node_modules/csso/cjs/utils.cjs [app-client] (ecmascript)");
const { parse, generate, compress } = syntax;
function debugOutput(name, options, startTime, data) {
    if (options.debug) {
        console.error(`## ${name} done in %d ms\n`, Date.now() - startTime);
    }
    return data;
}
function createDefaultLogger(level) {
    let lastDebug;
    return function logger(title, ast) {
        let line = title;
        if (ast) {
            line = `[${((Date.now() - lastDebug) / 1000).toFixed(3)}s] ${line}`;
        }
        if (level > 1 && ast) {
            let css = generate(ast);
            // when level 2, limit css to 256 symbols
            if (level === 2 && css.length > 256) {
                css = css.substr(0, 256) + '...';
            }
            line += `\n  ${css}\n`;
        }
        console.error(line);
        lastDebug = Date.now();
    };
}
function buildCompressOptions(options) {
    options = {
        ...options
    };
    if (typeof options.logger !== 'function' && options.debug) {
        options.logger = createDefaultLogger(options.debug);
    }
    return options;
}
function runHandler(ast, options, handlers) {
    if (!Array.isArray(handlers)) {
        handlers = [
            handlers
        ];
    }
    handlers.forEach((fn)=>fn(ast, options));
}
function minify(context, source, options) {
    options = options || {};
    const filename = options.filename || '<unknown>';
    let result;
    // parse
    const ast = debugOutput('parsing', options, Date.now(), parse(source, {
        context,
        filename,
        positions: Boolean(options.sourceMap)
    }));
    // before compress handlers
    if (options.beforeCompress) {
        debugOutput('beforeCompress', options, Date.now(), runHandler(ast, options, options.beforeCompress));
    }
    // compress
    const compressResult = debugOutput('compress', options, Date.now(), compress(ast, buildCompressOptions(options)));
    // after compress handlers
    if (options.afterCompress) {
        debugOutput('afterCompress', options, Date.now(), runHandler(compressResult, options, options.afterCompress));
    }
    // generate
    if (options.sourceMap) {
        result = debugOutput('generate(sourceMap: true)', options, Date.now(), (()=>{
            const tmp = generate(compressResult.ast, {
                sourceMap: true
            });
            tmp.map._file = filename; // since other tools can relay on file in source map transform chain
            tmp.map.setSourceContent(filename, source);
            return tmp;
        })());
    } else {
        result = debugOutput('generate', options, Date.now(), {
            css: generate(compressResult.ast),
            map: null
        });
    }
    return result;
}
function minifyStylesheet(source, options) {
    return minify('stylesheet', source, options);
}
function minifyBlock(source, options) {
    return minify('declarationList', source, options);
}
exports.version = version.version;
exports.syntax = syntax;
exports.utils = utils;
exports.minify = minifyStylesheet;
exports.minifyBlock = minifyBlock;
}}),
"[project]/node_modules/svg-parser/dist/svg-parser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "parse": (()=>parse)
});
function getLocator(source, options) {
    if (options === void 0) {
        options = {};
    }
    var offsetLine = options.offsetLine || 0;
    var offsetColumn = options.offsetColumn || 0;
    var originalLines = source.split('\n');
    var start = 0;
    var lineRanges = originalLines.map(function(line, i) {
        var end = start + line.length + 1;
        var range = {
            start: start,
            end: end,
            line: i
        };
        start = end;
        return range;
    });
    var i = 0;
    function rangeContains(range, index) {
        return range.start <= index && index < range.end;
    }
    function getLocation(range, index) {
        return {
            line: offsetLine + range.line,
            column: offsetColumn + index - range.start,
            character: index
        };
    }
    function locate(search, startIndex) {
        if (typeof search === 'string') {
            search = source.indexOf(search, startIndex || 0);
        }
        var range = lineRanges[i];
        var d = search >= range.end ? 1 : -1;
        while(range){
            if (rangeContains(range, search)) return getLocation(range, search);
            i += d;
            range = lineRanges[i];
        }
    }
    return locate;
}
function locate(source, search, options) {
    if (typeof options === 'number') {
        throw new Error('locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument');
    }
    return getLocator(source, options)(search, options && options.startIndex);
}
var validNameCharacters = /[a-zA-Z0-9:_-]/;
var whitespace = /[\s\t\r\n]/;
var quotemark = /['"]/;
function repeat(str, i) {
    var result = '';
    while(i--){
        result += str;
    }
    return result;
}
function parse(source) {
    var header = '';
    var stack = [];
    var state = metadata;
    var currentElement = null;
    var root = null;
    function error(message) {
        var ref = locate(source, i);
        var line = ref.line;
        var column = ref.column;
        var before = source.slice(0, i);
        var beforeLine = /(^|\n).*$/.exec(before)[0].replace(/\t/g, '  ');
        var after = source.slice(i);
        var afterLine = /.*(\n|$)/.exec(after)[0];
        var snippet = "" + beforeLine + afterLine + "\n" + repeat(' ', beforeLine.length) + "^";
        throw new Error(message + " (" + line + ":" + column + "). If this is valid SVG, it's probably a bug in svg-parser. Please raise an issue at https://github.com/Rich-Harris/svg-parser/issues – thanks!\n\n" + snippet);
    }
    function metadata() {
        while(i < source.length && source[i] !== '<' || !validNameCharacters.test(source[i + 1])){
            header += source[i++];
        }
        return neutral();
    }
    function neutral() {
        var text = '';
        while(i < source.length && source[i] !== '<'){
            text += source[i++];
        }
        if (/\S/.test(text)) {
            currentElement.children.push({
                type: 'text',
                value: text
            });
        }
        if (source[i] === '<') {
            return tag;
        }
        return neutral;
    }
    function tag() {
        var char = source[i];
        if (char === '?') {
            return neutral;
        } // <?xml...
        if (char === '!') {
            if (source.slice(i + 1, i + 3) === '--') {
                return comment;
            }
            if (source.slice(i + 1, i + 8) === '[CDATA[') {
                return cdata;
            }
            if (/doctype/i.test(source.slice(i + 1, i + 8))) {
                return neutral;
            }
        }
        if (char === '/') {
            return closingTag;
        }
        var tagName = getName();
        var element = {
            type: 'element',
            tagName: tagName,
            properties: {},
            children: []
        };
        if (currentElement) {
            currentElement.children.push(element);
        } else {
            root = element;
        }
        var attribute;
        while(i < source.length && (attribute = getAttribute())){
            element.properties[attribute.name] = attribute.value;
        }
        var selfClosing = false;
        if (source[i] === '/') {
            i += 1;
            selfClosing = true;
        }
        if (source[i] !== '>') {
            error('Expected >');
        }
        if (!selfClosing) {
            currentElement = element;
            stack.push(element);
        }
        return neutral;
    }
    function comment() {
        var index = source.indexOf('-->', i);
        if (!~index) {
            error('expected -->');
        }
        i = index + 2;
        return neutral;
    }
    function cdata() {
        var index = source.indexOf(']]>', i);
        if (!~index) {
            error('expected ]]>');
        }
        currentElement.children.push(source.slice(i + 7, index));
        i = index + 2;
        return neutral;
    }
    function closingTag() {
        var tagName = getName();
        if (!tagName) {
            error('Expected tag name');
        }
        if (tagName !== currentElement.tagName) {
            error("Expected closing tag </" + tagName + "> to match opening tag <" + currentElement.tagName + ">");
        }
        allowSpaces();
        if (source[i] !== '>') {
            error('Expected >');
        }
        stack.pop();
        currentElement = stack[stack.length - 1];
        return neutral;
    }
    function getName() {
        var name = '';
        while(i < source.length && validNameCharacters.test(source[i])){
            name += source[i++];
        }
        return name;
    }
    function getAttribute() {
        if (!whitespace.test(source[i])) {
            return null;
        }
        allowSpaces();
        var name = getName();
        if (!name) {
            return null;
        }
        var value = true;
        allowSpaces();
        if (source[i] === '=') {
            i += 1;
            allowSpaces();
            value = getAttributeValue();
            if (!isNaN(value) && value.trim() !== '') {
                value = +value;
            } // TODO whitelist numeric attributes?
        }
        return {
            name: name,
            value: value
        };
    }
    function getAttributeValue() {
        return quotemark.test(source[i]) ? getQuotedAttributeValue() : getUnquotedAttributeValue();
    }
    function getUnquotedAttributeValue() {
        var value = '';
        do {
            var char = source[i];
            if (char === ' ' || char === '>' || char === '/') {
                return value;
            }
            value += char;
            i += 1;
        }while (i < source.length)
        return value;
    }
    function getQuotedAttributeValue() {
        var quotemark = source[i++];
        var value = '';
        var escaped = false;
        while(i < source.length){
            var char = source[i++];
            if (char === quotemark && !escaped) {
                return value;
            }
            if (char === '\\' && !escaped) {
                escaped = true;
            }
            value += escaped ? "\\" + char : char;
            escaped = false;
        }
    }
    function allowSpaces() {
        while(i < source.length && whitespace.test(source[i])){
            i += 1;
        }
    }
    var i = metadata.length;
    while(i < source.length){
        if (!state) {
            error('Unexpected character');
        }
        state = state();
        i += 1;
    }
    if (state !== neutral) {
        error('Unexpected end of input');
    }
    if (root.tagName === 'svg') {
        root.metadata = header;
    }
    return {
        type: 'root',
        children: [
            root
        ]
    };
}
;
 //# sourceMappingURL=svg-parser.esm.js.map
}}),
"[project]/node_modules/regjsgen/regjsgen.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
;
(function() {
    'use strict';
    // Used to determine if values are of the language type `Object`.
    var objectTypes = {
        'function': true,
        'object': true
    };
    // Used as a reference to the global object.
    var root = objectTypes[typeof window] && window || this;
    // Detect free variable `exports`.
    var freeExports = objectTypes["TURBOPACK compile-time value", "object"] && exports && !exports.nodeType && exports;
    // Detect free variable `module`.
    var hasFreeModule = objectTypes["TURBOPACK compile-time value", "object"] && module && !module.nodeType;
    // Detect free variable `global` from Node.js or Browserified code and use it as `root`.
    var freeGlobal = freeExports && hasFreeModule && typeof global == 'object' && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
        root = freeGlobal;
    }
    // Used to check objects for own properties.
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /*--------------------------------------------------------------------------*/ // Generates a string based on the given code point.
    // Based on https://mths.be/fromcodepoint by @mathias.
    function fromCodePoint() {
        var codePoint = Number(arguments[0]);
        if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
        codePoint < 0 || // not a valid Unicode code point
        codePoint > 0x10FFFF || // not a valid Unicode code point
        Math.floor(codePoint) != codePoint // not an integer
        ) {
            throw RangeError('Invalid code point: ' + codePoint);
        }
        if (codePoint <= 0xFFFF) {
            // BMP code point
            return String.fromCharCode(codePoint);
        } else {
            // Astral code point; split in surrogate halves
            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            codePoint -= 0x10000;
            var highSurrogate = (codePoint >> 10) + 0xD800;
            var lowSurrogate = codePoint % 0x400 + 0xDC00;
            return String.fromCharCode(highSurrogate, lowSurrogate);
        }
    }
    /*--------------------------------------------------------------------------*/ // Ensures that nodes have the correct types.
    var assertTypeRegexMap = {};
    function assertType(type, expected) {
        if (expected.indexOf('|') == -1) {
            if (type == expected) {
                return;
            }
            throw Error('Invalid node type: ' + type + '; expected type: ' + expected);
        }
        expected = hasOwnProperty.call(assertTypeRegexMap, expected) ? assertTypeRegexMap[expected] : assertTypeRegexMap[expected] = RegExp('^(?:' + expected + ')$');
        if (expected.test(type)) {
            return;
        }
        throw Error('Invalid node type: ' + type + '; expected types: ' + expected);
    }
    /*--------------------------------------------------------------------------*/ // Generates a regular expression string based on an AST.
    function generate(node) {
        var type = node.type;
        if (hasOwnProperty.call(generators, type)) {
            return generators[type](node);
        }
        throw Error('Invalid node type: ' + type);
    }
    // Constructs a string by concatentating the output of each term.
    function generateSequence(generator, terms, /* optional */ separator) {
        var i = -1, length = terms.length, result = '', term;
        while(++i < length){
            term = terms[i];
            if (separator && i > 0) result += separator;
            // Ensure that `\0` null escapes followed by number symbols are not
            // treated as backreferences.
            if (i + 1 < length && terms[i].type == 'value' && terms[i].kind == 'null' && terms[i + 1].type == 'value' && terms[i + 1].kind == 'symbol' && terms[i + 1].codePoint >= 48 && terms[i + 1].codePoint <= 57) {
                result += '\\000';
                continue;
            }
            result += generator(term);
        }
        return result;
    }
    /*--------------------------------------------------------------------------*/ function generateAlternative(node) {
        assertType(node.type, 'alternative');
        return generateSequence(generateTerm, node.body);
    }
    function generateAnchor(node) {
        assertType(node.type, 'anchor');
        switch(node.kind){
            case 'start':
                return '^';
            case 'end':
                return '$';
            case 'boundary':
                return '\\b';
            case 'not-boundary':
                return '\\B';
            default:
                throw Error('Invalid assertion');
        }
    }
    var atomType = 'anchor|characterClass|characterClassEscape|dot|group|reference|unicodePropertyEscape|value';
    function generateAtom(node) {
        assertType(node.type, atomType);
        return generate(node);
    }
    function generateCharacterClass(node) {
        assertType(node.type, 'characterClass');
        var kind = node.kind;
        var separator = kind === 'intersection' ? '&&' : kind === 'subtraction' ? '--' : '';
        return '[' + (node.negative ? '^' : '') + generateSequence(generateClassAtom, node.body, separator) + ']';
    }
    function generateCharacterClassEscape(node) {
        assertType(node.type, 'characterClassEscape');
        return '\\' + node.value;
    }
    function generateCharacterClassRange(node) {
        assertType(node.type, 'characterClassRange');
        var min = node.min, max = node.max;
        if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {
            throw Error('Invalid character class range');
        }
        return generateClassAtom(min) + '-' + generateClassAtom(max);
    }
    function generateClassAtom(node) {
        assertType(node.type, 'anchor|characterClass|characterClassEscape|characterClassRange|dot|value|unicodePropertyEscape|classStrings');
        return generate(node);
    }
    function generateClassStrings(node) {
        assertType(node.type, 'classStrings');
        return '\\q{' + generateSequence(generateClassString, node.strings, '|') + '}';
    }
    function generateClassString(node) {
        assertType(node.type, 'classString');
        return generateSequence(generate, node.characters);
    }
    function generateDisjunction(node) {
        assertType(node.type, 'disjunction');
        return generateSequence(generate, node.body, '|');
    }
    function generateDot(node) {
        assertType(node.type, 'dot');
        return '.';
    }
    function generateGroup(node) {
        assertType(node.type, 'group');
        var result = '';
        switch(node.behavior){
            case 'normal':
                if (node.name) {
                    result += '?<' + generateIdentifier(node.name) + '>';
                }
                break;
            case 'ignore':
                if (node.modifierFlags) {
                    result += '?';
                    if (node.modifierFlags.enabling) result += node.modifierFlags.enabling;
                    if (node.modifierFlags.disabling) result += "-" + node.modifierFlags.disabling;
                    result += ':';
                } else {
                    result += '?:';
                }
                break;
            case 'lookahead':
                result += '?=';
                break;
            case 'negativeLookahead':
                result += '?!';
                break;
            case 'lookbehind':
                result += '?<=';
                break;
            case 'negativeLookbehind':
                result += '?<!';
                break;
            default:
                throw Error('Invalid behaviour: ' + node.behaviour);
        }
        result += generateSequence(generate, node.body);
        return '(' + result + ')';
    }
    function generateIdentifier(node) {
        assertType(node.type, 'identifier');
        return node.value;
    }
    function generateQuantifier(node) {
        assertType(node.type, 'quantifier');
        var quantifier = '', min = node.min, max = node.max;
        if (max == null) {
            if (min == 0) {
                quantifier = '*';
            } else if (min == 1) {
                quantifier = '+';
            } else {
                quantifier = '{' + min + ',}';
            }
        } else if (min == max) {
            quantifier = '{' + min + '}';
        } else if (min == 0 && max == 1) {
            quantifier = '?';
        } else {
            quantifier = '{' + min + ',' + max + '}';
        }
        if (!node.greedy) {
            quantifier += '?';
        }
        return generateAtom(node.body[0]) + quantifier;
    }
    function generateReference(node) {
        assertType(node.type, 'reference');
        if (node.matchIndex) {
            return '\\' + node.matchIndex;
        }
        if (node.name) {
            return '\\k<' + generateIdentifier(node.name) + '>';
        }
        throw new Error('Unknown reference type');
    }
    function generateTerm(node) {
        assertType(node.type, atomType + '|empty|quantifier');
        return generate(node);
    }
    function generateUnicodePropertyEscape(node) {
        assertType(node.type, 'unicodePropertyEscape');
        return '\\' + (node.negative ? 'P' : 'p') + '{' + node.value + '}';
    }
    function generateValue(node) {
        assertType(node.type, 'value');
        var kind = node.kind, codePoint = node.codePoint;
        if (typeof codePoint != 'number') {
            throw new Error('Invalid code point: ' + codePoint);
        }
        switch(kind){
            case 'controlLetter':
                return '\\c' + fromCodePoint(codePoint + 64);
            case 'hexadecimalEscape':
                return '\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);
            case 'identifier':
                return '\\' + fromCodePoint(codePoint);
            case 'null':
                return '\\' + codePoint;
            case 'octal':
                return '\\' + ('000' + codePoint.toString(8)).slice(-3);
            case 'singleEscape':
                switch(codePoint){
                    case 0x0008:
                        return '\\b';
                    case 0x0009:
                        return '\\t';
                    case 0x000A:
                        return '\\n';
                    case 0x000B:
                        return '\\v';
                    case 0x000C:
                        return '\\f';
                    case 0x000D:
                        return '\\r';
                    case 0x002D:
                        return '\\-';
                    default:
                        throw Error('Invalid code point: ' + codePoint);
                }
            case 'symbol':
                return fromCodePoint(codePoint);
            case 'unicodeEscape':
                return '\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);
            case 'unicodeCodePointEscape':
                return '\\u{' + codePoint.toString(16).toUpperCase() + '}';
            default:
                throw Error('Unsupported node kind: ' + kind);
        }
    }
    /*--------------------------------------------------------------------------*/ // Used to generate strings for each node type.
    var generators = {
        'alternative': generateAlternative,
        'anchor': generateAnchor,
        'characterClass': generateCharacterClass,
        'characterClassEscape': generateCharacterClassEscape,
        'characterClassRange': generateCharacterClassRange,
        'classStrings': generateClassStrings,
        'disjunction': generateDisjunction,
        'dot': generateDot,
        'group': generateGroup,
        'quantifier': generateQuantifier,
        'reference': generateReference,
        'unicodePropertyEscape': generateUnicodePropertyEscape,
        'value': generateValue
    };
    /*--------------------------------------------------------------------------*/ // Export regjsgen.
    var regjsgen = {
        'generate': generate
    };
    // Some AMD build optimizers, like r.js, check for condition patterns like the following:
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        // Define as an anonymous module so it can be aliased through path mapping.
        ((r)=>r !== undefined && __turbopack_export_value__(r))(function() {
            return regjsgen;
        }(__turbopack_require__, exports, module));
        root.regjsgen = regjsgen;
    } else if (freeExports && hasFreeModule) {
        // Export for CommonJS support.
        freeExports.generate = generate;
    } else {
        // Export to the global object.
        root.regjsgen = regjsgen;
    }
}).call(this);
}}),
"[project]/node_modules/regjsparser/parser.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
// regjsparser
//
// ==================================================================
//
// See ECMA-262 Standard: 15.10.1
//
// NOTE: The ECMA-262 standard uses the term "Assertion" for /^/. Here the
//   term "Anchor" is used.
//
// Pattern ::
//      Disjunction
//
// Disjunction ::
//      Alternative
//      Alternative | Disjunction
//
// Alternative ::
//      [empty]
//      Alternative Term
//
// Term ::
//      Anchor
//      Anchor Quantifier (see https://github.com/jviereck/regjsparser/issues/130)
//      Atom
//      Atom Quantifier
//
// Anchor ::
//      ^
//      $
//      \ b
//      \ B
//      ( ? = Disjunction )
//      ( ? ! Disjunction )
//      ( ? < = Disjunction )
//      ( ? < ! Disjunction )
//
// Quantifier ::
//      QuantifierPrefix
//      QuantifierPrefix ?
//
// QuantifierPrefix ::
//      *
//      +
//      ?
//      { DecimalDigits }
//      { DecimalDigits , }
//      { DecimalDigits , DecimalDigits }
//
// Atom ::
//      PatternCharacter
//      .
//      \ AtomEscape
//      CharacterClass
//      ( GroupSpecifier Disjunction )
//      ( ? : Disjunction )
//
// PatternCharacter ::
//      SourceCharacter but not any of: ^ $ \ . * + ? ( ) [ ] { } |
//
// AtomEscape ::
//      DecimalEscape
//      CharacterClassEscape
//      CharacterEscape
//      k GroupName
//
// CharacterEscape[U] ::
//      ControlEscape
//      c ControlLetter
//      HexEscapeSequence
//      RegExpUnicodeEscapeSequence[?U] (ES6)
//      IdentityEscape[?U]
//
// ControlEscape ::
//      one of f n r t v
// ControlLetter ::
//      one of
//          a b c d e f g h i j k l m n o p q r s t u v w x y z
//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
//
// IdentityEscape ::
//      SourceCharacter but not c
//
// DecimalEscape ::
//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]
//
// CharacterClassEscape ::
//      one of d D s S w W
//
// CharacterClass ::
//      [ [lookahead ∉ {^}] ClassContents ]
//      [ ^ ClassContents ]
//
// ClassContents ::
//      [empty]
//      [~V] NonemptyClassRanges
//      [+V] ClassSetExpression
//
// NonemptyClassRanges ::
//      ClassAtom
//      ClassAtom NonemptyClassRangesNoDash
//      ClassAtom - ClassAtom ClassContents
//
// NonemptyClassRangesNoDash ::
//      ClassAtom
//      ClassAtomNoDash NonemptyClassRangesNoDash
//      ClassAtomNoDash - ClassAtom ClassContents
//
// ClassAtom ::
//      -
//      ClassAtomNoDash
//
// ClassAtomNoDash ::
//      SourceCharacter but not one of \ or ] or -
//      \ ClassEscape
//
// ClassEscape ::
//      DecimalEscape
//      b
//      CharacterEscape
//      CharacterClassEscape
//
// GroupSpecifier ::
//      [empty]
//      ? GroupName
//
// GroupName ::
//      < RegExpIdentifierName >
//
// RegExpIdentifierName ::
//      RegExpIdentifierStart
//      RegExpIdentifierName RegExpIdentifierContinue
//
// RegExpIdentifierStart ::
//      UnicodeIDStart
//      $
//      _
//      \ RegExpUnicodeEscapeSequence
//
// RegExpIdentifierContinue ::
//      UnicodeIDContinue
//      $
//      _
//      \ RegExpUnicodeEscapeSequence
//      <ZWNJ>
//      <ZWJ>
//
// --------------------------------------------------------------
// NOTE: The following productions refer to the "set notation and
//       properties of strings" proposal.
//       https://github.com/tc39/proposal-regexp-set-notation
// --------------------------------------------------------------
//
// ClassSetExpression ::
//      ClassUnion
//      ClassIntersection
//      ClassSubtraction
//
// ClassUnion ::
//      ClassSetRange ClassUnion?
//      ClassSetOperand ClassUnion?
//
// ClassIntersection ::
//      ClassSetOperand && [lookahead ≠ &] ClassSetOperand
//      ClassIntersection && [lookahead ≠ &] ClassSetOperand
//
// ClassSubtraction ::
//      ClassSetOperand -- ClassSetOperand
//      ClassSubtraction -- ClassSetOperand
//
// ClassSetRange ::
//      ClassSetCharacter - ClassSetCharacter
//
// ClassSetOperand ::
//      ClassSetCharacter
//      ClassStringDisjunction
//      NestedClass
//
// NestedClass ::
//      [ [lookahead ≠ ^] ClassContents[+U,+V] ]
//      [ ^ ClassContents[+U,+V] ]
//      \ CharacterClassEscape[+U, +V]
//
// ClassStringDisjunction ::
//      \q{ ClassStringDisjunctionContents }
// 
// ClassStringDisjunctionContents ::
//      ClassString
//      ClassString | ClassStringDisjunctionContents
//
// ClassString ::
//      [empty]
//      NonEmptyClassString
//
// NonEmptyClassString ::
//      ClassSetCharacter NonEmptyClassString?
//
// ClassSetCharacter ::
//      [lookahead ∉ ClassSetReservedDoublePunctuator] SourceCharacter but not ClassSetSyntaxCharacter
//      \ CharacterEscape[+U]
//      \ ClassSetReservedPunctuator
//      \b
//
// ClassSetReservedDoublePunctuator ::
//      one of && !! ## $$ %% ** ++ ,, .. :: ;; << == >> ?? @@ ^^ `` ~~
//
// ClassSetSyntaxCharacter ::
//      one of ( ) [ ] { } / - \ |
//
// ClassSetReservedPunctuator ::
//      one of & - ! # % , : ; < = > @ ` ~
//
// --------------------------------------------------------------
// NOTE: The following productions refer to the
//       "Regular Expression Pattern Modifiers for ECMAScript" proposal.
//       https://github.com/tc39/proposal-regexp-modifiers
// --------------------------------------------------------------
//
// Atom ::
//      ( ? RegularExpressionModifiers : Disjunction )
//      ( ? RegularExpressionModifiers - RegularExpressionModifiers : Disjunction )
//
// RegularExpressionModifiers:
//      [empty]
//      RegularExpressionModifiers RegularExpressionModifier
//
// RegularExpressionModifier:
//      one of i m s
"use strict";
(function() {
    var fromCodePoint = String.fromCodePoint || function() {
        // Implementation taken from
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint
        var stringFromCharCode = String.fromCharCode;
        var floor = Math.floor;
        return function fromCodePoint() {
            var MAX_SIZE = 0x4000;
            var codeUnits = [];
            var highSurrogate;
            var lowSurrogate;
            var index = -1;
            var length = arguments.length;
            if (!length) {
                return '';
            }
            var result = '';
            while(++index < length){
                var codePoint = Number(arguments[index]);
                if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
                codePoint < 0 || // not a valid Unicode code point
                codePoint > 0x10FFFF || // not a valid Unicode code point
                floor(codePoint) != codePoint // not an integer
                ) {
                    throw RangeError('Invalid code point: ' + codePoint);
                }
                if (codePoint <= 0xFFFF) {
                    codeUnits.push(codePoint);
                } else {
                    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                    codePoint -= 0x10000;
                    highSurrogate = (codePoint >> 10) + 0xD800;
                    lowSurrogate = codePoint % 0x400 + 0xDC00;
                    codeUnits.push(highSurrogate, lowSurrogate);
                }
                if (index + 1 == length || codeUnits.length > MAX_SIZE) {
                    result += stringFromCharCode.apply(null, codeUnits);
                    codeUnits.length = 0;
                }
            }
            return result;
        };
    }();
    function parse(str, flags, features) {
        if (!features) {
            features = {};
        }
        function updateRawStart(node, start) {
            node.range[0] = start;
            node.raw = str.substring(start, node.range[1]);
            return node;
        }
        function createAnchor(kind, rawLength) {
            return {
                type: 'anchor',
                kind: kind,
                range: [
                    pos - rawLength,
                    pos
                ],
                raw: str.substring(pos - rawLength, pos)
            };
        }
        function createValue(kind, codePoint, from, to) {
            return {
                type: 'value',
                kind: kind,
                codePoint: codePoint,
                range: [
                    from,
                    to
                ],
                raw: str.substring(from, to)
            };
        }
        function createEscaped(kind, codePoint, value, fromOffset) {
            fromOffset = fromOffset || 0;
            return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);
        }
        function createCharacter(matches) {
            var _char = matches[0];
            var first = _char.charCodeAt(0);
            if (isUnicodeMode) {
                var second;
                if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {
                    second = lookahead().charCodeAt(0);
                    if (second >= 0xDC00 && second <= 0xDFFF) {
                        // Unicode surrogate pair
                        pos++;
                        return createValue('symbol', (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000, pos - 2, pos);
                    }
                }
            }
            return createValue('symbol', first, pos - 1, pos);
        }
        function createDisjunction(alternatives, from, to) {
            return {
                type: 'disjunction',
                body: alternatives,
                range: [
                    from,
                    to
                ],
                raw: str.substring(from, to)
            };
        }
        function createDot() {
            return {
                type: 'dot',
                range: [
                    pos - 1,
                    pos
                ],
                raw: '.'
            };
        }
        function createCharacterClassEscape(value) {
            return {
                type: 'characterClassEscape',
                value: value,
                range: [
                    pos - 2,
                    pos
                ],
                raw: str.substring(pos - 2, pos)
            };
        }
        function createReference(matchIndex) {
            var start = pos - 1 - matchIndex.length;
            return {
                type: 'reference',
                matchIndex: parseInt(matchIndex, 10),
                range: [
                    start,
                    pos
                ],
                raw: str.substring(start, pos)
            };
        }
        function createNamedReference(name) {
            var start = name.range[0] - 3;
            return {
                type: 'reference',
                name: name,
                range: [
                    start,
                    pos
                ],
                raw: str.substring(start, pos)
            };
        }
        function createGroup(behavior, disjunction, from, to) {
            return {
                type: 'group',
                behavior: behavior,
                body: disjunction,
                range: [
                    from,
                    to
                ],
                raw: str.substring(from, to)
            };
        }
        function createQuantifier(min, max, from, to, symbol) {
            if (to == null) {
                from = pos - 1;
                to = pos;
            }
            return {
                type: 'quantifier',
                min: min,
                max: max,
                greedy: true,
                body: null,
                symbol: symbol,
                range: [
                    from,
                    to
                ],
                raw: str.substring(from, to)
            };
        }
        function createAlternative(terms, from, to) {
            return {
                type: 'alternative',
                body: terms,
                range: [
                    from,
                    to
                ],
                raw: str.substring(from, to)
            };
        }
        function createCharacterClass(contents, negative, from, to) {
            return {
                type: 'characterClass',
                kind: contents.kind,
                body: contents.body,
                negative: negative,
                range: [
                    from,
                    to
                ],
                raw: str.substring(from, to)
            };
        }
        function createClassRange(min, max, from, to) {
            // See 15.10.2.15:
            if (min.codePoint > max.codePoint) {
                bail('invalid range in character class', min.raw + '-' + max.raw, from, to);
            }
            return {
                type: 'characterClassRange',
                min: min,
                max: max,
                range: [
                    from,
                    to
                ],
                raw: str.substring(from, to)
            };
        }
        function createClassStrings(strings, from, to) {
            return {
                type: 'classStrings',
                strings: strings,
                range: [
                    from,
                    to
                ],
                raw: str.substring(from, to)
            };
        }
        function createClassString(characters, from, to) {
            return {
                type: 'classString',
                characters: characters,
                range: [
                    from,
                    to
                ],
                raw: str.substring(from, to)
            };
        }
        function flattenBody(body) {
            if (body.type === 'alternative') {
                return body.body;
            } else {
                return [
                    body
                ];
            }
        }
        function incr(amount) {
            amount = amount || 1;
            pos += amount;
        }
        function consume(amount) {
            var res = str.substring(pos, pos += amount);
            return res;
        }
        function skip(value) {
            if (!match(value)) {
                bail('character', value);
            }
        }
        function match(value) {
            var len = value.length;
            if (str.substring(pos, pos + len) === value) {
                incr(len);
                return value;
            }
        }
        function matchOne(value) {
            if (str[pos] === value) {
                pos++;
                return value;
            }
        }
        function lookahead() {
            return str[pos];
        }
        function currentOne(value) {
            return str[pos] === value;
        }
        function current(value) {
            var len = value.length;
            return str.substring(pos, pos + len) === value;
        }
        function next(value) {
            return str[pos + 1] === value;
        }
        function matchReg(regExp) {
            var subStr = str.substring(pos);
            var res = subStr.match(regExp);
            if (res) {
                pos += res[0].length;
            }
            return res;
        }
        function parseDisjunction() {
            // Disjunction ::
            //      Alternative
            //      Alternative | Disjunction
            var res = [], from = pos;
            res.push(parseAlternative());
            while(matchOne('|')){
                res.push(parseAlternative());
            }
            if (res.length === 1) {
                return res[0];
            }
            return createDisjunction(res, from, pos);
        }
        function parseAlternative() {
            var res = [], from = pos;
            var term;
            // Alternative ::
            //      [empty]
            //      Alternative Term
            while(term = parseTerm()){
                res.push(term);
            }
            if (res.length === 1) {
                return res[0];
            }
            return createAlternative(res, from, pos);
        }
        function parseTerm() {
            // Term ::
            //      Anchor
            //      Atom
            //      Atom Quantifier
            // Term (Annex B)::
            //      [~UnicodeMode] QuantifiableAssertion Quantifier (see https://github.com/jviereck/regjsparser/issues/130)
            //      [~UnicodeMode] ExtendedAtom Quantifier
            // QuantifiableAssertion::
            //      (?= Disjunction[~UnicodeMode, ~UnicodeSetsMode, ?NamedCaptureGroups] )
            //      (?! Disjunction[~UnicodeMode, ~UnicodeSetsMode, ?NamedCaptureGroups] ) 
            if (pos >= str.length || currentOne('|') || currentOne(')')) {
                return null; /* Means: The term is empty */ 
            }
            var anchor = parseAnchor();
            var quantifier;
            if (anchor) {
                var pos_backup = pos;
                quantifier = parseQuantifier() || false;
                if (quantifier) {
                    // Annex B
                    if (!isUnicodeMode && anchor.type === "group") {
                        quantifier.body = flattenBody(anchor);
                        // The quantifier contains the anchor. Therefore, the beginning of the
                        // quantifier range is given by the beginning of the anchor.
                        updateRawStart(quantifier, anchor.range[0]);
                        return quantifier;
                    }
                    pos = pos_backup;
                    bail("Expected atom");
                }
                return anchor;
            }
            // If there is no Anchor, try to parse an atom.
            var atom = parseAtomAndExtendedAtom();
            if (!atom) {
                // Check if a quantifier is following. A quantifier without an atom
                // is an error.
                pos_backup = pos;
                quantifier = parseQuantifier() || false;
                if (quantifier) {
                    pos = pos_backup;
                    bail("Expected atom");
                }
                // If no unicode flag, then try to parse ExtendedAtom -> ExtendedPatternCharacter.
                //      ExtendedPatternCharacter
                if (!isUnicodeMode && matchOne("{")) {
                    atom = createCharacter("{");
                } else {
                    bail("Expected atom");
                }
            }
            quantifier = parseQuantifier() || false;
            if (quantifier) {
                var type = atom.type, behavior = atom.behavior;
                if (type === "group" && (behavior === "negativeLookbehind" || behavior === "lookbehind")) {
                    bail("Invalid quantifier", "", quantifier.range[0], quantifier.range[1]);
                }
                quantifier.body = flattenBody(atom);
                // The quantifier contains the atom. Therefore, the beginning of the
                // quantifier range is given by the beginning of the atom.
                updateRawStart(quantifier, atom.range[0]);
                return quantifier;
            }
            return atom;
        }
        function parseGroup(matchA, typeA, matchB, typeB) {
            var type = null, from = pos;
            if (match(matchA)) {
                type = typeA;
            } else if (match(matchB)) {
                type = typeB;
            } else {
                return false;
            }
            return finishGroup(type, from);
        }
        function finishGroup(type, from) {
            var body = parseDisjunction();
            if (!body) {
                bail('Expected disjunction');
            }
            skip(')');
            var group = createGroup(type, flattenBody(body), from, pos);
            if (type == 'normal') {
                // Keep track of the number of closed groups. This is required for
                // parseDecimalEscape(). In case the string is parsed a second time the
                // value already holds the total count and no incrementation is required.
                if (firstIteration) {
                    closedCaptureCounter++;
                }
            }
            return group;
        }
        function parseAnchor() {
            // Anchor ::
            //      ^
            //      $
            //      \ b
            //      \ B
            //      ( ? = Disjunction )
            //      ( ? ! Disjunction )
            switch(lookahead()){
                case '^':
                    incr();
                    return createAnchor('start', 1 /* rawLength */ );
                case '$':
                    incr();
                    return createAnchor('end', 1 /* rawLength */ );
                case '\\':
                    {
                        if (next('b')) {
                            incr(2);
                            return createAnchor('boundary', 2 /* rawLength */ );
                        } else if (next('B')) {
                            incr(2);
                            return createAnchor('not-boundary', 2 /* rawLength */ );
                        }
                        break;
                    }
                case '(':
                    return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');
                default:
                    return;
            }
        }
        function parseQuantifier() {
            // Quantifier ::
            //      QuantifierPrefix
            //      QuantifierPrefix ?
            //
            // QuantifierPrefix ::
            //      *
            //      +
            //      ?
            //      { DecimalDigits }
            //      { DecimalDigits , }
            //      { DecimalDigits , DecimalDigits }
            var res, from = pos;
            var quantifier;
            var min, max;
            switch(lookahead()){
                case '*':
                    incr();
                    quantifier = createQuantifier(0, undefined, undefined, undefined, '*');
                    break;
                case '+':
                    incr();
                    quantifier = createQuantifier(1, undefined, undefined, undefined, "+");
                    break;
                case '?':
                    incr();
                    quantifier = createQuantifier(0, 1, undefined, undefined, "?");
                    break;
                case '{':
                    {
                        if (res = matchReg(/^\{(\d+)\}/)) {
                            min = parseInt(res[1], 10);
                            quantifier = createQuantifier(min, min, from, pos);
                        } else if (res = matchReg(/^\{(\d+),\}/)) {
                            min = parseInt(res[1], 10);
                            quantifier = createQuantifier(min, undefined, from, pos);
                        } else if (res = matchReg(/^\{(\d+),(\d+)\}/)) {
                            min = parseInt(res[1], 10);
                            max = parseInt(res[2], 10);
                            if (min > max) {
                                bail('numbers out of order in {} quantifier', '', from, pos);
                            }
                            quantifier = createQuantifier(min, max, from, pos);
                        }
                        if (min && !Number.isSafeInteger(min) || max && !Number.isSafeInteger(max)) {
                            bail("iterations outside JS safe integer range in quantifier", "", from, pos);
                        }
                    }
            }
            if (quantifier) {
                if (matchOne('?')) {
                    quantifier.greedy = false;
                    quantifier.range[1] += 1;
                }
            }
            return quantifier;
        }
        function parseAtomAndExtendedAtom() {
            // Parsing Atom and ExtendedAtom together due to redundancy.
            // ExtendedAtom is defined in Apendix B of the ECMA-262 standard.
            //
            // SEE: https://www.ecma-international.org/ecma-262/10.0/index.html#prod-annexB-ExtendedPatternCharacter
            //
            // Atom ::
            //      PatternCharacter
            //      .
            //      \ AtomEscape
            //      CharacterClass
            //      ( GroupSpecifier Disjunction )
            //      ( ? RegularExpressionModifiers : Disjunction )
            //      ( ? RegularExpressionModifiers - RegularExpressionModifiers : Disjunction )
            // ExtendedAtom ::
            //      ExtendedPatternCharacter
            // ExtendedPatternCharacter ::
            //      SourceCharacter but not one of ^$\.*+?()[|
            var res;
            switch(res = lookahead()){
                case '.':
                    //      .
                    incr();
                    return createDot();
                case '\\':
                    {
                        //      \ AtomEscape
                        incr();
                        res = parseAtomEscape();
                        if (!res) {
                            if (!isUnicodeMode && lookahead() == 'c') {
                                // B.1.4 ExtendedAtom
                                // \[lookahead = c]
                                return createValue('symbol', 92, pos - 1, pos);
                            }
                            bail('atomEscape');
                        }
                        return res;
                    }
                case '[':
                    return parseCharacterClass();
                case '(':
                    {
                        if (features.lookbehind && (res = parseGroup('(?<=', 'lookbehind', '(?<!', 'negativeLookbehind'))) {
                            return res;
                        } else if (features.namedGroups && match("(?<")) {
                            var name = parseIdentifier();
                            skip(">");
                            var group = finishGroup("normal", name.range[0] - 3);
                            group.name = name;
                            return group;
                        } else if (features.modifiers && current("(?") && str[pos + 2] != ":") {
                            return parseModifiersGroup();
                        } else {
                            //      ( Disjunction )
                            //      ( ? : Disjunction )
                            return parseGroup('(?:', 'ignore', '(', 'normal');
                        }
                    }
                case ']':
                case '}':
                    //      ExtendedPatternCharacter, first part. See parseTerm.
                    if (!isUnicodeMode) {
                        incr();
                        return createCharacter(res);
                    }
                    break;
                case '^':
                case '$':
                case '*':
                case '+':
                case '?':
                case '{':
                case ')':
                case '|':
                    break;
                default:
                    //      PatternCharacter
                    incr();
                    return createCharacter(res);
            }
        }
        function parseModifiersGroup() {
            function hasDupChar(str) {
                var i = 0;
                while(i < str.length){
                    if (str.indexOf(str[i], i + 1) != -1) {
                        return true;
                    }
                    i++;
                }
                return false;
            }
            var from = pos;
            incr(2);
            var enablingFlags = matchReg(/^[sim]+/);
            var disablingFlags;
            if (matchOne("-") && lookahead() !== ":") {
                disablingFlags = matchReg(/^[sim]+/);
                if (!disablingFlags) {
                    bail('Invalid flags for modifiers group');
                }
            } else if (!enablingFlags) {
                bail('Invalid flags for modifiers group');
            }
            enablingFlags = enablingFlags ? enablingFlags[0] : "";
            disablingFlags = disablingFlags ? disablingFlags[0] : "";
            var flags = enablingFlags + disablingFlags;
            if (flags.length > 3 || hasDupChar(flags)) {
                bail('flags cannot be duplicated for modifiers group');
            }
            if (!matchOne(":")) {
                bail('Invalid flags for modifiers group');
            }
            var modifiersGroup = finishGroup("ignore", from);
            modifiersGroup.modifierFlags = {
                enabling: enablingFlags,
                disabling: disablingFlags
            };
            return modifiersGroup;
        }
        function parseUnicodeSurrogatePairEscape(firstEscape, isUnicodeMode) {
            if (isUnicodeMode) {
                var first, second;
                if (firstEscape.kind == 'unicodeEscape' && (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF && currentOne('\\') && next('u')) {
                    var prevPos = pos;
                    pos++;
                    var secondEscape = parseClassEscape();
                    if (secondEscape.kind == 'unicodeEscape' && (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {
                        // Unicode surrogate pair
                        firstEscape.kind = 'unicodeCodePointEscape';
                        firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
                        firstEscape.range[1] = pos;
                        firstEscape.raw = str.substring(firstEscape.range[0], pos);
                    } else {
                        pos = prevPos;
                    }
                }
            }
            return firstEscape;
        }
        function parseClassEscape() {
            return parseAtomEscape(true);
        }
        function parseAtomEscape(insideCharacterClass) {
            // AtomEscape ::
            //      DecimalEscape
            //      CharacterEscape
            //      CharacterClassEscape
            //      k GroupName
            var res, from = pos, ch;
            switch(ch = lookahead()){
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    return parseDecimalEscape(insideCharacterClass);
                case 'B':
                    {
                        if (insideCharacterClass) {
                            bail('\\B not possible inside of CharacterClass', '', from);
                            break;
                        } else {
                            return parseIdentityEscape();
                        }
                    }
                case 'b':
                    {
                        if (insideCharacterClass) {
                            // 15.10.2.19
                            // The production ClassEscape :: b evaluates by returning the
                            // CharSet containing the one character <BS> (Unicode value 0008).
                            incr();
                            return createEscaped('singleEscape', 0x0008, '\\b');
                        } else {
                            return parseIdentityEscape();
                        }
                    }
                case 'c':
                    {
                        if (insideCharacterClass) {
                            if (!isUnicodeMode && (res = matchReg(/^c(\d)/))) {
                                // B.1.4
                                // c ClassControlLetter, ClassControlLetter = DecimalDigit
                                return createEscaped('controlLetter', res[1] + 16, res[1], 2);
                            } else if (!isUnicodeMode && match("c_")) {
                                // B.1.4
                                // c ClassControlLetter, ClassControlLetter = _
                                return createEscaped('controlLetter', 31, '_', 2);
                            }
                        }
                        return parseCharacterEscape();
                    }
                // CharacterClassEscape :: one of d D s S w W
                case 'd':
                case 'D':
                case 'w':
                case 'W':
                case 's':
                case 'S':
                    incr();
                    return createCharacterClassEscape(ch);
                case 'k':
                    return parseNamedReference() || parseIdentityEscape();
                case 'p':
                case 'P':
                    return parseUnicodePropertyEscape() || parseIdentityEscape();
                case '-':
                    {
                        //     [+U] -
                        if (insideCharacterClass && isUnicodeMode) {
                            incr();
                            return createEscaped('singleEscape', 0x002d, '\\-');
                        }
                        return parseIdentityEscape();
                    }
                default:
                    return parseCharacterEscape();
            }
        }
        function parseDecimalEscape(insideCharacterClass) {
            // DecimalEscape ::
            //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]
            var res, match, from = pos;
            if (res = matchReg(/^(?!0)\d+/)) {
                match = res[0];
                var refIdx = parseInt(res[0], 10);
                if (refIdx <= closedCaptureCounter && !insideCharacterClass) {
                    // If the number is smaller than the normal-groups found so
                    // far, then it is a reference...
                    return createReference(res[0]);
                } else {
                    // ... otherwise it needs to be interpreted as a octal (if the
                    // number is in an octal format). If it is NOT octal format,
                    // then the slash is ignored and the number is matched later
                    // as normal characters.
                    // Recall the negative decision to decide if the input must be parsed
                    // a second time with the total normal-groups.
                    backrefDenied.push(refIdx);
                    // \1 octal escapes are disallowed in unicode mode, but they might
                    // be references to groups which haven't been parsed yet.
                    // We must parse a second time to determine if \1 is a reference
                    // or an octal scape, and then we can report the error.
                    if (firstIteration) {
                        shouldReparse = true;
                    } else {
                        bailOctalEscapeIfUnicode(from, pos);
                    }
                    // Reset the position again, as maybe only parts of the previous
                    // matched numbers are actual octal numbers. E.g. in '019' only
                    // the '01' should be matched.
                    incr(-res[0].length);
                    if (res = matchReg(/^[0-7]{1,3}/)) {
                        return createEscaped('octal', parseInt(res[0], 8), res[0], 1);
                    } else {
                        // If we end up here, we have a case like /\91/. Then the
                        // first slash is to be ignored and the 9 & 1 to be treated
                        // like ordinary characters. Create a character for the
                        // first number only here - other number-characters
                        // (if available) will be matched later.
                        var start = pos;
                        res = createCharacter(matchReg(/^[89]/));
                        return updateRawStart(res, start - 1);
                    }
                }
            } else if (res = matchReg(/^[0-7]{1,3}/)) {
                match = res[0];
                if (match !== '0') {
                    bailOctalEscapeIfUnicode(from, pos);
                }
                if (/^0{1,3}$/.test(match)) {
                    // If they are all zeros, then only take the first one.
                    return createEscaped('null', 0x0000, '0', match.length);
                } else {
                    return createEscaped('octal', parseInt(match, 8), match, 1);
                }
            }
            return false;
        }
        function bailOctalEscapeIfUnicode(from, pos) {
            if (isUnicodeMode) {
                bail("Invalid decimal escape in unicode mode", null, from, pos);
            }
        }
        function parseUnicodePropertyEscape() {
            var res, from = pos;
            if (features.unicodePropertyEscape && isUnicodeMode && (res = matchReg(/^([pP])\{([^}]+)\}/))) {
                // https://github.com/jviereck/regjsparser/issues/77
                return {
                    type: 'unicodePropertyEscape',
                    negative: res[1] === 'P',
                    value: res[2],
                    range: [
                        from - 1,
                        pos
                    ],
                    raw: str.substring(from - 1, pos)
                };
            }
            return false;
        }
        function parseNamedReference() {
            if (features.namedGroups && matchReg(/^k<(?=.*?>)/)) {
                var name = parseIdentifier();
                skip('>');
                return createNamedReference(name);
            }
        }
        function parseRegExpUnicodeEscapeSequence(isUnicodeMode) {
            var res;
            if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {
                // UnicodeEscapeSequence
                return parseUnicodeSurrogatePairEscape(createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2), isUnicodeMode);
            } else if (isUnicodeMode && (res = matchReg(/^u\{([0-9a-fA-F]+)\}/))) {
                // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)
                return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);
            }
        }
        function parseCharacterEscape() {
            // CharacterEscape ::
            //      ControlEscape
            //      c ControlLetter
            //      HexEscapeSequence
            //      UnicodeEscapeSequence[?UnicodeMode]
            //      IdentityEscape[?UnicodeMode]
            var res;
            var from = pos;
            switch(lookahead()){
                case 't':
                    incr();
                    return createEscaped('singleEscape', 0x009, '\\t');
                case 'n':
                    incr();
                    return createEscaped('singleEscape', 0x00A, '\\n');
                case 'v':
                    incr();
                    return createEscaped('singleEscape', 0x00B, '\\v');
                case 'f':
                    incr();
                    return createEscaped('singleEscape', 0x00C, '\\f');
                case 'r':
                    incr();
                    return createEscaped('singleEscape', 0x00D, '\\r');
                case 'c':
                    if (res = matchReg(/^c([a-zA-Z])/)) {
                        // c ControlLetter
                        return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);
                    }
                    break;
                case 'x':
                    if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {
                        // HexEscapeSequence
                        return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);
                    }
                    break;
                case 'u':
                    if (res = parseRegExpUnicodeEscapeSequence(isUnicodeMode)) {
                        if (!res || res.codePoint > 0x10FFFF) {
                            bail('Invalid escape sequence', null, from, pos);
                        }
                        return res;
                    }
                    break;
            }
            // IdentityEscape
            return parseIdentityEscape();
        }
        function parseIdentifierAtom(check) {
            // RegExpIdentifierStart[UnicodeMode] ::
            //      IdentifierStartChar
            //      \ RegExpUnicodeEscapeSequence[+UnicodeMode]
            //      [~UnicodeMode] UnicodeLeadSurrogate UnicodeTrailSurrogate
            //
            // RegExpIdentifierPart[UnicodeMode] ::
            //      IdentifierPartChar
            //      \ RegExpUnicodeEscapeSequence[+UnicodeMode]
            //      [~UnicodeMode] UnicodeLeadSurrogate UnicodeTrailSurrogate
            var ch = lookahead();
            var from = pos;
            if (ch === '\\') {
                incr();
                var esc = parseRegExpUnicodeEscapeSequence(true);
                if (!esc || !check(esc.codePoint)) {
                    bail('Invalid escape sequence', null, from, pos);
                }
                return fromCodePoint(esc.codePoint);
            }
            var code = ch.charCodeAt(0);
            if (code >= 0xD800 && code <= 0xDBFF) {
                ch += str[pos + 1];
                var second = ch.charCodeAt(1);
                if (second >= 0xDC00 && second <= 0xDFFF) {
                    // Unicode surrogate pair
                    code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
                }
            }
            if (!check(code)) return;
            incr();
            if (code > 0xFFFF) incr();
            return ch;
        }
        function parseIdentifier() {
            // RegExpIdentifierName ::
            //      RegExpIdentifierStart
            //      RegExpIdentifierName RegExpIdentifierContinue
            //
            // RegExpIdentifierStart ::
            //      UnicodeIDStart
            //      $
            //      _
            //      \ RegExpUnicodeEscapeSequence
            //
            // RegExpIdentifierContinue ::
            //      UnicodeIDContinue
            //      $
            //      _
            //      \ RegExpUnicodeEscapeSequence
            //      <ZWNJ>
            //      <ZWJ>
            var start = pos;
            var res = parseIdentifierAtom(isIdentifierStart);
            if (!res) {
                bail('Invalid identifier');
            }
            var ch;
            while(ch = parseIdentifierAtom(isIdentifierPart)){
                res += ch;
            }
            return {
                type: 'identifier',
                value: res,
                range: [
                    start,
                    pos
                ],
                raw: str.substring(start, pos)
            };
        }
        function isIdentifierStart(ch) {
            // ECMAScript (Unicode v16.0.0) NonAsciiIdentifierStart:
            // Generated by `tools/generate-identifier-regex.js`.
            var NonAsciiIdentifierStart = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF]/;
            return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 0x80 && NonAsciiIdentifierStart.test(fromCodePoint(ch));
        }
        // Taken from the Esprima parser.
        function isIdentifierPart(ch) {
            // ECMAScript (Unicode v16.0.0) NonAsciiIdentifierPartOnly:
            // Generated by `tools/generate-identifier-regex.js`.
            // eslint-disable-next-line no-misleading-character-class
            var NonAsciiIdentifierPartOnly = /[\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0897-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDD30-\uDD39\uDD40-\uDD49\uDD69-\uDD6D\uDEAB\uDEAC\uDEFC-\uDEFF\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC66-\uDC70\uDC73\uDC74\uDC7F-\uDC82\uDCB0-\uDCBA\uDCC2\uDCF0-\uDCF9\uDD00-\uDD02\uDD27-\uDD34\uDD36-\uDD3F\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDDCE-\uDDD9\uDE2C-\uDE37\uDE3E\uDE41\uDEDF-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74\uDFB8-\uDFC0\uDFC2\uDFC5\uDFC7-\uDFCA\uDFCC-\uDFD0\uDFD2\uDFE1\uDFE2]|\uD805[\uDC35-\uDC46\uDC50-\uDC59\uDC5E\uDCB0-\uDCC3\uDCD0-\uDCD9\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDE50-\uDE59\uDEAB-\uDEB7\uDEC0-\uDEC9\uDED0-\uDEE3\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDC2C-\uDC3A\uDCE0-\uDCE9\uDD30-\uDD35\uDD37\uDD38\uDD3B-\uDD3E\uDD40\uDD42\uDD43\uDD50-\uDD59\uDDD1-\uDDD7\uDDDA-\uDDE0\uDDE4\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99\uDFF0-\uDFF9]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC50-\uDC59\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD50-\uDD59\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDDA0-\uDDA9\uDEF3-\uDEF6\uDF00\uDF01\uDF03\uDF34-\uDF3A\uDF3E-\uDF42\uDF50-\uDF5A]|\uD80D[\uDC40\uDC47-\uDC55]|\uD818[\uDD1E-\uDD39]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDEF0-\uDEF4\uDF30-\uDF36\uDF50-\uDF59]|\uD81B[\uDD70-\uDD79\uDF4F\uDF51-\uDF87\uDF8F-\uDF92\uDFE4\uDFF0\uDFF1]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDCF0-\uDCF9\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDC8F\uDD30-\uDD36\uDD40-\uDD49\uDEAE\uDEEC-\uDEF9]|\uD839[\uDCEC-\uDCF9\uDDEE\uDDEF\uDDF1-\uDDFA]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A\uDD50-\uDD59]|\uD83E[\uDFF0-\uDFF9]|\uDB40[\uDD00-\uDDEF]/;
            return isIdentifierStart(ch) || ch >= 48 && ch <= 57 || ch >= 0x80 && NonAsciiIdentifierPartOnly.test(fromCodePoint(ch));
        }
        function parseIdentityEscape() {
            // IdentityEscape ::
            //      [+U] SyntaxCharacter
            //      [+U] /
            //      [~U] SourceCharacterIdentityEscape[?N]
            // SourceCharacterIdentityEscape[?N] ::
            //      [~N] SourceCharacter but not c
            //      [+N] SourceCharacter but not one of c or k
            var tmp;
            var l = lookahead();
            if (isUnicodeMode && /[\^$.*+?()\\[\]{}|/]/.test(l) || !isUnicodeMode && l !== "c") {
                if (l === "k" && features.lookbehind) {
                    return null;
                }
                tmp = consume(1);
                return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);
            }
            return null;
        }
        function parseCharacterClass() {
            // CharacterClass ::
            //      [ [lookahead ∉ {^}] ClassContents ]
            //      [ ^ ClassContents ]
            var res, from = pos;
            if (res = match("[^")) {
                res = parseClassContents();
                skip(']');
                return createCharacterClass(res, true, from, pos);
            } else if (matchOne('[')) {
                res = parseClassContents();
                skip(']');
                return createCharacterClass(res, false, from, pos);
            }
            return null;
        }
        function parseClassContents() {
            // ClassContents ::
            //      [empty]
            //      [~V] NonemptyClassRanges
            //      [+V] ClassSetExpression
            var res;
            if (currentOne(']')) {
                // Empty array means nothing inside of the ClassRange.
                return {
                    kind: 'union',
                    body: []
                };
            } else if (hasUnicodeSetFlag) {
                return parseClassSetExpression();
            } else {
                res = parseNonemptyClassRanges();
                if (!res) {
                    bail('nonEmptyClassRanges');
                }
                return {
                    kind: 'union',
                    body: res
                };
            }
        }
        function parseHelperClassContents(atom) {
            var from, to, res, atomTo, dash;
            if (currentOne('-') && !next(']')) {
                // ClassAtom - ClassAtom ClassContents
                from = atom.range[0];
                incr();
                dash = createCharacter('-');
                atomTo = parseClassAtom();
                if (!atomTo) {
                    bail('classAtom');
                }
                to = pos;
                // Parse the next class range if exists.
                var classContents = parseClassContents();
                if (!classContents) {
                    bail('classContents');
                }
                // Check if both the from and atomTo have codePoints.
                if (!('codePoint' in atom) || !('codePoint' in atomTo)) {
                    if (!isUnicodeMode) {
                        // If not, don't create a range but treat them as
                        // `atom` `-` `atom` instead.
                        //
                        // SEE: https://tc39.es/ecma262/#sec-regular-expression-patterns-semantics
                        //   NonemptyClassRanges::ClassAtom - ClassAtom ClassContents
                        //   CharacterRangeOrUnion
                        res = [
                            atom,
                            dash,
                            atomTo
                        ];
                    } else {
                        // With unicode flag, both sides must have codePoints if
                        // one side has a codePoint.
                        //
                        // SEE: https://tc39.es/ecma262/#sec-patterns-static-semantics-early-errors
                        //   NonemptyClassRanges :: ClassAtom - ClassAtom ClassContents
                        bail('invalid character class');
                    }
                } else {
                    res = [
                        createClassRange(atom, atomTo, from, to)
                    ];
                }
                if (classContents.type === 'empty') {
                    return res;
                }
                return res.concat(classContents.body);
            }
            res = parseNonemptyClassRangesNoDash();
            if (!res) {
                bail('nonEmptyClassRangesNoDash');
            }
            return [
                atom
            ].concat(res);
        }
        function parseNonemptyClassRanges() {
            // NonemptyClassRanges ::
            //      ClassAtom
            //      ClassAtom NonemptyClassRangesNoDash
            //      ClassAtom - ClassAtom ClassContents
            var atom = parseClassAtom();
            if (!atom) {
                bail('classAtom');
            }
            if (currentOne(']')) {
                // ClassAtom
                return [
                    atom
                ];
            }
            // ClassAtom NonemptyClassRangesNoDash
            // ClassAtom - ClassAtom ClassContents
            return parseHelperClassContents(atom);
        }
        function parseNonemptyClassRangesNoDash() {
            // NonemptyClassRangesNoDash ::
            //      ClassAtom
            //      ClassAtomNoDash NonemptyClassRangesNoDash
            //      ClassAtomNoDash - ClassAtom ClassContents
            var res = parseClassAtom();
            if (!res) {
                bail('classAtom');
            }
            if (currentOne(']')) {
                //      ClassAtom
                return res;
            }
            // ClassAtomNoDash NonemptyClassRangesNoDash
            // ClassAtomNoDash - ClassAtom ClassContents
            return parseHelperClassContents(res);
        }
        function parseClassAtom() {
            // ClassAtom ::
            //      -
            //      ClassAtomNoDash
            if (matchOne('-')) {
                return createCharacter('-');
            } else {
                return parseClassAtomNoDash();
            }
        }
        function parseClassAtomNoDash() {
            // ClassAtomNoDash ::
            //      SourceCharacter but not one of \ or ] or -
            //      \ ClassEscape
            //
            // ClassAtomNoDash (Annex B)::
            //      \ [lookahead = c] 
            var res;
            switch(res = lookahead()){
                case "\\":
                    {
                        incr();
                        res = parseClassEscape();
                        if (!res) {
                            if (!isUnicodeMode && lookahead() == "c") {
                                return createCharacter("\\");
                            }
                            bail("classEscape");
                        }
                        return parseUnicodeSurrogatePairEscape(res, isUnicodeMode);
                    }
                case "]":
                case "-":
                    break;
                default:
                    incr();
                    return createCharacter(res);
            }
        }
        function parseClassSetExpression() {
            // ClassSetExpression ::
            //      ClassUnion
            //      ClassIntersection
            //      ClassSubtraction
            //
            // ClassUnion ::
            //      ClassSetRange ClassUnion?
            //      ClassSetOperand ClassUnion?
            //
            // ClassIntersection ::
            //      ClassSetOperand && [lookahead ≠ &] ClassSetOperand
            //      ClassIntersection && [lookahead ≠ &] ClassSetOperand
            //
            // ClassSubtraction ::
            //      ClassSetOperand -- ClassSetOperand
            //      ClassSubtraction -- ClassSetOperand
            //
            var body = [];
            var kind;
            var operand = parseClassSetOperand(/* allowRanges*/ true);
            body.push(operand);
            if (operand.type === 'classRange') {
                kind = 'union';
            } else if (currentOne('&')) {
                kind = 'intersection';
            } else if (currentOne('-')) {
                kind = 'subtraction';
            } else {
                kind = 'union';
            }
            while(!currentOne(']')){
                if (kind === 'intersection') {
                    skip('&');
                    skip('&');
                    if (currentOne('&')) {
                        bail('&& cannot be followed by &. Wrap it in brackets: &&[&].');
                    }
                } else if (kind === 'subtraction') {
                    skip('-');
                    skip('-');
                }
                operand = parseClassSetOperand(/* allowRanges*/ kind === 'union');
                body.push(operand);
            }
            return {
                kind: kind,
                body: body
            };
        }
        function parseClassSetOperand(allowRanges) {
            // ClassSetOperand ::
            //      ClassSetCharacter
            //      ClassStringDisjunction
            //      NestedClass
            //
            // NestedClass ::
            //      [ [lookahead ≠ ^] ClassContents[+U,+V] ]
            //      [ ^ ClassContents[+U,+V] ]
            //      \ CharacterClassEscape[+U, +V]
            //
            // ClassSetRange ::
            //      ClassSetCharacter - ClassSetCharacter
            //
            // ClassSetCharacter ::
            //      [lookahead ∉ ClassReservedDouble] SourceCharacter but not ClassSetSyntaxCharacter
            //      \ CharacterEscape[+U]
            //      \ ClassHalfOfDouble
            //      \ b
            //
            // ClassSyntaxCharacter ::
            //      one of ( ) [ ] { } / - \ |
            var from = pos;
            var start, res;
            if (matchOne('\\')) {
                // ClassSetOperand ::
                //      ...
                //      ClassStringDisjunction
                //      NestedClass
                //
                // NestedClass ::
                //      ...
                //      \ CharacterClassEscape[+U, +V]
                if (match('q{')) {
                    return parseClassStringDisjunction();
                } else if (res = parseClassEscape()) {
                    start = res;
                } else if (res = parseClassSetCharacterEscapedHelper()) {
                    return res;
                } else {
                    bail('Invalid escape', '\\' + lookahead(), from);
                }
            } else if (res = parseClassSetCharacterUnescapedHelper()) {
                start = res;
            } else if (res = parseCharacterClass()) {
                // ClassSetOperand ::
                //      ...
                //      NestedClass
                //
                // NestedClass ::
                //      [ [lookahead ≠ ^] ClassContents[+U,+V] ]
                //      [ ^ ClassContents[+U,+V] ]
                //      ...
                return res;
            } else {
                bail('Invalid character', lookahead());
            }
            if (allowRanges && currentOne('-') && !next('-')) {
                incr();
                if (res = parseClassSetCharacter()) {
                    // ClassSetRange ::
                    //      ClassSetCharacter - ClassSetCharacter
                    return createClassRange(start, res, from, pos);
                }
                bail('Invalid range end', lookahead());
            }
            // ClassSetOperand ::
            //      ClassSetCharacter
            //      ...
            return start;
        }
        function parseClassSetCharacter() {
            // ClassSetCharacter ::
            //      [lookahead ∉ ClassReservedDouble] SourceCharacter but not ClassSetSyntaxCharacter
            //      \ CharacterEscape[+U]
            //      \ ClassHalfOfDouble
            //      \ b
            if (matchOne('\\')) {
                var res, from = pos;
                if (res = parseClassSetCharacterEscapedHelper()) {
                    return res;
                } else {
                    bail('Invalid escape', '\\' + lookahead(), from);
                }
            }
            return parseClassSetCharacterUnescapedHelper();
        }
        function parseClassSetCharacterUnescapedHelper() {
            // ClassSetCharacter ::
            //      [lookahead ∉ ClassSetReservedDoublePunctuator] SourceCharacter but not ClassSetSyntaxCharacter
            //      ...
            var res;
            if (matchReg(/^(?:&&|!!|##|\$\$|%%|\*\*|\+\+|,,|\.\.|::|;;|<<|==|>>|\?\?|@@|\^\^|``|~~)/)) {
                bail('Invalid set operation in character class');
            }
            if (res = matchReg(/^[^()[\]{}/\-\\|]/)) {
                return createCharacter(res);
            }
        }
        function parseClassSetCharacterEscapedHelper() {
            // ClassSetCharacter ::
            //      ...
            //      \ CharacterEscape[+U]
            //      \ ClassSetReservedPunctuator
            //      \ b
            var res;
            if (matchOne('b')) {
                return createEscaped('singleEscape', 0x0008, '\\b');
            } else if (matchOne('B')) {
                bail('\\B not possible inside of ClassContents', '', pos - 2);
            } else if (res = matchReg(/^[&\-!#%,:;<=>@`~]/)) {
                return createEscaped('identifier', res[0].codePointAt(0), res[0]);
            } else if (res = parseCharacterEscape()) {
                return res;
            } else {
                return null;
            }
        }
        function parseClassStringDisjunction() {
            // ClassStringDisjunction ::
            //      \q{ ClassStringDisjunctionContents }
            //
            // ClassStringDisjunctionContents ::
            //      ClassString
            //      ClassString | ClassStringDisjunctionContents
            // When calling this function, \q{ has already been consumed.
            var from = pos - 3;
            var res = [];
            do {
                res.push(parseClassString());
            }while (matchOne('|'))
            skip('}');
            return createClassStrings(res, from, pos);
        }
        function parseClassString() {
            // ClassString ::
            //      [empty]
            //      NonEmptyClassString
            //
            // NonEmptyClassString ::
            //      ClassSetCharacter NonEmptyClassString?
            var res = [], from = pos;
            var char;
            while(char = parseClassSetCharacter()){
                res.push(char);
            }
            return createClassString(res, from, pos);
        }
        function bail(message, details, from, to) {
            from = from == null ? pos : from;
            to = to == null ? from : to;
            var contextStart = Math.max(0, from - 10);
            var contextEnd = Math.min(to + 10, str.length);
            // Output a bit of context and a line pointing to where our error is.
            //
            // We are assuming that there are no actual newlines in the content as this is a regular expression.
            var context = '    ' + str.substring(contextStart, contextEnd);
            var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';
            throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\n' + context + '\n' + pointer);
        }
        var backrefDenied = [];
        var closedCaptureCounter = 0;
        var firstIteration = true;
        var shouldReparse = false;
        var hasUnicodeFlag = (flags || "").indexOf("u") !== -1;
        var hasUnicodeSetFlag = (flags || "").indexOf("v") !== -1;
        var isUnicodeMode = hasUnicodeFlag || hasUnicodeSetFlag;
        var pos = 0;
        if (hasUnicodeSetFlag && !features.unicodeSet) {
            throw new Error('The "v" flag is only supported when the .unicodeSet option is enabled.');
        }
        if (hasUnicodeFlag && hasUnicodeSetFlag) {
            throw new Error('The "u" and "v" flags are mutually exclusive.');
        }
        // Convert the input to a string and treat the empty string special.
        str = String(str);
        if (str === '') {
            str = '(?:)';
        }
        var result = parseDisjunction();
        if (result.range[1] !== str.length) {
            bail('Could not parse entire input - got stuck', '', result.range[1]);
        }
        // The spec requires to interpret the `\2` in `/\2()()/` as backreference.
        // As the parser collects the number of capture groups as the string is
        // parsed it is impossible to make these decisions at the point when the
        // `\2` is handled. In case the local decision turns out to be wrong after
        // the parsing has finished, the input string is parsed a second time with
        // the total number of capture groups set.
        //
        // SEE: https://github.com/jviereck/regjsparser/issues/70
        shouldReparse = shouldReparse || backrefDenied.some(function(ref) {
            return ref <= closedCaptureCounter;
        });
        if (shouldReparse) {
            // Parse the input a second time.
            pos = 0;
            firstIteration = false;
            return parseDisjunction();
        }
        return result;
    }
    var regjsparser = {
        parse: parse
    };
    if (("TURBOPACK compile-time value", "object") !== 'undefined' && module.exports) {
        module.exports = regjsparser;
    } else {
        window.regjsparser = regjsparser;
    }
})();
}}),
"[project]/node_modules/regenerate/regenerate.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
;
(function(root) {
    // Detect free variables `exports`.
    var freeExports = ("TURBOPACK compile-time value", "object") == 'object' && exports;
    // Detect free variable `module`.
    var freeModule = ("TURBOPACK compile-time value", "object") == 'object' && module && module.exports == freeExports && module;
    // Detect free variable `global`, from Node.js/io.js or Browserified code,
    // and use it as `root`.
    var freeGlobal = typeof global == 'object' && global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
        root = freeGlobal;
    }
    /*--------------------------------------------------------------------------*/ var ERRORS = {
        'rangeOrder': 'A range\u2019s `stop` value must be greater than or equal ' + 'to the `start` value.',
        'codePointRange': 'Invalid code point value. Code points range from ' + 'U+000000 to U+10FFFF.'
    };
    // https://mathiasbynens.be/notes/javascript-encoding#surrogate-pairs
    var HIGH_SURROGATE_MIN = 0xD800;
    var HIGH_SURROGATE_MAX = 0xDBFF;
    var LOW_SURROGATE_MIN = 0xDC00;
    var LOW_SURROGATE_MAX = 0xDFFF;
    // In Regenerate output, `\0` is never preceded by `\` because we sort by
    // code point value, so let’s keep this regular expression simple.
    var regexNull = /\\x00([^0123456789]|$)/g;
    var object = {};
    var hasOwnProperty = object.hasOwnProperty;
    var extend = function(destination, source) {
        var key;
        for(key in source){
            if (hasOwnProperty.call(source, key)) {
                destination[key] = source[key];
            }
        }
        return destination;
    };
    var forEach = function(array, callback) {
        var index = -1;
        var length = array.length;
        while(++index < length){
            callback(array[index], index);
        }
    };
    var toString = object.toString;
    var isArray = function(value) {
        return toString.call(value) == '[object Array]';
    };
    var isNumber = function(value) {
        return typeof value == 'number' || toString.call(value) == '[object Number]';
    };
    // This assumes that `number` is a positive integer that `toString()`s nicely
    // (which is the case for all code point values).
    var zeroes = '0000';
    var pad = function(number, totalCharacters) {
        var string = String(number);
        return string.length < totalCharacters ? (zeroes + string).slice(-totalCharacters) : string;
    };
    var hex = function(number) {
        return Number(number).toString(16).toUpperCase();
    };
    var slice = [].slice;
    /*--------------------------------------------------------------------------*/ var dataFromCodePoints = function(codePoints) {
        var index = -1;
        var length = codePoints.length;
        var max = length - 1;
        var result = [];
        var isStart = true;
        var tmp;
        var previous = 0;
        while(++index < length){
            tmp = codePoints[index];
            if (isStart) {
                result.push(tmp);
                previous = tmp;
                isStart = false;
            } else {
                if (tmp == previous + 1) {
                    if (index != max) {
                        previous = tmp;
                        continue;
                    } else {
                        isStart = true;
                        result.push(tmp + 1);
                    }
                } else {
                    // End the previous range and start a new one.
                    result.push(previous + 1, tmp);
                    previous = tmp;
                }
            }
        }
        if (!isStart) {
            result.push(tmp + 1);
        }
        return result;
    };
    var dataRemove = function(data, codePoint) {
        // Iterate over the data per `(start, end)` pair.
        var index = 0;
        var start;
        var end;
        var length = data.length;
        while(index < length){
            start = data[index];
            end = data[index + 1];
            if (codePoint >= start && codePoint < end) {
                // Modify this pair.
                if (codePoint == start) {
                    if (end == start + 1) {
                        // Just remove `start` and `end`.
                        data.splice(index, 2);
                        return data;
                    } else {
                        // Just replace `start` with a new value.
                        data[index] = codePoint + 1;
                        return data;
                    }
                } else if (codePoint == end - 1) {
                    // Just replace `end` with a new value.
                    data[index + 1] = codePoint;
                    return data;
                } else {
                    // Replace `[start, end]` with `[startA, endA, startB, endB]`.
                    data.splice(index, 2, start, codePoint, codePoint + 1, end);
                    return data;
                }
            }
            index += 2;
        }
        return data;
    };
    var dataRemoveRange = function(data, rangeStart, rangeEnd) {
        if (rangeEnd < rangeStart) {
            throw Error(ERRORS.rangeOrder);
        }
        // Iterate over the data per `(start, end)` pair.
        var index = 0;
        var start;
        var end;
        while(index < data.length){
            start = data[index];
            end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.
            // Exit as soon as no more matching pairs can be found.
            if (start > rangeEnd) {
                return data;
            }
            // Check if this range pair is equal to, or forms a subset of, the range
            // to be removed.
            // E.g. we have `[0, 11, 40, 51]` and want to remove 0-10 → `[40, 51]`.
            // E.g. we have `[40, 51]` and want to remove 0-100 → `[]`.
            if (rangeStart <= start && rangeEnd >= end) {
                // Remove this pair.
                data.splice(index, 2);
                continue;
            }
            // Check if both `rangeStart` and `rangeEnd` are within the bounds of
            // this pair.
            // E.g. we have `[0, 11]` and want to remove 4-6 → `[0, 4, 7, 11]`.
            if (rangeStart >= start && rangeEnd < end) {
                if (rangeStart == start) {
                    // Replace `[start, end]` with `[startB, endB]`.
                    data[index] = rangeEnd + 1;
                    data[index + 1] = end + 1;
                    return data;
                }
                // Replace `[start, end]` with `[startA, endA, startB, endB]`.
                data.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);
                return data;
            }
            // Check if only `rangeStart` is within the bounds of this pair.
            // E.g. we have `[0, 11]` and want to remove 4-20 → `[0, 4]`.
            if (rangeStart >= start && rangeStart <= end) {
                // Replace `end` with `rangeStart`.
                data[index + 1] = rangeStart;
            // Note: we cannot `return` just yet, in case any following pairs still
            // contain matching code points.
            // E.g. we have `[0, 11, 14, 31]` and want to remove 4-20
            // → `[0, 4, 21, 31]`.
            } else if (rangeEnd >= start && rangeEnd <= end) {
                // Just replace `start`.
                data[index] = rangeEnd + 1;
                return data;
            }
            index += 2;
        }
        return data;
    };
    var dataAdd = function(data, codePoint) {
        // Iterate over the data per `(start, end)` pair.
        var index = 0;
        var start;
        var end;
        var lastIndex = null;
        var length = data.length;
        if (codePoint < 0x0 || codePoint > 0x10FFFF) {
            throw RangeError(ERRORS.codePointRange);
        }
        while(index < length){
            start = data[index];
            end = data[index + 1];
            // Check if the code point is already in the set.
            if (codePoint >= start && codePoint < end) {
                return data;
            }
            if (codePoint == start - 1) {
                // Just replace `start` with a new value.
                data[index] = codePoint;
                return data;
            }
            // At this point, if `start` is `greater` than `codePoint`, insert a new
            // `[start, end]` pair before the current pair, or after the current pair
            // if there is a known `lastIndex`.
            if (start > codePoint) {
                data.splice(lastIndex != null ? lastIndex + 2 : 0, 0, codePoint, codePoint + 1);
                return data;
            }
            if (codePoint == end) {
                // Check if adding this code point causes two separate ranges to become
                // a single range, e.g. `dataAdd([0, 4, 5, 10], 4)` → `[0, 10]`.
                if (codePoint + 1 == data[index + 2]) {
                    data.splice(index, 4, start, data[index + 3]);
                    return data;
                }
                // Else, just replace `end` with a new value.
                data[index + 1] = codePoint + 1;
                return data;
            }
            lastIndex = index;
            index += 2;
        }
        // The loop has finished; add the new pair to the end of the data set.
        data.push(codePoint, codePoint + 1);
        return data;
    };
    var dataAddData = function(dataA, dataB) {
        // Iterate over the data per `(start, end)` pair.
        var index = 0;
        var start;
        var end;
        var data = dataA.slice();
        var length = dataB.length;
        while(index < length){
            start = dataB[index];
            end = dataB[index + 1] - 1;
            if (start == end) {
                data = dataAdd(data, start);
            } else {
                data = dataAddRange(data, start, end);
            }
            index += 2;
        }
        return data;
    };
    var dataRemoveData = function(dataA, dataB) {
        // Iterate over the data per `(start, end)` pair.
        var index = 0;
        var start;
        var end;
        var data = dataA.slice();
        var length = dataB.length;
        while(index < length){
            start = dataB[index];
            end = dataB[index + 1] - 1;
            if (start == end) {
                data = dataRemove(data, start);
            } else {
                data = dataRemoveRange(data, start, end);
            }
            index += 2;
        }
        return data;
    };
    var dataAddRange = function(data, rangeStart, rangeEnd) {
        if (rangeEnd < rangeStart) {
            throw Error(ERRORS.rangeOrder);
        }
        if (rangeStart < 0x0 || rangeStart > 0x10FFFF || rangeEnd < 0x0 || rangeEnd > 0x10FFFF) {
            throw RangeError(ERRORS.codePointRange);
        }
        // Iterate over the data per `(start, end)` pair.
        var index = 0;
        var start;
        var end;
        var added = false;
        var length = data.length;
        while(index < length){
            start = data[index];
            end = data[index + 1];
            if (added) {
                // The range has already been added to the set; at this point, we just
                // need to get rid of the following ranges in case they overlap.
                // Check if this range can be combined with the previous range.
                if (start == rangeEnd + 1) {
                    data.splice(index - 1, 2);
                    return data;
                }
                // Exit as soon as no more possibly overlapping pairs can be found.
                if (start > rangeEnd) {
                    return data;
                }
                // E.g. `[0, 11, 12, 16]` and we’ve added 5-15, so we now have
                // `[0, 16, 12, 16]`. Remove the `12,16` part, as it lies within the
                // `0,16` range that was previously added.
                if (start >= rangeStart && start <= rangeEnd) {
                    // `start` lies within the range that was previously added.
                    if (end > rangeStart && end - 1 <= rangeEnd) {
                        // `end` lies within the range that was previously added as well,
                        // so remove this pair.
                        data.splice(index, 2);
                        index -= 2;
                    // Note: we cannot `return` just yet, as there may still be other
                    // overlapping pairs.
                    } else {
                        // `start` lies within the range that was previously added, but
                        // `end` doesn’t. E.g. `[0, 11, 12, 31]` and we’ve added 5-15, so
                        // now we have `[0, 16, 12, 31]`. This must be written as `[0, 31]`.
                        // Remove the previously added `end` and the current `start`.
                        data.splice(index - 1, 2);
                        index -= 2;
                    }
                // Note: we cannot return yet.
                }
            } else if (start == rangeEnd + 1 || start == rangeEnd) {
                data[index] = rangeStart;
                return data;
            } else if (start > rangeEnd) {
                data.splice(index, 0, rangeStart, rangeEnd + 1);
                return data;
            } else if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) {
                // The new range lies entirely within an existing range pair. No action
                // needed.
                return data;
            } else if (// E.g. `[0, 11]` and you add 5-15 → `[0, 16]`.
            rangeStart >= start && rangeStart < end || // E.g. `[0, 3]` and you add 3-6 → `[0, 7]`.
            end == rangeStart) {
                // Replace `end` with the new value.
                data[index + 1] = rangeEnd + 1;
                // Make sure the next range pair doesn’t overlap, e.g. `[0, 11, 12, 14]`
                // and you add 5-15 → `[0, 16]`, i.e. remove the `12,14` part.
                added = true;
            // Note: we cannot `return` just yet.
            } else if (rangeStart <= start && rangeEnd + 1 >= end) {
                // The new range is a superset of the old range.
                data[index] = rangeStart;
                data[index + 1] = rangeEnd + 1;
                added = true;
            }
            index += 2;
        }
        // The loop has finished without doing anything; add the new pair to the end
        // of the data set.
        if (!added) {
            data.push(rangeStart, rangeEnd + 1);
        }
        return data;
    };
    var dataContains = function(data, codePoint) {
        var index = 0;
        var length = data.length;
        // Exit early if `codePoint` is not within `data`’s overall range.
        var start = data[index];
        var end = data[length - 1];
        if (length >= 2) {
            if (codePoint < start || codePoint > end) {
                return false;
            }
        }
        // Iterate over the data per `(start, end)` pair.
        while(index < length){
            start = data[index];
            end = data[index + 1];
            if (codePoint >= start && codePoint < end) {
                return true;
            }
            index += 2;
        }
        return false;
    };
    var dataIntersection = function(data, codePoints) {
        var index = 0;
        var length = codePoints.length;
        var codePoint;
        var result = [];
        while(index < length){
            codePoint = codePoints[index];
            if (dataContains(data, codePoint)) {
                result.push(codePoint);
            }
            ++index;
        }
        return dataFromCodePoints(result);
    };
    var dataIsEmpty = function(data) {
        return !data.length;
    };
    var dataIsSingleton = function(data) {
        // Check if the set only represents a single code point.
        return data.length == 2 && data[0] + 1 == data[1];
    };
    var dataToArray = function(data) {
        // Iterate over the data per `(start, end)` pair.
        var index = 0;
        var start;
        var end;
        var result = [];
        var length = data.length;
        while(index < length){
            start = data[index];
            end = data[index + 1];
            while(start < end){
                result.push(start);
                ++start;
            }
            index += 2;
        }
        return result;
    };
    /*--------------------------------------------------------------------------*/ // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
    var floor = Math.floor;
    var highSurrogate = function(codePoint) {
        return parseInt(floor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN, 10);
    };
    var lowSurrogate = function(codePoint) {
        return parseInt((codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN, 10);
    };
    var stringFromCharCode = String.fromCharCode;
    var codePointToString = function(codePoint) {
        var string;
        // https://mathiasbynens.be/notes/javascript-escapes#single
        // Note: the `\b` escape sequence for U+0008 BACKSPACE in strings has a
        // different meaning in regular expressions (word boundary), so it cannot
        // be used here.
        if (codePoint == 0x09) {
            string = '\\t';
        } else if (codePoint == 0x0A) {
            string = '\\n';
        } else if (codePoint == 0x0C) {
            string = '\\f';
        } else if (codePoint == 0x0D) {
            string = '\\r';
        } else if (codePoint == 0x2D) {
            // https://mathiasbynens.be/notes/javascript-escapes#hexadecimal
            // Note: `-` (U+002D HYPHEN-MINUS) is escaped in this way rather
            // than by backslash-escaping, in case the output is used outside
            // of a character class in a `u` RegExp. /\-/u throws, but
            // /\x2D/u is fine.
            string = '\\x2D';
        } else if (codePoint == 0x5C) {
            string = '\\\\';
        } else if (codePoint == 0x24 || codePoint >= 0x28 && codePoint <= 0x2B || codePoint == 0x2E || codePoint == 0x2F || codePoint == 0x3F || codePoint >= 0x5B && codePoint <= 0x5E || codePoint >= 0x7B && codePoint <= 0x7D) {
            // The code point maps to an unsafe printable ASCII character;
            // backslash-escape it. Here’s the list of those symbols:
            //
            //     $()*+./?[\]^{|}
            //
            // This matches SyntaxCharacters as well as `/` (U+002F SOLIDUS).
            // https://tc39.github.io/ecma262/#prod-SyntaxCharacter
            string = '\\' + stringFromCharCode(codePoint);
        } else if (codePoint >= 0x20 && codePoint <= 0x7E) {
            // The code point maps to one of these printable ASCII symbols
            // (including the space character):
            //
            //      !"#%&',/0123456789:;<=>@ABCDEFGHIJKLMNO
            //     PQRSTUVWXYZ_`abcdefghijklmnopqrstuvwxyz~
            //
            // These can safely be used directly.
            string = stringFromCharCode(codePoint);
        } else if (codePoint <= 0xFF) {
            string = '\\x' + pad(hex(codePoint), 2);
        } else {
            // https://mathiasbynens.be/notes/javascript-escapes#unicode
            string = '\\u' + pad(hex(codePoint), 4);
        }
        // There’s no need to account for astral symbols / surrogate pairs here,
        // since `codePointToString` is private and only used for BMP code points.
        // But if that’s what you need, just add an `else` block with this code:
        //
        //     string = '\\u' + pad(hex(highSurrogate(codePoint)), 4)
        //     	+ '\\u' + pad(hex(lowSurrogate(codePoint)), 4);
        return string;
    };
    var codePointToStringUnicode = function(codePoint) {
        if (codePoint <= 0xFFFF) {
            return codePointToString(codePoint);
        }
        return '\\u{' + codePoint.toString(16).toUpperCase() + '}';
    };
    var symbolToCodePoint = function(symbol) {
        var length = symbol.length;
        var first = symbol.charCodeAt(0);
        var second;
        if (first >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX && length > 1 // There is a next code unit.
        ) {
            // `first` is a high surrogate, and there is a next character. Assume
            // it’s a low surrogate (else it’s invalid usage of Regenerate anyway).
            second = symbol.charCodeAt(1);
            // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            return (first - HIGH_SURROGATE_MIN) * 0x400 + second - LOW_SURROGATE_MIN + 0x10000;
        }
        return first;
    };
    var createBMPCharacterClasses = function(data) {
        // Iterate over the data per `(start, end)` pair.
        var result = '';
        var index = 0;
        var start;
        var end;
        var length = data.length;
        if (dataIsSingleton(data)) {
            return codePointToString(data[0]);
        }
        while(index < length){
            start = data[index];
            end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.
            if (start == end) {
                result += codePointToString(start);
            } else if (start + 1 == end) {
                result += codePointToString(start) + codePointToString(end);
            } else {
                result += codePointToString(start) + '-' + codePointToString(end);
            }
            index += 2;
        }
        return '[' + result + ']';
    };
    var createUnicodeCharacterClasses = function(data) {
        // Iterate over the data per `(start, end)` pair.
        var result = '';
        var index = 0;
        var start;
        var end;
        var length = data.length;
        if (dataIsSingleton(data)) {
            return codePointToStringUnicode(data[0]);
        }
        while(index < length){
            start = data[index];
            end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.
            if (start == end) {
                result += codePointToStringUnicode(start);
            } else if (start + 1 == end) {
                result += codePointToStringUnicode(start) + codePointToStringUnicode(end);
            } else {
                result += codePointToStringUnicode(start) + '-' + codePointToStringUnicode(end);
            }
            index += 2;
        }
        return '[' + result + ']';
    };
    var splitAtBMP = function(data) {
        // Iterate over the data per `(start, end)` pair.
        var loneHighSurrogates = [];
        var loneLowSurrogates = [];
        var bmp = [];
        var astral = [];
        var index = 0;
        var start;
        var end;
        var length = data.length;
        while(index < length){
            start = data[index];
            end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.
            if (start < HIGH_SURROGATE_MIN) {
                // The range starts and ends before the high surrogate range.
                // E.g. (0, 0x10).
                if (end < HIGH_SURROGATE_MIN) {
                    bmp.push(start, end + 1);
                }
                // The range starts before the high surrogate range and ends within it.
                // E.g. (0, 0xD855).
                if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
                    bmp.push(start, HIGH_SURROGATE_MIN);
                    loneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);
                }
                // The range starts before the high surrogate range and ends in the low
                // surrogate range. E.g. (0, 0xDCFF).
                if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
                    bmp.push(start, HIGH_SURROGATE_MIN);
                    loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
                    loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
                }
                // The range starts before the high surrogate range and ends after the
                // low surrogate range. E.g. (0, 0x10FFFF).
                if (end > LOW_SURROGATE_MAX) {
                    bmp.push(start, HIGH_SURROGATE_MIN);
                    loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
                    loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
                    if (end <= 0xFFFF) {
                        bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
                    } else {
                        bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
                        astral.push(0xFFFF + 1, end + 1);
                    }
                }
            } else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {
                // The range starts and ends in the high surrogate range.
                // E.g. (0xD855, 0xD866).
                if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
                    loneHighSurrogates.push(start, end + 1);
                }
                // The range starts in the high surrogate range and ends in the low
                // surrogate range. E.g. (0xD855, 0xDCFF).
                if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
                    loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
                    loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
                }
                // The range starts in the high surrogate range and ends after the low
                // surrogate range. E.g. (0xD855, 0x10FFFF).
                if (end > LOW_SURROGATE_MAX) {
                    loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
                    loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
                    if (end <= 0xFFFF) {
                        bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
                    } else {
                        bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
                        astral.push(0xFFFF + 1, end + 1);
                    }
                }
            } else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {
                // The range starts and ends in the low surrogate range.
                // E.g. (0xDCFF, 0xDDFF).
                if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
                    loneLowSurrogates.push(start, end + 1);
                }
                // The range starts in the low surrogate range and ends after the low
                // surrogate range. E.g. (0xDCFF, 0x10FFFF).
                if (end > LOW_SURROGATE_MAX) {
                    loneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);
                    if (end <= 0xFFFF) {
                        bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
                    } else {
                        bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
                        astral.push(0xFFFF + 1, end + 1);
                    }
                }
            } else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF) {
                // The range starts and ends after the low surrogate range.
                // E.g. (0xFFAA, 0x10FFFF).
                if (end <= 0xFFFF) {
                    bmp.push(start, end + 1);
                } else {
                    bmp.push(start, 0xFFFF + 1);
                    astral.push(0xFFFF + 1, end + 1);
                }
            } else {
                // The range starts and ends in the astral range.
                astral.push(start, end + 1);
            }
            index += 2;
        }
        return {
            'loneHighSurrogates': loneHighSurrogates,
            'loneLowSurrogates': loneLowSurrogates,
            'bmp': bmp,
            'astral': astral
        };
    };
    var optimizeSurrogateMappings = function(surrogateMappings) {
        var result = [];
        var tmpLow = [];
        var addLow = false;
        var mapping;
        var nextMapping;
        var highSurrogates;
        var lowSurrogates;
        var nextHighSurrogates;
        var nextLowSurrogates;
        var index = -1;
        var length = surrogateMappings.length;
        while(++index < length){
            mapping = surrogateMappings[index];
            nextMapping = surrogateMappings[index + 1];
            if (!nextMapping) {
                result.push(mapping);
                continue;
            }
            highSurrogates = mapping[0];
            lowSurrogates = mapping[1];
            nextHighSurrogates = nextMapping[0];
            nextLowSurrogates = nextMapping[1];
            // Check for identical high surrogate ranges.
            tmpLow = lowSurrogates;
            while(nextHighSurrogates && highSurrogates[0] == nextHighSurrogates[0] && highSurrogates[1] == nextHighSurrogates[1]){
                // Merge with the next item.
                if (dataIsSingleton(nextLowSurrogates)) {
                    tmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);
                } else {
                    tmpLow = dataAddRange(tmpLow, nextLowSurrogates[0], nextLowSurrogates[1] - 1);
                }
                ++index;
                mapping = surrogateMappings[index];
                highSurrogates = mapping[0];
                lowSurrogates = mapping[1];
                nextMapping = surrogateMappings[index + 1];
                nextHighSurrogates = nextMapping && nextMapping[0];
                nextLowSurrogates = nextMapping && nextMapping[1];
                addLow = true;
            }
            result.push([
                highSurrogates,
                addLow ? tmpLow : lowSurrogates
            ]);
            addLow = false;
        }
        return optimizeByLowSurrogates(result);
    };
    var optimizeByLowSurrogates = function(surrogateMappings) {
        if (surrogateMappings.length == 1) {
            return surrogateMappings;
        }
        var index = -1;
        var innerIndex = -1;
        while(++index < surrogateMappings.length){
            var mapping = surrogateMappings[index];
            var lowSurrogates = mapping[1];
            var lowSurrogateStart = lowSurrogates[0];
            var lowSurrogateEnd = lowSurrogates[1];
            innerIndex = index; // Note: the loop starts at the next index.
            while(++innerIndex < surrogateMappings.length){
                var otherMapping = surrogateMappings[innerIndex];
                var otherLowSurrogates = otherMapping[1];
                var otherLowSurrogateStart = otherLowSurrogates[0];
                var otherLowSurrogateEnd = otherLowSurrogates[1];
                if (lowSurrogateStart == otherLowSurrogateStart && lowSurrogateEnd == otherLowSurrogateEnd && otherLowSurrogates.length === 2) {
                    // Add the code points in the other item to this one.
                    if (dataIsSingleton(otherMapping[0])) {
                        mapping[0] = dataAdd(mapping[0], otherMapping[0][0]);
                    } else {
                        mapping[0] = dataAddRange(mapping[0], otherMapping[0][0], otherMapping[0][1] - 1);
                    }
                    // Remove the other, now redundant, item.
                    surrogateMappings.splice(innerIndex, 1);
                    --innerIndex;
                }
            }
        }
        return surrogateMappings;
    };
    var surrogateSet = function(data) {
        // Exit early if `data` is an empty set.
        if (!data.length) {
            return [];
        }
        // Iterate over the data per `(start, end)` pair.
        var index = 0;
        var start;
        var end;
        var startHigh;
        var startLow;
        var endHigh;
        var endLow;
        var surrogateMappings = [];
        var length = data.length;
        while(index < length){
            start = data[index];
            end = data[index + 1] - 1;
            startHigh = highSurrogate(start);
            startLow = lowSurrogate(start);
            endHigh = highSurrogate(end);
            endLow = lowSurrogate(end);
            var startsWithLowestLowSurrogate = startLow == LOW_SURROGATE_MIN;
            var endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;
            var complete = false;
            // Append the previous high-surrogate-to-low-surrogate mappings.
            // Step 1: `(startHigh, startLow)` to `(startHigh, LOW_SURROGATE_MAX)`.
            if (startHigh == endHigh || startsWithLowestLowSurrogate && endsWithHighestLowSurrogate) {
                surrogateMappings.push([
                    [
                        startHigh,
                        endHigh + 1
                    ],
                    [
                        startLow,
                        endLow + 1
                    ]
                ]);
                complete = true;
            } else {
                surrogateMappings.push([
                    [
                        startHigh,
                        startHigh + 1
                    ],
                    [
                        startLow,
                        LOW_SURROGATE_MAX + 1
                    ]
                ]);
            }
            // Step 2: `(startHigh + 1, LOW_SURROGATE_MIN)` to
            // `(endHigh - 1, LOW_SURROGATE_MAX)`.
            if (!complete && startHigh + 1 < endHigh) {
                if (endsWithHighestLowSurrogate) {
                    // Combine step 2 and step 3.
                    surrogateMappings.push([
                        [
                            startHigh + 1,
                            endHigh + 1
                        ],
                        [
                            LOW_SURROGATE_MIN,
                            endLow + 1
                        ]
                    ]);
                    complete = true;
                } else {
                    surrogateMappings.push([
                        [
                            startHigh + 1,
                            endHigh
                        ],
                        [
                            LOW_SURROGATE_MIN,
                            LOW_SURROGATE_MAX + 1
                        ]
                    ]);
                }
            }
            // Step 3. `(endHigh, LOW_SURROGATE_MIN)` to `(endHigh, endLow)`.
            if (!complete) {
                surrogateMappings.push([
                    [
                        endHigh,
                        endHigh + 1
                    ],
                    [
                        LOW_SURROGATE_MIN,
                        endLow + 1
                    ]
                ]);
            }
            index += 2;
        }
        // The format of `surrogateMappings` is as follows:
        //
        //     [ surrogateMapping1, surrogateMapping2 ]
        //
        // i.e.:
        //
        //     [
        //       [ highSurrogates1, lowSurrogates1 ],
        //       [ highSurrogates2, lowSurrogates2 ]
        //     ]
        return optimizeSurrogateMappings(surrogateMappings);
    };
    var createSurrogateCharacterClasses = function(surrogateMappings) {
        var result = [];
        forEach(surrogateMappings, function(surrogateMapping) {
            var highSurrogates = surrogateMapping[0];
            var lowSurrogates = surrogateMapping[1];
            result.push(createBMPCharacterClasses(highSurrogates) + createBMPCharacterClasses(lowSurrogates));
        });
        return result.join('|');
    };
    var createCharacterClassesFromData = function(data, bmpOnly, hasUnicodeFlag) {
        if (hasUnicodeFlag) {
            return createUnicodeCharacterClasses(data);
        }
        var result = [];
        var parts = splitAtBMP(data);
        var loneHighSurrogates = parts.loneHighSurrogates;
        var loneLowSurrogates = parts.loneLowSurrogates;
        var bmp = parts.bmp;
        var astral = parts.astral;
        var hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);
        var hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);
        var surrogateMappings = surrogateSet(astral);
        if (bmpOnly) {
            bmp = dataAddData(bmp, loneHighSurrogates);
            hasLoneHighSurrogates = false;
            bmp = dataAddData(bmp, loneLowSurrogates);
            hasLoneLowSurrogates = false;
        }
        if (!dataIsEmpty(bmp)) {
            // The data set contains BMP code points that are not high surrogates
            // needed for astral code points in the set.
            result.push(createBMPCharacterClasses(bmp));
        }
        if (surrogateMappings.length) {
            // The data set contains astral code points; append character classes
            // based on their surrogate pairs.
            result.push(createSurrogateCharacterClasses(surrogateMappings));
        }
        // https://gist.github.com/mathiasbynens/bbe7f870208abcfec860
        if (hasLoneHighSurrogates) {
            result.push(createBMPCharacterClasses(loneHighSurrogates) + // Make sure the high surrogates aren’t part of a surrogate pair.
            '(?![\\uDC00-\\uDFFF])');
        }
        if (hasLoneLowSurrogates) {
            result.push(// It is not possible to accurately assert the low surrogates aren’t
            // part of a surrogate pair, since JavaScript regular expressions do
            // not support lookbehind.
            '(?:[^\\uD800-\\uDBFF]|^)' + createBMPCharacterClasses(loneLowSurrogates));
        }
        return result.join('|');
    };
    /*--------------------------------------------------------------------------*/ // `regenerate` can be used as a constructor (and new methods can be added to
    // its prototype) but also as a regular function, the latter of which is the
    // documented and most common usage. For that reason, it’s not capitalized.
    var regenerate = function(value) {
        if (arguments.length > 1) {
            value = slice.call(arguments);
        }
        if (this instanceof regenerate) {
            this.data = [];
            return value ? this.add(value) : this;
        }
        return (new regenerate).add(value);
    };
    regenerate.version = '1.4.2';
    var proto = regenerate.prototype;
    extend(proto, {
        'add': function(value) {
            var $this = this;
            if (value == null) {
                return $this;
            }
            if (value instanceof regenerate) {
                // Allow passing other Regenerate instances.
                $this.data = dataAddData($this.data, value.data);
                return $this;
            }
            if (arguments.length > 1) {
                value = slice.call(arguments);
            }
            if (isArray(value)) {
                forEach(value, function(item) {
                    $this.add(item);
                });
                return $this;
            }
            $this.data = dataAdd($this.data, isNumber(value) ? value : symbolToCodePoint(value));
            return $this;
        },
        'remove': function(value) {
            var $this = this;
            if (value == null) {
                return $this;
            }
            if (value instanceof regenerate) {
                // Allow passing other Regenerate instances.
                $this.data = dataRemoveData($this.data, value.data);
                return $this;
            }
            if (arguments.length > 1) {
                value = slice.call(arguments);
            }
            if (isArray(value)) {
                forEach(value, function(item) {
                    $this.remove(item);
                });
                return $this;
            }
            $this.data = dataRemove($this.data, isNumber(value) ? value : symbolToCodePoint(value));
            return $this;
        },
        'addRange': function(start, end) {
            var $this = this;
            $this.data = dataAddRange($this.data, isNumber(start) ? start : symbolToCodePoint(start), isNumber(end) ? end : symbolToCodePoint(end));
            return $this;
        },
        'removeRange': function(start, end) {
            var $this = this;
            var startCodePoint = isNumber(start) ? start : symbolToCodePoint(start);
            var endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);
            $this.data = dataRemoveRange($this.data, startCodePoint, endCodePoint);
            return $this;
        },
        'intersection': function(argument) {
            var $this = this;
            // Allow passing other Regenerate instances.
            // TODO: Optimize this by writing and using `dataIntersectionData()`.
            var array = argument instanceof regenerate ? dataToArray(argument.data) : argument;
            $this.data = dataIntersection($this.data, array);
            return $this;
        },
        'contains': function(codePoint) {
            return dataContains(this.data, isNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint));
        },
        'clone': function() {
            var set = new regenerate;
            set.data = this.data.slice(0);
            return set;
        },
        'toString': function(options) {
            var result = createCharacterClassesFromData(this.data, options ? options.bmpOnly : false, options ? options.hasUnicodeFlag : false);
            if (!result) {
                // For an empty set, return something that can be inserted `/here/` to
                // form a valid regular expression. Avoid `(?:)` since that matches the
                // empty string.
                return '[]';
            }
            // Use `\0` instead of `\x00` where possible.
            return result.replace(regexNull, '\\0$1');
        },
        'toRegExp': function(flags) {
            var pattern = this.toString(flags && flags.indexOf('u') != -1 ? {
                'hasUnicodeFlag': true
            } : null);
            return RegExp(pattern, flags || '');
        },
        'valueOf': function() {
            return dataToArray(this.data);
        }
    });
    proto.toArray = proto.valueOf;
    // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        ((r)=>r !== undefined && __turbopack_export_value__(r))(function() {
            return regenerate;
        }(__turbopack_require__, exports, module));
    } else if (freeExports && !freeExports.nodeType) {
        if (freeModule) {
            freeModule.exports = regenerate;
        } else {
            freeExports.regenerate = regenerate;
        }
    } else {
        root.regenerate = regenerate;
    }
})(this);
}}),
"[project]/node_modules/unicode-canonical-property-names-ecmascript/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = new Set([
    // Non-binary properties:
    'General_Category',
    'Script',
    'Script_Extensions',
    // Binary properties:
    'Alphabetic',
    'Any',
    'ASCII',
    'ASCII_Hex_Digit',
    'Assigned',
    'Bidi_Control',
    'Bidi_Mirrored',
    'Case_Ignorable',
    'Cased',
    'Changes_When_Casefolded',
    'Changes_When_Casemapped',
    'Changes_When_Lowercased',
    'Changes_When_NFKC_Casefolded',
    'Changes_When_Titlecased',
    'Changes_When_Uppercased',
    'Dash',
    'Default_Ignorable_Code_Point',
    'Deprecated',
    'Diacritic',
    'Emoji',
    'Emoji_Component',
    'Emoji_Modifier',
    'Emoji_Modifier_Base',
    'Emoji_Presentation',
    'Extended_Pictographic',
    'Extender',
    'Grapheme_Base',
    'Grapheme_Extend',
    'Hex_Digit',
    'ID_Continue',
    'ID_Start',
    'Ideographic',
    'IDS_Binary_Operator',
    'IDS_Trinary_Operator',
    'Join_Control',
    'Logical_Order_Exception',
    'Lowercase',
    'Math',
    'Noncharacter_Code_Point',
    'Pattern_Syntax',
    'Pattern_White_Space',
    'Quotation_Mark',
    'Radical',
    'Regional_Indicator',
    'Sentence_Terminal',
    'Soft_Dotted',
    'Terminal_Punctuation',
    'Unified_Ideograph',
    'Uppercase',
    'Variation_Selector',
    'White_Space',
    'XID_Continue',
    'XID_Start'
]);
}}),
"[project]/node_modules/unicode-property-aliases-ecmascript/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
// Generated using `npm run build`. Do not edit!
module.exports = new Map([
    [
        'scx',
        'Script_Extensions'
    ],
    [
        'sc',
        'Script'
    ],
    [
        'gc',
        'General_Category'
    ],
    [
        'AHex',
        'ASCII_Hex_Digit'
    ],
    [
        'Alpha',
        'Alphabetic'
    ],
    [
        'Bidi_C',
        'Bidi_Control'
    ],
    [
        'Bidi_M',
        'Bidi_Mirrored'
    ],
    [
        'Cased',
        'Cased'
    ],
    [
        'CI',
        'Case_Ignorable'
    ],
    [
        'CWCF',
        'Changes_When_Casefolded'
    ],
    [
        'CWCM',
        'Changes_When_Casemapped'
    ],
    [
        'CWKCF',
        'Changes_When_NFKC_Casefolded'
    ],
    [
        'CWL',
        'Changes_When_Lowercased'
    ],
    [
        'CWT',
        'Changes_When_Titlecased'
    ],
    [
        'CWU',
        'Changes_When_Uppercased'
    ],
    [
        'Dash',
        'Dash'
    ],
    [
        'Dep',
        'Deprecated'
    ],
    [
        'DI',
        'Default_Ignorable_Code_Point'
    ],
    [
        'Dia',
        'Diacritic'
    ],
    [
        'EBase',
        'Emoji_Modifier_Base'
    ],
    [
        'EComp',
        'Emoji_Component'
    ],
    [
        'EMod',
        'Emoji_Modifier'
    ],
    [
        'Emoji',
        'Emoji'
    ],
    [
        'EPres',
        'Emoji_Presentation'
    ],
    [
        'Ext',
        'Extender'
    ],
    [
        'ExtPict',
        'Extended_Pictographic'
    ],
    [
        'Gr_Base',
        'Grapheme_Base'
    ],
    [
        'Gr_Ext',
        'Grapheme_Extend'
    ],
    [
        'Hex',
        'Hex_Digit'
    ],
    [
        'IDC',
        'ID_Continue'
    ],
    [
        'Ideo',
        'Ideographic'
    ],
    [
        'IDS',
        'ID_Start'
    ],
    [
        'IDSB',
        'IDS_Binary_Operator'
    ],
    [
        'IDST',
        'IDS_Trinary_Operator'
    ],
    [
        'Join_C',
        'Join_Control'
    ],
    [
        'LOE',
        'Logical_Order_Exception'
    ],
    [
        'Lower',
        'Lowercase'
    ],
    [
        'Math',
        'Math'
    ],
    [
        'NChar',
        'Noncharacter_Code_Point'
    ],
    [
        'Pat_Syn',
        'Pattern_Syntax'
    ],
    [
        'Pat_WS',
        'Pattern_White_Space'
    ],
    [
        'QMark',
        'Quotation_Mark'
    ],
    [
        'Radical',
        'Radical'
    ],
    [
        'RI',
        'Regional_Indicator'
    ],
    [
        'SD',
        'Soft_Dotted'
    ],
    [
        'STerm',
        'Sentence_Terminal'
    ],
    [
        'Term',
        'Terminal_Punctuation'
    ],
    [
        'UIdeo',
        'Unified_Ideograph'
    ],
    [
        'Upper',
        'Uppercase'
    ],
    [
        'VS',
        'Variation_Selector'
    ],
    [
        'WSpace',
        'White_Space'
    ],
    [
        'space',
        'White_Space'
    ],
    [
        'XIDC',
        'XID_Continue'
    ],
    [
        'XIDS',
        'XID_Start'
    ]
]);
}}),
"[project]/node_modules/unicode-match-property-ecmascript/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const canonicalProperties = __turbopack_require__("[project]/node_modules/unicode-canonical-property-names-ecmascript/index.js [app-client] (ecmascript)");
const propertyAliases = __turbopack_require__("[project]/node_modules/unicode-property-aliases-ecmascript/index.js [app-client] (ecmascript)");
const matchProperty = function(property) {
    if (canonicalProperties.has(property)) {
        return property;
    }
    if (propertyAliases.has(property)) {
        return propertyAliases.get(property);
    }
    throw new Error(`Unknown property: ${property}`);
};
module.exports = matchProperty;
}}),
"[project]/node_modules/unicode-match-property-value-ecmascript/data/mappings.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = new Map([
    [
        'General_Category',
        new Map([
            [
                'C',
                'Other'
            ],
            [
                'Cc',
                'Control'
            ],
            [
                'cntrl',
                'Control'
            ],
            [
                'Cf',
                'Format'
            ],
            [
                'Cn',
                'Unassigned'
            ],
            [
                'Co',
                'Private_Use'
            ],
            [
                'Cs',
                'Surrogate'
            ],
            [
                'L',
                'Letter'
            ],
            [
                'LC',
                'Cased_Letter'
            ],
            [
                'Ll',
                'Lowercase_Letter'
            ],
            [
                'Lm',
                'Modifier_Letter'
            ],
            [
                'Lo',
                'Other_Letter'
            ],
            [
                'Lt',
                'Titlecase_Letter'
            ],
            [
                'Lu',
                'Uppercase_Letter'
            ],
            [
                'M',
                'Mark'
            ],
            [
                'Combining_Mark',
                'Mark'
            ],
            [
                'Mc',
                'Spacing_Mark'
            ],
            [
                'Me',
                'Enclosing_Mark'
            ],
            [
                'Mn',
                'Nonspacing_Mark'
            ],
            [
                'N',
                'Number'
            ],
            [
                'Nd',
                'Decimal_Number'
            ],
            [
                'digit',
                'Decimal_Number'
            ],
            [
                'Nl',
                'Letter_Number'
            ],
            [
                'No',
                'Other_Number'
            ],
            [
                'P',
                'Punctuation'
            ],
            [
                'punct',
                'Punctuation'
            ],
            [
                'Pc',
                'Connector_Punctuation'
            ],
            [
                'Pd',
                'Dash_Punctuation'
            ],
            [
                'Pe',
                'Close_Punctuation'
            ],
            [
                'Pf',
                'Final_Punctuation'
            ],
            [
                'Pi',
                'Initial_Punctuation'
            ],
            [
                'Po',
                'Other_Punctuation'
            ],
            [
                'Ps',
                'Open_Punctuation'
            ],
            [
                'S',
                'Symbol'
            ],
            [
                'Sc',
                'Currency_Symbol'
            ],
            [
                'Sk',
                'Modifier_Symbol'
            ],
            [
                'Sm',
                'Math_Symbol'
            ],
            [
                'So',
                'Other_Symbol'
            ],
            [
                'Z',
                'Separator'
            ],
            [
                'Zl',
                'Line_Separator'
            ],
            [
                'Zp',
                'Paragraph_Separator'
            ],
            [
                'Zs',
                'Space_Separator'
            ],
            [
                'Other',
                'Other'
            ],
            [
                'Control',
                'Control'
            ],
            [
                'Format',
                'Format'
            ],
            [
                'Unassigned',
                'Unassigned'
            ],
            [
                'Private_Use',
                'Private_Use'
            ],
            [
                'Surrogate',
                'Surrogate'
            ],
            [
                'Letter',
                'Letter'
            ],
            [
                'Cased_Letter',
                'Cased_Letter'
            ],
            [
                'Lowercase_Letter',
                'Lowercase_Letter'
            ],
            [
                'Modifier_Letter',
                'Modifier_Letter'
            ],
            [
                'Other_Letter',
                'Other_Letter'
            ],
            [
                'Titlecase_Letter',
                'Titlecase_Letter'
            ],
            [
                'Uppercase_Letter',
                'Uppercase_Letter'
            ],
            [
                'Mark',
                'Mark'
            ],
            [
                'Spacing_Mark',
                'Spacing_Mark'
            ],
            [
                'Enclosing_Mark',
                'Enclosing_Mark'
            ],
            [
                'Nonspacing_Mark',
                'Nonspacing_Mark'
            ],
            [
                'Number',
                'Number'
            ],
            [
                'Decimal_Number',
                'Decimal_Number'
            ],
            [
                'Letter_Number',
                'Letter_Number'
            ],
            [
                'Other_Number',
                'Other_Number'
            ],
            [
                'Punctuation',
                'Punctuation'
            ],
            [
                'Connector_Punctuation',
                'Connector_Punctuation'
            ],
            [
                'Dash_Punctuation',
                'Dash_Punctuation'
            ],
            [
                'Close_Punctuation',
                'Close_Punctuation'
            ],
            [
                'Final_Punctuation',
                'Final_Punctuation'
            ],
            [
                'Initial_Punctuation',
                'Initial_Punctuation'
            ],
            [
                'Other_Punctuation',
                'Other_Punctuation'
            ],
            [
                'Open_Punctuation',
                'Open_Punctuation'
            ],
            [
                'Symbol',
                'Symbol'
            ],
            [
                'Currency_Symbol',
                'Currency_Symbol'
            ],
            [
                'Modifier_Symbol',
                'Modifier_Symbol'
            ],
            [
                'Math_Symbol',
                'Math_Symbol'
            ],
            [
                'Other_Symbol',
                'Other_Symbol'
            ],
            [
                'Separator',
                'Separator'
            ],
            [
                'Line_Separator',
                'Line_Separator'
            ],
            [
                'Paragraph_Separator',
                'Paragraph_Separator'
            ],
            [
                'Space_Separator',
                'Space_Separator'
            ]
        ])
    ],
    [
        'Script',
        new Map([
            [
                'Adlm',
                'Adlam'
            ],
            [
                'Aghb',
                'Caucasian_Albanian'
            ],
            [
                'Ahom',
                'Ahom'
            ],
            [
                'Arab',
                'Arabic'
            ],
            [
                'Armi',
                'Imperial_Aramaic'
            ],
            [
                'Armn',
                'Armenian'
            ],
            [
                'Avst',
                'Avestan'
            ],
            [
                'Bali',
                'Balinese'
            ],
            [
                'Bamu',
                'Bamum'
            ],
            [
                'Bass',
                'Bassa_Vah'
            ],
            [
                'Batk',
                'Batak'
            ],
            [
                'Beng',
                'Bengali'
            ],
            [
                'Bhks',
                'Bhaiksuki'
            ],
            [
                'Bopo',
                'Bopomofo'
            ],
            [
                'Brah',
                'Brahmi'
            ],
            [
                'Brai',
                'Braille'
            ],
            [
                'Bugi',
                'Buginese'
            ],
            [
                'Buhd',
                'Buhid'
            ],
            [
                'Cakm',
                'Chakma'
            ],
            [
                'Cans',
                'Canadian_Aboriginal'
            ],
            [
                'Cari',
                'Carian'
            ],
            [
                'Cham',
                'Cham'
            ],
            [
                'Cher',
                'Cherokee'
            ],
            [
                'Chrs',
                'Chorasmian'
            ],
            [
                'Copt',
                'Coptic'
            ],
            [
                'Qaac',
                'Coptic'
            ],
            [
                'Cpmn',
                'Cypro_Minoan'
            ],
            [
                'Cprt',
                'Cypriot'
            ],
            [
                'Cyrl',
                'Cyrillic'
            ],
            [
                'Deva',
                'Devanagari'
            ],
            [
                'Diak',
                'Dives_Akuru'
            ],
            [
                'Dogr',
                'Dogra'
            ],
            [
                'Dsrt',
                'Deseret'
            ],
            [
                'Dupl',
                'Duployan'
            ],
            [
                'Egyp',
                'Egyptian_Hieroglyphs'
            ],
            [
                'Elba',
                'Elbasan'
            ],
            [
                'Elym',
                'Elymaic'
            ],
            [
                'Ethi',
                'Ethiopic'
            ],
            [
                'Gara',
                'Garay'
            ],
            [
                'Geor',
                'Georgian'
            ],
            [
                'Glag',
                'Glagolitic'
            ],
            [
                'Gong',
                'Gunjala_Gondi'
            ],
            [
                'Gonm',
                'Masaram_Gondi'
            ],
            [
                'Goth',
                'Gothic'
            ],
            [
                'Gran',
                'Grantha'
            ],
            [
                'Grek',
                'Greek'
            ],
            [
                'Gujr',
                'Gujarati'
            ],
            [
                'Gukh',
                'Gurung_Khema'
            ],
            [
                'Guru',
                'Gurmukhi'
            ],
            [
                'Hang',
                'Hangul'
            ],
            [
                'Hani',
                'Han'
            ],
            [
                'Hano',
                'Hanunoo'
            ],
            [
                'Hatr',
                'Hatran'
            ],
            [
                'Hebr',
                'Hebrew'
            ],
            [
                'Hira',
                'Hiragana'
            ],
            [
                'Hluw',
                'Anatolian_Hieroglyphs'
            ],
            [
                'Hmng',
                'Pahawh_Hmong'
            ],
            [
                'Hmnp',
                'Nyiakeng_Puachue_Hmong'
            ],
            [
                'Hrkt',
                'Katakana_Or_Hiragana'
            ],
            [
                'Hung',
                'Old_Hungarian'
            ],
            [
                'Ital',
                'Old_Italic'
            ],
            [
                'Java',
                'Javanese'
            ],
            [
                'Kali',
                'Kayah_Li'
            ],
            [
                'Kana',
                'Katakana'
            ],
            [
                'Kawi',
                'Kawi'
            ],
            [
                'Khar',
                'Kharoshthi'
            ],
            [
                'Khmr',
                'Khmer'
            ],
            [
                'Khoj',
                'Khojki'
            ],
            [
                'Kits',
                'Khitan_Small_Script'
            ],
            [
                'Knda',
                'Kannada'
            ],
            [
                'Krai',
                'Kirat_Rai'
            ],
            [
                'Kthi',
                'Kaithi'
            ],
            [
                'Lana',
                'Tai_Tham'
            ],
            [
                'Laoo',
                'Lao'
            ],
            [
                'Latn',
                'Latin'
            ],
            [
                'Lepc',
                'Lepcha'
            ],
            [
                'Limb',
                'Limbu'
            ],
            [
                'Lina',
                'Linear_A'
            ],
            [
                'Linb',
                'Linear_B'
            ],
            [
                'Lisu',
                'Lisu'
            ],
            [
                'Lyci',
                'Lycian'
            ],
            [
                'Lydi',
                'Lydian'
            ],
            [
                'Mahj',
                'Mahajani'
            ],
            [
                'Maka',
                'Makasar'
            ],
            [
                'Mand',
                'Mandaic'
            ],
            [
                'Mani',
                'Manichaean'
            ],
            [
                'Marc',
                'Marchen'
            ],
            [
                'Medf',
                'Medefaidrin'
            ],
            [
                'Mend',
                'Mende_Kikakui'
            ],
            [
                'Merc',
                'Meroitic_Cursive'
            ],
            [
                'Mero',
                'Meroitic_Hieroglyphs'
            ],
            [
                'Mlym',
                'Malayalam'
            ],
            [
                'Modi',
                'Modi'
            ],
            [
                'Mong',
                'Mongolian'
            ],
            [
                'Mroo',
                'Mro'
            ],
            [
                'Mtei',
                'Meetei_Mayek'
            ],
            [
                'Mult',
                'Multani'
            ],
            [
                'Mymr',
                'Myanmar'
            ],
            [
                'Nagm',
                'Nag_Mundari'
            ],
            [
                'Nand',
                'Nandinagari'
            ],
            [
                'Narb',
                'Old_North_Arabian'
            ],
            [
                'Nbat',
                'Nabataean'
            ],
            [
                'Newa',
                'Newa'
            ],
            [
                'Nkoo',
                'Nko'
            ],
            [
                'Nshu',
                'Nushu'
            ],
            [
                'Ogam',
                'Ogham'
            ],
            [
                'Olck',
                'Ol_Chiki'
            ],
            [
                'Onao',
                'Ol_Onal'
            ],
            [
                'Orkh',
                'Old_Turkic'
            ],
            [
                'Orya',
                'Oriya'
            ],
            [
                'Osge',
                'Osage'
            ],
            [
                'Osma',
                'Osmanya'
            ],
            [
                'Ougr',
                'Old_Uyghur'
            ],
            [
                'Palm',
                'Palmyrene'
            ],
            [
                'Pauc',
                'Pau_Cin_Hau'
            ],
            [
                'Perm',
                'Old_Permic'
            ],
            [
                'Phag',
                'Phags_Pa'
            ],
            [
                'Phli',
                'Inscriptional_Pahlavi'
            ],
            [
                'Phlp',
                'Psalter_Pahlavi'
            ],
            [
                'Phnx',
                'Phoenician'
            ],
            [
                'Plrd',
                'Miao'
            ],
            [
                'Prti',
                'Inscriptional_Parthian'
            ],
            [
                'Rjng',
                'Rejang'
            ],
            [
                'Rohg',
                'Hanifi_Rohingya'
            ],
            [
                'Runr',
                'Runic'
            ],
            [
                'Samr',
                'Samaritan'
            ],
            [
                'Sarb',
                'Old_South_Arabian'
            ],
            [
                'Saur',
                'Saurashtra'
            ],
            [
                'Sgnw',
                'SignWriting'
            ],
            [
                'Shaw',
                'Shavian'
            ],
            [
                'Shrd',
                'Sharada'
            ],
            [
                'Sidd',
                'Siddham'
            ],
            [
                'Sind',
                'Khudawadi'
            ],
            [
                'Sinh',
                'Sinhala'
            ],
            [
                'Sogd',
                'Sogdian'
            ],
            [
                'Sogo',
                'Old_Sogdian'
            ],
            [
                'Sora',
                'Sora_Sompeng'
            ],
            [
                'Soyo',
                'Soyombo'
            ],
            [
                'Sund',
                'Sundanese'
            ],
            [
                'Sunu',
                'Sunuwar'
            ],
            [
                'Sylo',
                'Syloti_Nagri'
            ],
            [
                'Syrc',
                'Syriac'
            ],
            [
                'Tagb',
                'Tagbanwa'
            ],
            [
                'Takr',
                'Takri'
            ],
            [
                'Tale',
                'Tai_Le'
            ],
            [
                'Talu',
                'New_Tai_Lue'
            ],
            [
                'Taml',
                'Tamil'
            ],
            [
                'Tang',
                'Tangut'
            ],
            [
                'Tavt',
                'Tai_Viet'
            ],
            [
                'Telu',
                'Telugu'
            ],
            [
                'Tfng',
                'Tifinagh'
            ],
            [
                'Tglg',
                'Tagalog'
            ],
            [
                'Thaa',
                'Thaana'
            ],
            [
                'Thai',
                'Thai'
            ],
            [
                'Tibt',
                'Tibetan'
            ],
            [
                'Tirh',
                'Tirhuta'
            ],
            [
                'Tnsa',
                'Tangsa'
            ],
            [
                'Todr',
                'Todhri'
            ],
            [
                'Toto',
                'Toto'
            ],
            [
                'Tutg',
                'Tulu_Tigalari'
            ],
            [
                'Ugar',
                'Ugaritic'
            ],
            [
                'Vaii',
                'Vai'
            ],
            [
                'Vith',
                'Vithkuqi'
            ],
            [
                'Wara',
                'Warang_Citi'
            ],
            [
                'Wcho',
                'Wancho'
            ],
            [
                'Xpeo',
                'Old_Persian'
            ],
            [
                'Xsux',
                'Cuneiform'
            ],
            [
                'Yezi',
                'Yezidi'
            ],
            [
                'Yiii',
                'Yi'
            ],
            [
                'Zanb',
                'Zanabazar_Square'
            ],
            [
                'Zinh',
                'Inherited'
            ],
            [
                'Qaai',
                'Inherited'
            ],
            [
                'Zyyy',
                'Common'
            ],
            [
                'Zzzz',
                'Unknown'
            ],
            [
                'Adlam',
                'Adlam'
            ],
            [
                'Caucasian_Albanian',
                'Caucasian_Albanian'
            ],
            [
                'Arabic',
                'Arabic'
            ],
            [
                'Imperial_Aramaic',
                'Imperial_Aramaic'
            ],
            [
                'Armenian',
                'Armenian'
            ],
            [
                'Avestan',
                'Avestan'
            ],
            [
                'Balinese',
                'Balinese'
            ],
            [
                'Bamum',
                'Bamum'
            ],
            [
                'Bassa_Vah',
                'Bassa_Vah'
            ],
            [
                'Batak',
                'Batak'
            ],
            [
                'Bengali',
                'Bengali'
            ],
            [
                'Bhaiksuki',
                'Bhaiksuki'
            ],
            [
                'Bopomofo',
                'Bopomofo'
            ],
            [
                'Brahmi',
                'Brahmi'
            ],
            [
                'Braille',
                'Braille'
            ],
            [
                'Buginese',
                'Buginese'
            ],
            [
                'Buhid',
                'Buhid'
            ],
            [
                'Chakma',
                'Chakma'
            ],
            [
                'Canadian_Aboriginal',
                'Canadian_Aboriginal'
            ],
            [
                'Carian',
                'Carian'
            ],
            [
                'Cherokee',
                'Cherokee'
            ],
            [
                'Chorasmian',
                'Chorasmian'
            ],
            [
                'Coptic',
                'Coptic'
            ],
            [
                'Cypro_Minoan',
                'Cypro_Minoan'
            ],
            [
                'Cypriot',
                'Cypriot'
            ],
            [
                'Cyrillic',
                'Cyrillic'
            ],
            [
                'Devanagari',
                'Devanagari'
            ],
            [
                'Dives_Akuru',
                'Dives_Akuru'
            ],
            [
                'Dogra',
                'Dogra'
            ],
            [
                'Deseret',
                'Deseret'
            ],
            [
                'Duployan',
                'Duployan'
            ],
            [
                'Egyptian_Hieroglyphs',
                'Egyptian_Hieroglyphs'
            ],
            [
                'Elbasan',
                'Elbasan'
            ],
            [
                'Elymaic',
                'Elymaic'
            ],
            [
                'Ethiopic',
                'Ethiopic'
            ],
            [
                'Garay',
                'Garay'
            ],
            [
                'Georgian',
                'Georgian'
            ],
            [
                'Glagolitic',
                'Glagolitic'
            ],
            [
                'Gunjala_Gondi',
                'Gunjala_Gondi'
            ],
            [
                'Masaram_Gondi',
                'Masaram_Gondi'
            ],
            [
                'Gothic',
                'Gothic'
            ],
            [
                'Grantha',
                'Grantha'
            ],
            [
                'Greek',
                'Greek'
            ],
            [
                'Gujarati',
                'Gujarati'
            ],
            [
                'Gurung_Khema',
                'Gurung_Khema'
            ],
            [
                'Gurmukhi',
                'Gurmukhi'
            ],
            [
                'Hangul',
                'Hangul'
            ],
            [
                'Han',
                'Han'
            ],
            [
                'Hanunoo',
                'Hanunoo'
            ],
            [
                'Hatran',
                'Hatran'
            ],
            [
                'Hebrew',
                'Hebrew'
            ],
            [
                'Hiragana',
                'Hiragana'
            ],
            [
                'Anatolian_Hieroglyphs',
                'Anatolian_Hieroglyphs'
            ],
            [
                'Pahawh_Hmong',
                'Pahawh_Hmong'
            ],
            [
                'Nyiakeng_Puachue_Hmong',
                'Nyiakeng_Puachue_Hmong'
            ],
            [
                'Katakana_Or_Hiragana',
                'Katakana_Or_Hiragana'
            ],
            [
                'Old_Hungarian',
                'Old_Hungarian'
            ],
            [
                'Old_Italic',
                'Old_Italic'
            ],
            [
                'Javanese',
                'Javanese'
            ],
            [
                'Kayah_Li',
                'Kayah_Li'
            ],
            [
                'Katakana',
                'Katakana'
            ],
            [
                'Kharoshthi',
                'Kharoshthi'
            ],
            [
                'Khmer',
                'Khmer'
            ],
            [
                'Khojki',
                'Khojki'
            ],
            [
                'Khitan_Small_Script',
                'Khitan_Small_Script'
            ],
            [
                'Kannada',
                'Kannada'
            ],
            [
                'Kirat_Rai',
                'Kirat_Rai'
            ],
            [
                'Kaithi',
                'Kaithi'
            ],
            [
                'Tai_Tham',
                'Tai_Tham'
            ],
            [
                'Lao',
                'Lao'
            ],
            [
                'Latin',
                'Latin'
            ],
            [
                'Lepcha',
                'Lepcha'
            ],
            [
                'Limbu',
                'Limbu'
            ],
            [
                'Linear_A',
                'Linear_A'
            ],
            [
                'Linear_B',
                'Linear_B'
            ],
            [
                'Lycian',
                'Lycian'
            ],
            [
                'Lydian',
                'Lydian'
            ],
            [
                'Mahajani',
                'Mahajani'
            ],
            [
                'Makasar',
                'Makasar'
            ],
            [
                'Mandaic',
                'Mandaic'
            ],
            [
                'Manichaean',
                'Manichaean'
            ],
            [
                'Marchen',
                'Marchen'
            ],
            [
                'Medefaidrin',
                'Medefaidrin'
            ],
            [
                'Mende_Kikakui',
                'Mende_Kikakui'
            ],
            [
                'Meroitic_Cursive',
                'Meroitic_Cursive'
            ],
            [
                'Meroitic_Hieroglyphs',
                'Meroitic_Hieroglyphs'
            ],
            [
                'Malayalam',
                'Malayalam'
            ],
            [
                'Mongolian',
                'Mongolian'
            ],
            [
                'Mro',
                'Mro'
            ],
            [
                'Meetei_Mayek',
                'Meetei_Mayek'
            ],
            [
                'Multani',
                'Multani'
            ],
            [
                'Myanmar',
                'Myanmar'
            ],
            [
                'Nag_Mundari',
                'Nag_Mundari'
            ],
            [
                'Nandinagari',
                'Nandinagari'
            ],
            [
                'Old_North_Arabian',
                'Old_North_Arabian'
            ],
            [
                'Nabataean',
                'Nabataean'
            ],
            [
                'Nko',
                'Nko'
            ],
            [
                'Nushu',
                'Nushu'
            ],
            [
                'Ogham',
                'Ogham'
            ],
            [
                'Ol_Chiki',
                'Ol_Chiki'
            ],
            [
                'Ol_Onal',
                'Ol_Onal'
            ],
            [
                'Old_Turkic',
                'Old_Turkic'
            ],
            [
                'Oriya',
                'Oriya'
            ],
            [
                'Osage',
                'Osage'
            ],
            [
                'Osmanya',
                'Osmanya'
            ],
            [
                'Old_Uyghur',
                'Old_Uyghur'
            ],
            [
                'Palmyrene',
                'Palmyrene'
            ],
            [
                'Pau_Cin_Hau',
                'Pau_Cin_Hau'
            ],
            [
                'Old_Permic',
                'Old_Permic'
            ],
            [
                'Phags_Pa',
                'Phags_Pa'
            ],
            [
                'Inscriptional_Pahlavi',
                'Inscriptional_Pahlavi'
            ],
            [
                'Psalter_Pahlavi',
                'Psalter_Pahlavi'
            ],
            [
                'Phoenician',
                'Phoenician'
            ],
            [
                'Miao',
                'Miao'
            ],
            [
                'Inscriptional_Parthian',
                'Inscriptional_Parthian'
            ],
            [
                'Rejang',
                'Rejang'
            ],
            [
                'Hanifi_Rohingya',
                'Hanifi_Rohingya'
            ],
            [
                'Runic',
                'Runic'
            ],
            [
                'Samaritan',
                'Samaritan'
            ],
            [
                'Old_South_Arabian',
                'Old_South_Arabian'
            ],
            [
                'Saurashtra',
                'Saurashtra'
            ],
            [
                'SignWriting',
                'SignWriting'
            ],
            [
                'Shavian',
                'Shavian'
            ],
            [
                'Sharada',
                'Sharada'
            ],
            [
                'Siddham',
                'Siddham'
            ],
            [
                'Khudawadi',
                'Khudawadi'
            ],
            [
                'Sinhala',
                'Sinhala'
            ],
            [
                'Sogdian',
                'Sogdian'
            ],
            [
                'Old_Sogdian',
                'Old_Sogdian'
            ],
            [
                'Sora_Sompeng',
                'Sora_Sompeng'
            ],
            [
                'Soyombo',
                'Soyombo'
            ],
            [
                'Sundanese',
                'Sundanese'
            ],
            [
                'Sunuwar',
                'Sunuwar'
            ],
            [
                'Syloti_Nagri',
                'Syloti_Nagri'
            ],
            [
                'Syriac',
                'Syriac'
            ],
            [
                'Tagbanwa',
                'Tagbanwa'
            ],
            [
                'Takri',
                'Takri'
            ],
            [
                'Tai_Le',
                'Tai_Le'
            ],
            [
                'New_Tai_Lue',
                'New_Tai_Lue'
            ],
            [
                'Tamil',
                'Tamil'
            ],
            [
                'Tangut',
                'Tangut'
            ],
            [
                'Tai_Viet',
                'Tai_Viet'
            ],
            [
                'Telugu',
                'Telugu'
            ],
            [
                'Tifinagh',
                'Tifinagh'
            ],
            [
                'Tagalog',
                'Tagalog'
            ],
            [
                'Thaana',
                'Thaana'
            ],
            [
                'Tibetan',
                'Tibetan'
            ],
            [
                'Tirhuta',
                'Tirhuta'
            ],
            [
                'Tangsa',
                'Tangsa'
            ],
            [
                'Todhri',
                'Todhri'
            ],
            [
                'Tulu_Tigalari',
                'Tulu_Tigalari'
            ],
            [
                'Ugaritic',
                'Ugaritic'
            ],
            [
                'Vai',
                'Vai'
            ],
            [
                'Vithkuqi',
                'Vithkuqi'
            ],
            [
                'Warang_Citi',
                'Warang_Citi'
            ],
            [
                'Wancho',
                'Wancho'
            ],
            [
                'Old_Persian',
                'Old_Persian'
            ],
            [
                'Cuneiform',
                'Cuneiform'
            ],
            [
                'Yezidi',
                'Yezidi'
            ],
            [
                'Yi',
                'Yi'
            ],
            [
                'Zanabazar_Square',
                'Zanabazar_Square'
            ],
            [
                'Inherited',
                'Inherited'
            ],
            [
                'Common',
                'Common'
            ],
            [
                'Unknown',
                'Unknown'
            ]
        ])
    ],
    [
        'Script_Extensions',
        new Map([
            [
                'Adlm',
                'Adlam'
            ],
            [
                'Aghb',
                'Caucasian_Albanian'
            ],
            [
                'Ahom',
                'Ahom'
            ],
            [
                'Arab',
                'Arabic'
            ],
            [
                'Armi',
                'Imperial_Aramaic'
            ],
            [
                'Armn',
                'Armenian'
            ],
            [
                'Avst',
                'Avestan'
            ],
            [
                'Bali',
                'Balinese'
            ],
            [
                'Bamu',
                'Bamum'
            ],
            [
                'Bass',
                'Bassa_Vah'
            ],
            [
                'Batk',
                'Batak'
            ],
            [
                'Beng',
                'Bengali'
            ],
            [
                'Bhks',
                'Bhaiksuki'
            ],
            [
                'Bopo',
                'Bopomofo'
            ],
            [
                'Brah',
                'Brahmi'
            ],
            [
                'Brai',
                'Braille'
            ],
            [
                'Bugi',
                'Buginese'
            ],
            [
                'Buhd',
                'Buhid'
            ],
            [
                'Cakm',
                'Chakma'
            ],
            [
                'Cans',
                'Canadian_Aboriginal'
            ],
            [
                'Cari',
                'Carian'
            ],
            [
                'Cham',
                'Cham'
            ],
            [
                'Cher',
                'Cherokee'
            ],
            [
                'Chrs',
                'Chorasmian'
            ],
            [
                'Copt',
                'Coptic'
            ],
            [
                'Qaac',
                'Coptic'
            ],
            [
                'Cpmn',
                'Cypro_Minoan'
            ],
            [
                'Cprt',
                'Cypriot'
            ],
            [
                'Cyrl',
                'Cyrillic'
            ],
            [
                'Deva',
                'Devanagari'
            ],
            [
                'Diak',
                'Dives_Akuru'
            ],
            [
                'Dogr',
                'Dogra'
            ],
            [
                'Dsrt',
                'Deseret'
            ],
            [
                'Dupl',
                'Duployan'
            ],
            [
                'Egyp',
                'Egyptian_Hieroglyphs'
            ],
            [
                'Elba',
                'Elbasan'
            ],
            [
                'Elym',
                'Elymaic'
            ],
            [
                'Ethi',
                'Ethiopic'
            ],
            [
                'Gara',
                'Garay'
            ],
            [
                'Geor',
                'Georgian'
            ],
            [
                'Glag',
                'Glagolitic'
            ],
            [
                'Gong',
                'Gunjala_Gondi'
            ],
            [
                'Gonm',
                'Masaram_Gondi'
            ],
            [
                'Goth',
                'Gothic'
            ],
            [
                'Gran',
                'Grantha'
            ],
            [
                'Grek',
                'Greek'
            ],
            [
                'Gujr',
                'Gujarati'
            ],
            [
                'Gukh',
                'Gurung_Khema'
            ],
            [
                'Guru',
                'Gurmukhi'
            ],
            [
                'Hang',
                'Hangul'
            ],
            [
                'Hani',
                'Han'
            ],
            [
                'Hano',
                'Hanunoo'
            ],
            [
                'Hatr',
                'Hatran'
            ],
            [
                'Hebr',
                'Hebrew'
            ],
            [
                'Hira',
                'Hiragana'
            ],
            [
                'Hluw',
                'Anatolian_Hieroglyphs'
            ],
            [
                'Hmng',
                'Pahawh_Hmong'
            ],
            [
                'Hmnp',
                'Nyiakeng_Puachue_Hmong'
            ],
            [
                'Hrkt',
                'Katakana_Or_Hiragana'
            ],
            [
                'Hung',
                'Old_Hungarian'
            ],
            [
                'Ital',
                'Old_Italic'
            ],
            [
                'Java',
                'Javanese'
            ],
            [
                'Kali',
                'Kayah_Li'
            ],
            [
                'Kana',
                'Katakana'
            ],
            [
                'Kawi',
                'Kawi'
            ],
            [
                'Khar',
                'Kharoshthi'
            ],
            [
                'Khmr',
                'Khmer'
            ],
            [
                'Khoj',
                'Khojki'
            ],
            [
                'Kits',
                'Khitan_Small_Script'
            ],
            [
                'Knda',
                'Kannada'
            ],
            [
                'Krai',
                'Kirat_Rai'
            ],
            [
                'Kthi',
                'Kaithi'
            ],
            [
                'Lana',
                'Tai_Tham'
            ],
            [
                'Laoo',
                'Lao'
            ],
            [
                'Latn',
                'Latin'
            ],
            [
                'Lepc',
                'Lepcha'
            ],
            [
                'Limb',
                'Limbu'
            ],
            [
                'Lina',
                'Linear_A'
            ],
            [
                'Linb',
                'Linear_B'
            ],
            [
                'Lisu',
                'Lisu'
            ],
            [
                'Lyci',
                'Lycian'
            ],
            [
                'Lydi',
                'Lydian'
            ],
            [
                'Mahj',
                'Mahajani'
            ],
            [
                'Maka',
                'Makasar'
            ],
            [
                'Mand',
                'Mandaic'
            ],
            [
                'Mani',
                'Manichaean'
            ],
            [
                'Marc',
                'Marchen'
            ],
            [
                'Medf',
                'Medefaidrin'
            ],
            [
                'Mend',
                'Mende_Kikakui'
            ],
            [
                'Merc',
                'Meroitic_Cursive'
            ],
            [
                'Mero',
                'Meroitic_Hieroglyphs'
            ],
            [
                'Mlym',
                'Malayalam'
            ],
            [
                'Modi',
                'Modi'
            ],
            [
                'Mong',
                'Mongolian'
            ],
            [
                'Mroo',
                'Mro'
            ],
            [
                'Mtei',
                'Meetei_Mayek'
            ],
            [
                'Mult',
                'Multani'
            ],
            [
                'Mymr',
                'Myanmar'
            ],
            [
                'Nagm',
                'Nag_Mundari'
            ],
            [
                'Nand',
                'Nandinagari'
            ],
            [
                'Narb',
                'Old_North_Arabian'
            ],
            [
                'Nbat',
                'Nabataean'
            ],
            [
                'Newa',
                'Newa'
            ],
            [
                'Nkoo',
                'Nko'
            ],
            [
                'Nshu',
                'Nushu'
            ],
            [
                'Ogam',
                'Ogham'
            ],
            [
                'Olck',
                'Ol_Chiki'
            ],
            [
                'Onao',
                'Ol_Onal'
            ],
            [
                'Orkh',
                'Old_Turkic'
            ],
            [
                'Orya',
                'Oriya'
            ],
            [
                'Osge',
                'Osage'
            ],
            [
                'Osma',
                'Osmanya'
            ],
            [
                'Ougr',
                'Old_Uyghur'
            ],
            [
                'Palm',
                'Palmyrene'
            ],
            [
                'Pauc',
                'Pau_Cin_Hau'
            ],
            [
                'Perm',
                'Old_Permic'
            ],
            [
                'Phag',
                'Phags_Pa'
            ],
            [
                'Phli',
                'Inscriptional_Pahlavi'
            ],
            [
                'Phlp',
                'Psalter_Pahlavi'
            ],
            [
                'Phnx',
                'Phoenician'
            ],
            [
                'Plrd',
                'Miao'
            ],
            [
                'Prti',
                'Inscriptional_Parthian'
            ],
            [
                'Rjng',
                'Rejang'
            ],
            [
                'Rohg',
                'Hanifi_Rohingya'
            ],
            [
                'Runr',
                'Runic'
            ],
            [
                'Samr',
                'Samaritan'
            ],
            [
                'Sarb',
                'Old_South_Arabian'
            ],
            [
                'Saur',
                'Saurashtra'
            ],
            [
                'Sgnw',
                'SignWriting'
            ],
            [
                'Shaw',
                'Shavian'
            ],
            [
                'Shrd',
                'Sharada'
            ],
            [
                'Sidd',
                'Siddham'
            ],
            [
                'Sind',
                'Khudawadi'
            ],
            [
                'Sinh',
                'Sinhala'
            ],
            [
                'Sogd',
                'Sogdian'
            ],
            [
                'Sogo',
                'Old_Sogdian'
            ],
            [
                'Sora',
                'Sora_Sompeng'
            ],
            [
                'Soyo',
                'Soyombo'
            ],
            [
                'Sund',
                'Sundanese'
            ],
            [
                'Sunu',
                'Sunuwar'
            ],
            [
                'Sylo',
                'Syloti_Nagri'
            ],
            [
                'Syrc',
                'Syriac'
            ],
            [
                'Tagb',
                'Tagbanwa'
            ],
            [
                'Takr',
                'Takri'
            ],
            [
                'Tale',
                'Tai_Le'
            ],
            [
                'Talu',
                'New_Tai_Lue'
            ],
            [
                'Taml',
                'Tamil'
            ],
            [
                'Tang',
                'Tangut'
            ],
            [
                'Tavt',
                'Tai_Viet'
            ],
            [
                'Telu',
                'Telugu'
            ],
            [
                'Tfng',
                'Tifinagh'
            ],
            [
                'Tglg',
                'Tagalog'
            ],
            [
                'Thaa',
                'Thaana'
            ],
            [
                'Thai',
                'Thai'
            ],
            [
                'Tibt',
                'Tibetan'
            ],
            [
                'Tirh',
                'Tirhuta'
            ],
            [
                'Tnsa',
                'Tangsa'
            ],
            [
                'Todr',
                'Todhri'
            ],
            [
                'Toto',
                'Toto'
            ],
            [
                'Tutg',
                'Tulu_Tigalari'
            ],
            [
                'Ugar',
                'Ugaritic'
            ],
            [
                'Vaii',
                'Vai'
            ],
            [
                'Vith',
                'Vithkuqi'
            ],
            [
                'Wara',
                'Warang_Citi'
            ],
            [
                'Wcho',
                'Wancho'
            ],
            [
                'Xpeo',
                'Old_Persian'
            ],
            [
                'Xsux',
                'Cuneiform'
            ],
            [
                'Yezi',
                'Yezidi'
            ],
            [
                'Yiii',
                'Yi'
            ],
            [
                'Zanb',
                'Zanabazar_Square'
            ],
            [
                'Zinh',
                'Inherited'
            ],
            [
                'Qaai',
                'Inherited'
            ],
            [
                'Zyyy',
                'Common'
            ],
            [
                'Zzzz',
                'Unknown'
            ],
            [
                'Adlam',
                'Adlam'
            ],
            [
                'Caucasian_Albanian',
                'Caucasian_Albanian'
            ],
            [
                'Arabic',
                'Arabic'
            ],
            [
                'Imperial_Aramaic',
                'Imperial_Aramaic'
            ],
            [
                'Armenian',
                'Armenian'
            ],
            [
                'Avestan',
                'Avestan'
            ],
            [
                'Balinese',
                'Balinese'
            ],
            [
                'Bamum',
                'Bamum'
            ],
            [
                'Bassa_Vah',
                'Bassa_Vah'
            ],
            [
                'Batak',
                'Batak'
            ],
            [
                'Bengali',
                'Bengali'
            ],
            [
                'Bhaiksuki',
                'Bhaiksuki'
            ],
            [
                'Bopomofo',
                'Bopomofo'
            ],
            [
                'Brahmi',
                'Brahmi'
            ],
            [
                'Braille',
                'Braille'
            ],
            [
                'Buginese',
                'Buginese'
            ],
            [
                'Buhid',
                'Buhid'
            ],
            [
                'Chakma',
                'Chakma'
            ],
            [
                'Canadian_Aboriginal',
                'Canadian_Aboriginal'
            ],
            [
                'Carian',
                'Carian'
            ],
            [
                'Cherokee',
                'Cherokee'
            ],
            [
                'Chorasmian',
                'Chorasmian'
            ],
            [
                'Coptic',
                'Coptic'
            ],
            [
                'Cypro_Minoan',
                'Cypro_Minoan'
            ],
            [
                'Cypriot',
                'Cypriot'
            ],
            [
                'Cyrillic',
                'Cyrillic'
            ],
            [
                'Devanagari',
                'Devanagari'
            ],
            [
                'Dives_Akuru',
                'Dives_Akuru'
            ],
            [
                'Dogra',
                'Dogra'
            ],
            [
                'Deseret',
                'Deseret'
            ],
            [
                'Duployan',
                'Duployan'
            ],
            [
                'Egyptian_Hieroglyphs',
                'Egyptian_Hieroglyphs'
            ],
            [
                'Elbasan',
                'Elbasan'
            ],
            [
                'Elymaic',
                'Elymaic'
            ],
            [
                'Ethiopic',
                'Ethiopic'
            ],
            [
                'Garay',
                'Garay'
            ],
            [
                'Georgian',
                'Georgian'
            ],
            [
                'Glagolitic',
                'Glagolitic'
            ],
            [
                'Gunjala_Gondi',
                'Gunjala_Gondi'
            ],
            [
                'Masaram_Gondi',
                'Masaram_Gondi'
            ],
            [
                'Gothic',
                'Gothic'
            ],
            [
                'Grantha',
                'Grantha'
            ],
            [
                'Greek',
                'Greek'
            ],
            [
                'Gujarati',
                'Gujarati'
            ],
            [
                'Gurung_Khema',
                'Gurung_Khema'
            ],
            [
                'Gurmukhi',
                'Gurmukhi'
            ],
            [
                'Hangul',
                'Hangul'
            ],
            [
                'Han',
                'Han'
            ],
            [
                'Hanunoo',
                'Hanunoo'
            ],
            [
                'Hatran',
                'Hatran'
            ],
            [
                'Hebrew',
                'Hebrew'
            ],
            [
                'Hiragana',
                'Hiragana'
            ],
            [
                'Anatolian_Hieroglyphs',
                'Anatolian_Hieroglyphs'
            ],
            [
                'Pahawh_Hmong',
                'Pahawh_Hmong'
            ],
            [
                'Nyiakeng_Puachue_Hmong',
                'Nyiakeng_Puachue_Hmong'
            ],
            [
                'Katakana_Or_Hiragana',
                'Katakana_Or_Hiragana'
            ],
            [
                'Old_Hungarian',
                'Old_Hungarian'
            ],
            [
                'Old_Italic',
                'Old_Italic'
            ],
            [
                'Javanese',
                'Javanese'
            ],
            [
                'Kayah_Li',
                'Kayah_Li'
            ],
            [
                'Katakana',
                'Katakana'
            ],
            [
                'Kharoshthi',
                'Kharoshthi'
            ],
            [
                'Khmer',
                'Khmer'
            ],
            [
                'Khojki',
                'Khojki'
            ],
            [
                'Khitan_Small_Script',
                'Khitan_Small_Script'
            ],
            [
                'Kannada',
                'Kannada'
            ],
            [
                'Kirat_Rai',
                'Kirat_Rai'
            ],
            [
                'Kaithi',
                'Kaithi'
            ],
            [
                'Tai_Tham',
                'Tai_Tham'
            ],
            [
                'Lao',
                'Lao'
            ],
            [
                'Latin',
                'Latin'
            ],
            [
                'Lepcha',
                'Lepcha'
            ],
            [
                'Limbu',
                'Limbu'
            ],
            [
                'Linear_A',
                'Linear_A'
            ],
            [
                'Linear_B',
                'Linear_B'
            ],
            [
                'Lycian',
                'Lycian'
            ],
            [
                'Lydian',
                'Lydian'
            ],
            [
                'Mahajani',
                'Mahajani'
            ],
            [
                'Makasar',
                'Makasar'
            ],
            [
                'Mandaic',
                'Mandaic'
            ],
            [
                'Manichaean',
                'Manichaean'
            ],
            [
                'Marchen',
                'Marchen'
            ],
            [
                'Medefaidrin',
                'Medefaidrin'
            ],
            [
                'Mende_Kikakui',
                'Mende_Kikakui'
            ],
            [
                'Meroitic_Cursive',
                'Meroitic_Cursive'
            ],
            [
                'Meroitic_Hieroglyphs',
                'Meroitic_Hieroglyphs'
            ],
            [
                'Malayalam',
                'Malayalam'
            ],
            [
                'Mongolian',
                'Mongolian'
            ],
            [
                'Mro',
                'Mro'
            ],
            [
                'Meetei_Mayek',
                'Meetei_Mayek'
            ],
            [
                'Multani',
                'Multani'
            ],
            [
                'Myanmar',
                'Myanmar'
            ],
            [
                'Nag_Mundari',
                'Nag_Mundari'
            ],
            [
                'Nandinagari',
                'Nandinagari'
            ],
            [
                'Old_North_Arabian',
                'Old_North_Arabian'
            ],
            [
                'Nabataean',
                'Nabataean'
            ],
            [
                'Nko',
                'Nko'
            ],
            [
                'Nushu',
                'Nushu'
            ],
            [
                'Ogham',
                'Ogham'
            ],
            [
                'Ol_Chiki',
                'Ol_Chiki'
            ],
            [
                'Ol_Onal',
                'Ol_Onal'
            ],
            [
                'Old_Turkic',
                'Old_Turkic'
            ],
            [
                'Oriya',
                'Oriya'
            ],
            [
                'Osage',
                'Osage'
            ],
            [
                'Osmanya',
                'Osmanya'
            ],
            [
                'Old_Uyghur',
                'Old_Uyghur'
            ],
            [
                'Palmyrene',
                'Palmyrene'
            ],
            [
                'Pau_Cin_Hau',
                'Pau_Cin_Hau'
            ],
            [
                'Old_Permic',
                'Old_Permic'
            ],
            [
                'Phags_Pa',
                'Phags_Pa'
            ],
            [
                'Inscriptional_Pahlavi',
                'Inscriptional_Pahlavi'
            ],
            [
                'Psalter_Pahlavi',
                'Psalter_Pahlavi'
            ],
            [
                'Phoenician',
                'Phoenician'
            ],
            [
                'Miao',
                'Miao'
            ],
            [
                'Inscriptional_Parthian',
                'Inscriptional_Parthian'
            ],
            [
                'Rejang',
                'Rejang'
            ],
            [
                'Hanifi_Rohingya',
                'Hanifi_Rohingya'
            ],
            [
                'Runic',
                'Runic'
            ],
            [
                'Samaritan',
                'Samaritan'
            ],
            [
                'Old_South_Arabian',
                'Old_South_Arabian'
            ],
            [
                'Saurashtra',
                'Saurashtra'
            ],
            [
                'SignWriting',
                'SignWriting'
            ],
            [
                'Shavian',
                'Shavian'
            ],
            [
                'Sharada',
                'Sharada'
            ],
            [
                'Siddham',
                'Siddham'
            ],
            [
                'Khudawadi',
                'Khudawadi'
            ],
            [
                'Sinhala',
                'Sinhala'
            ],
            [
                'Sogdian',
                'Sogdian'
            ],
            [
                'Old_Sogdian',
                'Old_Sogdian'
            ],
            [
                'Sora_Sompeng',
                'Sora_Sompeng'
            ],
            [
                'Soyombo',
                'Soyombo'
            ],
            [
                'Sundanese',
                'Sundanese'
            ],
            [
                'Sunuwar',
                'Sunuwar'
            ],
            [
                'Syloti_Nagri',
                'Syloti_Nagri'
            ],
            [
                'Syriac',
                'Syriac'
            ],
            [
                'Tagbanwa',
                'Tagbanwa'
            ],
            [
                'Takri',
                'Takri'
            ],
            [
                'Tai_Le',
                'Tai_Le'
            ],
            [
                'New_Tai_Lue',
                'New_Tai_Lue'
            ],
            [
                'Tamil',
                'Tamil'
            ],
            [
                'Tangut',
                'Tangut'
            ],
            [
                'Tai_Viet',
                'Tai_Viet'
            ],
            [
                'Telugu',
                'Telugu'
            ],
            [
                'Tifinagh',
                'Tifinagh'
            ],
            [
                'Tagalog',
                'Tagalog'
            ],
            [
                'Thaana',
                'Thaana'
            ],
            [
                'Tibetan',
                'Tibetan'
            ],
            [
                'Tirhuta',
                'Tirhuta'
            ],
            [
                'Tangsa',
                'Tangsa'
            ],
            [
                'Todhri',
                'Todhri'
            ],
            [
                'Tulu_Tigalari',
                'Tulu_Tigalari'
            ],
            [
                'Ugaritic',
                'Ugaritic'
            ],
            [
                'Vai',
                'Vai'
            ],
            [
                'Vithkuqi',
                'Vithkuqi'
            ],
            [
                'Warang_Citi',
                'Warang_Citi'
            ],
            [
                'Wancho',
                'Wancho'
            ],
            [
                'Old_Persian',
                'Old_Persian'
            ],
            [
                'Cuneiform',
                'Cuneiform'
            ],
            [
                'Yezidi',
                'Yezidi'
            ],
            [
                'Yi',
                'Yi'
            ],
            [
                'Zanabazar_Square',
                'Zanabazar_Square'
            ],
            [
                'Inherited',
                'Inherited'
            ],
            [
                'Common',
                'Common'
            ],
            [
                'Unknown',
                'Unknown'
            ]
        ])
    ]
]);
}}),
"[project]/node_modules/unicode-match-property-value-ecmascript/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use strict';
const propertyToValueAliases = __turbopack_require__("[project]/node_modules/unicode-match-property-value-ecmascript/data/mappings.js [app-client] (ecmascript)");
const matchPropertyValue = function(property, value) {
    const aliasToValue = propertyToValueAliases.get(property);
    if (!aliasToValue) {
        throw new Error(`Unknown property \`${property}\`.`);
    }
    const canonicalValue = aliasToValue.get(value);
    if (canonicalValue) {
        return canonicalValue;
    }
    throw new Error(`Unknown value \`${value}\` for property \`${property}\`.`);
};
module.exports = matchPropertyValue;
}}),
"[project]/node_modules/regenerator-transform/lib/util.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports.getTypes = getTypes;
exports.isReference = isReference;
exports.replaceWithOrRemove = replaceWithOrRemove;
exports.runtimeProperty = runtimeProperty;
exports.wrapWithTypes = wrapWithTypes;
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var currentTypes = null;
function wrapWithTypes(types, fn) {
    return function() {
        var oldTypes = currentTypes;
        currentTypes = types;
        try {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            return fn.apply(this, args);
        } finally{
            currentTypes = oldTypes;
        }
    };
}
function getTypes() {
    return currentTypes;
}
function runtimeProperty(name) {
    var t = getTypes();
    return t.memberExpression(t.identifier("regeneratorRuntime"), t.identifier(name), false);
}
function isReference(path) {
    return path.isReferenced() || path.parentPath.isAssignmentExpression({
        left: path.node
    });
}
function replaceWithOrRemove(path, replacement) {
    if (replacement) {
        path.replaceWith(replacement);
    } else {
        path.remove();
    }
}
}}),
"[project]/node_modules/regenerator-transform/lib/hoist.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var util = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/regenerator-transform/lib/util.js [app-client] (ecmascript)"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            "default": obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj["default"] = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var hasOwn = Object.prototype.hasOwnProperty;
// The hoist function takes a FunctionExpression or FunctionDeclaration
// and replaces any Declaration nodes in its body with assignments, then
// returns a VariableDeclaration containing just the names of the removed
// declarations.
exports.hoist = function(funPath) {
    var t = util.getTypes();
    t.assertFunction(funPath.node);
    var vars = {};
    function varDeclToExpr(_ref, includeIdentifiers) {
        var vdec = _ref.node, scope = _ref.scope;
        t.assertVariableDeclaration(vdec);
        // TODO assert.equal(vdec.kind, "var");
        var exprs = [];
        vdec.declarations.forEach(function(dec) {
            // Note: We duplicate 'dec.id' here to ensure that the variable declaration IDs don't
            // have the same 'loc' value, since that can make sourcemaps and retainLines behave poorly.
            vars[dec.id.name] = t.identifier(dec.id.name);
            // Remove the binding, to avoid "duplicate declaration" errors when it will
            // be injected again.
            scope.removeBinding(dec.id.name);
            if (dec.init) {
                exprs.push(t.assignmentExpression("=", dec.id, dec.init));
            } else if (includeIdentifiers) {
                exprs.push(dec.id);
            }
        });
        if (exprs.length === 0) return null;
        if (exprs.length === 1) return exprs[0];
        return t.sequenceExpression(exprs);
    }
    funPath.get("body").traverse({
        VariableDeclaration: {
            exit: function exit(path) {
                var expr = varDeclToExpr(path, false);
                if (expr === null) {
                    path.remove();
                } else {
                    // We don't need to traverse this expression any further because
                    // there can't be any new declarations inside an expression.
                    util.replaceWithOrRemove(path, t.expressionStatement(expr));
                }
                // Since the original node has been either removed or replaced,
                // avoid traversing it any further.
                path.skip();
            }
        },
        ForStatement: function ForStatement(path) {
            var init = path.get("init");
            if (init.isVariableDeclaration()) {
                util.replaceWithOrRemove(init, varDeclToExpr(init, false));
            }
        },
        ForXStatement: function ForXStatement(path) {
            var left = path.get("left");
            if (left.isVariableDeclaration()) {
                util.replaceWithOrRemove(left, varDeclToExpr(left, true));
            }
        },
        FunctionDeclaration: function FunctionDeclaration(path) {
            var node = path.node;
            vars[node.id.name] = node.id;
            var assignment = t.expressionStatement(t.assignmentExpression("=", t.clone(node.id), t.functionExpression(path.scope.generateUidIdentifierBasedOnNode(node), node.params, node.body, node.generator, node.expression)));
            if (path.parentPath.isBlockStatement()) {
                // Insert the assignment form before the first statement in the
                // enclosing block.
                path.parentPath.unshiftContainer("body", assignment);
                // Remove the function declaration now that we've inserted the
                // equivalent assignment form at the beginning of the block.
                path.remove();
            } else {
                // If the parent node is not a block statement, then we can just
                // replace the declaration with the equivalent assignment form
                // without worrying about hoisting it.
                util.replaceWithOrRemove(path, assignment);
            }
            // Remove the binding, to avoid "duplicate declaration" errors when it will
            // be injected again.
            path.scope.removeBinding(node.id.name);
            // Don't hoist variables out of inner functions.
            path.skip();
        },
        FunctionExpression: function FunctionExpression(path) {
            // Don't descend into nested function expressions.
            path.skip();
        },
        ArrowFunctionExpression: function ArrowFunctionExpression(path) {
            // Don't descend into nested function expressions.
            path.skip();
        }
    });
    var paramNames = {};
    funPath.get("params").forEach(function(paramPath) {
        var param = paramPath.node;
        if (t.isIdentifier(param)) {
            paramNames[param.name] = param;
        } else {
        // Variables declared by destructuring parameter patterns will be
        // harmlessly re-declared.
        }
    });
    var declarations = [];
    Object.keys(vars).forEach(function(name) {
        if (!hasOwn.call(paramNames, name)) {
            declarations.push(t.variableDeclarator(vars[name], null));
        }
    });
    if (declarations.length === 0) {
        return null; // Be sure to handle this case!
    }
    return t.variableDeclaration("var", declarations);
};
}}),
"[project]/node_modules/regenerator-transform/lib/leap.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-client] (ecmascript)");
var _assert = _interopRequireDefault(__turbopack_require__("[project]/node_modules/next/dist/compiled/assert/assert.js [app-client] (ecmascript)"));
var _emit = __turbopack_require__("[project]/node_modules/regenerator-transform/lib/emit.js [app-client] (ecmascript)");
var _util = __turbopack_require__("[project]/node_modules/next/dist/compiled/util/util.js [app-client] (ecmascript)");
var _util2 = __turbopack_require__("[project]/node_modules/regenerator-transform/lib/util.js [app-client] (ecmascript)");
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ function Entry() {
    _assert["default"].ok(this instanceof Entry);
}
function FunctionEntry(returnLoc) {
    Entry.call(this);
    (0, _util2.getTypes)().assertLiteral(returnLoc);
    this.returnLoc = returnLoc;
}
(0, _util.inherits)(FunctionEntry, Entry);
exports.FunctionEntry = FunctionEntry;
function LoopEntry(breakLoc, continueLoc, label) {
    Entry.call(this);
    var t = (0, _util2.getTypes)();
    t.assertLiteral(breakLoc);
    t.assertLiteral(continueLoc);
    if (label) {
        t.assertIdentifier(label);
    } else {
        label = null;
    }
    this.breakLoc = breakLoc;
    this.continueLoc = continueLoc;
    this.label = label;
}
(0, _util.inherits)(LoopEntry, Entry);
exports.LoopEntry = LoopEntry;
function SwitchEntry(breakLoc) {
    Entry.call(this);
    (0, _util2.getTypes)().assertLiteral(breakLoc);
    this.breakLoc = breakLoc;
}
(0, _util.inherits)(SwitchEntry, Entry);
exports.SwitchEntry = SwitchEntry;
function TryEntry(firstLoc, catchEntry, finallyEntry) {
    Entry.call(this);
    var t = (0, _util2.getTypes)();
    t.assertLiteral(firstLoc);
    if (catchEntry) {
        _assert["default"].ok(catchEntry instanceof CatchEntry);
    } else {
        catchEntry = null;
    }
    if (finallyEntry) {
        _assert["default"].ok(finallyEntry instanceof FinallyEntry);
    } else {
        finallyEntry = null;
    }
    // Have to have one or the other (or both).
    _assert["default"].ok(catchEntry || finallyEntry);
    this.firstLoc = firstLoc;
    this.catchEntry = catchEntry;
    this.finallyEntry = finallyEntry;
}
(0, _util.inherits)(TryEntry, Entry);
exports.TryEntry = TryEntry;
function CatchEntry(firstLoc, paramId) {
    Entry.call(this);
    var t = (0, _util2.getTypes)();
    t.assertLiteral(firstLoc);
    t.assertIdentifier(paramId);
    this.firstLoc = firstLoc;
    this.paramId = paramId;
}
(0, _util.inherits)(CatchEntry, Entry);
exports.CatchEntry = CatchEntry;
function FinallyEntry(firstLoc, afterLoc) {
    Entry.call(this);
    var t = (0, _util2.getTypes)();
    t.assertLiteral(firstLoc);
    t.assertLiteral(afterLoc);
    this.firstLoc = firstLoc;
    this.afterLoc = afterLoc;
}
(0, _util.inherits)(FinallyEntry, Entry);
exports.FinallyEntry = FinallyEntry;
function LabeledEntry(breakLoc, label) {
    Entry.call(this);
    var t = (0, _util2.getTypes)();
    t.assertLiteral(breakLoc);
    t.assertIdentifier(label);
    this.breakLoc = breakLoc;
    this.label = label;
}
(0, _util.inherits)(LabeledEntry, Entry);
exports.LabeledEntry = LabeledEntry;
function LeapManager(emitter) {
    _assert["default"].ok(this instanceof LeapManager);
    _assert["default"].ok(emitter instanceof _emit.Emitter);
    this.emitter = emitter;
    this.entryStack = [
        new FunctionEntry(emitter.finalLoc)
    ];
}
var LMp = LeapManager.prototype;
exports.LeapManager = LeapManager;
LMp.withEntry = function(entry, callback) {
    _assert["default"].ok(entry instanceof Entry);
    this.entryStack.push(entry);
    try {
        callback.call(this.emitter);
    } finally{
        var popped = this.entryStack.pop();
        _assert["default"].strictEqual(popped, entry);
    }
};
LMp._findLeapLocation = function(property, label) {
    for(var i = this.entryStack.length - 1; i >= 0; --i){
        var entry = this.entryStack[i];
        var loc = entry[property];
        if (loc) {
            if (label) {
                if (entry.label && entry.label.name === label.name) {
                    return loc;
                }
            } else if (entry instanceof LabeledEntry) {
            // Ignore LabeledEntry entries unless we are actually breaking to
            // a label.
            } else {
                return loc;
            }
        }
    }
    return null;
};
LMp.getBreakLoc = function(label) {
    return this._findLeapLocation("breakLoc", label);
};
LMp.getContinueLoc = function(label) {
    return this._findLeapLocation("continueLoc", label);
};
}}),
"[project]/node_modules/regenerator-transform/lib/meta.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-client] (ecmascript)");
var _assert = _interopRequireDefault(__turbopack_require__("[project]/node_modules/next/dist/compiled/assert/assert.js [app-client] (ecmascript)"));
var _util = __turbopack_require__("[project]/node_modules/regenerator-transform/lib/util.js [app-client] (ecmascript)");
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var mMap = new WeakMap();
function m(node) {
    if (!mMap.has(node)) {
        mMap.set(node, {});
    }
    return mMap.get(node);
}
var hasOwn = Object.prototype.hasOwnProperty;
function makePredicate(propertyName, knownTypes) {
    function onlyChildren(node) {
        var t = (0, _util.getTypes)();
        t.assertNode(node);
        // Assume no side effects until we find out otherwise.
        var result = false;
        function check(child) {
            if (result) {
            // Do nothing.
            } else if (Array.isArray(child)) {
                child.some(check);
            } else if (t.isNode(child)) {
                _assert["default"].strictEqual(result, false);
                result = predicate(child);
            }
            return result;
        }
        var keys = t.VISITOR_KEYS[node.type];
        if (keys) {
            for(var i = 0; i < keys.length; i++){
                var key = keys[i];
                var child = node[key];
                check(child);
            }
        }
        return result;
    }
    function predicate(node) {
        (0, _util.getTypes)().assertNode(node);
        var meta = m(node);
        if (hasOwn.call(meta, propertyName)) return meta[propertyName];
        // Certain types are "opaque," which means they have no side
        // effects or leaps and we don't care about their subexpressions.
        if (hasOwn.call(opaqueTypes, node.type)) return meta[propertyName] = false;
        if (hasOwn.call(knownTypes, node.type)) return meta[propertyName] = true;
        return meta[propertyName] = onlyChildren(node);
    }
    predicate.onlyChildren = onlyChildren;
    return predicate;
}
var opaqueTypes = {
    FunctionExpression: true,
    ArrowFunctionExpression: true
};
// These types potentially have side effects regardless of what side
// effects their subexpressions have.
var sideEffectTypes = {
    CallExpression: true,
    // Anything could happen!
    ForInStatement: true,
    // Modifies the key variable.
    UnaryExpression: true,
    // Think delete.
    BinaryExpression: true,
    // Might invoke .toString() or .valueOf().
    AssignmentExpression: true,
    // Side-effecting by definition.
    UpdateExpression: true,
    // Updates are essentially assignments.
    NewExpression: true // Similar to CallExpression.
};
// These types are the direct cause of all leaps in control flow.
var leapTypes = {
    YieldExpression: true,
    BreakStatement: true,
    ContinueStatement: true,
    ReturnStatement: true,
    ThrowStatement: true
};
// All leap types are also side effect types.
for(var type in leapTypes){
    if (hasOwn.call(leapTypes, type)) {
        sideEffectTypes[type] = leapTypes[type];
    }
}
exports.hasSideEffects = makePredicate("hasSideEffects", sideEffectTypes);
exports.containsLeap = makePredicate("containsLeap", leapTypes);
}}),
"[project]/node_modules/regenerator-transform/lib/emit.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-client] (ecmascript)");
var _assert = _interopRequireDefault(__turbopack_require__("[project]/node_modules/next/dist/compiled/assert/assert.js [app-client] (ecmascript)"));
var leap = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/regenerator-transform/lib/leap.js [app-client] (ecmascript)"));
var meta = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/regenerator-transform/lib/meta.js [app-client] (ecmascript)"));
var util = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/regenerator-transform/lib/util.js [app-client] (ecmascript)"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            "default": obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj["default"] = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var hasOwn = Object.prototype.hasOwnProperty;
function Emitter(contextId) {
    _assert["default"].ok(this instanceof Emitter);
    util.getTypes().assertIdentifier(contextId);
    // Used to generate unique temporary names.
    this.nextTempId = 0;
    // In order to make sure the context object does not collide with
    // anything in the local scope, we might have to rename it, so we
    // refer to it symbolically instead of just assuming that it will be
    // called "context".
    this.contextId = contextId;
    // An append-only list of Statements that grows each time this.emit is
    // called.
    this.listing = [];
    // A sparse array whose keys correspond to locations in this.listing
    // that have been marked as branch/jump targets.
    this.marked = [
        true
    ];
    this.insertedLocs = new Set();
    // The last location will be marked when this.getDispatchLoop is
    // called.
    this.finalLoc = this.loc();
    // A list of all leap.TryEntry statements emitted.
    this.tryEntries = [];
    // Each time we evaluate the body of a loop, we tell this.leapManager
    // to enter a nested loop context that determines the meaning of break
    // and continue statements therein.
    this.leapManager = new leap.LeapManager(this);
}
var Ep = Emitter.prototype;
exports.Emitter = Emitter;
// Offsets into this.listing that could be used as targets for branches or
// jumps are represented as numeric Literal nodes. This representation has
// the amazingly convenient benefit of allowing the exact value of the
// location to be determined at any time, even after generating code that
// refers to the location.
// We use 'Number.MAX_VALUE' to mark uninitialized location. We can safely do
// so because no code can realistically have about 1.8e+308 locations before
// hitting memory limit of the machine it's running on. For comparison, the
// estimated number of atoms in the observable universe is around 1e+80.
var PENDING_LOCATION = Number.MAX_VALUE;
Ep.loc = function() {
    var l = util.getTypes().numericLiteral(PENDING_LOCATION);
    this.insertedLocs.add(l);
    return l;
};
Ep.getInsertedLocs = function() {
    return this.insertedLocs;
};
Ep.getContextId = function() {
    return util.getTypes().clone(this.contextId);
};
// Sets the exact value of the given location to the offset of the next
// Statement emitted.
Ep.mark = function(loc) {
    util.getTypes().assertLiteral(loc);
    var index = this.listing.length;
    if (loc.value === PENDING_LOCATION) {
        loc.value = index;
    } else {
        // Locations can be marked redundantly, but their values cannot change
        // once set the first time.
        _assert["default"].strictEqual(loc.value, index);
    }
    this.marked[index] = true;
    return loc;
};
Ep.emit = function(node) {
    var t = util.getTypes();
    if (t.isExpression(node)) {
        node = t.expressionStatement(node);
    }
    t.assertStatement(node);
    this.listing.push(node);
};
// Shorthand for emitting assignment statements. This will come in handy
// for assignments to temporary variables.
Ep.emitAssign = function(lhs, rhs) {
    this.emit(this.assign(lhs, rhs));
    return lhs;
};
// Shorthand for an assignment statement.
Ep.assign = function(lhs, rhs) {
    var t = util.getTypes();
    return t.expressionStatement(t.assignmentExpression("=", t.cloneDeep(lhs), rhs));
};
// Convenience function for generating expressions like context.next,
// context.sent, and context.rval.
Ep.contextProperty = function(name, computed) {
    var t = util.getTypes();
    return t.memberExpression(this.getContextId(), computed ? t.stringLiteral(name) : t.identifier(name), !!computed);
};
// Shorthand for setting context.rval and jumping to `context.stop()`.
Ep.stop = function(rval) {
    if (rval) {
        this.setReturnValue(rval);
    }
    this.jump(this.finalLoc);
};
Ep.setReturnValue = function(valuePath) {
    util.getTypes().assertExpression(valuePath.value);
    this.emitAssign(this.contextProperty("rval"), this.explodeExpression(valuePath));
};
Ep.clearPendingException = function(tryLoc, assignee) {
    var t = util.getTypes();
    t.assertLiteral(tryLoc);
    var catchCall = t.callExpression(this.contextProperty("catch", true), [
        t.clone(tryLoc)
    ]);
    if (assignee) {
        this.emitAssign(assignee, catchCall);
    } else {
        this.emit(catchCall);
    }
};
// Emits code for an unconditional jump to the given location, even if the
// exact value of the location is not yet known.
Ep.jump = function(toLoc) {
    this.emitAssign(this.contextProperty("next"), toLoc);
    this.emit(util.getTypes().breakStatement());
};
// Conditional jump.
Ep.jumpIf = function(test, toLoc) {
    var t = util.getTypes();
    t.assertExpression(test);
    t.assertLiteral(toLoc);
    this.emit(t.ifStatement(test, t.blockStatement([
        this.assign(this.contextProperty("next"), toLoc),
        t.breakStatement()
    ])));
};
// Conditional jump, with the condition negated.
Ep.jumpIfNot = function(test, toLoc) {
    var t = util.getTypes();
    t.assertExpression(test);
    t.assertLiteral(toLoc);
    var negatedTest;
    if (t.isUnaryExpression(test) && test.operator === "!") {
        // Avoid double negation.
        negatedTest = test.argument;
    } else {
        negatedTest = t.unaryExpression("!", test);
    }
    this.emit(t.ifStatement(negatedTest, t.blockStatement([
        this.assign(this.contextProperty("next"), toLoc),
        t.breakStatement()
    ])));
};
// Returns a unique MemberExpression that can be used to store and
// retrieve temporary values. Since the object of the member expression is
// the context object, which is presumed to coexist peacefully with all
// other local variables, and since we just increment `nextTempId`
// monotonically, uniqueness is assured.
Ep.makeTempVar = function() {
    return this.contextProperty("t" + this.nextTempId++);
};
Ep.getContextFunction = function(id) {
    var t = util.getTypes();
    return t.functionExpression(id || null, [
        this.getContextId()
    ], t.blockStatement([
        this.getDispatchLoop()
    ]), false, // Not a generator anymore!
    false // Nor an expression.
    );
};
// Turns this.listing into a loop of the form
//
//   while (1) switch (context.next) {
//   case 0:
//   ...
//   case n:
//     return context.stop();
//   }
//
// Each marked location in this.listing will correspond to one generated
// case statement.
Ep.getDispatchLoop = function() {
    var self = this;
    var t = util.getTypes();
    var cases = [];
    var current;
    // If we encounter a break, continue, or return statement in a switch
    // case, we can skip the rest of the statements until the next case.
    var alreadyEnded = false;
    self.listing.forEach(function(stmt, i) {
        if (self.marked.hasOwnProperty(i)) {
            cases.push(t.switchCase(t.numericLiteral(i), current = []));
            alreadyEnded = false;
        }
        if (!alreadyEnded) {
            current.push(stmt);
            if (t.isCompletionStatement(stmt)) alreadyEnded = true;
        }
    });
    // Now that we know how many statements there will be in this.listing,
    // we can finally resolve this.finalLoc.value.
    this.finalLoc.value = this.listing.length;
    cases.push(t.switchCase(this.finalLoc, []), // So that the runtime can jump to the final location without having
    // to know its offset, we provide the "end" case as a synonym.
    t.switchCase(t.stringLiteral("end"), [
        // This will check/clear both context.thrown and context.rval.
        t.returnStatement(t.callExpression(this.contextProperty("stop"), []))
    ]));
    return t.whileStatement(t.numericLiteral(1), t.switchStatement(t.assignmentExpression("=", this.contextProperty("prev"), this.contextProperty("next")), cases));
};
Ep.getTryLocsList = function() {
    if (this.tryEntries.length === 0) {
        // To avoid adding a needless [] to the majority of runtime.wrap
        // argument lists, force the caller to handle this case specially.
        return null;
    }
    var t = util.getTypes();
    var lastLocValue = 0;
    return t.arrayExpression(this.tryEntries.map(function(tryEntry) {
        var thisLocValue = tryEntry.firstLoc.value;
        _assert["default"].ok(thisLocValue >= lastLocValue, "try entries out of order");
        lastLocValue = thisLocValue;
        var ce = tryEntry.catchEntry;
        var fe = tryEntry.finallyEntry;
        var locs = [
            tryEntry.firstLoc,
            // The null here makes a hole in the array.
            ce ? ce.firstLoc : null
        ];
        if (fe) {
            locs[2] = fe.firstLoc;
            locs[3] = fe.afterLoc;
        }
        return t.arrayExpression(locs.map(function(loc) {
            return loc && t.clone(loc);
        }));
    }));
};
// All side effects must be realized in order.
// If any subexpression harbors a leap, all subexpressions must be
// neutered of side effects.
// No destructive modification of AST nodes.
Ep.explode = function(path, ignoreResult) {
    var t = util.getTypes();
    var node = path.node;
    var self = this;
    t.assertNode(node);
    if (t.isDeclaration(node)) throw getDeclError(node);
    if (t.isStatement(node)) return self.explodeStatement(path);
    if (t.isExpression(node)) return self.explodeExpression(path, ignoreResult);
    switch(node.type){
        case "Program":
            return path.get("body").map(self.explodeStatement, self);
        case "VariableDeclarator":
            throw getDeclError(node);
        // These node types should be handled by their parent nodes
        // (ObjectExpression, SwitchStatement, and TryStatement, respectively).
        case "Property":
        case "SwitchCase":
        case "CatchClause":
            throw new Error(node.type + " nodes should be handled by their parents");
        default:
            throw new Error("unknown Node of type " + JSON.stringify(node.type));
    }
};
function getDeclError(node) {
    return new Error("all declarations should have been transformed into " + "assignments before the Exploder began its work: " + JSON.stringify(node));
}
Ep.explodeStatement = function(path, labelId) {
    var t = util.getTypes();
    var stmt = path.node;
    var self = this;
    var before, after, head;
    t.assertStatement(stmt);
    if (labelId) {
        t.assertIdentifier(labelId);
    } else {
        labelId = null;
    }
    // Explode BlockStatement nodes even if they do not contain a yield,
    // because we don't want or need the curly braces.
    if (t.isBlockStatement(stmt)) {
        path.get("body").forEach(function(path) {
            self.explodeStatement(path);
        });
        return;
    }
    if (!meta.containsLeap(stmt)) {
        // Technically we should be able to avoid emitting the statement
        // altogether if !meta.hasSideEffects(stmt), but that leads to
        // confusing generated code (for instance, `while (true) {}` just
        // disappears) and is probably a more appropriate job for a dedicated
        // dead code elimination pass.
        self.emit(stmt);
        return;
    }
    switch(stmt.type){
        case "ExpressionStatement":
            self.explodeExpression(path.get("expression"), true);
            break;
        case "LabeledStatement":
            after = this.loc();
            // Did you know you can break from any labeled block statement or
            // control structure? Well, you can! Note: when a labeled loop is
            // encountered, the leap.LabeledEntry created here will immediately
            // enclose a leap.LoopEntry on the leap manager's stack, and both
            // entries will have the same label. Though this works just fine, it
            // may seem a bit redundant. In theory, we could check here to
            // determine if stmt knows how to handle its own label; for example,
            // stmt happens to be a WhileStatement and so we know it's going to
            // establish its own LoopEntry when we explode it (below). Then this
            // LabeledEntry would be unnecessary. Alternatively, we might be
            // tempted not to pass stmt.label down into self.explodeStatement,
            // because we've handled the label here, but that's a mistake because
            // labeled loops may contain labeled continue statements, which is not
            // something we can handle in this generic case. All in all, I think a
            // little redundancy greatly simplifies the logic of this case, since
            // it's clear that we handle all possible LabeledStatements correctly
            // here, regardless of whether they interact with the leap manager
            // themselves. Also remember that labels and break/continue-to-label
            // statements are rare, and all of this logic happens at transform
            // time, so it has no additional runtime cost.
            self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function() {
                self.explodeStatement(path.get("body"), stmt.label);
            });
            self.mark(after);
            break;
        case "WhileStatement":
            before = this.loc();
            after = this.loc();
            self.mark(before);
            self.jumpIfNot(self.explodeExpression(path.get("test")), after);
            self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function() {
                self.explodeStatement(path.get("body"));
            });
            self.jump(before);
            self.mark(after);
            break;
        case "DoWhileStatement":
            var first = this.loc();
            var test = this.loc();
            after = this.loc();
            self.mark(first);
            self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function() {
                self.explode(path.get("body"));
            });
            self.mark(test);
            self.jumpIf(self.explodeExpression(path.get("test")), first);
            self.mark(after);
            break;
        case "ForStatement":
            head = this.loc();
            var update = this.loc();
            after = this.loc();
            if (stmt.init) {
                // We pass true here to indicate that if stmt.init is an expression
                // then we do not care about its result.
                self.explode(path.get("init"), true);
            }
            self.mark(head);
            if (stmt.test) {
                self.jumpIfNot(self.explodeExpression(path.get("test")), after);
            } else {
            // No test means continue unconditionally.
            }
            self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function() {
                self.explodeStatement(path.get("body"));
            });
            self.mark(update);
            if (stmt.update) {
                // We pass true here to indicate that if stmt.update is an
                // expression then we do not care about its result.
                self.explode(path.get("update"), true);
            }
            self.jump(head);
            self.mark(after);
            break;
        case "TypeCastExpression":
            return self.explodeExpression(path.get("expression"));
        case "ForInStatement":
            head = this.loc();
            after = this.loc();
            var keyIterNextFn = self.makeTempVar();
            self.emitAssign(keyIterNextFn, t.callExpression(util.runtimeProperty("keys"), [
                self.explodeExpression(path.get("right"))
            ]));
            self.mark(head);
            var keyInfoTmpVar = self.makeTempVar();
            self.jumpIf(t.memberExpression(t.assignmentExpression("=", keyInfoTmpVar, t.callExpression(t.cloneDeep(keyIterNextFn), [])), t.identifier("done"), false), after);
            self.emitAssign(stmt.left, t.memberExpression(t.cloneDeep(keyInfoTmpVar), t.identifier("value"), false));
            self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function() {
                self.explodeStatement(path.get("body"));
            });
            self.jump(head);
            self.mark(after);
            break;
        case "BreakStatement":
            self.emitAbruptCompletion({
                type: "break",
                target: self.leapManager.getBreakLoc(stmt.label)
            });
            break;
        case "ContinueStatement":
            self.emitAbruptCompletion({
                type: "continue",
                target: self.leapManager.getContinueLoc(stmt.label)
            });
            break;
        case "SwitchStatement":
            // Always save the discriminant into a temporary variable in case the
            // test expressions overwrite values like context.sent.
            var disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get("discriminant")));
            after = this.loc();
            var defaultLoc = this.loc();
            var condition = defaultLoc;
            var caseLocs = [];
            // If there are no cases, .cases might be undefined.
            var cases = stmt.cases || [];
            for(var i = cases.length - 1; i >= 0; --i){
                var c = cases[i];
                t.assertSwitchCase(c);
                if (c.test) {
                    condition = t.conditionalExpression(t.binaryExpression("===", t.cloneDeep(disc), c.test), caseLocs[i] = this.loc(), condition);
                } else {
                    caseLocs[i] = defaultLoc;
                }
            }
            var discriminant = path.get("discriminant");
            util.replaceWithOrRemove(discriminant, condition);
            self.jump(self.explodeExpression(discriminant));
            self.leapManager.withEntry(new leap.SwitchEntry(after), function() {
                path.get("cases").forEach(function(casePath) {
                    var i = casePath.key;
                    self.mark(caseLocs[i]);
                    casePath.get("consequent").forEach(function(path) {
                        self.explodeStatement(path);
                    });
                });
            });
            self.mark(after);
            if (defaultLoc.value === PENDING_LOCATION) {
                self.mark(defaultLoc);
                _assert["default"].strictEqual(after.value, defaultLoc.value);
            }
            break;
        case "IfStatement":
            var elseLoc = stmt.alternate && this.loc();
            after = this.loc();
            self.jumpIfNot(self.explodeExpression(path.get("test")), elseLoc || after);
            self.explodeStatement(path.get("consequent"));
            if (elseLoc) {
                self.jump(after);
                self.mark(elseLoc);
                self.explodeStatement(path.get("alternate"));
            }
            self.mark(after);
            break;
        case "ReturnStatement":
            self.emitAbruptCompletion({
                type: "return",
                value: self.explodeExpression(path.get("argument"))
            });
            break;
        case "WithStatement":
            throw new Error("WithStatement not supported in generator functions.");
        case "TryStatement":
            after = this.loc();
            var handler = stmt.handler;
            var catchLoc = handler && this.loc();
            var catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);
            var finallyLoc = stmt.finalizer && this.loc();
            var finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);
            var tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);
            self.tryEntries.push(tryEntry);
            self.updateContextPrevLoc(tryEntry.firstLoc);
            self.leapManager.withEntry(tryEntry, function() {
                self.explodeStatement(path.get("block"));
                if (catchLoc) {
                    if (finallyLoc) {
                        // If we have both a catch block and a finally block, then
                        // because we emit the catch block first, we need to jump over
                        // it to the finally block.
                        self.jump(finallyLoc);
                    } else {
                        // If there is no finally block, then we need to jump over the
                        // catch block to the fall-through location.
                        self.jump(after);
                    }
                    self.updateContextPrevLoc(self.mark(catchLoc));
                    var bodyPath = path.get("handler.body");
                    var safeParam = self.makeTempVar();
                    self.clearPendingException(tryEntry.firstLoc, safeParam);
                    bodyPath.traverse(catchParamVisitor, {
                        getSafeParam: function getSafeParam() {
                            return t.cloneDeep(safeParam);
                        },
                        catchParamName: handler.param.name
                    });
                    self.leapManager.withEntry(catchEntry, function() {
                        self.explodeStatement(bodyPath);
                    });
                }
                if (finallyLoc) {
                    self.updateContextPrevLoc(self.mark(finallyLoc));
                    self.leapManager.withEntry(finallyEntry, function() {
                        self.explodeStatement(path.get("finalizer"));
                    });
                    self.emit(t.returnStatement(t.callExpression(self.contextProperty("finish"), [
                        finallyEntry.firstLoc
                    ])));
                }
            });
            self.mark(after);
            break;
        case "ThrowStatement":
            self.emit(t.throwStatement(self.explodeExpression(path.get("argument"))));
            break;
        case "ClassDeclaration":
            self.emit(self.explodeClass(path));
            break;
        default:
            throw new Error("unknown Statement of type " + JSON.stringify(stmt.type));
    }
};
var catchParamVisitor = {
    Identifier: function Identifier(path, state) {
        if (path.node.name === state.catchParamName && util.isReference(path)) {
            util.replaceWithOrRemove(path, state.getSafeParam());
        }
    },
    Scope: function Scope(path, state) {
        if (path.scope.hasOwnBinding(state.catchParamName)) {
            // Don't descend into nested scopes that shadow the catch
            // parameter with their own declarations.
            path.skip();
        }
    }
};
Ep.emitAbruptCompletion = function(record) {
    if (!isValidCompletion(record)) {
        _assert["default"].ok(false, "invalid completion record: " + JSON.stringify(record));
    }
    _assert["default"].notStrictEqual(record.type, "normal", "normal completions are not abrupt");
    var t = util.getTypes();
    var abruptArgs = [
        t.stringLiteral(record.type)
    ];
    if (record.type === "break" || record.type === "continue") {
        t.assertLiteral(record.target);
        abruptArgs[1] = this.insertedLocs.has(record.target) ? record.target : t.cloneDeep(record.target);
    } else if (record.type === "return" || record.type === "throw") {
        if (record.value) {
            t.assertExpression(record.value);
            abruptArgs[1] = this.insertedLocs.has(record.value) ? record.value : t.cloneDeep(record.value);
        }
    }
    this.emit(t.returnStatement(t.callExpression(this.contextProperty("abrupt"), abruptArgs)));
};
function isValidCompletion(record) {
    var type = record.type;
    if (type === "normal") {
        return !hasOwn.call(record, "target");
    }
    if (type === "break" || type === "continue") {
        return !hasOwn.call(record, "value") && util.getTypes().isLiteral(record.target);
    }
    if (type === "return" || type === "throw") {
        return hasOwn.call(record, "value") && !hasOwn.call(record, "target");
    }
    return false;
}
// Not all offsets into emitter.listing are potential jump targets. For
// example, execution typically falls into the beginning of a try block
// without jumping directly there. This method returns the current offset
// without marking it, so that a switch case will not necessarily be
// generated for this offset (I say "not necessarily" because the same
// location might end up being marked in the process of emitting other
// statements). There's no logical harm in marking such locations as jump
// targets, but minimizing the number of switch cases keeps the generated
// code shorter.
Ep.getUnmarkedCurrentLoc = function() {
    return util.getTypes().numericLiteral(this.listing.length);
};
// The context.prev property takes the value of context.next whenever we
// evaluate the switch statement discriminant, which is generally good
// enough for tracking the last location we jumped to, but sometimes
// context.prev needs to be more precise, such as when we fall
// successfully out of a try block and into a finally block without
// jumping. This method exists to update context.prev to the freshest
// available location. If we were implementing a full interpreter, we
// would know the location of the current instruction with complete
// precision at all times, but we don't have that luxury here, as it would
// be costly and verbose to set context.prev before every statement.
Ep.updateContextPrevLoc = function(loc) {
    var t = util.getTypes();
    if (loc) {
        t.assertLiteral(loc);
        if (loc.value === PENDING_LOCATION) {
            // If an uninitialized location literal was passed in, set its value
            // to the current this.listing.length.
            loc.value = this.listing.length;
        } else {
            // Otherwise assert that the location matches the current offset.
            _assert["default"].strictEqual(loc.value, this.listing.length);
        }
    } else {
        loc = this.getUnmarkedCurrentLoc();
    }
    // Make sure context.prev is up to date in case we fell into this try
    // statement without jumping to it. TODO Consider avoiding this
    // assignment when we know control must have jumped here.
    this.emitAssign(this.contextProperty("prev"), loc);
};
// In order to save the rest of explodeExpression from a combinatorial
// trainwreck of special cases, explodeViaTempVar is responsible for
// deciding when a subexpression needs to be "exploded," which is my
// very technical term for emitting the subexpression as an assignment
// to a temporary variable and the substituting the temporary variable
// for the original subexpression. Think of exploded view diagrams, not
// Michael Bay movies. The point of exploding subexpressions is to
// control the precise order in which the generated code realizes the
// side effects of those subexpressions.
Ep.explodeViaTempVar = function(tempVar, childPath, hasLeapingChildren, ignoreChildResult) {
    _assert["default"].ok(!ignoreChildResult || !tempVar, "Ignoring the result of a child expression but forcing it to " + "be assigned to a temporary variable?");
    var t = util.getTypes();
    var result = this.explodeExpression(childPath, ignoreChildResult);
    if (ignoreChildResult) {
    // Side effects already emitted above.
    } else if (tempVar || hasLeapingChildren && !t.isLiteral(result)) {
        // If tempVar was provided, then the result will always be assigned
        // to it, even if the result does not otherwise need to be assigned
        // to a temporary variable.  When no tempVar is provided, we have
        // the flexibility to decide whether a temporary variable is really
        // necessary.  Unfortunately, in general, a temporary variable is
        // required whenever any child contains a yield expression, since it
        // is difficult to prove (at all, let alone efficiently) whether
        // this result would evaluate to the same value before and after the
        // yield (see #206).  One narrow case where we can prove it doesn't
        // matter (and thus we do not need a temporary variable) is when the
        // result in question is a Literal value.
        result = this.emitAssign(tempVar || this.makeTempVar(), result);
    }
    return result;
};
Ep.explodeExpression = function(path, ignoreResult) {
    var t = util.getTypes();
    var expr = path.node;
    if (expr) {
        t.assertExpression(expr);
    } else {
        return expr;
    }
    var self = this;
    var result; // Used optionally by several cases below.
    var after;
    function finish(expr) {
        t.assertExpression(expr);
        if (ignoreResult) {
            self.emit(expr);
        }
        return expr;
    }
    // If the expression does not contain a leap, then we either emit the
    // expression as a standalone statement or return it whole.
    if (!meta.containsLeap(expr)) {
        return finish(expr);
    }
    // If any child contains a leap (such as a yield or labeled continue or
    // break statement), then any sibling subexpressions will almost
    // certainly have to be exploded in order to maintain the order of their
    // side effects relative to the leaping child(ren).
    var hasLeapingChildren = meta.containsLeap.onlyChildren(expr);
    // If ignoreResult is true, then we must take full responsibility for
    // emitting the expression with all its side effects, and we should not
    // return a result.
    switch(expr.type){
        case "MemberExpression":
            return finish(t.memberExpression(self.explodeExpression(path.get("object")), expr.computed ? self.explodeViaTempVar(null, path.get("property"), hasLeapingChildren) : expr.property, expr.computed));
        case "CallExpression":
            var calleePath = path.get("callee");
            var argsPath = path.get("arguments");
            var newCallee;
            var newArgs;
            var hasLeapingArgs = argsPath.some(function(argPath) {
                return meta.containsLeap(argPath.node);
            });
            var injectFirstArg = null;
            if (t.isMemberExpression(calleePath.node)) {
                if (hasLeapingArgs) {
                    // If the arguments of the CallExpression contained any yield
                    // expressions, then we need to be sure to evaluate the callee
                    // before evaluating the arguments, but if the callee was a member
                    // expression, then we must be careful that the object of the
                    // member expression still gets bound to `this` for the call.
                    var newObject = self.explodeViaTempVar(// Assign the exploded callee.object expression to a temporary
                    // variable so that we can use it twice without reevaluating it.
                    self.makeTempVar(), calleePath.get("object"), hasLeapingChildren);
                    var newProperty = calleePath.node.computed ? self.explodeViaTempVar(null, calleePath.get("property"), hasLeapingChildren) : calleePath.node.property;
                    injectFirstArg = newObject;
                    newCallee = t.memberExpression(t.memberExpression(t.cloneDeep(newObject), newProperty, calleePath.node.computed), t.identifier("call"), false);
                } else {
                    newCallee = self.explodeExpression(calleePath);
                }
            } else {
                newCallee = self.explodeViaTempVar(null, calleePath, hasLeapingChildren);
                if (t.isMemberExpression(newCallee)) {
                    // If the callee was not previously a MemberExpression, then the
                    // CallExpression was "unqualified," meaning its `this` object
                    // should be the global object. If the exploded expression has
                    // become a MemberExpression (e.g. a context property, probably a
                    // temporary variable), then we need to force it to be unqualified
                    // by using the (0, object.property)(...) trick; otherwise, it
                    // will receive the object of the MemberExpression as its `this`
                    // object.
                    newCallee = t.sequenceExpression([
                        t.numericLiteral(0),
                        t.cloneDeep(newCallee)
                    ]);
                }
            }
            if (hasLeapingArgs) {
                newArgs = argsPath.map(function(argPath) {
                    return self.explodeViaTempVar(null, argPath, hasLeapingChildren);
                });
                if (injectFirstArg) newArgs.unshift(injectFirstArg);
                newArgs = newArgs.map(function(arg) {
                    return t.cloneDeep(arg);
                });
            } else {
                newArgs = path.node.arguments;
            }
            return finish(t.callExpression(newCallee, newArgs));
        case "NewExpression":
            return finish(t.newExpression(self.explodeViaTempVar(null, path.get("callee"), hasLeapingChildren), path.get("arguments").map(function(argPath) {
                return self.explodeViaTempVar(null, argPath, hasLeapingChildren);
            })));
        case "ObjectExpression":
            return finish(t.objectExpression(path.get("properties").map(function(propPath) {
                if (propPath.isObjectProperty()) {
                    return t.objectProperty(propPath.node.key, self.explodeViaTempVar(null, propPath.get("value"), hasLeapingChildren), propPath.node.computed);
                } else {
                    return propPath.node;
                }
            })));
        case "ArrayExpression":
            return finish(t.arrayExpression(path.get("elements").map(function(elemPath) {
                if (!elemPath.node) {
                    return null;
                }
                if (elemPath.isSpreadElement()) {
                    return t.spreadElement(self.explodeViaTempVar(null, elemPath.get("argument"), hasLeapingChildren));
                } else {
                    return self.explodeViaTempVar(null, elemPath, hasLeapingChildren);
                }
            })));
        case "SequenceExpression":
            var lastIndex = expr.expressions.length - 1;
            path.get("expressions").forEach(function(exprPath) {
                if (exprPath.key === lastIndex) {
                    result = self.explodeExpression(exprPath, ignoreResult);
                } else {
                    self.explodeExpression(exprPath, true);
                }
            });
            return result;
        case "LogicalExpression":
            after = this.loc();
            if (!ignoreResult) {
                result = self.makeTempVar();
            }
            var left = self.explodeViaTempVar(result, path.get("left"), hasLeapingChildren);
            if (expr.operator === "&&") {
                self.jumpIfNot(left, after);
            } else {
                _assert["default"].strictEqual(expr.operator, "||");
                self.jumpIf(left, after);
            }
            self.explodeViaTempVar(result, path.get("right"), hasLeapingChildren, ignoreResult);
            self.mark(after);
            return result;
        case "ConditionalExpression":
            var elseLoc = this.loc();
            after = this.loc();
            var test = self.explodeExpression(path.get("test"));
            self.jumpIfNot(test, elseLoc);
            if (!ignoreResult) {
                result = self.makeTempVar();
            }
            self.explodeViaTempVar(result, path.get("consequent"), hasLeapingChildren, ignoreResult);
            self.jump(after);
            self.mark(elseLoc);
            self.explodeViaTempVar(result, path.get("alternate"), hasLeapingChildren, ignoreResult);
            self.mark(after);
            return result;
        case "UnaryExpression":
            return finish(t.unaryExpression(expr.operator, // Can't (and don't need to) break up the syntax of the argument.
            // Think about delete a[b].
            self.explodeExpression(path.get("argument")), !!expr.prefix));
        case "BinaryExpression":
            return finish(t.binaryExpression(expr.operator, self.explodeViaTempVar(null, path.get("left"), hasLeapingChildren), self.explodeViaTempVar(null, path.get("right"), hasLeapingChildren)));
        case "AssignmentExpression":
            if (expr.operator === "=") {
                // If this is a simple assignment, the left hand side does not need
                // to be read before the right hand side is evaluated, so we can
                // avoid the more complicated logic below.
                return finish(t.assignmentExpression(expr.operator, self.explodeExpression(path.get("left")), self.explodeExpression(path.get("right"))));
            }
            var lhs = self.explodeExpression(path.get("left"));
            var temp = self.emitAssign(self.makeTempVar(), lhs);
            // For example,
            //
            //   x += yield y
            //
            // becomes
            //
            //   context.t0 = x
            //   x = context.t0 += yield y
            //
            // so that the left-hand side expression is read before the yield.
            // Fixes https://github.com/facebook/regenerator/issues/345.
            return finish(t.assignmentExpression("=", t.cloneDeep(lhs), t.assignmentExpression(expr.operator, t.cloneDeep(temp), self.explodeExpression(path.get("right")))));
        case "UpdateExpression":
            return finish(t.updateExpression(expr.operator, self.explodeExpression(path.get("argument")), expr.prefix));
        case "YieldExpression":
            after = this.loc();
            var arg = expr.argument && self.explodeExpression(path.get("argument"));
            if (arg && expr.delegate) {
                var _result = self.makeTempVar();
                var _ret = t.returnStatement(t.callExpression(self.contextProperty("delegateYield"), [
                    arg,
                    t.stringLiteral(_result.property.name),
                    after
                ]));
                _ret.loc = expr.loc;
                self.emit(_ret);
                self.mark(after);
                return _result;
            }
            self.emitAssign(self.contextProperty("next"), after);
            var ret = t.returnStatement(t.cloneDeep(arg) || null);
            // Preserve the `yield` location so that source mappings for the statements
            // link back to the yield properly.
            ret.loc = expr.loc;
            self.emit(ret);
            self.mark(after);
            return self.contextProperty("sent");
        case "ClassExpression":
            return finish(self.explodeClass(path));
        default:
            throw new Error("unknown Expression of type " + JSON.stringify(expr.type));
    }
};
Ep.explodeClass = function(path) {
    var explodingChildren = [];
    if (path.node.superClass) {
        explodingChildren.push(path.get("superClass"));
    }
    path.get("body.body").forEach(function(member) {
        if (member.node.computed) {
            explodingChildren.push(member.get("key"));
        }
    });
    var hasLeapingChildren = explodingChildren.some(function(child) {
        return meta.containsLeap(child);
    });
    for(var i = 0; i < explodingChildren.length; i++){
        var child = explodingChildren[i];
        var isLast = i === explodingChildren.length - 1;
        if (isLast) {
            child.replaceWith(this.explodeExpression(child));
        } else {
            child.replaceWith(this.explodeViaTempVar(null, child, hasLeapingChildren));
        }
    }
    return path.node;
};
}}),
"[project]/node_modules/regenerator-transform/lib/replaceShorthandObjectMethod.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports["default"] = replaceShorthandObjectMethod;
var util = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/regenerator-transform/lib/util.js [app-client] (ecmascript)"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            "default": obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj["default"] = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ // this function converts a shorthand object generator method into a normal
// (non-shorthand) object property which is a generator function expression. for
// example, this:
//
//  var foo = {
//    *bar(baz) { return 5; }
//  }
//
// should be replaced with:
//
//  var foo = {
//    bar: function*(baz) { return 5; }
//  }
//
// to do this, it clones the parameter array and the body of the object generator
// method into a new FunctionExpression.
//
// this method can be passed any Function AST node path, and it will return
// either:
//   a) the path that was passed in (iff the path did not need to be replaced) or
//   b) the path of the new FunctionExpression that was created as a replacement
//     (iff the path did need to be replaced)
//
// In either case, though, the caller can count on the fact that the return value
// is a Function AST node path.
//
// If this function is called with an AST node path that is not a Function (or with an
// argument that isn't an AST node path), it will throw an error.
function replaceShorthandObjectMethod(path) {
    var t = util.getTypes();
    if (!path.node || !t.isFunction(path.node)) {
        throw new Error("replaceShorthandObjectMethod can only be called on Function AST node paths.");
    }
    // this function only replaces shorthand object methods (called ObjectMethod
    // in Babel-speak).
    if (!t.isObjectMethod(path.node)) {
        return path;
    }
    // this function only replaces generators.
    if (!path.node.generator) {
        return path;
    }
    var parameters = path.node.params.map(function(param) {
        return t.cloneDeep(param);
    });
    var functionExpression = t.functionExpression(null, // id
    parameters, // params
    t.cloneDeep(path.node.body), // body
    path.node.generator, path.node.async);
    util.replaceWithOrRemove(path, t.objectProperty(t.cloneDeep(path.node.key), // key
    functionExpression, //value
    path.node.computed, // computed
    false // shorthand
    ));
    // path now refers to the ObjectProperty AST node path, but we want to return a
    // Function AST node path for the function expression we created. we know that
    // the FunctionExpression we just created is the value of the ObjectProperty,
    // so return the "value" path off of this path.
    return path.get("value");
}
}}),
"[project]/node_modules/regenerator-transform/lib/visit.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-client] (ecmascript)");
var _assert = _interopRequireDefault(__turbopack_require__("[project]/node_modules/next/dist/compiled/assert/assert.js [app-client] (ecmascript)"));
var _hoist = __turbopack_require__("[project]/node_modules/regenerator-transform/lib/hoist.js [app-client] (ecmascript)");
var _emit = __turbopack_require__("[project]/node_modules/regenerator-transform/lib/emit.js [app-client] (ecmascript)");
var _replaceShorthandObjectMethod = _interopRequireDefault(__turbopack_require__("[project]/node_modules/regenerator-transform/lib/replaceShorthandObjectMethod.js [app-client] (ecmascript)"));
var util = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/regenerator-transform/lib/util.js [app-client] (ecmascript)"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            "default": obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj["default"] = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
exports.getVisitor = function(_ref) {
    var t = _ref.types;
    return {
        Method: function Method(path, state) {
            var node = path.node;
            if (!shouldRegenerate(node, state)) return;
            var container = t.functionExpression(null, [], t.cloneNode(node.body, false), node.generator, node.async);
            path.get("body").set("body", [
                t.returnStatement(t.callExpression(container, []))
            ]);
            // Regardless of whether or not the wrapped function is a an async method
            // or generator the outer function should not be
            node.async = false;
            node.generator = false;
            // Unwrap the wrapper IIFE's environment so super and this and such still work.
            path.get("body.body.0.argument.callee").unwrapFunctionEnvironment();
        },
        Function: {
            exit: util.wrapWithTypes(t, function(path, state) {
                var node = path.node;
                if (!shouldRegenerate(node, state)) return;
                // if this is an ObjectMethod, we need to convert it to an ObjectProperty
                path = (0, _replaceShorthandObjectMethod["default"])(path);
                node = path.node;
                var contextId = path.scope.generateUidIdentifier("context");
                var argsId = path.scope.generateUidIdentifier("args");
                path.ensureBlock();
                var bodyBlockPath = path.get("body");
                if (node.async) {
                    bodyBlockPath.traverse(awaitVisitor);
                }
                bodyBlockPath.traverse(functionSentVisitor, {
                    context: contextId
                });
                var outerBody = [];
                var innerBody = [];
                bodyBlockPath.get("body").forEach(function(childPath) {
                    var node = childPath.node;
                    if (t.isExpressionStatement(node) && t.isStringLiteral(node.expression)) {
                        // Babylon represents directives like "use strict" as elements
                        // of a bodyBlockPath.node.directives array, but they could just
                        // as easily be represented (by other parsers) as traditional
                        // string-literal-valued expression statements, so we need to
                        // handle that here. (#248)
                        outerBody.push(node);
                    } else if (node && node._blockHoist != null) {
                        outerBody.push(node);
                    } else {
                        innerBody.push(node);
                    }
                });
                if (outerBody.length > 0) {
                    // Only replace the inner body if we actually hoisted any statements
                    // to the outer body.
                    bodyBlockPath.node.body = innerBody;
                }
                var outerFnExpr = getOuterFnExpr(path);
                // Note that getOuterFnExpr has the side-effect of ensuring that the
                // function has a name (so node.id will always be an Identifier), even
                // if a temporary name has to be synthesized.
                t.assertIdentifier(node.id);
                var innerFnId = t.identifier(node.id.name + "$");
                // Turn all declarations into vars, and replace the original
                // declarations with equivalent assignment expressions.
                var vars = (0, _hoist.hoist)(path);
                var context = {
                    usesThis: false,
                    usesArguments: false,
                    getArgsId: function getArgsId() {
                        return t.clone(argsId);
                    }
                };
                path.traverse(argumentsThisVisitor, context);
                if (context.usesArguments) {
                    vars = vars || t.variableDeclaration("var", []);
                    vars.declarations.push(t.variableDeclarator(t.clone(argsId), t.identifier("arguments")));
                }
                var emitter = new _emit.Emitter(contextId);
                emitter.explode(path.get("body"));
                if (vars && vars.declarations.length > 0) {
                    outerBody.push(vars);
                }
                var wrapArgs = [
                    emitter.getContextFunction(innerFnId)
                ];
                var tryLocsList = emitter.getTryLocsList();
                if (node.generator) {
                    wrapArgs.push(outerFnExpr);
                } else if (context.usesThis || tryLocsList || node.async) {
                    // Async functions that are not generators don't care about the
                    // outer function because they don't need it to be marked and don't
                    // inherit from its .prototype.
                    wrapArgs.push(t.nullLiteral());
                }
                if (context.usesThis) {
                    wrapArgs.push(t.thisExpression());
                } else if (tryLocsList || node.async) {
                    wrapArgs.push(t.nullLiteral());
                }
                if (tryLocsList) {
                    wrapArgs.push(tryLocsList);
                } else if (node.async) {
                    wrapArgs.push(t.nullLiteral());
                }
                if (node.async) {
                    // Rename any locally declared "Promise" variable,
                    // to use the global one.
                    var currentScope = path.scope;
                    do {
                        if (currentScope.hasOwnBinding("Promise")) currentScope.rename("Promise");
                    }while (currentScope = currentScope.parent)
                    wrapArgs.push(t.identifier("Promise"));
                }
                var wrapCall = t.callExpression(util.runtimeProperty(node.async ? "async" : "wrap"), wrapArgs);
                outerBody.push(t.returnStatement(wrapCall));
                node.body = t.blockStatement(outerBody);
                // We injected a few new variable declarations (for every hoisted var),
                // so we need to add them to the scope.
                path.get("body.body").forEach(function(p) {
                    return p.scope.registerDeclaration(p);
                });
                var oldDirectives = bodyBlockPath.node.directives;
                if (oldDirectives) {
                    // Babylon represents directives like "use strict" as elements of
                    // a bodyBlockPath.node.directives array. (#248)
                    node.body.directives = oldDirectives;
                }
                var wasGeneratorFunction = node.generator;
                if (wasGeneratorFunction) {
                    node.generator = false;
                }
                if (node.async) {
                    node.async = false;
                }
                if (wasGeneratorFunction && t.isExpression(node)) {
                    util.replaceWithOrRemove(path, t.callExpression(util.runtimeProperty("mark"), [
                        node
                    ]));
                    path.addComment("leading", "#__PURE__");
                }
                var insertedLocs = emitter.getInsertedLocs();
                path.traverse({
                    NumericLiteral: function NumericLiteral(path) {
                        if (!insertedLocs.has(path.node)) {
                            return;
                        }
                        path.replaceWith(t.numericLiteral(path.node.value));
                    }
                });
                // Generators are processed in 'exit' handlers so that regenerator only has to run on
                // an ES5 AST, but that means traversal will not pick up newly inserted references
                // to things like 'regeneratorRuntime'. To avoid this, we explicitly requeue.
                path.requeue();
            })
        }
    };
};
// Check if a node should be transformed by regenerator
function shouldRegenerate(node, state) {
    if (node.generator) {
        if (node.async) {
            // Async generator
            return state.opts.asyncGenerators !== false;
        } else {
            // Plain generator
            return state.opts.generators !== false;
        }
    } else if (node.async) {
        // Async function
        return state.opts.async !== false;
    } else {
        // Not a generator or async function.
        return false;
    }
}
// Given a NodePath for a Function, return an Expression node that can be
// used to refer reliably to the function object from inside the function.
// This expression is essentially a replacement for arguments.callee, with
// the key advantage that it works in strict mode.
function getOuterFnExpr(funPath) {
    var t = util.getTypes();
    var node = funPath.node;
    t.assertFunction(node);
    if (!node.id) {
        // Default-exported function declarations, and function expressions may not
        // have a name to reference, so we explicitly add one.
        node.id = funPath.scope.parent.generateUidIdentifier("callee");
    }
    if (node.generator && // Non-generator functions don't need to be marked.
    t.isFunctionDeclaration(node)) {
        // Return the identifier returned by runtime.mark(<node.id>).
        return getMarkedFunctionId(funPath);
    }
    return t.clone(node.id);
}
var markInfo = new WeakMap();
function getMarkInfo(node) {
    if (!markInfo.has(node)) {
        markInfo.set(node, {});
    }
    return markInfo.get(node);
}
function getMarkedFunctionId(funPath) {
    var t = util.getTypes();
    var node = funPath.node;
    t.assertIdentifier(node.id);
    var blockPath = funPath.findParent(function(path) {
        return path.isProgram() || path.isBlockStatement();
    });
    if (!blockPath) {
        return node.id;
    }
    var block = blockPath.node;
    _assert["default"].ok(Array.isArray(block.body));
    var info = getMarkInfo(block);
    if (!info.decl) {
        info.decl = t.variableDeclaration("var", []);
        blockPath.unshiftContainer("body", info.decl);
        info.declPath = blockPath.get("body.0");
    }
    _assert["default"].strictEqual(info.declPath.node, info.decl);
    // Get a new unique identifier for our marked variable.
    var markedId = blockPath.scope.generateUidIdentifier("marked");
    var markCallExp = t.callExpression(util.runtimeProperty("mark"), [
        t.clone(node.id)
    ]);
    var index = info.decl.declarations.push(t.variableDeclarator(markedId, markCallExp)) - 1;
    var markCallExpPath = info.declPath.get("declarations." + index + ".init");
    _assert["default"].strictEqual(markCallExpPath.node, markCallExp);
    markCallExpPath.addComment("leading", "#__PURE__");
    return t.clone(markedId);
}
var argumentsThisVisitor = {
    "FunctionExpression|FunctionDeclaration|Method": function FunctionExpressionFunctionDeclarationMethod(path) {
        path.skip();
    },
    Identifier: function Identifier(path, state) {
        if (path.node.name === "arguments" && util.isReference(path)) {
            util.replaceWithOrRemove(path, state.getArgsId());
            state.usesArguments = true;
        }
    },
    ThisExpression: function ThisExpression(path, state) {
        state.usesThis = true;
    }
};
var functionSentVisitor = {
    MetaProperty: function MetaProperty(path) {
        var node = path.node;
        if (node.meta.name === "function" && node.property.name === "sent") {
            var t = util.getTypes();
            util.replaceWithOrRemove(path, t.memberExpression(t.clone(this.context), t.identifier("_sent")));
        }
    }
};
var awaitVisitor = {
    Function: function Function(path) {
        path.skip(); // Don't descend into nested function scopes.
    },
    AwaitExpression: function AwaitExpression(path) {
        var t = util.getTypes();
        // Convert await expressions to yield expressions.
        var argument = path.node.argument;
        // Transforming `await x` to `yield regeneratorRuntime.awrap(x)`
        // causes the argument to be wrapped in such a way that the runtime
        // can distinguish between awaited and merely yielded values.
        util.replaceWithOrRemove(path, t.yieldExpression(t.callExpression(util.runtimeProperty("awrap"), [
            argument
        ]), false));
    }
};
}}),
"[project]/node_modules/regenerator-transform/lib/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports["default"] = _default;
var _visit = __turbopack_require__("[project]/node_modules/regenerator-transform/lib/visit.js [app-client] (ecmascript)");
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ function _default(context) {
    var plugin = {
        visitor: (0, _visit.getVisitor)(context)
    };
    // Some presets manually call child presets, but fail to pass along the
    // context object. Out of an abundance of caution, we verify that it
    // exists first to avoid causing unnecessary breaking changes.
    var version = context && context.version;
    // The "name" property is not allowed in older versions of Babel (6.x)
    // and will cause the plugin validator to throw an exception.
    if (version && parseInt(version, 10) >= 7) {
        plugin.name = "regenerator-transform";
    }
    return plugin;
}
}}),
"[project]/node_modules/babel-plugin-polyfill-corejs2/lib/built-in-definitions.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports.StaticProperties = exports.InstanceProperties = exports.CommonIterators = exports.BuiltIns = void 0;
var _corejs2BuiltIns = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@babel/compat-data/corejs2-built-ins.js [app-client] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const define = (name, pure, global = [], meta)=>{
    return {
        name,
        pure,
        global,
        meta
    };
};
const pureAndGlobal = (pure, global, minRuntimeVersion = null)=>define(global[0], pure, global, {
        minRuntimeVersion
    });
const globalOnly = (global)=>define(global[0], null, global);
const pureOnly = (pure, name)=>define(name, pure, []);
const ArrayNatureIterators = [
    "es6.object.to-string",
    "es6.array.iterator",
    "web.dom.iterable"
];
const CommonIterators = [
    "es6.string.iterator",
    ...ArrayNatureIterators
];
exports.CommonIterators = CommonIterators;
const PromiseDependencies = [
    "es6.object.to-string",
    "es6.promise"
];
const BuiltIns = {
    DataView: globalOnly([
        "es6.typed.data-view"
    ]),
    Float32Array: globalOnly([
        "es6.typed.float32-array"
    ]),
    Float64Array: globalOnly([
        "es6.typed.float64-array"
    ]),
    Int8Array: globalOnly([
        "es6.typed.int8-array"
    ]),
    Int16Array: globalOnly([
        "es6.typed.int16-array"
    ]),
    Int32Array: globalOnly([
        "es6.typed.int32-array"
    ]),
    Map: pureAndGlobal("map", [
        "es6.map",
        ...CommonIterators
    ]),
    Number: globalOnly([
        "es6.number.constructor"
    ]),
    Promise: pureAndGlobal("promise", PromiseDependencies),
    RegExp: globalOnly([
        "es6.regexp.constructor"
    ]),
    Set: pureAndGlobal("set", [
        "es6.set",
        ...CommonIterators
    ]),
    Symbol: pureAndGlobal("symbol/index", [
        "es6.symbol"
    ]),
    Uint8Array: globalOnly([
        "es6.typed.uint8-array"
    ]),
    Uint8ClampedArray: globalOnly([
        "es6.typed.uint8-clamped-array"
    ]),
    Uint16Array: globalOnly([
        "es6.typed.uint16-array"
    ]),
    Uint32Array: globalOnly([
        "es6.typed.uint32-array"
    ]),
    WeakMap: pureAndGlobal("weak-map", [
        "es6.weak-map",
        ...CommonIterators
    ]),
    WeakSet: pureAndGlobal("weak-set", [
        "es6.weak-set",
        ...CommonIterators
    ]),
    setImmediate: pureOnly("set-immediate", "web.immediate"),
    clearImmediate: pureOnly("clear-immediate", "web.immediate"),
    parseFloat: pureOnly("parse-float", "es6.parse-float"),
    parseInt: pureOnly("parse-int", "es6.parse-int")
};
exports.BuiltIns = BuiltIns;
const InstanceProperties = {
    __defineGetter__: globalOnly([
        "es7.object.define-getter"
    ]),
    __defineSetter__: globalOnly([
        "es7.object.define-setter"
    ]),
    __lookupGetter__: globalOnly([
        "es7.object.lookup-getter"
    ]),
    __lookupSetter__: globalOnly([
        "es7.object.lookup-setter"
    ]),
    anchor: globalOnly([
        "es6.string.anchor"
    ]),
    big: globalOnly([
        "es6.string.big"
    ]),
    bind: globalOnly([
        "es6.function.bind"
    ]),
    blink: globalOnly([
        "es6.string.blink"
    ]),
    bold: globalOnly([
        "es6.string.bold"
    ]),
    codePointAt: globalOnly([
        "es6.string.code-point-at"
    ]),
    copyWithin: globalOnly([
        "es6.array.copy-within"
    ]),
    endsWith: globalOnly([
        "es6.string.ends-with"
    ]),
    entries: globalOnly(ArrayNatureIterators),
    every: globalOnly([
        "es6.array.every"
    ]),
    fill: globalOnly([
        "es6.array.fill"
    ]),
    filter: globalOnly([
        "es6.array.filter"
    ]),
    finally: globalOnly([
        "es7.promise.finally",
        ...PromiseDependencies
    ]),
    find: globalOnly([
        "es6.array.find"
    ]),
    findIndex: globalOnly([
        "es6.array.find-index"
    ]),
    fixed: globalOnly([
        "es6.string.fixed"
    ]),
    flags: globalOnly([
        "es6.regexp.flags"
    ]),
    flatMap: globalOnly([
        "es7.array.flat-map"
    ]),
    fontcolor: globalOnly([
        "es6.string.fontcolor"
    ]),
    fontsize: globalOnly([
        "es6.string.fontsize"
    ]),
    forEach: globalOnly([
        "es6.array.for-each"
    ]),
    includes: globalOnly([
        "es6.string.includes",
        "es7.array.includes"
    ]),
    indexOf: globalOnly([
        "es6.array.index-of"
    ]),
    italics: globalOnly([
        "es6.string.italics"
    ]),
    keys: globalOnly(ArrayNatureIterators),
    lastIndexOf: globalOnly([
        "es6.array.last-index-of"
    ]),
    link: globalOnly([
        "es6.string.link"
    ]),
    map: globalOnly([
        "es6.array.map"
    ]),
    match: globalOnly([
        "es6.regexp.match"
    ]),
    name: globalOnly([
        "es6.function.name"
    ]),
    padStart: globalOnly([
        "es7.string.pad-start"
    ]),
    padEnd: globalOnly([
        "es7.string.pad-end"
    ]),
    reduce: globalOnly([
        "es6.array.reduce"
    ]),
    reduceRight: globalOnly([
        "es6.array.reduce-right"
    ]),
    repeat: globalOnly([
        "es6.string.repeat"
    ]),
    replace: globalOnly([
        "es6.regexp.replace"
    ]),
    search: globalOnly([
        "es6.regexp.search"
    ]),
    small: globalOnly([
        "es6.string.small"
    ]),
    some: globalOnly([
        "es6.array.some"
    ]),
    sort: globalOnly([
        "es6.array.sort"
    ]),
    split: globalOnly([
        "es6.regexp.split"
    ]),
    startsWith: globalOnly([
        "es6.string.starts-with"
    ]),
    strike: globalOnly([
        "es6.string.strike"
    ]),
    sub: globalOnly([
        "es6.string.sub"
    ]),
    sup: globalOnly([
        "es6.string.sup"
    ]),
    toISOString: globalOnly([
        "es6.date.to-iso-string"
    ]),
    toJSON: globalOnly([
        "es6.date.to-json"
    ]),
    toString: globalOnly([
        "es6.object.to-string",
        "es6.date.to-string",
        "es6.regexp.to-string"
    ]),
    trim: globalOnly([
        "es6.string.trim"
    ]),
    trimEnd: globalOnly([
        "es7.string.trim-right"
    ]),
    trimLeft: globalOnly([
        "es7.string.trim-left"
    ]),
    trimRight: globalOnly([
        "es7.string.trim-right"
    ]),
    trimStart: globalOnly([
        "es7.string.trim-left"
    ]),
    values: globalOnly(ArrayNatureIterators)
};
// This isn't present in older @babel/compat-data versions
exports.InstanceProperties = InstanceProperties;
if ("es6.array.slice" in _corejs2BuiltIns.default) {
    InstanceProperties.slice = globalOnly([
        "es6.array.slice"
    ]);
}
const StaticProperties = {
    Array: {
        from: pureAndGlobal("array/from", [
            "es6.symbol",
            "es6.array.from",
            ...CommonIterators
        ]),
        isArray: pureAndGlobal("array/is-array", [
            "es6.array.is-array"
        ]),
        of: pureAndGlobal("array/of", [
            "es6.array.of"
        ])
    },
    Date: {
        now: pureAndGlobal("date/now", [
            "es6.date.now"
        ])
    },
    JSON: {
        stringify: pureOnly("json/stringify", "es6.symbol")
    },
    Math: {
        // 'Math' was not included in the 7.0.0
        // release of '@babel/runtime'. See issue https://github.com/babel/babel/pull/8616.
        acosh: pureAndGlobal("math/acosh", [
            "es6.math.acosh"
        ], "7.0.1"),
        asinh: pureAndGlobal("math/asinh", [
            "es6.math.asinh"
        ], "7.0.1"),
        atanh: pureAndGlobal("math/atanh", [
            "es6.math.atanh"
        ], "7.0.1"),
        cbrt: pureAndGlobal("math/cbrt", [
            "es6.math.cbrt"
        ], "7.0.1"),
        clz32: pureAndGlobal("math/clz32", [
            "es6.math.clz32"
        ], "7.0.1"),
        cosh: pureAndGlobal("math/cosh", [
            "es6.math.cosh"
        ], "7.0.1"),
        expm1: pureAndGlobal("math/expm1", [
            "es6.math.expm1"
        ], "7.0.1"),
        fround: pureAndGlobal("math/fround", [
            "es6.math.fround"
        ], "7.0.1"),
        hypot: pureAndGlobal("math/hypot", [
            "es6.math.hypot"
        ], "7.0.1"),
        imul: pureAndGlobal("math/imul", [
            "es6.math.imul"
        ], "7.0.1"),
        log1p: pureAndGlobal("math/log1p", [
            "es6.math.log1p"
        ], "7.0.1"),
        log10: pureAndGlobal("math/log10", [
            "es6.math.log10"
        ], "7.0.1"),
        log2: pureAndGlobal("math/log2", [
            "es6.math.log2"
        ], "7.0.1"),
        sign: pureAndGlobal("math/sign", [
            "es6.math.sign"
        ], "7.0.1"),
        sinh: pureAndGlobal("math/sinh", [
            "es6.math.sinh"
        ], "7.0.1"),
        tanh: pureAndGlobal("math/tanh", [
            "es6.math.tanh"
        ], "7.0.1"),
        trunc: pureAndGlobal("math/trunc", [
            "es6.math.trunc"
        ], "7.0.1")
    },
    Number: {
        EPSILON: pureAndGlobal("number/epsilon", [
            "es6.number.epsilon"
        ]),
        MIN_SAFE_INTEGER: pureAndGlobal("number/min-safe-integer", [
            "es6.number.min-safe-integer"
        ]),
        MAX_SAFE_INTEGER: pureAndGlobal("number/max-safe-integer", [
            "es6.number.max-safe-integer"
        ]),
        isFinite: pureAndGlobal("number/is-finite", [
            "es6.number.is-finite"
        ]),
        isInteger: pureAndGlobal("number/is-integer", [
            "es6.number.is-integer"
        ]),
        isSafeInteger: pureAndGlobal("number/is-safe-integer", [
            "es6.number.is-safe-integer"
        ]),
        isNaN: pureAndGlobal("number/is-nan", [
            "es6.number.is-nan"
        ]),
        parseFloat: pureAndGlobal("number/parse-float", [
            "es6.number.parse-float"
        ]),
        parseInt: pureAndGlobal("number/parse-int", [
            "es6.number.parse-int"
        ])
    },
    Object: {
        assign: pureAndGlobal("object/assign", [
            "es6.object.assign"
        ]),
        create: pureAndGlobal("object/create", [
            "es6.object.create"
        ]),
        defineProperties: pureAndGlobal("object/define-properties", [
            "es6.object.define-properties"
        ]),
        defineProperty: pureAndGlobal("object/define-property", [
            "es6.object.define-property"
        ]),
        entries: pureAndGlobal("object/entries", [
            "es7.object.entries"
        ]),
        freeze: pureAndGlobal("object/freeze", [
            "es6.object.freeze"
        ]),
        getOwnPropertyDescriptor: pureAndGlobal("object/get-own-property-descriptor", [
            "es6.object.get-own-property-descriptor"
        ]),
        getOwnPropertyDescriptors: pureAndGlobal("object/get-own-property-descriptors", [
            "es7.object.get-own-property-descriptors"
        ]),
        getOwnPropertyNames: pureAndGlobal("object/get-own-property-names", [
            "es6.object.get-own-property-names"
        ]),
        getOwnPropertySymbols: pureAndGlobal("object/get-own-property-symbols", [
            "es6.symbol"
        ]),
        getPrototypeOf: pureAndGlobal("object/get-prototype-of", [
            "es6.object.get-prototype-of"
        ]),
        is: pureAndGlobal("object/is", [
            "es6.object.is"
        ]),
        isExtensible: pureAndGlobal("object/is-extensible", [
            "es6.object.is-extensible"
        ]),
        isFrozen: pureAndGlobal("object/is-frozen", [
            "es6.object.is-frozen"
        ]),
        isSealed: pureAndGlobal("object/is-sealed", [
            "es6.object.is-sealed"
        ]),
        keys: pureAndGlobal("object/keys", [
            "es6.object.keys"
        ]),
        preventExtensions: pureAndGlobal("object/prevent-extensions", [
            "es6.object.prevent-extensions"
        ]),
        seal: pureAndGlobal("object/seal", [
            "es6.object.seal"
        ]),
        setPrototypeOf: pureAndGlobal("object/set-prototype-of", [
            "es6.object.set-prototype-of"
        ]),
        values: pureAndGlobal("object/values", [
            "es7.object.values"
        ])
    },
    Promise: {
        all: globalOnly(CommonIterators),
        race: globalOnly(CommonIterators)
    },
    Reflect: {
        apply: pureAndGlobal("reflect/apply", [
            "es6.reflect.apply"
        ]),
        construct: pureAndGlobal("reflect/construct", [
            "es6.reflect.construct"
        ]),
        defineProperty: pureAndGlobal("reflect/define-property", [
            "es6.reflect.define-property"
        ]),
        deleteProperty: pureAndGlobal("reflect/delete-property", [
            "es6.reflect.delete-property"
        ]),
        get: pureAndGlobal("reflect/get", [
            "es6.reflect.get"
        ]),
        getOwnPropertyDescriptor: pureAndGlobal("reflect/get-own-property-descriptor", [
            "es6.reflect.get-own-property-descriptor"
        ]),
        getPrototypeOf: pureAndGlobal("reflect/get-prototype-of", [
            "es6.reflect.get-prototype-of"
        ]),
        has: pureAndGlobal("reflect/has", [
            "es6.reflect.has"
        ]),
        isExtensible: pureAndGlobal("reflect/is-extensible", [
            "es6.reflect.is-extensible"
        ]),
        ownKeys: pureAndGlobal("reflect/own-keys", [
            "es6.reflect.own-keys"
        ]),
        preventExtensions: pureAndGlobal("reflect/prevent-extensions", [
            "es6.reflect.prevent-extensions"
        ]),
        set: pureAndGlobal("reflect/set", [
            "es6.reflect.set"
        ]),
        setPrototypeOf: pureAndGlobal("reflect/set-prototype-of", [
            "es6.reflect.set-prototype-of"
        ])
    },
    String: {
        at: pureOnly("string/at", "es7.string.at"),
        fromCodePoint: pureAndGlobal("string/from-code-point", [
            "es6.string.from-code-point"
        ]),
        raw: pureAndGlobal("string/raw", [
            "es6.string.raw"
        ])
    },
    Symbol: {
        // FIXME: Pure disabled to work around zloirock/core-js#262.
        asyncIterator: globalOnly([
            "es6.symbol",
            "es7.symbol.async-iterator"
        ]),
        for: pureOnly("symbol/for", "es6.symbol"),
        hasInstance: pureOnly("symbol/has-instance", "es6.symbol"),
        isConcatSpreadable: pureOnly("symbol/is-concat-spreadable", "es6.symbol"),
        iterator: define("es6.symbol", "symbol/iterator", CommonIterators),
        keyFor: pureOnly("symbol/key-for", "es6.symbol"),
        match: pureAndGlobal("symbol/match", [
            "es6.regexp.match"
        ]),
        replace: pureOnly("symbol/replace", "es6.symbol"),
        search: pureOnly("symbol/search", "es6.symbol"),
        species: pureOnly("symbol/species", "es6.symbol"),
        split: pureOnly("symbol/split", "es6.symbol"),
        toPrimitive: pureOnly("symbol/to-primitive", "es6.symbol"),
        toStringTag: pureOnly("symbol/to-string-tag", "es6.symbol"),
        unscopables: pureOnly("symbol/unscopables", "es6.symbol")
    }
};
exports.StaticProperties = StaticProperties;
}}),
"[project]/node_modules/babel-plugin-polyfill-corejs2/lib/add-platform-specific-polyfills.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports.default = _default;
function _extends() {
    _extends = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : ("TURBOPACK unreachable", undefined);
    return _extends.apply(this, arguments);
}
const webPolyfills = {
    "web.timers": {},
    "web.immediate": {},
    "web.dom.iterable": {}
};
const purePolyfills = {
    "es6.parse-float": {},
    "es6.parse-int": {},
    "es7.string.at": {}
};
function _default(targets, method, polyfills) {
    const targetNames = Object.keys(targets);
    const isAnyTarget = !targetNames.length;
    const isWebTarget = targetNames.some((name)=>name !== "node");
    return _extends({}, polyfills, method === "usage-pure" ? purePolyfills : null, isAnyTarget || isWebTarget ? webPolyfills : null);
}
}}),
"[project]/node_modules/babel-plugin-polyfill-corejs2/lib/helpers.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports.hasMinVersion = hasMinVersion;
var _semver = _interopRequireDefault(__turbopack_require__("[project]/node_modules/babel-plugin-polyfill-corejs2/node_modules/semver/semver.js [app-client] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function hasMinVersion(minVersion, runtimeVersion) {
    // If the range is unavailable, we're running the script during Babel's
    // build process, and we want to assume that all versions are satisfied so
    // that the built output will include all definitions.
    if (!runtimeVersion || !minVersion) return true;
    runtimeVersion = String(runtimeVersion);
    // semver.intersects() has some surprising behavior with comparing ranges
    // with preprelease versions. We add '^' to ensure that we are always
    // comparing ranges with ranges, which sidesteps this logic.
    // For example:
    //
    //   semver.intersects(`<7.0.1`, "7.0.0-beta.0") // false - surprising
    //   semver.intersects(`<7.0.1`, "^7.0.0-beta.0") // true - expected
    //
    // This is because the first falls back to
    //
    //   semver.satisfies("7.0.0-beta.0", `<7.0.1`) // false - surprising
    //
    // and this fails because a prerelease version can only satisfy a range
    // if it is a prerelease within the same major/minor/patch range.
    //
    // Note: If this is found to have issues, please also revist the logic in
    // babel-core's availableHelper() API.
    if (_semver.default.valid(runtimeVersion)) runtimeVersion = `^${runtimeVersion}`;
    return !_semver.default.intersects(`<${minVersion}`, runtimeVersion) && !_semver.default.intersects(`>=8.0.0`, runtimeVersion);
}
}}),
"[project]/node_modules/babel-plugin-polyfill-corejs2/lib/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports.default = void 0;
var _corejs2BuiltIns = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@babel/compat-data/corejs2-built-ins.js [app-client] (ecmascript)"));
var _builtInDefinitions = __turbopack_require__("[project]/node_modules/babel-plugin-polyfill-corejs2/lib/built-in-definitions.js [app-client] (ecmascript)");
var _addPlatformSpecificPolyfills = _interopRequireDefault(__turbopack_require__("[project]/node_modules/babel-plugin-polyfill-corejs2/lib/add-platform-specific-polyfills.js [app-client] (ecmascript)"));
var _helpers = __turbopack_require__("[project]/node_modules/babel-plugin-polyfill-corejs2/lib/helpers.js [app-client] (ecmascript)");
var _helperDefinePolyfillProvider = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@babel/helper-define-polyfill-provider/lib/index.js [app-client] (ecmascript)"));
var _babel = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const { types: t } = _babel.default || _babel;
const BABEL_RUNTIME = "@babel/runtime-corejs2";
const presetEnvCompat = "#__secret_key__@babel/preset-env__compatibility";
const runtimeCompat = "#__secret_key__@babel/runtime__compatibility";
const has = Function.call.bind(Object.hasOwnProperty);
var _default = (0, _helperDefinePolyfillProvider.default)(function(api, { [presetEnvCompat]: { entryInjectRegenerator = false, noRuntimeName = false } = {}, [runtimeCompat]: { useBabelRuntime = false, runtimeVersion = "", ext = ".js" } = {} }) {
    const resolve = api.createMetaResolver({
        global: _builtInDefinitions.BuiltIns,
        static: _builtInDefinitions.StaticProperties,
        instance: _builtInDefinitions.InstanceProperties
    });
    const { debug, shouldInjectPolyfill, method } = api;
    const polyfills = (0, _addPlatformSpecificPolyfills.default)(api.targets, method, _corejs2BuiltIns.default);
    const coreJSBase = useBabelRuntime ? `${BABEL_RUNTIME}/core-js` : method === "usage-pure" ? "core-js/library/fn" : "core-js/modules";
    function inject(name, utils) {
        if (typeof name === "string") {
            // Some polyfills aren't always available, for example
            // web.dom.iterable when targeting node
            if (has(polyfills, name) && shouldInjectPolyfill(name)) {
                debug(name);
                utils.injectGlobalImport(`${coreJSBase}/${name}.js`);
            }
            return;
        }
        name.forEach((name)=>inject(name, utils));
    }
    function maybeInjectPure(desc, hint, utils) {
        let { pure, meta, name } = desc;
        if (!pure || !shouldInjectPolyfill(name)) return;
        if (runtimeVersion && meta && meta.minRuntimeVersion && !(0, _helpers.hasMinVersion)(meta && meta.minRuntimeVersion, runtimeVersion)) {
            return;
        }
        // Unfortunately core-js and @babel/runtime-corejs2 don't have the same
        // directory structure, so we need to special case this.
        if (useBabelRuntime && pure === "symbol/index") pure = "symbol";
        return utils.injectDefaultImport(`${coreJSBase}/${pure}${ext}`, hint);
    }
    return {
        name: "corejs2",
        runtimeName: noRuntimeName ? null : BABEL_RUNTIME,
        polyfills,
        entryGlobal (meta, utils, path) {
            if (meta.kind === "import" && meta.source === "core-js") {
                debug(null);
                inject(Object.keys(polyfills), utils);
                if (entryInjectRegenerator) {
                    utils.injectGlobalImport("regenerator-runtime/runtime.js");
                }
                path.remove();
            }
        },
        usageGlobal (meta, utils) {
            const resolved = resolve(meta);
            if (!resolved) return;
            let deps = resolved.desc.global;
            if (resolved.kind !== "global" && "object" in meta && meta.object && meta.placement === "prototype") {
                const low = meta.object.toLowerCase();
                deps = deps.filter((m)=>m.includes(low));
            }
            inject(deps, utils);
        },
        usagePure (meta, utils, path) {
            if (meta.kind === "in") {
                if (meta.key === "Symbol.iterator") {
                    path.replaceWith(t.callExpression(utils.injectDefaultImport(`${coreJSBase}/is-iterable${ext}`, "isIterable"), [
                        path.node.right
                    ] // meta.kind === "in" narrows this
                    ));
                }
                return;
            }
            if (path.parentPath.isUnaryExpression({
                operator: "delete"
            })) return;
            if (meta.kind === "property") {
                // We can't compile destructuring.
                if (!path.isMemberExpression()) return;
                if (!path.isReferenced()) return;
                if (meta.key === "Symbol.iterator" && shouldInjectPolyfill("es6.symbol") && path.parentPath.isCallExpression({
                    callee: path.node
                }) && path.parentPath.node.arguments.length === 0) {
                    path.parentPath.replaceWith(t.callExpression(utils.injectDefaultImport(`${coreJSBase}/get-iterator${ext}`, "getIterator"), [
                        path.node.object
                    ]));
                    path.skip();
                    return;
                }
            }
            const resolved = resolve(meta);
            if (!resolved) return;
            const id = maybeInjectPure(resolved.desc, resolved.name, utils);
            if (id) path.replaceWith(id);
        },
        visitor: method === "usage-global" && {
            // yield*
            YieldExpression (path) {
                if (path.node.delegate) {
                    inject("web.dom.iterable", api.getUtils(path));
                }
            },
            // for-of, [a, b] = c
            "ForOfStatement|ArrayPattern" (path) {
                _builtInDefinitions.CommonIterators.forEach((name)=>inject(name, api.getUtils(path)));
            }
        }
    };
});
exports.default = _default;
}}),
"[project]/node_modules/babel-plugin-polyfill-regenerator/lib/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports.default = void 0;
var _helperDefinePolyfillProvider = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@babel/helper-define-polyfill-provider/lib/index.js [app-client] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const runtimeCompat = "#__secret_key__@babel/runtime__compatibility";
var _default = (0, _helperDefinePolyfillProvider.default)(({ debug, targets, babel }, options)=>{
    if (!shallowEqual(targets, babel.targets())) {
        throw new Error("This plugin does not use the targets option. Only preset-env's targets" + " or top-level targets need to be configured for this plugin to work." + " See https://github.com/babel/babel-polyfills/issues/36 for more" + " details.");
    }
    const { [runtimeCompat]: { moduleName = null, useBabelRuntime = false } = {} } = options;
    return {
        name: "regenerator",
        polyfills: [
            "regenerator-runtime"
        ],
        usageGlobal (meta, utils) {
            if (isRegenerator(meta)) {
                debug("regenerator-runtime");
                utils.injectGlobalImport("regenerator-runtime/runtime.js");
            }
        },
        usagePure (meta, utils, path) {
            if (isRegenerator(meta)) {
                let pureName = "regenerator-runtime";
                if (useBabelRuntime) {
                    var _ref;
                    const runtimeName = (_ref = moduleName != null ? moduleName : path.hub.file.get("runtimeHelpersModuleName")) != null ? _ref : "@babel/runtime";
                    pureName = `${runtimeName}/regenerator`;
                }
                path.replaceWith(utils.injectDefaultImport(pureName, "regenerator-runtime"));
            }
        }
    };
});
exports.default = _default;
const isRegenerator = (meta)=>meta.kind === "global" && meta.name === "regeneratorRuntime";
function shallowEqual(obj1, obj2) {
    return JSON.stringify(obj1) === JSON.stringify(obj2);
}
}}),
"[project]/node_modules/babel-plugin-polyfill-corejs3/core-js-compat/data.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = __turbopack_require__("[project]/node_modules/core-js-compat/data.json (json)");
}}),
"[project]/node_modules/babel-plugin-polyfill-corejs3/lib/shipped-proposals.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports.default = void 0;
// This file is automatically generated by scripts/build-corejs3-shipped-proposals.mjs
var _default = new Set([
    "esnext.suppressed-error.constructor",
    "esnext.array.from-async",
    "esnext.array.group",
    "esnext.array.group-to-map",
    "esnext.data-view.get-float16",
    "esnext.data-view.set-float16",
    "esnext.iterator.constructor",
    "esnext.iterator.drop",
    "esnext.iterator.every",
    "esnext.iterator.filter",
    "esnext.iterator.find",
    "esnext.iterator.flat-map",
    "esnext.iterator.for-each",
    "esnext.iterator.from",
    "esnext.iterator.map",
    "esnext.iterator.reduce",
    "esnext.iterator.some",
    "esnext.iterator.take",
    "esnext.iterator.to-array",
    "esnext.json.is-raw-json",
    "esnext.json.parse",
    "esnext.json.raw-json",
    "esnext.math.f16round",
    "esnext.promise.try",
    "esnext.symbol.async-dispose",
    "esnext.symbol.dispose",
    "esnext.symbol.metadata"
]);
exports.default = _default;
}}),
"[project]/node_modules/babel-plugin-polyfill-corejs3/core-js-compat/get-modules-list-for-target-version.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = __turbopack_require__("[project]/node_modules/core-js-compat/get-modules-list-for-target-version.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/babel-plugin-polyfill-corejs3/lib/built-in-definitions.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports.StaticProperties = exports.PromiseDependenciesWithIterators = exports.PromiseDependencies = exports.InstanceProperties = exports.DecoratorMetadataDependencies = exports.CommonIterators = exports.BuiltIns = void 0;
var _data = _interopRequireDefault(__turbopack_require__("[project]/node_modules/babel-plugin-polyfill-corejs3/core-js-compat/data.js [app-client] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _extends() {
    _extends = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : ("TURBOPACK unreachable", undefined);
    return _extends.apply(this, arguments);
}
const polyfillsOrder = {};
Object.keys(_data.default).forEach((name, index)=>{
    polyfillsOrder[name] = index;
});
const define = (pure, global, name = global[0], exclude)=>{
    return {
        name,
        pure,
        global: global.sort((a, b)=>polyfillsOrder[a] - polyfillsOrder[b]),
        exclude
    };
};
const typed = (...modules)=>define(null, [
        ...modules,
        ...TypedArrayDependencies
    ]);
const ArrayNatureIterators = [
    "es.array.iterator",
    "web.dom-collections.iterator"
];
const CommonIterators = [
    "es.string.iterator",
    ...ArrayNatureIterators
];
exports.CommonIterators = CommonIterators;
const ArrayNatureIteratorsWithTag = [
    "es.object.to-string",
    ...ArrayNatureIterators
];
const CommonIteratorsWithTag = [
    "es.object.to-string",
    ...CommonIterators
];
const ErrorDependencies = [
    "es.error.cause",
    "es.error.to-string"
];
const SuppressedErrorDependencies = [
    "esnext.suppressed-error.constructor",
    ...ErrorDependencies
];
const ArrayBufferDependencies = [
    "es.array-buffer.constructor",
    "es.array-buffer.slice",
    "es.data-view",
    "es.array-buffer.detached",
    "es.array-buffer.transfer",
    "es.array-buffer.transfer-to-fixed-length",
    "es.object.to-string"
];
const TypedArrayDependencies = [
    "es.typed-array.at",
    "es.typed-array.copy-within",
    "es.typed-array.every",
    "es.typed-array.fill",
    "es.typed-array.filter",
    "es.typed-array.find",
    "es.typed-array.find-index",
    "es.typed-array.find-last",
    "es.typed-array.find-last-index",
    "es.typed-array.for-each",
    "es.typed-array.includes",
    "es.typed-array.index-of",
    "es.typed-array.iterator",
    "es.typed-array.join",
    "es.typed-array.last-index-of",
    "es.typed-array.map",
    "es.typed-array.reduce",
    "es.typed-array.reduce-right",
    "es.typed-array.reverse",
    "es.typed-array.set",
    "es.typed-array.slice",
    "es.typed-array.some",
    "es.typed-array.sort",
    "es.typed-array.subarray",
    "es.typed-array.to-locale-string",
    "es.typed-array.to-reversed",
    "es.typed-array.to-sorted",
    "es.typed-array.to-string",
    "es.typed-array.with",
    "es.object.to-string",
    "es.array.iterator",
    "esnext.typed-array.filter-reject",
    "esnext.typed-array.group-by",
    "esnext.typed-array.to-spliced",
    "esnext.typed-array.unique-by",
    ...ArrayBufferDependencies
];
const PromiseDependencies = [
    "es.promise",
    "es.object.to-string"
];
exports.PromiseDependencies = PromiseDependencies;
const PromiseDependenciesWithIterators = [
    ...PromiseDependencies,
    ...CommonIterators
];
exports.PromiseDependenciesWithIterators = PromiseDependenciesWithIterators;
const SymbolDependencies = [
    "es.symbol",
    "es.symbol.description",
    "es.object.to-string"
];
const MapDependencies = [
    "es.map",
    "esnext.map.delete-all",
    "esnext.map.emplace",
    "esnext.map.every",
    "esnext.map.filter",
    "esnext.map.find",
    "esnext.map.find-key",
    "esnext.map.includes",
    "esnext.map.key-of",
    "esnext.map.map-keys",
    "esnext.map.map-values",
    "esnext.map.merge",
    "esnext.map.reduce",
    "esnext.map.some",
    "esnext.map.update",
    ...CommonIteratorsWithTag
];
const SetDependencies = [
    "es.set",
    "es.set.difference.v2",
    "es.set.intersection.v2",
    "es.set.is-disjoint-from.v2",
    "es.set.is-subset-of.v2",
    "es.set.is-superset-of.v2",
    "es.set.symmetric-difference.v2",
    "es.set.union.v2",
    "esnext.set.add-all",
    "esnext.set.delete-all",
    "esnext.set.difference",
    "esnext.set.every",
    "esnext.set.filter",
    "esnext.set.find",
    "esnext.set.intersection",
    "esnext.set.is-disjoint-from",
    "esnext.set.is-subset-of",
    "esnext.set.is-superset-of",
    "esnext.set.join",
    "esnext.set.map",
    "esnext.set.reduce",
    "esnext.set.some",
    "esnext.set.symmetric-difference",
    "esnext.set.union",
    ...CommonIteratorsWithTag
];
const WeakMapDependencies = [
    "es.weak-map",
    "esnext.weak-map.delete-all",
    "esnext.weak-map.emplace",
    ...CommonIteratorsWithTag
];
const WeakSetDependencies = [
    "es.weak-set",
    "esnext.weak-set.add-all",
    "esnext.weak-set.delete-all",
    ...CommonIteratorsWithTag
];
const DOMExceptionDependencies = [
    "web.dom-exception.constructor",
    "web.dom-exception.stack",
    "web.dom-exception.to-string-tag",
    "es.error.to-string"
];
const URLSearchParamsDependencies = [
    "web.url-search-params",
    "web.url-search-params.delete",
    "web.url-search-params.has",
    "web.url-search-params.size",
    ...CommonIteratorsWithTag
];
const AsyncIteratorDependencies = [
    "esnext.async-iterator.constructor",
    ...PromiseDependencies
];
const AsyncIteratorProblemMethods = [
    "esnext.async-iterator.every",
    "esnext.async-iterator.filter",
    "esnext.async-iterator.find",
    "esnext.async-iterator.flat-map",
    "esnext.async-iterator.for-each",
    "esnext.async-iterator.map",
    "esnext.async-iterator.reduce",
    "esnext.async-iterator.some"
];
const IteratorDependencies = [
    "esnext.iterator.constructor",
    "es.object.to-string"
];
const DecoratorMetadataDependencies = [
    "esnext.symbol.metadata",
    "esnext.function.metadata"
];
exports.DecoratorMetadataDependencies = DecoratorMetadataDependencies;
const TypedArrayStaticMethods = (base)=>({
        from: define(null, [
            "es.typed-array.from",
            base,
            ...TypedArrayDependencies
        ]),
        fromAsync: define(null, [
            "esnext.typed-array.from-async",
            base,
            ...PromiseDependenciesWithIterators,
            ...TypedArrayDependencies
        ]),
        of: define(null, [
            "es.typed-array.of",
            base,
            ...TypedArrayDependencies
        ])
    });
const DataViewDependencies = [
    "es.data-view",
    ...ArrayBufferDependencies
];
const BuiltIns = {
    AsyncDisposableStack: define("async-disposable-stack/index", [
        "esnext.async-disposable-stack.constructor",
        "es.object.to-string",
        "esnext.async-iterator.async-dispose",
        "esnext.iterator.dispose",
        ...PromiseDependencies,
        ...SuppressedErrorDependencies
    ]),
    AsyncIterator: define("async-iterator/index", AsyncIteratorDependencies),
    AggregateError: define("aggregate-error", [
        "es.aggregate-error",
        ...ErrorDependencies,
        ...CommonIteratorsWithTag,
        "es.aggregate-error.cause"
    ]),
    ArrayBuffer: define(null, ArrayBufferDependencies),
    DataView: define(null, DataViewDependencies),
    Date: define(null, [
        "es.date.to-string"
    ]),
    DOMException: define("dom-exception/index", DOMExceptionDependencies),
    DisposableStack: define("disposable-stack/index", [
        "esnext.disposable-stack.constructor",
        "es.object.to-string",
        "esnext.iterator.dispose",
        ...SuppressedErrorDependencies
    ]),
    Error: define(null, ErrorDependencies),
    EvalError: define(null, ErrorDependencies),
    Float32Array: typed("es.typed-array.float32-array"),
    Float64Array: typed("es.typed-array.float64-array"),
    Int8Array: typed("es.typed-array.int8-array"),
    Int16Array: typed("es.typed-array.int16-array"),
    Int32Array: typed("es.typed-array.int32-array"),
    Iterator: define("iterator/index", IteratorDependencies),
    Uint8Array: typed("es.typed-array.uint8-array", "esnext.uint8-array.set-from-base64", "esnext.uint8-array.set-from-hex", "esnext.uint8-array.to-base64", "esnext.uint8-array.to-hex"),
    Uint8ClampedArray: typed("es.typed-array.uint8-clamped-array"),
    Uint16Array: typed("es.typed-array.uint16-array"),
    Uint32Array: typed("es.typed-array.uint32-array"),
    Map: define("map/index", MapDependencies),
    Number: define(null, [
        "es.number.constructor"
    ]),
    Observable: define("observable/index", [
        "esnext.observable",
        "esnext.symbol.observable",
        "es.object.to-string",
        ...CommonIteratorsWithTag
    ]),
    Promise: define("promise/index", PromiseDependencies),
    RangeError: define(null, ErrorDependencies),
    ReferenceError: define(null, ErrorDependencies),
    Reflect: define(null, [
        "es.reflect.to-string-tag",
        "es.object.to-string"
    ]),
    RegExp: define(null, [
        "es.regexp.constructor",
        "es.regexp.dot-all",
        "es.regexp.exec",
        "es.regexp.sticky",
        "es.regexp.to-string"
    ]),
    Set: define("set/index", SetDependencies),
    SuppressedError: define("suppressed-error", SuppressedErrorDependencies),
    Symbol: define("symbol/index", SymbolDependencies),
    SyntaxError: define(null, ErrorDependencies),
    TypeError: define(null, ErrorDependencies),
    URIError: define(null, ErrorDependencies),
    URL: define("url/index", [
        "web.url",
        "web.url.to-json",
        ...URLSearchParamsDependencies
    ]),
    URLSearchParams: define("url-search-params/index", URLSearchParamsDependencies),
    WeakMap: define("weak-map/index", WeakMapDependencies),
    WeakSet: define("weak-set/index", WeakSetDependencies),
    atob: define("atob", [
        "web.atob",
        ...DOMExceptionDependencies
    ]),
    btoa: define("btoa", [
        "web.btoa",
        ...DOMExceptionDependencies
    ]),
    clearImmediate: define("clear-immediate", [
        "web.immediate"
    ]),
    compositeKey: define("composite-key", [
        "esnext.composite-key"
    ]),
    compositeSymbol: define("composite-symbol", [
        "esnext.composite-symbol"
    ]),
    escape: define("escape", [
        "es.escape"
    ]),
    fetch: define(null, PromiseDependencies),
    globalThis: define("global-this", [
        "es.global-this"
    ]),
    parseFloat: define("parse-float", [
        "es.parse-float"
    ]),
    parseInt: define("parse-int", [
        "es.parse-int"
    ]),
    queueMicrotask: define("queue-microtask", [
        "web.queue-microtask"
    ]),
    self: define("self", [
        "web.self"
    ]),
    setImmediate: define("set-immediate", [
        "web.immediate"
    ]),
    setInterval: define("set-interval", [
        "web.timers"
    ]),
    setTimeout: define("set-timeout", [
        "web.timers"
    ]),
    structuredClone: define("structured-clone", [
        "web.structured-clone",
        ...DOMExceptionDependencies,
        "es.array.iterator",
        "es.object.keys",
        "es.object.to-string",
        "es.map",
        "es.set"
    ]),
    unescape: define("unescape", [
        "es.unescape"
    ])
};
exports.BuiltIns = BuiltIns;
const StaticProperties = {
    AsyncIterator: {
        from: define("async-iterator/from", [
            "esnext.async-iterator.from",
            ...AsyncIteratorDependencies,
            ...AsyncIteratorProblemMethods,
            ...CommonIterators
        ])
    },
    Array: {
        from: define("array/from", [
            "es.array.from",
            "es.string.iterator"
        ]),
        fromAsync: define("array/from-async", [
            "esnext.array.from-async",
            ...PromiseDependenciesWithIterators
        ]),
        isArray: define("array/is-array", [
            "es.array.is-array"
        ]),
        isTemplateObject: define("array/is-template-object", [
            "esnext.array.is-template-object"
        ]),
        of: define("array/of", [
            "es.array.of"
        ])
    },
    ArrayBuffer: {
        isView: define(null, [
            "es.array-buffer.is-view"
        ])
    },
    BigInt: {
        range: define("bigint/range", [
            "esnext.bigint.range",
            "es.object.to-string"
        ])
    },
    Date: {
        now: define("date/now", [
            "es.date.now"
        ])
    },
    Function: {
        isCallable: define("function/is-callable", [
            "esnext.function.is-callable"
        ]),
        isConstructor: define("function/is-constructor", [
            "esnext.function.is-constructor"
        ])
    },
    Iterator: {
        from: define("iterator/from", [
            "esnext.iterator.from",
            ...IteratorDependencies,
            ...CommonIterators
        ]),
        range: define("iterator/range", [
            "esnext.iterator.range",
            "es.object.to-string"
        ])
    },
    JSON: {
        isRawJSON: define("json/is-raw-json", [
            "esnext.json.is-raw-json"
        ]),
        parse: define("json/parse", [
            "esnext.json.parse",
            "es.object.keys"
        ]),
        rawJSON: define("json/raw-json", [
            "esnext.json.raw-json",
            "es.object.create",
            "es.object.freeze"
        ]),
        stringify: define("json/stringify", [
            "es.json.stringify",
            "es.date.to-json"
        ], "es.symbol")
    },
    Math: {
        DEG_PER_RAD: define("math/deg-per-rad", [
            "esnext.math.deg-per-rad"
        ]),
        RAD_PER_DEG: define("math/rad-per-deg", [
            "esnext.math.rad-per-deg"
        ]),
        acosh: define("math/acosh", [
            "es.math.acosh"
        ]),
        asinh: define("math/asinh", [
            "es.math.asinh"
        ]),
        atanh: define("math/atanh", [
            "es.math.atanh"
        ]),
        cbrt: define("math/cbrt", [
            "es.math.cbrt"
        ]),
        clamp: define("math/clamp", [
            "esnext.math.clamp"
        ]),
        clz32: define("math/clz32", [
            "es.math.clz32"
        ]),
        cosh: define("math/cosh", [
            "es.math.cosh"
        ]),
        degrees: define("math/degrees", [
            "esnext.math.degrees"
        ]),
        expm1: define("math/expm1", [
            "es.math.expm1"
        ]),
        fround: define("math/fround", [
            "es.math.fround"
        ]),
        f16round: define("math/f16round", [
            "esnext.math.f16round"
        ]),
        fscale: define("math/fscale", [
            "esnext.math.fscale"
        ]),
        hypot: define("math/hypot", [
            "es.math.hypot"
        ]),
        iaddh: define("math/iaddh", [
            "esnext.math.iaddh"
        ]),
        imul: define("math/imul", [
            "es.math.imul"
        ]),
        imulh: define("math/imulh", [
            "esnext.math.imulh"
        ]),
        isubh: define("math/isubh", [
            "esnext.math.isubh"
        ]),
        log10: define("math/log10", [
            "es.math.log10"
        ]),
        log1p: define("math/log1p", [
            "es.math.log1p"
        ]),
        log2: define("math/log2", [
            "es.math.log2"
        ]),
        radians: define("math/radians", [
            "esnext.math.radians"
        ]),
        scale: define("math/scale", [
            "esnext.math.scale"
        ]),
        seededPRNG: define("math/seeded-prng", [
            "esnext.math.seeded-prng"
        ]),
        sign: define("math/sign", [
            "es.math.sign"
        ]),
        signbit: define("math/signbit", [
            "esnext.math.signbit"
        ]),
        sinh: define("math/sinh", [
            "es.math.sinh"
        ]),
        sumPrecise: define("math/sum-precise", [
            "esnext.math.sum-precise",
            "es.array.iterator"
        ]),
        tanh: define("math/tanh", [
            "es.math.tanh"
        ]),
        trunc: define("math/trunc", [
            "es.math.trunc"
        ]),
        umulh: define("math/umulh", [
            "esnext.math.umulh"
        ])
    },
    Map: {
        from: define("map/from", [
            "esnext.map.from",
            ...MapDependencies
        ]),
        groupBy: define("map/group-by", [
            "es.map.group-by",
            ...MapDependencies
        ]),
        keyBy: define("map/key-by", [
            "esnext.map.key-by",
            ...MapDependencies
        ]),
        of: define("map/of", [
            "esnext.map.of",
            ...MapDependencies
        ])
    },
    Number: {
        EPSILON: define("number/epsilon", [
            "es.number.epsilon"
        ]),
        MAX_SAFE_INTEGER: define("number/max-safe-integer", [
            "es.number.max-safe-integer"
        ]),
        MIN_SAFE_INTEGER: define("number/min-safe-integer", [
            "es.number.min-safe-integer"
        ]),
        fromString: define("number/from-string", [
            "esnext.number.from-string"
        ]),
        isFinite: define("number/is-finite", [
            "es.number.is-finite"
        ]),
        isInteger: define("number/is-integer", [
            "es.number.is-integer"
        ]),
        isNaN: define("number/is-nan", [
            "es.number.is-nan"
        ]),
        isSafeInteger: define("number/is-safe-integer", [
            "es.number.is-safe-integer"
        ]),
        parseFloat: define("number/parse-float", [
            "es.number.parse-float"
        ]),
        parseInt: define("number/parse-int", [
            "es.number.parse-int"
        ]),
        range: define("number/range", [
            "esnext.number.range",
            "es.object.to-string"
        ])
    },
    Object: {
        assign: define("object/assign", [
            "es.object.assign"
        ]),
        create: define("object/create", [
            "es.object.create"
        ]),
        defineProperties: define("object/define-properties", [
            "es.object.define-properties"
        ]),
        defineProperty: define("object/define-property", [
            "es.object.define-property"
        ]),
        entries: define("object/entries", [
            "es.object.entries"
        ]),
        freeze: define("object/freeze", [
            "es.object.freeze"
        ]),
        fromEntries: define("object/from-entries", [
            "es.object.from-entries",
            "es.array.iterator"
        ]),
        getOwnPropertyDescriptor: define("object/get-own-property-descriptor", [
            "es.object.get-own-property-descriptor"
        ]),
        getOwnPropertyDescriptors: define("object/get-own-property-descriptors", [
            "es.object.get-own-property-descriptors"
        ]),
        getOwnPropertyNames: define("object/get-own-property-names", [
            "es.object.get-own-property-names"
        ]),
        getOwnPropertySymbols: define("object/get-own-property-symbols", [
            "es.symbol"
        ]),
        getPrototypeOf: define("object/get-prototype-of", [
            "es.object.get-prototype-of"
        ]),
        groupBy: define("object/group-by", [
            "es.object.group-by",
            "es.object.create"
        ]),
        hasOwn: define("object/has-own", [
            "es.object.has-own"
        ]),
        is: define("object/is", [
            "es.object.is"
        ]),
        isExtensible: define("object/is-extensible", [
            "es.object.is-extensible"
        ]),
        isFrozen: define("object/is-frozen", [
            "es.object.is-frozen"
        ]),
        isSealed: define("object/is-sealed", [
            "es.object.is-sealed"
        ]),
        keys: define("object/keys", [
            "es.object.keys"
        ]),
        preventExtensions: define("object/prevent-extensions", [
            "es.object.prevent-extensions"
        ]),
        seal: define("object/seal", [
            "es.object.seal"
        ]),
        setPrototypeOf: define("object/set-prototype-of", [
            "es.object.set-prototype-of"
        ]),
        values: define("object/values", [
            "es.object.values"
        ])
    },
    Promise: {
        all: define(null, PromiseDependenciesWithIterators),
        allSettled: define("promise/all-settled", [
            "es.promise.all-settled",
            ...PromiseDependenciesWithIterators
        ]),
        any: define("promise/any", [
            "es.promise.any",
            "es.aggregate-error",
            ...PromiseDependenciesWithIterators
        ]),
        race: define(null, PromiseDependenciesWithIterators),
        try: define("promise/try", [
            "esnext.promise.try",
            ...PromiseDependencies
        ]),
        withResolvers: define("promise/with-resolvers", [
            "es.promise.with-resolvers",
            ...PromiseDependencies
        ])
    },
    Reflect: {
        apply: define("reflect/apply", [
            "es.reflect.apply"
        ]),
        construct: define("reflect/construct", [
            "es.reflect.construct"
        ]),
        defineMetadata: define("reflect/define-metadata", [
            "esnext.reflect.define-metadata"
        ]),
        defineProperty: define("reflect/define-property", [
            "es.reflect.define-property"
        ]),
        deleteMetadata: define("reflect/delete-metadata", [
            "esnext.reflect.delete-metadata"
        ]),
        deleteProperty: define("reflect/delete-property", [
            "es.reflect.delete-property"
        ]),
        get: define("reflect/get", [
            "es.reflect.get"
        ]),
        getMetadata: define("reflect/get-metadata", [
            "esnext.reflect.get-metadata"
        ]),
        getMetadataKeys: define("reflect/get-metadata-keys", [
            "esnext.reflect.get-metadata-keys"
        ]),
        getOwnMetadata: define("reflect/get-own-metadata", [
            "esnext.reflect.get-own-metadata"
        ]),
        getOwnMetadataKeys: define("reflect/get-own-metadata-keys", [
            "esnext.reflect.get-own-metadata-keys"
        ]),
        getOwnPropertyDescriptor: define("reflect/get-own-property-descriptor", [
            "es.reflect.get-own-property-descriptor"
        ]),
        getPrototypeOf: define("reflect/get-prototype-of", [
            "es.reflect.get-prototype-of"
        ]),
        has: define("reflect/has", [
            "es.reflect.has"
        ]),
        hasMetadata: define("reflect/has-metadata", [
            "esnext.reflect.has-metadata"
        ]),
        hasOwnMetadata: define("reflect/has-own-metadata", [
            "esnext.reflect.has-own-metadata"
        ]),
        isExtensible: define("reflect/is-extensible", [
            "es.reflect.is-extensible"
        ]),
        metadata: define("reflect/metadata", [
            "esnext.reflect.metadata"
        ]),
        ownKeys: define("reflect/own-keys", [
            "es.reflect.own-keys"
        ]),
        preventExtensions: define("reflect/prevent-extensions", [
            "es.reflect.prevent-extensions"
        ]),
        set: define("reflect/set", [
            "es.reflect.set"
        ]),
        setPrototypeOf: define("reflect/set-prototype-of", [
            "es.reflect.set-prototype-of"
        ])
    },
    RegExp: {
        escape: define("regexp/escape", [
            "esnext.regexp.escape"
        ])
    },
    Set: {
        from: define("set/from", [
            "esnext.set.from",
            ...SetDependencies
        ]),
        of: define("set/of", [
            "esnext.set.of",
            ...SetDependencies
        ])
    },
    String: {
        cooked: define("string/cooked", [
            "esnext.string.cooked"
        ]),
        dedent: define("string/dedent", [
            "esnext.string.dedent",
            "es.string.from-code-point",
            "es.weak-map"
        ]),
        fromCodePoint: define("string/from-code-point", [
            "es.string.from-code-point"
        ]),
        raw: define("string/raw", [
            "es.string.raw"
        ])
    },
    Symbol: {
        asyncDispose: define("symbol/async-dispose", [
            "esnext.symbol.async-dispose",
            "esnext.async-iterator.async-dispose"
        ]),
        asyncIterator: define("symbol/async-iterator", [
            "es.symbol.async-iterator"
        ]),
        customMatcher: define("symbol/custom-matcher", [
            "esnext.symbol.custom-matcher"
        ]),
        dispose: define("symbol/dispose", [
            "esnext.symbol.dispose",
            "esnext.iterator.dispose"
        ]),
        for: define("symbol/for", [], "es.symbol"),
        hasInstance: define("symbol/has-instance", [
            "es.symbol.has-instance",
            "es.function.has-instance"
        ]),
        isConcatSpreadable: define("symbol/is-concat-spreadable", [
            "es.symbol.is-concat-spreadable",
            "es.array.concat"
        ]),
        isRegistered: define("symbol/is-registered", [
            "esnext.symbol.is-registered",
            "es.symbol"
        ]),
        isRegisteredSymbol: define("symbol/is-registered-symbol", [
            "esnext.symbol.is-registered-symbol",
            "es.symbol"
        ]),
        isWellKnown: define("symbol/is-well-known", [
            "esnext.symbol.is-well-known",
            "es.symbol"
        ]),
        isWellKnownSymbol: define("symbol/is-well-known-symbol", [
            "esnext.symbol.is-well-known-symbol",
            "es.symbol"
        ]),
        iterator: define("symbol/iterator", [
            "es.symbol.iterator",
            ...CommonIteratorsWithTag
        ]),
        keyFor: define("symbol/key-for", [], "es.symbol"),
        match: define("symbol/match", [
            "es.symbol.match",
            "es.string.match"
        ]),
        matcher: define("symbol/matcher", [
            "esnext.symbol.matcher"
        ]),
        matchAll: define("symbol/match-all", [
            "es.symbol.match-all",
            "es.string.match-all"
        ]),
        metadata: define("symbol/metadata", DecoratorMetadataDependencies),
        metadataKey: define("symbol/metadata-key", [
            "esnext.symbol.metadata-key"
        ]),
        observable: define("symbol/observable", [
            "esnext.symbol.observable"
        ]),
        patternMatch: define("symbol/pattern-match", [
            "esnext.symbol.pattern-match"
        ]),
        replace: define("symbol/replace", [
            "es.symbol.replace",
            "es.string.replace"
        ]),
        search: define("symbol/search", [
            "es.symbol.search",
            "es.string.search"
        ]),
        species: define("symbol/species", [
            "es.symbol.species",
            "es.array.species"
        ]),
        split: define("symbol/split", [
            "es.symbol.split",
            "es.string.split"
        ]),
        toPrimitive: define("symbol/to-primitive", [
            "es.symbol.to-primitive",
            "es.date.to-primitive"
        ]),
        toStringTag: define("symbol/to-string-tag", [
            "es.symbol.to-string-tag",
            "es.object.to-string",
            "es.math.to-string-tag",
            "es.json.to-string-tag"
        ]),
        unscopables: define("symbol/unscopables", [
            "es.symbol.unscopables"
        ])
    },
    URL: {
        canParse: define("url/can-parse", [
            "web.url.can-parse",
            "web.url"
        ]),
        parse: define("url/parse", [
            "web.url.parse",
            "web.url"
        ])
    },
    WeakMap: {
        from: define("weak-map/from", [
            "esnext.weak-map.from",
            ...WeakMapDependencies
        ]),
        of: define("weak-map/of", [
            "esnext.weak-map.of",
            ...WeakMapDependencies
        ])
    },
    WeakSet: {
        from: define("weak-set/from", [
            "esnext.weak-set.from",
            ...WeakSetDependencies
        ]),
        of: define("weak-set/of", [
            "esnext.weak-set.of",
            ...WeakSetDependencies
        ])
    },
    Int8Array: TypedArrayStaticMethods("es.typed-array.int8-array"),
    Uint8Array: _extends({
        fromBase64: define(null, [
            "esnext.uint8-array.from-base64",
            ...TypedArrayDependencies
        ]),
        fromHex: define(null, [
            "esnext.uint8-array.from-hex",
            ...TypedArrayDependencies
        ])
    }, TypedArrayStaticMethods("es.typed-array.uint8-array")),
    Uint8ClampedArray: TypedArrayStaticMethods("es.typed-array.uint8-clamped-array"),
    Int16Array: TypedArrayStaticMethods("es.typed-array.int16-array"),
    Uint16Array: TypedArrayStaticMethods("es.typed-array.uint16-array"),
    Int32Array: TypedArrayStaticMethods("es.typed-array.int32-array"),
    Uint32Array: TypedArrayStaticMethods("es.typed-array.uint32-array"),
    Float32Array: TypedArrayStaticMethods("es.typed-array.float32-array"),
    Float64Array: TypedArrayStaticMethods("es.typed-array.float64-array"),
    WebAssembly: {
        CompileError: define(null, ErrorDependencies),
        LinkError: define(null, ErrorDependencies),
        RuntimeError: define(null, ErrorDependencies)
    }
};
exports.StaticProperties = StaticProperties;
const InstanceProperties = {
    asIndexedPairs: define(null, [
        "esnext.async-iterator.as-indexed-pairs",
        ...AsyncIteratorDependencies,
        "esnext.iterator.as-indexed-pairs",
        ...IteratorDependencies
    ]),
    at: define("instance/at", [
        // TODO: We should introduce overloaded instance methods definition
        // Before that is implemented, the `esnext.string.at` must be the first
        // In pure mode, the provider resolves the descriptor as a "pure" `esnext.string.at`
        // and treats the compat-data of `esnext.string.at` as the compat-data of
        // pure import `instance/at`. The first polyfill here should have the lowest corejs
        // supported versions.
        "esnext.string.at",
        "es.string.at-alternative",
        "es.array.at"
    ]),
    anchor: define(null, [
        "es.string.anchor"
    ]),
    big: define(null, [
        "es.string.big"
    ]),
    bind: define("instance/bind", [
        "es.function.bind"
    ]),
    blink: define(null, [
        "es.string.blink"
    ]),
    bold: define(null, [
        "es.string.bold"
    ]),
    codePointAt: define("instance/code-point-at", [
        "es.string.code-point-at"
    ]),
    codePoints: define("instance/code-points", [
        "esnext.string.code-points"
    ]),
    concat: define("instance/concat", [
        "es.array.concat"
    ], undefined, [
        "String"
    ]),
    copyWithin: define("instance/copy-within", [
        "es.array.copy-within"
    ]),
    demethodize: define("instance/demethodize", [
        "esnext.function.demethodize"
    ]),
    description: define(null, [
        "es.symbol",
        "es.symbol.description"
    ]),
    dotAll: define(null, [
        "es.regexp.dot-all"
    ]),
    drop: define(null, [
        "esnext.async-iterator.drop",
        ...AsyncIteratorDependencies,
        "esnext.iterator.drop",
        ...IteratorDependencies
    ]),
    emplace: define("instance/emplace", [
        "esnext.map.emplace",
        "esnext.weak-map.emplace"
    ]),
    endsWith: define("instance/ends-with", [
        "es.string.ends-with"
    ]),
    entries: define("instance/entries", ArrayNatureIteratorsWithTag),
    every: define("instance/every", [
        "es.array.every",
        "esnext.async-iterator.every",
        // TODO: add async iterator dependencies when we support sub-dependencies
        // esnext.async-iterator.every depends on es.promise
        // but we don't want to pull es.promise when esnext.async-iterator is disabled
        //
        // ...AsyncIteratorDependencies
        "esnext.iterator.every",
        ...IteratorDependencies
    ]),
    exec: define(null, [
        "es.regexp.exec"
    ]),
    fill: define("instance/fill", [
        "es.array.fill"
    ]),
    filter: define("instance/filter", [
        "es.array.filter",
        "esnext.async-iterator.filter",
        "esnext.iterator.filter",
        ...IteratorDependencies
    ]),
    filterReject: define("instance/filterReject", [
        "esnext.array.filter-reject"
    ]),
    finally: define(null, [
        "es.promise.finally",
        ...PromiseDependencies
    ]),
    find: define("instance/find", [
        "es.array.find",
        "esnext.async-iterator.find",
        "esnext.iterator.find",
        ...IteratorDependencies
    ]),
    findIndex: define("instance/find-index", [
        "es.array.find-index"
    ]),
    findLast: define("instance/find-last", [
        "es.array.find-last"
    ]),
    findLastIndex: define("instance/find-last-index", [
        "es.array.find-last-index"
    ]),
    fixed: define(null, [
        "es.string.fixed"
    ]),
    flags: define("instance/flags", [
        "es.regexp.flags"
    ]),
    flatMap: define("instance/flat-map", [
        "es.array.flat-map",
        "es.array.unscopables.flat-map",
        "esnext.async-iterator.flat-map",
        "esnext.iterator.flat-map",
        ...IteratorDependencies
    ]),
    flat: define("instance/flat", [
        "es.array.flat",
        "es.array.unscopables.flat"
    ]),
    getFloat16: define(null, [
        "esnext.data-view.get-float16",
        ...DataViewDependencies
    ]),
    getUint8Clamped: define(null, [
        "esnext.data-view.get-uint8-clamped",
        ...DataViewDependencies
    ]),
    getYear: define(null, [
        "es.date.get-year"
    ]),
    group: define("instance/group", [
        "esnext.array.group"
    ]),
    groupBy: define("instance/group-by", [
        "esnext.array.group-by"
    ]),
    groupByToMap: define("instance/group-by-to-map", [
        "esnext.array.group-by-to-map",
        "es.map",
        "es.object.to-string"
    ]),
    groupToMap: define("instance/group-to-map", [
        "esnext.array.group-to-map",
        "es.map",
        "es.object.to-string"
    ]),
    fontcolor: define(null, [
        "es.string.fontcolor"
    ]),
    fontsize: define(null, [
        "es.string.fontsize"
    ]),
    forEach: define("instance/for-each", [
        "es.array.for-each",
        "esnext.async-iterator.for-each",
        "esnext.iterator.for-each",
        ...IteratorDependencies,
        "web.dom-collections.for-each"
    ]),
    includes: define("instance/includes", [
        "es.array.includes",
        "es.string.includes"
    ]),
    indexed: define(null, [
        "esnext.async-iterator.indexed",
        ...AsyncIteratorDependencies,
        "esnext.iterator.indexed",
        ...IteratorDependencies
    ]),
    indexOf: define("instance/index-of", [
        "es.array.index-of"
    ]),
    isWellFormed: define("instance/is-well-formed", [
        "es.string.is-well-formed"
    ]),
    italic: define(null, [
        "es.string.italics"
    ]),
    join: define(null, [
        "es.array.join"
    ]),
    keys: define("instance/keys", ArrayNatureIteratorsWithTag),
    lastIndex: define(null, [
        "esnext.array.last-index"
    ]),
    lastIndexOf: define("instance/last-index-of", [
        "es.array.last-index-of"
    ]),
    lastItem: define(null, [
        "esnext.array.last-item"
    ]),
    link: define(null, [
        "es.string.link"
    ]),
    map: define("instance/map", [
        "es.array.map",
        "esnext.async-iterator.map",
        "esnext.iterator.map"
    ]),
    match: define(null, [
        "es.string.match",
        "es.regexp.exec"
    ]),
    matchAll: define("instance/match-all", [
        "es.string.match-all",
        "es.regexp.exec"
    ]),
    name: define(null, [
        "es.function.name"
    ]),
    padEnd: define("instance/pad-end", [
        "es.string.pad-end"
    ]),
    padStart: define("instance/pad-start", [
        "es.string.pad-start"
    ]),
    push: define("instance/push", [
        "es.array.push"
    ]),
    reduce: define("instance/reduce", [
        "es.array.reduce",
        "esnext.async-iterator.reduce",
        "esnext.iterator.reduce",
        ...IteratorDependencies
    ]),
    reduceRight: define("instance/reduce-right", [
        "es.array.reduce-right"
    ]),
    repeat: define("instance/repeat", [
        "es.string.repeat"
    ]),
    replace: define(null, [
        "es.string.replace",
        "es.regexp.exec"
    ]),
    replaceAll: define("instance/replace-all", [
        "es.string.replace-all",
        "es.string.replace",
        "es.regexp.exec"
    ]),
    reverse: define("instance/reverse", [
        "es.array.reverse"
    ]),
    search: define(null, [
        "es.string.search",
        "es.regexp.exec"
    ]),
    setFloat16: define(null, [
        "esnext.data-view.set-float16",
        ...DataViewDependencies
    ]),
    setUint8Clamped: define(null, [
        "esnext.data-view.set-uint8-clamped",
        ...DataViewDependencies
    ]),
    setYear: define(null, [
        "es.date.set-year"
    ]),
    slice: define("instance/slice", [
        "es.array.slice"
    ]),
    small: define(null, [
        "es.string.small"
    ]),
    some: define("instance/some", [
        "es.array.some",
        "esnext.async-iterator.some",
        "esnext.iterator.some",
        ...IteratorDependencies
    ]),
    sort: define("instance/sort", [
        "es.array.sort"
    ]),
    splice: define("instance/splice", [
        "es.array.splice"
    ]),
    split: define(null, [
        "es.string.split",
        "es.regexp.exec"
    ]),
    startsWith: define("instance/starts-with", [
        "es.string.starts-with"
    ]),
    sticky: define(null, [
        "es.regexp.sticky"
    ]),
    strike: define(null, [
        "es.string.strike"
    ]),
    sub: define(null, [
        "es.string.sub"
    ]),
    substr: define(null, [
        "es.string.substr"
    ]),
    sup: define(null, [
        "es.string.sup"
    ]),
    take: define(null, [
        "esnext.async-iterator.take",
        ...AsyncIteratorDependencies,
        "esnext.iterator.take",
        ...IteratorDependencies
    ]),
    test: define(null, [
        "es.regexp.test",
        "es.regexp.exec"
    ]),
    toArray: define(null, [
        "esnext.async-iterator.to-array",
        ...AsyncIteratorDependencies,
        "esnext.iterator.to-array",
        ...IteratorDependencies
    ]),
    toAsync: define(null, [
        "esnext.iterator.to-async",
        ...IteratorDependencies,
        ...AsyncIteratorDependencies,
        ...AsyncIteratorProblemMethods
    ]),
    toExponential: define(null, [
        "es.number.to-exponential"
    ]),
    toFixed: define(null, [
        "es.number.to-fixed"
    ]),
    toGMTString: define(null, [
        "es.date.to-gmt-string"
    ]),
    toISOString: define(null, [
        "es.date.to-iso-string"
    ]),
    toJSON: define(null, [
        "es.date.to-json"
    ]),
    toPrecision: define(null, [
        "es.number.to-precision"
    ]),
    toReversed: define("instance/to-reversed", [
        "es.array.to-reversed"
    ]),
    toSorted: define("instance/to-sorted", [
        "es.array.to-sorted",
        "es.array.sort"
    ]),
    toSpliced: define("instance/to-spliced", [
        "es.array.to-spliced"
    ]),
    toString: define(null, [
        "es.object.to-string",
        "es.error.to-string",
        "es.date.to-string",
        "es.regexp.to-string"
    ]),
    toWellFormed: define("instance/to-well-formed", [
        "es.string.to-well-formed"
    ]),
    trim: define("instance/trim", [
        "es.string.trim"
    ]),
    trimEnd: define("instance/trim-end", [
        "es.string.trim-end"
    ]),
    trimLeft: define("instance/trim-left", [
        "es.string.trim-start"
    ]),
    trimRight: define("instance/trim-right", [
        "es.string.trim-end"
    ]),
    trimStart: define("instance/trim-start", [
        "es.string.trim-start"
    ]),
    uniqueBy: define("instance/unique-by", [
        "esnext.array.unique-by",
        "es.map"
    ]),
    unshift: define("instance/unshift", [
        "es.array.unshift"
    ]),
    unThis: define("instance/un-this", [
        "esnext.function.un-this"
    ]),
    values: define("instance/values", ArrayNatureIteratorsWithTag),
    with: define("instance/with", [
        "es.array.with"
    ]),
    __defineGetter__: define(null, [
        "es.object.define-getter"
    ]),
    __defineSetter__: define(null, [
        "es.object.define-setter"
    ]),
    __lookupGetter__: define(null, [
        "es.object.lookup-getter"
    ]),
    __lookupSetter__: define(null, [
        "es.object.lookup-setter"
    ]),
    ["__proto__"]: define(null, [
        "es.object.proto"
    ])
};
exports.InstanceProperties = InstanceProperties;
}}),
"[project]/node_modules/babel-plugin-polyfill-corejs3/lib/babel-runtime-corejs3-paths.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports.stable = exports.proposals = void 0;
// This file contains the list of paths supported by @babel/runtime-corejs3.
// It must _not_ be edited, as all new features should go through direct
// injection of core-js-pure imports.
const stable = new Set([
    "array",
    "array/from",
    "array/is-array",
    "array/of",
    "clear-immediate",
    "date/now",
    "instance/bind",
    "instance/code-point-at",
    "instance/concat",
    "instance/copy-within",
    "instance/ends-with",
    "instance/entries",
    "instance/every",
    "instance/fill",
    "instance/filter",
    "instance/find",
    "instance/find-index",
    "instance/flags",
    "instance/flat",
    "instance/flat-map",
    "instance/for-each",
    "instance/includes",
    "instance/index-of",
    "instance/keys",
    "instance/last-index-of",
    "instance/map",
    "instance/pad-end",
    "instance/pad-start",
    "instance/reduce",
    "instance/reduce-right",
    "instance/repeat",
    "instance/reverse",
    "instance/slice",
    "instance/some",
    "instance/sort",
    "instance/splice",
    "instance/starts-with",
    "instance/trim",
    "instance/trim-end",
    "instance/trim-left",
    "instance/trim-right",
    "instance/trim-start",
    "instance/values",
    "json/stringify",
    "map",
    "math/acosh",
    "math/asinh",
    "math/atanh",
    "math/cbrt",
    "math/clz32",
    "math/cosh",
    "math/expm1",
    "math/fround",
    "math/hypot",
    "math/imul",
    "math/log10",
    "math/log1p",
    "math/log2",
    "math/sign",
    "math/sinh",
    "math/tanh",
    "math/trunc",
    "number/epsilon",
    "number/is-finite",
    "number/is-integer",
    "number/is-nan",
    "number/is-safe-integer",
    "number/max-safe-integer",
    "number/min-safe-integer",
    "number/parse-float",
    "number/parse-int",
    "object/assign",
    "object/create",
    "object/define-properties",
    "object/define-property",
    "object/entries",
    "object/freeze",
    "object/from-entries",
    "object/get-own-property-descriptor",
    "object/get-own-property-descriptors",
    "object/get-own-property-names",
    "object/get-own-property-symbols",
    "object/get-prototype-of",
    "object/is",
    "object/is-extensible",
    "object/is-frozen",
    "object/is-sealed",
    "object/keys",
    "object/prevent-extensions",
    "object/seal",
    "object/set-prototype-of",
    "object/values",
    "parse-float",
    "parse-int",
    "promise",
    "queue-microtask",
    "reflect/apply",
    "reflect/construct",
    "reflect/define-property",
    "reflect/delete-property",
    "reflect/get",
    "reflect/get-own-property-descriptor",
    "reflect/get-prototype-of",
    "reflect/has",
    "reflect/is-extensible",
    "reflect/own-keys",
    "reflect/prevent-extensions",
    "reflect/set",
    "reflect/set-prototype-of",
    "set",
    "set-immediate",
    "set-interval",
    "set-timeout",
    "string/from-code-point",
    "string/raw",
    "symbol",
    "symbol/async-iterator",
    "symbol/for",
    "symbol/has-instance",
    "symbol/is-concat-spreadable",
    "symbol/iterator",
    "symbol/key-for",
    "symbol/match",
    "symbol/replace",
    "symbol/search",
    "symbol/species",
    "symbol/split",
    "symbol/to-primitive",
    "symbol/to-string-tag",
    "symbol/unscopables",
    "url",
    "url-search-params",
    "weak-map",
    "weak-set"
]);
exports.stable = stable;
const proposals = new Set([
    ...stable,
    "aggregate-error",
    "composite-key",
    "composite-symbol",
    "global-this",
    "instance/at",
    "instance/code-points",
    "instance/match-all",
    "instance/replace-all",
    "math/clamp",
    "math/degrees",
    "math/deg-per-rad",
    "math/fscale",
    "math/iaddh",
    "math/imulh",
    "math/isubh",
    "math/rad-per-deg",
    "math/radians",
    "math/scale",
    "math/seeded-prng",
    "math/signbit",
    "math/umulh",
    "number/from-string",
    "observable",
    "reflect/define-metadata",
    "reflect/delete-metadata",
    "reflect/get-metadata",
    "reflect/get-metadata-keys",
    "reflect/get-own-metadata",
    "reflect/get-own-metadata-keys",
    "reflect/has-metadata",
    "reflect/has-own-metadata",
    "reflect/metadata",
    "symbol/dispose",
    "symbol/observable",
    "symbol/pattern-match"
]);
exports.proposals = proposals;
}}),
"[project]/node_modules/babel-plugin-polyfill-corejs3/lib/usage-filters.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports.default = canSkipPolyfill;
var _babel = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const { types: t } = _babel.default || _babel;
function canSkipPolyfill(desc, path) {
    const { node, parent } = path;
    switch(desc.name){
        case "es.string.split":
            {
                if (!t.isCallExpression(parent, {
                    callee: node
                })) return false;
                if (parent.arguments.length < 1) return true;
                const splitter = parent.arguments[0];
                return t.isStringLiteral(splitter) || t.isTemplateLiteral(splitter);
            }
    }
}
}}),
"[project]/node_modules/babel-plugin-polyfill-corejs3/core-js-compat/entries.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = __turbopack_require__("[project]/node_modules/core-js-compat/entries.json (json)");
}}),
"[project]/node_modules/babel-plugin-polyfill-corejs3/lib/utils.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports.BABEL_RUNTIME = void 0;
exports.callMethod = callMethod;
exports.coreJSModule = coreJSModule;
exports.coreJSPureHelper = coreJSPureHelper;
exports.isCoreJSSource = isCoreJSSource;
var _babel = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)"));
var _entries = _interopRequireDefault(__turbopack_require__("[project]/node_modules/babel-plugin-polyfill-corejs3/core-js-compat/entries.js [app-client] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const { types: t } = _babel.default || _babel;
const BABEL_RUNTIME = "@babel/runtime-corejs3";
exports.BABEL_RUNTIME = BABEL_RUNTIME;
function callMethod(path, id) {
    const { object } = path.node;
    let context1, context2;
    if (t.isIdentifier(object)) {
        context1 = object;
        context2 = t.cloneNode(object);
    } else {
        context1 = path.scope.generateDeclaredUidIdentifier("context");
        context2 = t.assignmentExpression("=", t.cloneNode(context1), object);
    }
    path.replaceWith(t.memberExpression(t.callExpression(id, [
        context2
    ]), t.identifier("call")));
    path.parentPath.unshiftContainer("arguments", context1);
}
function isCoreJSSource(source) {
    if (typeof source === "string") {
        source = source.replace(/\\/g, "/").replace(/(\/(index)?)?(\.js)?$/i, "").toLowerCase();
    }
    return Object.prototype.hasOwnProperty.call(_entries.default, source) && _entries.default[source];
}
function coreJSModule(name) {
    return `core-js/modules/${name}.js`;
}
function coreJSPureHelper(name, useBabelRuntime, ext) {
    return useBabelRuntime ? `${BABEL_RUNTIME}/core-js/${name}${ext}` : `core-js-pure/features/${name}.js`;
}
}}),
"[project]/node_modules/babel-plugin-polyfill-corejs3/lib/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
exports.__esModule = true;
exports.default = void 0;
var _data = _interopRequireDefault(__turbopack_require__("[project]/node_modules/babel-plugin-polyfill-corejs3/core-js-compat/data.js [app-client] (ecmascript)"));
var _shippedProposals = _interopRequireDefault(__turbopack_require__("[project]/node_modules/babel-plugin-polyfill-corejs3/lib/shipped-proposals.js [app-client] (ecmascript)"));
var _getModulesListForTargetVersion = _interopRequireDefault(__turbopack_require__("[project]/node_modules/babel-plugin-polyfill-corejs3/core-js-compat/get-modules-list-for-target-version.js [app-client] (ecmascript)"));
var _builtInDefinitions = __turbopack_require__("[project]/node_modules/babel-plugin-polyfill-corejs3/lib/built-in-definitions.js [app-client] (ecmascript)");
var BabelRuntimePaths = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/babel-plugin-polyfill-corejs3/lib/babel-runtime-corejs3-paths.js [app-client] (ecmascript)"));
var _usageFilters = _interopRequireDefault(__turbopack_require__("[project]/node_modules/babel-plugin-polyfill-corejs3/lib/usage-filters.js [app-client] (ecmascript)"));
var _babel = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/@babel/core/lib/index.js [app-client] (ecmascript)"));
var _utils = __turbopack_require__("[project]/node_modules/babel-plugin-polyfill-corejs3/lib/utils.js [app-client] (ecmascript)");
var _helperDefinePolyfillProvider = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@babel/helper-define-polyfill-provider/lib/index.js [app-client] (ecmascript)"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _extends() {
    _extends = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : ("TURBOPACK unreachable", undefined);
    return _extends.apply(this, arguments);
}
const { types: t } = _babel.default || _babel;
const presetEnvCompat = "#__secret_key__@babel/preset-env__compatibility";
const runtimeCompat = "#__secret_key__@babel/runtime__compatibility";
const uniqueObjects = [
    "array",
    "string",
    "iterator",
    "async-iterator",
    "dom-collections"
].map((v)=>new RegExp(`[a-z]*\\.${v}\\..*`));
const esnextFallback = (name, cb)=>{
    if (cb(name)) return true;
    if (!name.startsWith("es.")) return false;
    const fallback = `esnext.${name.slice(3)}`;
    if (!_data.default[fallback]) return false;
    return cb(fallback);
};
var _default = (0, _helperDefinePolyfillProvider.default)(function({ getUtils, method, shouldInjectPolyfill, createMetaResolver, debug, babel }, { version = 3, proposals, shippedProposals, [presetEnvCompat]: { noRuntimeName = false } = {}, [runtimeCompat]: { useBabelRuntime = false, ext = ".js" } = {} }) {
    const isWebpack = babel.caller((caller)=>(caller == null ? void 0 : caller.name) === "babel-loader");
    const resolve = createMetaResolver({
        global: _builtInDefinitions.BuiltIns,
        static: _builtInDefinitions.StaticProperties,
        instance: _builtInDefinitions.InstanceProperties
    });
    const available = new Set((0, _getModulesListForTargetVersion.default)(version));
    function getCoreJSPureBase(useProposalBase) {
        return useBabelRuntime ? useProposalBase ? `${_utils.BABEL_RUNTIME}/core-js` : `${_utils.BABEL_RUNTIME}/core-js-stable` : useProposalBase ? "core-js-pure/features" : "core-js-pure/stable";
    }
    function maybeInjectGlobalImpl(name, utils) {
        if (shouldInjectPolyfill(name)) {
            debug(name);
            utils.injectGlobalImport((0, _utils.coreJSModule)(name), name);
            return true;
        }
        return false;
    }
    function maybeInjectGlobal(names, utils, fallback = true) {
        for (const name of names){
            if (fallback) {
                esnextFallback(name, (name)=>maybeInjectGlobalImpl(name, utils));
            } else {
                maybeInjectGlobalImpl(name, utils);
            }
        }
    }
    function maybeInjectPure(desc, hint, utils, object) {
        if (desc.pure && !(object && desc.exclude && desc.exclude.includes(object)) && esnextFallback(desc.name, shouldInjectPolyfill)) {
            const { name } = desc;
            let useProposalBase = false;
            if (proposals || shippedProposals && name.startsWith("esnext.")) {
                useProposalBase = true;
            } else if (name.startsWith("es.") && !available.has(name)) {
                useProposalBase = true;
            }
            if (useBabelRuntime && !(useProposalBase ? BabelRuntimePaths.proposals : BabelRuntimePaths.stable).has(desc.pure)) {
                return;
            }
            const coreJSPureBase = getCoreJSPureBase(useProposalBase);
            return utils.injectDefaultImport(`${coreJSPureBase}/${desc.pure}${ext}`, hint);
        }
    }
    function isFeatureStable(name) {
        if (name.startsWith("esnext.")) {
            const esName = `es.${name.slice(7)}`;
            // If its imaginative esName is not in latest compat data, it means
            // the proposal is not stage 4
            return esName in _data.default;
        }
        return true;
    }
    return {
        name: "corejs3",
        runtimeName: noRuntimeName ? null : _utils.BABEL_RUNTIME,
        polyfills: _data.default,
        filterPolyfills (name) {
            if (!available.has(name)) return false;
            if (proposals || method === "entry-global") return true;
            if (shippedProposals && _shippedProposals.default.has(name)) {
                return true;
            }
            return isFeatureStable(name);
        },
        entryGlobal (meta, utils, path) {
            if (meta.kind !== "import") return;
            const modules = (0, _utils.isCoreJSSource)(meta.source);
            if (!modules) return;
            if (modules.length === 1 && meta.source === (0, _utils.coreJSModule)(modules[0]) && shouldInjectPolyfill(modules[0])) {
                // Avoid infinite loop: do not replace imports with a new copy of
                // themselves.
                debug(null);
                return;
            }
            const modulesSet = new Set(modules);
            const filteredModules = modules.filter((module)=>{
                if (!module.startsWith("esnext.")) return true;
                const stable = module.replace("esnext.", "es.");
                if (modulesSet.has(stable) && shouldInjectPolyfill(stable)) {
                    return false;
                }
                return true;
            });
            maybeInjectGlobal(filteredModules, utils, false);
            path.remove();
        },
        usageGlobal (meta, utils, path) {
            const resolved = resolve(meta);
            if (!resolved) return;
            if ((0, _usageFilters.default)(resolved.desc, path)) return;
            let deps = resolved.desc.global;
            if (resolved.kind !== "global" && "object" in meta && meta.object && meta.placement === "prototype") {
                const low = meta.object.toLowerCase();
                deps = deps.filter((m)=>uniqueObjects.some((v)=>v.test(m)) ? m.includes(low) : true);
            }
            maybeInjectGlobal(deps, utils);
            return true;
        },
        usagePure (meta, utils, path) {
            if (meta.kind === "in") {
                if (meta.key === "Symbol.iterator") {
                    path.replaceWith(t.callExpression(utils.injectDefaultImport((0, _utils.coreJSPureHelper)("is-iterable", useBabelRuntime, ext), "isIterable"), [
                        path.node.right
                    ] // meta.kind === "in" narrows this
                    ));
                }
                return;
            }
            if (path.parentPath.isUnaryExpression({
                operator: "delete"
            })) return;
            if (meta.kind === "property") {
                // We can't compile destructuring and updateExpression.
                if (!path.isMemberExpression()) return;
                if (!path.isReferenced()) return;
                if (path.parentPath.isUpdateExpression()) return;
                if (t.isSuper(path.node.object)) {
                    return;
                }
                if (meta.key === "Symbol.iterator") {
                    if (!shouldInjectPolyfill("es.symbol.iterator")) return;
                    const { parent, node } = path;
                    if (t.isCallExpression(parent, {
                        callee: node
                    })) {
                        if (parent.arguments.length === 0) {
                            path.parentPath.replaceWith(t.callExpression(utils.injectDefaultImport((0, _utils.coreJSPureHelper)("get-iterator", useBabelRuntime, ext), "getIterator"), [
                                node.object
                            ]));
                            path.skip();
                        } else {
                            (0, _utils.callMethod)(path, utils.injectDefaultImport((0, _utils.coreJSPureHelper)("get-iterator-method", useBabelRuntime, ext), "getIteratorMethod"));
                        }
                    } else {
                        path.replaceWith(t.callExpression(utils.injectDefaultImport((0, _utils.coreJSPureHelper)("get-iterator-method", useBabelRuntime, ext), "getIteratorMethod"), [
                            path.node.object
                        ]));
                    }
                    return;
                }
            }
            let resolved = resolve(meta);
            if (!resolved) return;
            if ((0, _usageFilters.default)(resolved.desc, path)) return;
            if (useBabelRuntime && resolved.desc.pure && resolved.desc.pure.slice(-6) === "/index") {
                // Remove /index, since it doesn't exist in @babel/runtime-corejs3s
                resolved = _extends({}, resolved, {
                    desc: _extends({}, resolved.desc, {
                        pure: resolved.desc.pure.slice(0, -6)
                    })
                });
            }
            if (resolved.kind === "global") {
                const id = maybeInjectPure(resolved.desc, resolved.name, utils);
                if (id) path.replaceWith(id);
            } else if (resolved.kind === "static") {
                const id = maybeInjectPure(resolved.desc, resolved.name, utils, // @ts-expect-error
                meta.object);
                if (id) path.replaceWith(id);
            } else if (resolved.kind === "instance") {
                const id = maybeInjectPure(resolved.desc, `${resolved.name}InstanceProperty`, utils, // @ts-expect-error
                meta.object);
                if (!id) return;
                const { node } = path;
                if (t.isCallExpression(path.parent, {
                    callee: node
                })) {
                    (0, _utils.callMethod)(path, id);
                } else {
                    path.replaceWith(t.callExpression(id, [
                        node.object
                    ]));
                }
            }
        },
        visitor: method === "usage-global" && {
            // import("foo")
            CallExpression (path) {
                if (path.get("callee").isImport()) {
                    const utils = getUtils(path);
                    if (isWebpack) {
                        // Webpack uses Promise.all to handle dynamic import.
                        maybeInjectGlobal(_builtInDefinitions.PromiseDependenciesWithIterators, utils);
                    } else {
                        maybeInjectGlobal(_builtInDefinitions.PromiseDependencies, utils);
                    }
                }
            },
            // (async function () { }).finally(...)
            Function (path) {
                if (path.node.async) {
                    maybeInjectGlobal(_builtInDefinitions.PromiseDependencies, getUtils(path));
                }
            },
            // for-of, [a, b] = c
            "ForOfStatement|ArrayPattern" (path) {
                maybeInjectGlobal(_builtInDefinitions.CommonIterators, getUtils(path));
            },
            // [...spread]
            SpreadElement (path) {
                if (!path.parentPath.isObjectExpression()) {
                    maybeInjectGlobal(_builtInDefinitions.CommonIterators, getUtils(path));
                }
            },
            // yield*
            YieldExpression (path) {
                if (path.node.delegate) {
                    maybeInjectGlobal(_builtInDefinitions.CommonIterators, getUtils(path));
                }
            },
            // Decorators metadata
            Class (path) {
                var _path$node$decorators;
                const hasDecorators = ((_path$node$decorators = path.node.decorators) == null ? void 0 : _path$node$decorators.length) || path.node.body.body.some((el)=>{
                    var _decorators;
                    return (_decorators = el.decorators) == null ? void 0 : _decorators.length;
                });
                if (hasDecorators) {
                    maybeInjectGlobal(_builtInDefinitions.DecoratorMetadataDependencies, getUtils(path));
                }
            }
        }
    };
});
exports.default = _default;
}}),
}]);

//# sourceMappingURL=node_modules_5cd06a._.js.map